!(function (t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? (module.exports = e())
    : 'function' == typeof define && define.amd
    ? define(e)
    : ((t = 'undefined' != typeof globalThis ? globalThis : t || self).rexuiplugin = e());
})(undefined, function () {
  function t(t, e) {
    var i = Object.keys(t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(t);
      e &&
        (n = n.filter(function (e) {
          return Object.getOwnPropertyDescriptor(t, e).enumerable;
        })),
        i.push.apply(i, n);
    }
    return i;
  }
  function e(e) {
    for (var i = 1; i < arguments.length; i++) {
      var n = null != arguments[i] ? arguments[i] : {};
      i % 2
        ? t(Object(n), !0).forEach(function (t) {
            h(e, t, n[t]);
          })
        : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
        : t(Object(n)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
          });
    }
    return e;
  }
  function i() {
    i = function () {
      return e;
    };
    var t,
      e = {},
      n = Object.prototype,
      s = n.hasOwnProperty,
      r =
        Object.defineProperty ||
        function (t, e, i) {
          t[e] = i.value;
        },
      o = 'function' == typeof Symbol ? Symbol : {},
      a = o.iterator || '@@iterator',
      h = o.asyncIterator || '@@asyncIterator',
      l = o.toStringTag || '@@toStringTag';
    function u(t, e, i) {
      return Object.defineProperty(t, e, { value: i, enumerable: !0, configurable: !0, writable: !0 }), t[e];
    }
    try {
      u({}, '');
    } catch (t) {
      u = function (t, e, i) {
        return (t[e] = i);
      };
    }
    function c(t, e, i, n) {
      var s = e && e.prototype instanceof k ? e : k,
        o = Object.create(s.prototype),
        a = new R(n || []);
      return r(o, '_invoke', { value: O(t, i, a) }), o;
    }
    function d(t, e, i) {
      try {
        return { type: 'normal', arg: t.call(e, i) };
      } catch (t) {
        return { type: 'throw', arg: t };
      }
    }
    e.wrap = c;
    var f = 'suspendedStart',
      p = 'suspendedYield',
      v = 'executing',
      g = 'completed',
      y = {};
    function k() {}
    function m() {}
    function b() {}
    var x = {};
    u(x, a, function () {
      return this;
    });
    var C = Object.getPrototypeOf,
      w = C && C(C(L([])));
    w && w !== n && s.call(w, a) && (x = w);
    var S = (b.prototype = k.prototype = Object.create(x));
    function P(t) {
      ['next', 'throw', 'return'].forEach(function (e) {
        u(t, e, function (t) {
          return this._invoke(e, t);
        });
      });
    }
    function T(t, e) {
      function i(n, r, o, a) {
        var h = d(t[n], t, r);
        if ('throw' !== h.type) {
          var l = h.arg,
            u = l.value;
          return u && 'object' == typeof u && s.call(u, '__await')
            ? e.resolve(u.__await).then(
                function (t) {
                  i('next', t, o, a);
                },
                function (t) {
                  i('throw', t, o, a);
                }
              )
            : e.resolve(u).then(
                function (t) {
                  (l.value = t), o(l);
                },
                function (t) {
                  return i('throw', t, o, a);
                }
              );
        }
        a(h.arg);
      }
      var n;
      r(this, '_invoke', {
        value: function (t, s) {
          function r() {
            return new e(function (e, n) {
              i(t, s, e, n);
            });
          }
          return (n = n ? n.then(r, r) : r());
        },
      });
    }
    function O(e, i, n) {
      var s = f;
      return function (r, o) {
        if (s === v) throw new Error('Generator is already running');
        if (s === g) {
          if ('throw' === r) throw o;
          return { value: t, done: !0 };
        }
        for (n.method = r, n.arg = o; ; ) {
          var a = n.delegate;
          if (a) {
            var h = M(a, n);
            if (h) {
              if (h === y) continue;
              return h;
            }
          }
          if ('next' === n.method) n.sent = n._sent = n.arg;
          else if ('throw' === n.method) {
            if (s === f) throw ((s = g), n.arg);
            n.dispatchException(n.arg);
          } else 'return' === n.method && n.abrupt('return', n.arg);
          s = v;
          var l = d(e, i, n);
          if ('normal' === l.type) {
            if (((s = n.done ? g : p), l.arg === y)) continue;
            return { value: l.arg, done: n.done };
          }
          'throw' === l.type && ((s = g), (n.method = 'throw'), (n.arg = l.arg));
        }
      };
    }
    function M(e, i) {
      var n = i.method,
        s = e.iterator[n];
      if (s === t)
        return (
          (i.delegate = null),
          ('throw' === n && e.iterator.return && ((i.method = 'return'), (i.arg = t), M(e, i), 'throw' === i.method)) ||
            ('return' !== n &&
              ((i.method = 'throw'), (i.arg = new TypeError("The iterator does not provide a '" + n + "' method")))),
          y
        );
      var r = d(s, e.iterator, i.arg);
      if ('throw' === r.type) return (i.method = 'throw'), (i.arg = r.arg), (i.delegate = null), y;
      var o = r.arg;
      return o
        ? o.done
          ? ((i[e.resultName] = o.value),
            (i.next = e.nextLoc),
            'return' !== i.method && ((i.method = 'next'), (i.arg = t)),
            (i.delegate = null),
            y)
          : o
        : ((i.method = 'throw'), (i.arg = new TypeError('iterator result is not an object')), (i.delegate = null), y);
    }
    function E(t) {
      var e = { tryLoc: t[0] };
      1 in t && (e.catchLoc = t[1]), 2 in t && ((e.finallyLoc = t[2]), (e.afterLoc = t[3])), this.tryEntries.push(e);
    }
    function _(t) {
      var e = t.completion || {};
      (e.type = 'normal'), delete e.arg, (t.completion = e);
    }
    function R(t) {
      (this.tryEntries = [{ tryLoc: 'root' }]), t.forEach(E, this), this.reset(!0);
    }
    function L(e) {
      if (e || '' === e) {
        var i = e[a];
        if (i) return i.call(e);
        if ('function' == typeof e.next) return e;
        if (!isNaN(e.length)) {
          var n = -1,
            r = function i() {
              for (; ++n < e.length; ) if (s.call(e, n)) return (i.value = e[n]), (i.done = !1), i;
              return (i.value = t), (i.done = !0), i;
            };
          return (r.next = r);
        }
      }
      throw new TypeError(typeof e + ' is not iterable');
    }
    return (
      (m.prototype = b),
      r(S, 'constructor', { value: b, configurable: !0 }),
      r(b, 'constructor', { value: m, configurable: !0 }),
      (m.displayName = u(b, l, 'GeneratorFunction')),
      (e.isGeneratorFunction = function (t) {
        var e = 'function' == typeof t && t.constructor;
        return !!e && (e === m || 'GeneratorFunction' === (e.displayName || e.name));
      }),
      (e.mark = function (t) {
        return (
          Object.setPrototypeOf ? Object.setPrototypeOf(t, b) : ((t.__proto__ = b), u(t, l, 'GeneratorFunction')),
          (t.prototype = Object.create(S)),
          t
        );
      }),
      (e.awrap = function (t) {
        return { __await: t };
      }),
      P(T.prototype),
      u(T.prototype, h, function () {
        return this;
      }),
      (e.AsyncIterator = T),
      (e.async = function (t, i, n, s, r) {
        void 0 === r && (r = Promise);
        var o = new T(c(t, i, n, s), r);
        return e.isGeneratorFunction(i)
          ? o
          : o.next().then(function (t) {
              return t.done ? t.value : o.next();
            });
      }),
      P(S),
      u(S, l, 'Generator'),
      u(S, a, function () {
        return this;
      }),
      u(S, 'toString', function () {
        return '[object Generator]';
      }),
      (e.keys = function (t) {
        var e = Object(t),
          i = [];
        for (var n in e) i.push(n);
        return (
          i.reverse(),
          function t() {
            for (; i.length; ) {
              var n = i.pop();
              if (n in e) return (t.value = n), (t.done = !1), t;
            }
            return (t.done = !0), t;
          }
        );
      }),
      (e.values = L),
      (R.prototype = {
        constructor: R,
        reset: function (e) {
          if (
            ((this.prev = 0),
            (this.next = 0),
            (this.sent = this._sent = t),
            (this.done = !1),
            (this.delegate = null),
            (this.method = 'next'),
            (this.arg = t),
            this.tryEntries.forEach(_),
            !e)
          )
            for (var i in this) 't' === i.charAt(0) && s.call(this, i) && !isNaN(+i.slice(1)) && (this[i] = t);
        },
        stop: function () {
          this.done = !0;
          var t = this.tryEntries[0].completion;
          if ('throw' === t.type) throw t.arg;
          return this.rval;
        },
        dispatchException: function (e) {
          if (this.done) throw e;
          var i = this;
          function n(n, s) {
            return (a.type = 'throw'), (a.arg = e), (i.next = n), s && ((i.method = 'next'), (i.arg = t)), !!s;
          }
          for (var r = this.tryEntries.length - 1; r >= 0; --r) {
            var o = this.tryEntries[r],
              a = o.completion;
            if ('root' === o.tryLoc) return n('end');
            if (o.tryLoc <= this.prev) {
              var h = s.call(o, 'catchLoc'),
                l = s.call(o, 'finallyLoc');
              if (h && l) {
                if (this.prev < o.catchLoc) return n(o.catchLoc, !0);
                if (this.prev < o.finallyLoc) return n(o.finallyLoc);
              } else if (h) {
                if (this.prev < o.catchLoc) return n(o.catchLoc, !0);
              } else {
                if (!l) throw new Error('try statement without catch or finally');
                if (this.prev < o.finallyLoc) return n(o.finallyLoc);
              }
            }
          }
        },
        abrupt: function (t, e) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var n = this.tryEntries[i];
            if (n.tryLoc <= this.prev && s.call(n, 'finallyLoc') && this.prev < n.finallyLoc) {
              var r = n;
              break;
            }
          }
          r && ('break' === t || 'continue' === t) && r.tryLoc <= e && e <= r.finallyLoc && (r = null);
          var o = r ? r.completion : {};
          return (
            (o.type = t), (o.arg = e), r ? ((this.method = 'next'), (this.next = r.finallyLoc), y) : this.complete(o)
          );
        },
        complete: function (t, e) {
          if ('throw' === t.type) throw t.arg;
          return (
            'break' === t.type || 'continue' === t.type
              ? (this.next = t.arg)
              : 'return' === t.type
              ? ((this.rval = this.arg = t.arg), (this.method = 'return'), (this.next = 'end'))
              : 'normal' === t.type && e && (this.next = e),
            y
          );
        },
        finish: function (t) {
          for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var i = this.tryEntries[e];
            if (i.finallyLoc === t) return this.complete(i.completion, i.afterLoc), _(i), y;
          }
        },
        catch: function (t) {
          for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var i = this.tryEntries[e];
            if (i.tryLoc === t) {
              var n = i.completion;
              if ('throw' === n.type) {
                var s = n.arg;
                _(i);
              }
              return s;
            }
          }
          throw new Error('illegal catch attempt');
        },
        delegateYield: function (e, i, n) {
          return (
            (this.delegate = { iterator: L(e), resultName: i, nextLoc: n }), 'next' === this.method && (this.arg = t), y
          );
        },
      }),
      e
    );
  }
  function n(t) {
    return (
      (n =
        'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
          ? function (t) {
              return typeof t;
            }
          : function (t) {
              return t && 'function' == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype
                ? 'symbol'
                : typeof t;
            }),
      n(t)
    );
  }
  function s(t, e, i, n, s, r, o) {
    try {
      var a = t[r](o),
        h = a.value;
    } catch (t) {
      return void i(t);
    }
    a.done ? e(h) : Promise.resolve(h).then(n, s);
  }
  function r(t, e) {
    if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
  }
  function o(t, e) {
    for (var i = 0; i < e.length; i++) {
      var n = e[i];
      (n.enumerable = n.enumerable || !1),
        (n.configurable = !0),
        'value' in n && (n.writable = !0),
        Object.defineProperty(t, O(n.key), n);
    }
  }
  function a(t, e, i) {
    return e && o(t.prototype, e), i && o(t, i), Object.defineProperty(t, 'prototype', { writable: !1 }), t;
  }
  function h(t, e, i) {
    return (
      (e = O(e)) in t
        ? Object.defineProperty(t, e, { value: i, enumerable: !0, configurable: !0, writable: !0 })
        : (t[e] = i),
      t
    );
  }
  function l(t, e) {
    if ('function' != typeof e && null !== e) throw new TypeError('Super expression must either be null or a function');
    (t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } })),
      Object.defineProperty(t, 'prototype', { writable: !1 }),
      e && c(t, e);
  }
  function u(t) {
    return (
      (u = Object.setPrototypeOf
        ? Object.getPrototypeOf.bind()
        : function (t) {
            return t.__proto__ || Object.getPrototypeOf(t);
          }),
      u(t)
    );
  }
  function c(t, e) {
    return (
      (c = Object.setPrototypeOf
        ? Object.setPrototypeOf.bind()
        : function (t, e) {
            return (t.__proto__ = e), t;
          }),
      c(t, e)
    );
  }
  function d(t) {
    if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return t;
  }
  function f(t, e) {
    if (e && ('object' == typeof e || 'function' == typeof e)) return e;
    if (void 0 !== e) throw new TypeError('Derived constructors may only return object or undefined');
    return d(t);
  }
  function p(t) {
    var e = (function () {
      if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
      if (Reflect.construct.sham) return !1;
      if ('function' == typeof Proxy) return !0;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
      } catch (t) {
        return !1;
      }
    })();
    return function () {
      var i,
        n = u(t);
      if (e) {
        var s = u(this).constructor;
        i = Reflect.construct(n, arguments, s);
      } else i = n.apply(this, arguments);
      return f(this, i);
    };
  }
  function v(t, e) {
    for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = u(t)); );
    return t;
  }
  function g() {
    return (
      (g =
        'undefined' != typeof Reflect && Reflect.get
          ? Reflect.get.bind()
          : function (t, e, i) {
              var n = v(t, e);
              if (n) {
                var s = Object.getOwnPropertyDescriptor(n, e);
                return s.get ? s.get.call(arguments.length < 3 ? t : i) : s.value;
              }
            }),
      g.apply(this, arguments)
    );
  }
  function y(t, e, i, n) {
    return (
      (y =
        'undefined' != typeof Reflect && Reflect.set
          ? Reflect.set
          : function (t, e, i, n) {
              var s,
                r = v(t, e);
              if (r) {
                if ((s = Object.getOwnPropertyDescriptor(r, e)).set) return s.set.call(n, i), !0;
                if (!s.writable) return !1;
              }
              if ((s = Object.getOwnPropertyDescriptor(n, e))) {
                if (!s.writable) return !1;
                (s.value = i), Object.defineProperty(n, e, s);
              } else h(n, e, i);
              return !0;
            }),
      y(t, e, i, n)
    );
  }
  function k(t, e, i, n, s) {
    if (!y(t, e, i, n || t) && s) throw new TypeError('failed to set property');
    return i;
  }
  function m(t, e) {
    return (
      C(t) ||
      (function (t, e) {
        var i = null == t ? null : ('undefined' != typeof Symbol && t[Symbol.iterator]) || t['@@iterator'];
        if (null != i) {
          var n,
            s,
            r,
            o,
            a = [],
            h = !0,
            l = !1;
          try {
            if (((r = (i = i.call(t)).next), 0 === e)) {
              if (Object(i) !== i) return;
              h = !1;
            } else for (; !(h = (n = r.call(i)).done) && (a.push(n.value), a.length !== e); h = !0);
          } catch (t) {
            (l = !0), (s = t);
          } finally {
            try {
              if (!h && null != i.return && ((o = i.return()), Object(o) !== o)) return;
            } finally {
              if (l) throw s;
            }
          }
          return a;
        }
      })(t, e) ||
      S(t, e) ||
      T()
    );
  }
  function b(t) {
    return C(t) || w(t) || S(t) || T();
  }
  function x(t) {
    return (
      (function (t) {
        if (Array.isArray(t)) return P(t);
      })(t) ||
      w(t) ||
      S(t) ||
      (function () {
        throw new TypeError(
          'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
        );
      })()
    );
  }
  function C(t) {
    if (Array.isArray(t)) return t;
  }
  function w(t) {
    if (('undefined' != typeof Symbol && null != t[Symbol.iterator]) || null != t['@@iterator']) return Array.from(t);
  }
  function S(t, e) {
    if (t) {
      if ('string' == typeof t) return P(t, e);
      var i = Object.prototype.toString.call(t).slice(8, -1);
      return (
        'Object' === i && t.constructor && (i = t.constructor.name),
        'Map' === i || 'Set' === i
          ? Array.from(t)
          : 'Arguments' === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)
          ? P(t, e)
          : void 0
      );
    }
  }
  function P(t, e) {
    (null == e || e > t.length) && (e = t.length);
    for (var i = 0, n = new Array(e); i < e; i++) n[i] = t[i];
    return n;
  }
  function T() {
    throw new TypeError(
      'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    );
  }
  function O(t) {
    var e = (function (t, e) {
      if ('object' != typeof t || null === t) return t;
      var i = t[Symbol.toPrimitive];
      if (void 0 !== i) {
        var n = i.call(t, e || 'default');
        if ('object' != typeof n) return n;
        throw new TypeError('@@toPrimitive must return a primitive value.');
      }
      return ('string' === e ? String : Number)(t);
    })(t, 'string');
    return 'symbol' == typeof e ? e : String(e);
  }
  var M = (function () {
      function t(e) {
        r(this, t),
          (this.scene = e),
          (this.displayList = e.sys.displayList),
          (this.updateList = e.sys.updateList),
          e.events.once('destroy', this.destroy, this);
      }
      return (
        a(
          t,
          [
            {
              key: 'destroy',
              value: function () {
                (this.scene = null), (this.displayList = null), (this.updateList = null);
              },
            },
          ],
          [
            {
              key: 'register',
              value: function (e, i) {
                t.prototype[e] = i;
              },
            },
          ]
        ),
        t
      );
    })(),
    E = function (t, e, i) {
      return '__BASE' === i ? ''.concat(t, ',').concat(e) : ''.concat(i, '_').concat(t, ',').concat(e);
    },
    _ = function t(e) {
      var i, s, r;
      if (null == e || 'object' !== n(e)) return e;
      if (
        ((i = Array.isArray(e) ? [] : {}),
        (function (t) {
          if ('object' !== n(t) || t.nodeType || t === t.window) return !1;
          try {
            if (t.constructor && !{}.hasOwnProperty.call(t.constructor.prototype, 'isPrototypeOf')) return !1;
          } catch (t) {
            return !1;
          }
          return !0;
        })(e))
      )
        for (r in e) (s = e[r]), (i[r] = t(s));
      else i = e;
      return i;
    },
    R = Phaser.Utils.Objects.IsPlainObject,
    L = Phaser.Utils.Objects.GetValue,
    B = function (t) {
      return 'string' == typeof t && (t = D[t]), t;
    },
    D = { scale: 0, repeat: 1 },
    I = function (t, e) {
      return 0 === t || t === this.columns.count - 1 || 0 === e || e === this.rows.count - 1;
    },
    j = function () {},
    A = {
      _beginDraw: j,
      _drawImage: j,
      _drawTileSprite: j,
      _endDraw: j,
      setGetFrameNameCallback: function (t) {
        return void 0 === t && (t = E), (this.getFrameNameCallback = t), this;
      },
      setBaseTexture: function (t, e, i, s) {
        Array.isArray(e) && ((s = i), (i = e), (e = void 0)),
          null == e && (e = '__BASE'),
          'number' == typeof i && arguments.length >= 6
            ? ((i = [arguments[2], void 0, arguments[3]]), (s = [arguments[4], void 0, arguments[5]]))
            : ((i = _(i)), (s = _(s))),
          (this.textureKey = t),
          (this.baseFrameName = e),
          (this.columns.data = i),
          (this.columns.count = i ? i.length : 0),
          (this.columns.stretch = 0),
          (this.columns.minWidth = 0),
          (this.columns.scale = 1),
          (this.rows.data = s),
          (this.rows.count = s ? s.length : 0),
          (this.rows.stretch = 0),
          (this.rows.minHeight = 0),
          (this.rows.scale = 1);
        var r = this.scene.sys.textures.get(t);
        if (!r) return this.clear(), this;
        if (!i || !s) return this.clear(), this;
        for (var o = r.get(e), a = o.width, h = 0, l = 0, u = i.length; l < u; l++)
          void 0 === i[l] ? h++ : 'number' == typeof i[l] ? (a -= i[l]) : (a -= i[l].width);
        var c = a / h,
          d = o.height,
          f = 0;
        for (l = 0, u = s.length; l < u; l++)
          void 0 === s[l] ? f++ : 'number' == typeof s[l] ? (d -= s[l]) : (d -= s[l].width);
        for (var p, v, g, y, k, m = d / f, b = 0, x = 0, C = 0, w = s.length; C < w; C++) {
          void 0 === s[C] && (s[C] = m),
            'number' == typeof s[C] && (s[C] = { height: s[C], stretch: C % 2 }),
            (g = (p = s[C]).height),
            (this.rows.stretch += 0 | p.stretch),
            (this.rows.minHeight += p.stretch > 0 ? 0 : g),
            (b = 0);
          l = 0;
          for (var S = i.length; l < S; l++) {
            if (
              (void 0 === i[l] && (i[l] = c),
              'number' == typeof i[l] && (i[l] = { width: i[l], stretch: l % 2 }),
              (y = (v = i[l]).width),
              0 === C && ((this.columns.stretch += 0 | v.stretch), (this.columns.minWidth += v.stretch > 0 ? 0 : y)),
              y >= 1 && g >= 1)
            ) {
              var P = n((k = this.getFrameNameCallback(l, C, e)));
              ('string' !== P && 'number' !== P) || r.add(k, 0, b + o.cutX, x + o.cutY, y, g);
            }
            b += y;
          }
          x += g;
        }
        return this.updateTexture(), this;
      },
      updateTexture: function () {
        if ((this.clear(), void 0 === this.textureKey)) return this;
        var t = this.scene.sys.textures.get(this.textureKey);
        if (!t) return this;
        var e,
          i,
          n,
          s,
          r,
          o,
          a,
          h = this.columns.minWidth * this.maxFixedPartScaleX,
          l = this.rows.minHeight * this.maxFixedPartScaleY,
          u = this.width - h,
          c = this.height - l,
          d = u >= 0 ? this.maxFixedPartScaleX : this.width / h,
          f = c >= 0 ? this.maxFixedPartScaleY : this.height / l;
        if (this.preserveRatio) {
          var p = Math.min(d, f);
          if (d > p) {
            var v = (d - p) * h;
            u >= 0 ? (u += v) : (u = v), (d = p);
          }
          if (f > p) {
            var g = (f - p) * l;
            c >= 0 ? (c += g) : (c = g), (f = p);
          }
        }
        (this.columns.scale = d),
          (this.rows.scale = f),
          (e = u > 0 && this.columns.stretch > 0 ? u / this.columns.stretch : 0),
          (i = c > 0 && this.rows.stretch > 0 ? c / this.rows.stretch : 0);
        var y = 0,
          k = 0;
        this._beginDraw();
        for (var m = 0, b = this.rows.count; m < b; m++) {
          (a = 0 === (r = this.rows.data[m]).stretch ? r.height * f : i * r.stretch), (y = 0);
          for (var x = 0, C = this.columns.count; x < C; x++)
            (o = 0 === (s = this.columns.data[x]).stretch ? s.width * d : e * s.stretch),
              (n = this.getFrameNameCallback(x, m, this.baseFrameName)),
              t.has(n) &&
                o > 0 &&
                a > 0 &&
                (0 === ((0 === r.stretch && 0 === s.stretch) || 0 === this.getStretchMode(x, m) ? 0 : 1)
                  ? this._drawImage(this.textureKey, n, y, k, o, a)
                  : this._drawTileSprite(this.textureKey, n, y, k, o, a)),
              (y += o);
          k += a;
        }
        this._endDraw();
      },
      setStretchMode: function (t) {
        return (
          R(t)
            ? ((this.stretchMode.edge = B(L(t, 'edge', 0))), (this.stretchMode.internal = B(L(t, 'internal', 0))))
            : ((t = B(t)), (this.stretchMode.edge = t), (this.stretchMode.internal = t)),
          this
        );
      },
      getStretchMode: function (t, e) {
        return I.call(this, t, e) ? this.stretchMode.edge : this.stretchMode.internal;
      },
      setPreserveRatio: function (t) {
        return null == t && (t = !0), (this.preserveRatio = t), this;
      },
      setMaxFixedPartScale: function (t, e) {
        return void 0 === e && (e = t), (this.maxFixedPartScaleX = t), (this.maxFixedPartScaleY = e), this;
      },
    },
    z = Phaser.Utils.Objects.IsPlainObject,
    F = Phaser.Utils.Objects.GetValue,
    V = function (t, e) {
      var i = (function (t) {
        l(n, t);
        var i = p(n);
        function n(t, s, o, a, h, l, u, c, d, f) {
          var p;
          if (
            (r(this, n),
            z(s)
              ? ((s = F((f = s), 'x', 0)),
                (o = F(f, 'y', 0)),
                (a = F(f, 'width', 1)),
                (h = F(f, 'height', 1)),
                (l = F(f, 'key', void 0)),
                (u = F(f, 'baseFrame', void 0)),
                (c = F(f, 'columns', void 0)),
                (d = F(f, 'rows', void 0)))
              : z(a)
              ? ((a = F((f = a), 'width', 1)),
                (h = F(f, 'height', 1)),
                (l = F(f, 'key', void 0)),
                (u = F(f, 'baseFrame', void 0)),
                (c = F(f, 'columns', void 0)),
                (d = F(f, 'rows', void 0)))
              : z(l)
              ? ((l = F((f = l), 'key', void 0)),
                (u = F(f, 'baseFrame', void 0)),
                (c = F(f, 'columns', void 0)),
                (d = F(f, 'rows', void 0)))
              : z(u)
              ? ((u = F((f = u), 'baseFrame', void 0)), (c = F(f, 'columns', void 0)), (d = F(f, 'rows', void 0)))
              : Array.isArray(u)
              ? ((f = d), (d = c), (c = u), (u = F(f, 'baseFrame', void 0)))
              : z(c) && ((c = F((f = c), 'columns', void 0)), (d = F(f, 'rows', void 0))),
            void 0 === c)
          ) {
            var v = F(f, 'leftWidth', void 0),
              g = F(f, 'rightWidth', void 0);
            void 0 !== v && void 0 !== g && (c = [v, void 0, g]);
          }
          if (void 0 === d) {
            var y = F(f, 'topHeight', void 0),
              k = F(f, 'bottomHeight', void 0);
            void 0 !== y && void 0 !== k && (d = [y, void 0, k]);
          }
          ((p = i.call(this, t)).type = e),
            p.setPosition(s, o).setSize(a, h).setOrigin(0.5, 0.5),
            (p.columns = {}),
            (p.rows = {}),
            (p.stretchMode = {}),
            (p._tileSprite = void 0),
            (p._image = void 0),
            p.setGetFrameNameCallback(F(f, 'getFrameNameCallback', void 0)),
            p.setStretchMode(F(f, 'stretchMode', 0)),
            p.setPreserveRatio(F(f, 'preserveRatio', !0));
          var m = F(f, 'maxFixedPartScale', 1),
            b = F(f, 'maxFixedPartScaleX', m),
            x = F(f, 'maxFixedPartScaleY', void 0);
          return p.setMaxFixedPartScale(b, x), p.setBaseTexture(l, u, c, d), p;
        }
        return (
          a(n, [
            {
              key: 'minWidth',
              get: function () {
                return this.columns.minWidth;
              },
            },
            {
              key: 'minHeight',
              get: function () {
                return this.rows.minHeight;
              },
            },
            {
              key: 'fixedPartScaleX',
              get: function () {
                return this.columns.scale;
              },
            },
            {
              key: 'fixedPartScaleY',
              get: function () {
                return this.rows.scale;
              },
            },
            {
              key: 'resize',
              value: function (t, e) {
                return (
                  (this.width === t && this.height === e) ||
                    (g(u(n.prototype), 'resize', this)
                      ? g(u(n.prototype), 'resize', this).call(this, t, e)
                      : g(u(n.prototype), 'setSize', this).call(this, t, e),
                    this.updateTexture()),
                  this
                );
              },
            },
          ]),
          n
        );
      })(t);
      return Object.assign(i.prototype, A), i;
    },
    W = Phaser.Game,
    Y = function (t) {
      return t instanceof W;
    },
    X = Phaser.Scene,
    G = function (t) {
      return t instanceof X;
    },
    H = function (t) {
      return null == t || 'object' !== n(t)
        ? null
        : Y(t)
        ? t
        : Y(t.game)
        ? t.game
        : G(t)
        ? t.sys.game
        : G(t.scene)
        ? t.scene.sys.game
        : void 0;
    },
    U = Phaser.GameObjects,
    N = void 0,
    K = function (t, e) {
      if (
        (N ||
          ((N = {}),
          H(t).events.once('destroy', function () {
            for (var t in N) N[t].destroy();
            N = void 0;
          })),
        !N.hasOwnProperty(e))
      ) {
        var i = H(t).scene.systemScene;
        (t = new U[e](i)).setOrigin(0), (N[e] = t);
      }
      return N[e];
    },
    J = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return a(i);
    })(V(Phaser.GameObjects.RenderTexture, 'rexNinePatch')),
    q = {
      _drawImage: function (t, e, i, n, s, r) {
        var o = K(this, 'Image').setTexture(t, e).setDisplaySize(s, r);
        this.draw(o, i, n);
      },
      _drawTileSprite: function (t, e, i, n, s, r) {
        var o = K(this, 'TileSprite').setTexture(t, e).setSize(s, r);
        this.draw(o, i, n);
      },
    };
  Object.assign(J.prototype, q);
  var Z = function (t) {
      return null == t || '' === t || 0 === t.length;
    },
    $ = function (t, e, i, s) {
      if ((void 0 === s && (s = '.'), 'object' === n(t))) {
        if (Z(e)) {
          if (null == i) return;
          'object' === n(i) && (t = i);
        } else {
          'string' == typeof e && (e = e.split(s));
          var r = e.pop(),
            o = (function (t, e, i) {
              var s = t;
              if (Z(e));
              else {
                var r;
                'string' == typeof e && (e = e.split('.'));
                for (var o = 0, a = e.length; o < a; o++) {
                  var h;
                  (null != s[(r = e[o])] && 'object' === n(s[r])) ||
                    ((h = o === a - 1 ? (void 0 === i ? {} : i) : {}), (s[r] = h)),
                    (s = s[r]);
                }
              }
              return s;
            })(t, e);
          o[r] = i;
        }
        return t;
      }
    };
  M.register('ninePatch', function (t, e, i, n, s, r, o, a) {
    var h = new J(this.scene, t, e, i, n, s, r, o, a);
    return this.scene.add.existing(h), h;
  }),
    $(window, 'RexPlugins.UI.NinePatch', J);
  var Q = Phaser.GameObjects.GetCalcMatrix,
    tt = Phaser.Renderer.Canvas.SetTransform,
    et = {
      renderWebGL: function (t, e, i, n) {
        var s = e.getRenderList();
        if (0 !== s.length) {
          i.addToRenderList(e);
          var r = t.pipelines.set(e.pipeline),
            o = e.frame.glTexture,
            a = r.setGameObject(e),
            h = i.roundPixels,
            l = Q(e, i, n),
            u = r.calcMatrix.copyFrom(l.calc),
            c = e._displayOriginX,
            d = e._displayOriginY,
            f = i.alpha * e.alpha;
          t.pipelines.preBatch(e);
          for (var p = 0, v = s.length; p < v; p++) s[p].webglRender(r, u, f, c, d, o, a, h);
          t.pipelines.postBatch(e);
        }
      },
      renderCanvas: function (t, e, i, n) {
        var s = t.currentContext,
          r = e.getRenderList();
        if (0 !== r.length && tt(t, s, e, i, n)) {
          i.addToRenderList(e);
          var o = i.roundPixels,
            a = -e._displayOriginX,
            h = -e._displayOriginY;
          s.translate(a, h);
          for (var l = 0, u = r.length; l < u; l++) r[l].canvasRender(s, a, h, o);
          s.restore();
        }
      },
    },
    it = function (t, e) {
      if (this.width === t && this.height === e) return this;
      (this.width = t), (this.height = e), this.updateDisplayOrigin();
      var i = this.input;
      return i && !i.customHitArea && ((i.hitArea.width = t), (i.hitArea.height = e)), this;
    },
    nt = Phaser.Utils.Array.Remove,
    st = function () {
      return (
        this.poolManager && this.poolManager.freeMultiple(this.children.list),
        (this.children.list.length = 0),
        (this.lastAppendedChildren.length = 0),
        (this.dirty = !0),
        this
      );
    },
    rt = {
      setTexture: function (t, e) {
        return (this.texture = this.scene.sys.textures.get(t)), (this.frame = this.texture.get(e)), this;
      },
      resize: it,
      setSize: it,
      addChild: function (t) {
        var e;
        ((this.lastAppendedChildren.length = 0), Array.isArray(t))
          ? (this.children.add(t), (e = this.lastAppendedChildren).push.apply(e, x(t)))
          : (this.children.add(t), this.lastAppendedChildren.push(t));
        return this;
      },
      removeChild: function (t) {
        return (
          this.poolManager && this.poolManager.free(t),
          nt(this.children.list, t),
          (this.lastAppendedChildren.length = 0),
          (this.dirty = !0),
          this
        );
      },
      removeChildren: st,
      clear: st,
      getLastAppendedChildren: function () {
        return this.lastAppendedChildren;
      },
      getChildren: function () {
        return this.children.list;
      },
    };
  Object.assign(rt, {
    setTint: function (t) {
      return (this.tint = t), (this.tintFill = !1), this;
    },
    setTintFill: function (t) {
      return (this.tint = t), (this.tintFill = !0), this;
    },
    clearTint: function () {
      return this.setTint(16777215), this;
    },
  });
  var ot = (function () {
      function t() {
        r(this, t), (this.items = []);
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              this.clear(), (this.items = void 0);
            },
          },
          {
            key: 'pop',
            value: function () {
              return this.items.length > 0 ? this.items.pop() : null;
            },
          },
          {
            key: 'push',
            value: function (t) {
              return this.items.push(t), this;
            },
          },
          {
            key: 'pushMultiple',
            value: function (t) {
              return this.items.push.apply(this.items, t), (t.length = 0), this;
            },
          },
          {
            key: 'clear',
            value: function () {
              return (this.items.length = 0), this;
            },
          },
        ]),
        t
      );
    })(),
    at = Phaser.Utils.Objects.GetValue,
    ht = {},
    lt = (function () {
      function t(e) {
        r(this, t), (this.pools = at(e, 'pools', ht));
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              this.pools = void 0;
            },
          },
          {
            key: 'free',
            value: function (t) {
              if (!this.pools) return this;
              var e = t.type;
              return (
                this.pools.hasOwnProperty(e) || (this.pools[e] = new ot()), this.pools[e].push(t), t.onFree(), this
              );
            },
          },
          {
            key: 'freeMultiple',
            value: function (t) {
              if (!this.pools) return this;
              for (var e = 0, i = t.length; e < i; e++) this.free(t[e]);
              return this;
            },
          },
          {
            key: 'allocate',
            value: function (t) {
              return this.pools && this.pools.hasOwnProperty(t) ? this.pools[t].pop() : null;
            },
          },
        ]),
        t
      );
    })(),
    ut = !1,
    ct = function (t) {
      ut ||
        (void 0 === t && (t = 60),
        parseInt(Phaser.VERSION.match(/\.(\d+)\./)[1]) < t && console.error('Minimum supported version : 3.'.concat(t)),
        (ut = !0));
    };
  ct();
  var dt = Phaser.GameObjects.GameObject,
    ft = Phaser.Utils.Objects.IsPlainObject,
    pt = Phaser.Utils.Objects.GetValue,
    vt = Phaser.Structs.List,
    gt = Phaser.Utils.Array.StableSort,
    yt = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          ft(n) && ((n = pt((h = n), 'x', 0)), (s = pt(h, 'y', 0)), (o = pt(h, 'texture')), (a = pt(h, 'frame'))),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          ((l = e.call(this, t, 'rexBlitter')).children = new vt()),
          (l.renderList = []),
          (l.displayListDirty = !1),
          (l.lastAppendedChildren = []);
        var u = pt(h, 'reuseBob', !0);
        return (
          (l.poolManager = u ? new lt(h) : void 0),
          l.setTexture(o, a),
          l.setPosition(n, s),
          l.setOrigin(0, 0),
          l.clearTint(),
          l.initPipeline(),
          l.initPostPipeline(),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'preDestroy',
            value: function () {
              this.removeChildren(),
                this.children.destroy(),
                (this.renderList.length = 0),
                this.poolManager && this.poolManager.destroy();
            },
          },
          {
            key: 'getRenderList',
            value: function () {
              if (this.displayListDirty) {
                this.renderList.length = 0;
                for (var t = !1, e = this.children.list, i = 0, n = e.length; i < n; i++) {
                  var s = e[i];
                  kt(s) && (this.renderList.push(s), t || (t = 0 !== s.depth));
                }
                t && gt(this.renderList, mt), (this.displayListDirty = !1);
              }
              return this.renderList;
            },
          },
        ]),
        i
      );
    })(dt),
    kt = function (t) {
      return t.active && t.visible && t.alpha > 0;
    },
    mt = function (t, e) {
      return t._depth - e._depth;
    },
    bt = Phaser.GameObjects.Components;
  Phaser.Class.mixin(yt, [
    bt.Alpha,
    bt.BlendMode,
    bt.ComputedSize,
    bt.Depth,
    bt.GetBounds,
    bt.Mask,
    bt.Origin,
    bt.Pipeline,
    bt.PostPipeline,
    bt.ScrollFactor,
    bt.Transform,
    bt.Visible,
    et,
    rt,
  ]);
  var xt = 'image',
    Ct = function (t, e, i) {
      if (t && 'number' != typeof t) {
        if (t.hasOwnProperty(e)) return t[e];
        if (-1 !== e.indexOf('.')) {
          for (var n = e.split('.'), s = t, r = i, o = 0; o < n.length; o++) {
            if (!s.hasOwnProperty(n[o])) {
              r = i;
              break;
            }
            (r = s[n[o]]), (s = s[n[o]]);
          }
          return r;
        }
        return i;
      }
      return i;
    },
    wt = function (t) {
      if ('object' !== n(t) || null === t) return t;
      if (Array.isArray(t)) t.length = 0;
      else for (var e in t) delete t[e];
      return t;
    },
    St = {
      enableData: function () {
        return void 0 === this.data && (this.data = {}), this;
      },
      setData: function (t, e) {
        if ((this.enableData(), 1 === arguments.length)) {
          var i = t;
          for (t in i) this.data[t] = i[t];
        } else this.data[t] = e;
        return this;
      },
      getData: function (t, e) {
        return this.enableData(), void 0 === t ? this.data : Ct(this.data, t, e);
      },
      incData: function (t, e, i) {
        return void 0 === i && (i = 0), this.enableData(), this.setData(t, this.getData(t, i) + e), this;
      },
      mulData: function (t, e, i) {
        return void 0 === i && (i = 0), this.enableData(), this.setData(t, this.getData(t, i) * e), this;
      },
      clearData: function () {
        return this.data && wt(this.data), this;
      },
    },
    Pt = (function () {
      function t(e, i) {
        r(this, t), (this.type = i), (this.data = void 0), this.setParent(e).reset().setActive();
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              this.parent && this.parent.removeChild(this);
            },
          },
          {
            key: 'setParent',
            value: function (t) {
              return (this.parent = t), this;
            },
          },
          {
            key: 'setDisplayListDirty',
            value: function (t) {
              return t && this.parent && (this.parent.displayListDirty = !0), this;
            },
          },
          {
            key: 'active',
            get: function () {
              return this._active;
            },
            set: function (t) {
              this.setDisplayListDirty(this._active != t), (this._active = t);
            },
          },
          {
            key: 'setActive',
            value: function (t) {
              return void 0 === t && (t = !0), (this.active = t), this;
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              return this;
            },
          },
          {
            key: 'reset',
            value: function () {
              this.clearData();
            },
          },
          {
            key: 'onFree',
            value: function () {
              this.reset().setActive(!1).setParent();
            },
          },
        ]),
        t
      );
    })();
  /**
   * @author       Richard Davey <rich@photonstorm.com>
   * @copyright    2019 Photon Storm Ltd.
   * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
   */ Object.assign(Pt.prototype, St);
  var Tt = Phaser.Math.DegToRad,
    Ot = Phaser.Math.RadToDeg,
    Mt = Phaser.Utils.Objects.GetValue,
    Et = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'visible',
            get: function () {
              return this._visible;
            },
            set: function (t) {
              this.setDisplayListDirty(this._visible != t), (this._visible = t);
            },
          },
          {
            key: 'setVisible',
            value: function (t) {
              return void 0 === t && (t = !0), (this.visible = t), this;
            },
          },
          {
            key: 'alpha',
            get: function () {
              return this._alpha;
            },
            set: function (t) {
              this.setDisplayListDirty(!!this._alpha != !!t), (this._alpha = t);
            },
          },
          {
            key: 'setAlpha',
            value: function (t) {
              return (this.alpha = t), this;
            },
          },
          {
            key: 'setX',
            value: function (t) {
              return (this.x = t), this;
            },
          },
          {
            key: 'setY',
            value: function (t) {
              return (this.y = t), this;
            },
          },
          {
            key: 'setPosition',
            value: function (t, e) {
              return (this.x = t), (this.y = e), this;
            },
          },
          {
            key: 'setRotation',
            value: function (t) {
              return (this.rotation = t), this;
            },
          },
          {
            key: 'angle',
            get: function () {
              return Ot(this.rotation);
            },
            set: function (t) {
              this.rotation = Tt(t);
            },
          },
          {
            key: 'setAngle',
            value: function (t) {
              return (this.angle = t), this;
            },
          },
          {
            key: 'setScaleX',
            value: function (t) {
              return (this.scaleX = t), this;
            },
          },
          {
            key: 'width',
            get: function () {
              return this._width;
            },
            set: function (t) {
              this._width = t;
            },
          },
          {
            key: 'setWidth',
            value: function (t, e) {
              return void 0 === e && (e = !1), (this.width = t), e && (this.scaleY = this.scaleX), this;
            },
          },
          {
            key: 'setScaleY',
            value: function (t) {
              return (this.scaleY = t), this;
            },
          },
          {
            key: 'setScale',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.scaleX = t), (this.scaleY = e), this;
            },
          },
          {
            key: 'height',
            get: function () {
              return this._height;
            },
            set: function (t) {
              this._height = t;
            },
          },
          {
            key: 'setHeight',
            value: function (t, e) {
              return void 0 === e && (e = !1), (this.height = t), e && (this.scaleX = this.scaleY), this;
            },
          },
          {
            key: 'displayWidth',
            get: function () {
              return this._width * this.scaleX;
            },
            set: function (t) {
              this.scaleX = t / this._width;
            },
          },
          {
            key: 'setDisplayWidth',
            value: function (t, e) {
              return void 0 === e && (e = !1), (this.displayWidth = t), e && (this.scaleY = this.scaleX), this;
            },
          },
          {
            key: 'displayHeight',
            get: function () {
              return this._height * this.scaleY;
            },
            set: function (t) {
              this.scaleY = t / this._height;
            },
          },
          {
            key: 'setDisplayHeight',
            value: function (t, e) {
              return void 0 === e && (e = !1), (this.displayHeight = t), e && (this.scaleX = this.scaleY), this;
            },
          },
          {
            key: 'setOriginX',
            value: function (t) {
              return (this.originX = t), (this._displayOriginX = this.width * t), this;
            },
          },
          {
            key: 'setOriginY',
            value: function (t) {
              return (this.originY = t), (this._displayOriginY = this.height * t), this;
            },
          },
          {
            key: 'setOrigin',
            value: function (t, e) {
              return void 0 === e && (e = t), this.setOriginX(t).setOriginY(e), this;
            },
          },
          {
            key: 'depth',
            get: function () {
              return this._depth;
            },
            set: function (t) {
              this.setDisplayListDirty(this._depth != t), (this._depth = t);
            },
          },
          {
            key: 'setDepth',
            value: function (t) {
              return void 0 === t && (t = 0), (this.depth = t), this;
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              if (!t) return this;
              t.hasOwnProperty('x') && this.setX(t.x),
                t.hasOwnProperty('y') && this.setY(t.y),
                t.hasOwnProperty('rotation')
                  ? this.setRotation(t.rotation)
                  : t.hasOwnProperty('angle') && this.setAngle(t.angle),
                t.hasOwnProperty('alpha') && this.setAlpha(t.alpha);
              var e = Mt(t, 'width', void 0),
                i = Mt(t, 'height', void 0),
                n = Mt(t, 'scale', void 0),
                s = Mt(t, 'scaleX', n),
                r = Mt(t, 'scaleY', n);
              void 0 !== e
                ? void 0 === i && void 0 === r
                  ? this.setWidth(e, !0)
                  : this.setWidth(e)
                : void 0 !== s
                ? this.setScaleX(s)
                : t.hasOwnProperty('displayWidth') && this.setDisplayWidth(t.displayWidth),
                void 0 !== i
                  ? void 0 === e && void 0 === s
                    ? this.setHeight(i, !0)
                    : this.setHeight(i)
                  : void 0 !== r
                  ? this.setScaleY(r)
                  : t.hasOwnProperty('displayHeight') && this.setDisplayHeight(t.displayHeight);
              var o = Mt(t, 'origin', void 0);
              return (
                void 0 !== o
                  ? this.setOrigin(o)
                  : (t.hasOwnProperty('originX') && this.setOriginX(t.originX),
                    t.hasOwnProperty('originY') && this.setOriginY(t.originY)),
                t.hasOwnProperty('depth') && this.setDepth(t.depth),
                this
              );
            },
          },
          {
            key: 'reset',
            value: function () {
              return (
                g(u(i.prototype), 'reset', this).call(this),
                this.setVisible().setAlpha(1).setPosition(0, 0).setRotation(0).setScale(1, 1).setOrigin(0).setDepth(0),
                this
              );
            },
          },
          { key: 'webglRender', value: function (t, e, i, n, s, r, o, a) {} },
          { key: 'canvasRender', value: function (t, e, i, n) {} },
        ]),
        i
      );
    })(Pt),
    _t = Phaser.GameObjects.Components.TransformMatrix,
    Rt = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha,
    Lt = new _t(),
    Bt = Phaser.Utils.Objects.IsPlainObject,
    Dt = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, xt)).setFrame(n), s;
      }
      return (
        a(i, [
          {
            key: 'width',
            get: function () {
              return this._width;
            },
            set: function (t) {},
          },
          {
            key: 'height',
            get: function () {
              return this._height;
            },
            set: function (t) {},
          },
          {
            key: 'setFrame',
            value: function (t) {
              return (
                arguments.length > 0 && !Bt(t) && (t = this.parent.texture.get(t)),
                (this.frame = t),
                (this._width = t ? t.width : 0),
                (this._height = t ? t.height : 0),
                this
              );
            },
          },
          {
            key: 'setFlipX',
            value: function (t) {
              return void 0 === t && (t = !0), (this.flipX = t), this;
            },
          },
          {
            key: 'setFlipY',
            value: function (t) {
              return void 0 === t && (t = !0), (this.flipY = t), this;
            },
          },
          {
            key: 'resetFlip',
            value: function () {
              return (this.flipX = !1), (this.flipY = !1), this;
            },
          },
          {
            key: 'tint',
            get: function () {
              return void 0 === this._tint ? this.parent.tint : this._tint;
            },
            set: function (t) {
              this._tint = t;
            },
          },
          {
            key: 'setTint',
            value: function (t) {
              return (this.tint = t), (this.tintFill = !1), this;
            },
          },
          {
            key: 'setTintFill',
            value: function (t) {
              return (this.tint = t), (this.tintFill = !0), this;
            },
          },
          {
            key: 'clearTint',
            value: function () {
              return this.setTint(16777215), this;
            },
          },
          {
            key: 'resetTint',
            value: function () {
              return (this.tint = void 0), (this.tintFill = void 0), this;
            },
          },
          {
            key: 'tintFill',
            get: function () {
              return void 0 === this._tintFill ? this.parent.tintFill : this._tintFill;
            },
            set: function (t) {
              this._tintFill = t;
            },
          },
          {
            key: 'reset',
            value: function () {
              return g(u(i.prototype), 'reset', this).call(this), this.resetFlip().resetTint().setFrame(), this;
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              return t
                ? (t.hasOwnProperty('width') && ((t.displayWidth = t.width), delete t.width),
                  t.hasOwnProperty('height') && ((t.displayHeight = t.height), delete t.height),
                  t.hasOwnProperty('frame') && this.setFrame(t.frame),
                  g(u(i.prototype), 'modifyPorperties', this).call(this, t),
                  t.hasOwnProperty('flipX') && this.setFlipX(t.flipX),
                  t.hasOwnProperty('flipY') && this.setFlipY(t.flipY),
                  t.hasOwnProperty('tint') && this.setTint(t.tint),
                  t.hasOwnProperty('tintFill') && this.setTintFill(t.tintFill),
                  this)
                : this;
            },
          },
        ]),
        i
      );
    })(Et),
    It = {
      webglRender: function (t, e, i, n, s, r, o, a) {
        var h = this._width,
          l = this._height,
          u = h * this.originX,
          c = l * this.originY,
          d = this.x - n,
          f = this.y - s,
          p = 1,
          v = 1;
        this.flipX && ((d += h - 2 * u), (p = -1)),
          this.flipY && ((f += l - 2 * c), (v = -1)),
          Lt.applyITRS(d, f, this.rotation, this.scaleX * p, this.scaleY * v),
          e.multiply(Lt, Lt);
        var g = -u,
          y = -c,
          k = g + h,
          m = y + l,
          b = Lt.setQuad(g, y, k, m, a),
          x = this.frame.u0,
          C = this.frame.v0,
          w = this.frame.u1,
          S = this.frame.v1,
          P = Rt(this.tint, this.alpha * i);
        t.batchQuad(
          this.parent,
          b[0],
          b[1],
          b[2],
          b[3],
          b[4],
          b[5],
          b[6],
          b[7],
          x,
          C,
          w,
          S,
          P,
          P,
          P,
          P,
          this.tintFill,
          r,
          o
        );
      },
      canvasRender: function (t, e, i, n) {
        t.save();
        var s = this._width,
          r = this._height,
          o = s * this.originX,
          a = r * this.originY,
          h = this.x - o,
          l = this.y - a,
          u = 1,
          c = 1;
        this.flipX && ((h += s), (u = -1)),
          this.flipY && ((l += r), (c = -1)),
          n && ((h = Math.round(h)), (l = Math.round(l))),
          t.translate(h, l),
          t.rotate(this.rotation),
          t.scale(this.scaleX * u, this.scaleY * c);
        var d = this.frame;
        t.drawImage(d.source.image, d.cutX, d.cutY, s, r, 0, 0, s, r), t.restore();
      },
    };
  Object.assign(Dt.prototype, It);
  var jt = function (t, e) {
      'string' == typeof e && (e = { frame: e });
      var i = t.poolManager ? t.poolManager.allocate(xt) : null;
      return null === i ? (i = new Dt(t)) : i.setParent(t).setActive(), i.modifyPorperties(e), t.addChild(i), i;
    },
    At = {
      _drawImage: function (t, e, i, n, s, r) {
        jt(this, { frame: e, x: i, y: n, width: s, height: r });
      },
      _drawTileSprite: function (t, e, i, n, s, r) {
        var o = this.texture.get(e),
          a = o.width,
          h = o.height,
          l = Math.floor(s / a),
          u = Math.floor(r / h);
        (i += (s - l * a) / 2), (n += (r - u * h) / 2);
        for (var c = 0; c < l; c++) for (var d = 0; d < u; d++) jt(this, { frame: e, x: i + c * a, y: n + d * h });
      },
    },
    zt = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'setBaseTexture',
            value: function (t, e, n, s) {
              return this.setTexture(t, e), g(u(i.prototype), 'setBaseTexture', this).call(this, t, e, n, s), this;
            },
          },
        ]),
        i
      );
    })(V(yt, 'rexNinePatch2'));
  Object.assign(zt.prototype, At),
    M.register('ninePatch2', function (t, e, i, n, s, r, o, a) {
      var h = new zt(this.scene, t, e, i, n, s, r, o, a);
      return this.scene.add.existing(h), h;
    }),
    $(window, 'RexPlugins.UI.NinePatch2', zt);
  var Ft = Phaser.Utils.Objects.GetValue,
    Vt = (function () {
      function t(e, i, n, s, o) {
        r(this, t),
          void 0 === e && (e = 0),
          void 0 === i && (i = e),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 0),
          (this.cornerRadius = {}),
          (this._width = 0),
          (this._height = 0),
          this.setTo(e, i, n, s, o);
      }
      return (
        a(t, [
          {
            key: 'setTo',
            value: function (t, e, i, n, s) {
              return this.setPosition(t, e), this.setRadius(s), this.setSize(i, n), this;
            },
          },
          {
            key: 'setPosition',
            value: function (t, e) {
              return (this.x = t), (this.y = e), this;
            },
          },
          {
            key: 'setRadius',
            value: function (t) {
              return void 0 === t && (t = 0), (this.radius = t), this;
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              return (this.width = t), (this.height = e), this;
            },
          },
          {
            key: 'minWidth',
            get: function () {
              var t = this.cornerRadius;
              return Math.max(t.tl.x + t.tr.x, t.bl.x + t.br.x);
            },
          },
          {
            key: 'minHeight',
            get: function () {
              var t = this.cornerRadius;
              return Math.max(t.tl.y + t.bl.y, t.tr.y + t.br.y);
            },
          },
          {
            key: 'width',
            get: function () {
              return this._width;
            },
            set: function (t) {
              null == t && (t = 0), (this._width = Math.max(t, this.minWidth));
            },
          },
          {
            key: 'height',
            get: function () {
              return this._height;
            },
            set: function (t) {
              null == t && (t = 0), (this._height = Math.max(t, this.minHeight));
            },
          },
          {
            key: 'radius',
            get: function () {
              var t = this.cornerRadius;
              return Math.max(t.tl.x, t.tl.y, t.tr.x, t.tr.y, t.bl.x, t.bl.y, t.br.x, t.br.y);
            },
            set: function (t) {
              var e, i;
              'number' == typeof t ? ((e = t), (i = t)) : ((e = Ft(t, 'x', 0)), (i = Ft(t, 'y', 0)));
              var n = this.cornerRadius;
              (n.tl = Wt(Ft(t, 'tl', void 0), e, i)),
                (n.tr = Wt(Ft(t, 'tr', void 0), e, i)),
                (n.bl = Wt(Ft(t, 'bl', void 0), e, i)),
                (n.br = Wt(Ft(t, 'br', void 0), e, i));
            },
          },
          {
            key: 'radiusTL',
            get: function () {
              var t = this.cornerRadius.tl;
              return Math.max(t.x, t.y);
            },
            set: function (t) {
              Yt(this.cornerRadius.tl, t);
            },
          },
          {
            key: 'radiusTR',
            get: function () {
              var t = this.cornerRadius.tr;
              return Math.max(t.x, t.y);
            },
            set: function (t) {
              Yt(this.cornerRadius.tr, t);
            },
          },
          {
            key: 'radiusBL',
            get: function () {
              var t = this.cornerRadius.bl;
              return Math.max(t.x, t.y);
            },
            set: function (t) {
              Yt(this.cornerRadius.bl, t);
            },
          },
          {
            key: 'radiusBR',
            get: function () {
              var t = this.cornerRadius.br;
              return Math.max(t.x, t.y);
            },
            set: function (t) {
              Yt(this.cornerRadius.br, t);
            },
          },
        ]),
        t
      );
    })(),
    Wt = function (t, e, i) {
      return void 0 === t ? (t = { x: e, y: i }) : 'number' == typeof t && (t = { x: t, y: t }), Xt(t), t;
    },
    Yt = function (t, e) {
      'number' == typeof e ? ((t.x = e), (t.y = e)) : ((t.x = Ft(e, 'x', 0)), (t.y = Ft(e, 'y', 0))), Xt(t);
    },
    Xt = function (t) {
      (t.convex = t.x >= 0 || t.y >= 0), (t.x = Math.abs(t.x)), (t.y = Math.abs(t.y));
    },
    Gt = function (t, e, i) {
      var n = i.length;
      if (n >= 2) {
        var s = i[n - 2],
          r = i[n - 1];
        if (t === s && e === r) return i;
      }
      return i.push(t, e), i;
    },
    Ht = Phaser.Math.DegToRad,
    Ut = function (t, e, i, n, s, r, o, a, h) {
      o && r > s ? (r -= 360) : !o && r < s && (r += 360);
      var l = Ht(r - s) / a;
      s = Ht(s);
      for (var u = 0; u <= a; u++) {
        var c = s + l * u,
          d = t + i * Math.cos(c),
          f = e + n * Math.sin(c);
        Gt(d, f, h);
      }
      return h;
    },
    Nt = Phaser.Renderer.WebGL.Utils,
    Kt = function (t, e, i, n, s, r) {
      for (
        var o = Nt.getTintAppendFloatAlpha(i.fillColor, i.fillAlpha * n), a = i.pathData, h = i.pathIndexes, l = 0;
        l < h.length;
        l += 3
      ) {
        var u = 2 * h[l],
          c = 2 * h[l + 1],
          d = 2 * h[l + 2],
          f = a[u + 0] - s,
          p = a[u + 1] - r,
          v = a[c + 0] - s,
          g = a[c + 1] - r,
          y = a[d + 0] - s,
          k = a[d + 1] - r,
          m = e.getX(f, p),
          b = e.getY(f, p),
          x = e.getX(v, g),
          C = e.getY(v, g),
          w = e.getX(y, k),
          S = e.getY(y, k);
        t.batchTri(i, m, b, x, C, w, S, 0, 0, 1, 1, o, o, o, 2);
      }
    },
    Jt = Phaser.Renderer.WebGL.Utils,
    qt = function (t, e, i, n, s) {
      var r = t.strokeTint,
        o = Jt.getTintAppendFloatAlpha(e.strokeColor, e.strokeAlpha * i);
      (r.TL = o), (r.TR = o), (r.BL = o), (r.BR = o);
      var a = e.pathData,
        h = a.length - 1,
        l = e.lineWidth,
        u = l / 2,
        c = a[0] - n,
        d = a[1] - s;
      e.closePath || (h -= 2);
      for (var f = 2; f < h; f += 2) {
        var p = a[f] - n,
          v = a[f + 1] - s;
        t.batchLine(c, d, p, v, u, u, l, f - 2, !!e.closePath && f === h - 1), (c = p), (d = v);
      }
    },
    Zt = Phaser.GameObjects.GetCalcMatrix,
    $t = function (t, e, i, n) {
      var s = i || e.fillColor,
        r = n || e.fillAlpha,
        o = (16711680 & s) >>> 16,
        a = (65280 & s) >>> 8,
        h = 255 & s;
      t.fillStyle = 'rgba(' + o + ',' + a + ',' + h + ',' + r + ')';
    },
    Qt = function (t, e, i, n) {
      var s = i || e.strokeColor,
        r = n || e.strokeAlpha,
        o = (16711680 & s) >>> 16,
        a = (65280 & s) >>> 8,
        h = 255 & s;
      (t.strokeStyle = 'rgba(' + o + ',' + a + ',' + h + ',' + r + ')'), (t.lineWidth = e.lineWidth);
    },
    te = Phaser.Renderer.Canvas.SetTransform,
    ee = {
      renderWebGL: function (t, e, i, n) {
        e.dirty && (e.updateData(), (e.dirty = !1)), i.addToRenderList(e);
        var s = t.pipelines.set(e.pipeline),
          r = Zt(e, i, n),
          o = s.calcMatrix.copyFrom(r.calc),
          a = e._displayOriginX,
          h = e._displayOriginY,
          l = i.alpha * e.alpha;
        t.pipelines.preBatch(e),
          e.isFilled && Kt(s, o, e, l, a, h),
          e.isStroked && qt(s, e, l, a, h),
          t.pipelines.postBatch(e);
      },
      renderCanvas: function (t, e, i, n) {
        e.dirty && (e.updateData(), (e.dirty = !1)), i.addToRenderList(e);
        var s = t.currentContext;
        if (te(t, s, e, i, n)) {
          var r = e._displayOriginX,
            o = e._displayOriginY,
            a = e.pathData,
            h = a.length - 1,
            l = a[0] - r,
            u = a[1] - o;
          s.beginPath(), s.moveTo(l, u), e.closePath || (h -= 2);
          for (var c = 2; c < h; c += 2) {
            var d = a[c] - r,
              f = a[c + 1] - o;
            s.lineTo(d, f);
          }
          s.closePath(), e.isFilled && ($t(s, e), s.fill()), e.isStroked && (Qt(s, e), s.stroke()), s.restore();
        }
      },
    },
    ie = Phaser.GameObjects.Shape,
    ne = Phaser.Utils.Objects.IsPlainObject,
    se = Phaser.Utils.Objects.GetValue,
    re = Phaser.Geom.Polygon.Earcut,
    oe = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l, u) {
        var c, d, f, p, v;
        if ((r(this, i), ne(n))) {
          var g = n;
          (n = g.x),
            (s = g.y),
            (o = g.width),
            (a = g.height),
            (h = g.radius),
            (l = g.color),
            (u = g.alpha),
            (d = g.strokeColor),
            (f = g.strokeAlpha),
            (p = g.strokeWidth),
            (v = g.shape);
        }
        void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 1),
          void 0 === a && (a = o),
          void 0 === h && (h = 0),
          void 0 === v && (v = 0);
        var y = new Vt();
        if (((c = e.call(this, t, 'rexRoundRectangleShape', y)).setShapeType(v), 0 === c.shapeType)) {
          var k = se(h, 'radius', h);
          y.setTo(0, 0, o, a, k);
        } else {
          k = { x: o / 2, y: a / 2 };
          y.setTo(0, 0, o, a, k);
        }
        var m = se(h, 'iteration', void 0);
        return (
          c.setIteration(m),
          c.setPosition(n, s),
          c.setFillStyle(l, u),
          void 0 !== d && void 0 === p && (p = 2),
          c.setStrokeStyle(p, d, f),
          c.updateDisplayOrigin(),
          (c.dirty = !0),
          c
        );
      }
      return (
        a(i, [
          {
            key: 'fillColor',
            get: function () {
              return this._fillColor;
            },
            set: function (t) {
              (this._fillColor = t), (this.isFilled = null != t && this._fillAlpha > 0);
            },
          },
          {
            key: 'fillAlpha',
            get: function () {
              return this._fillAlpha;
            },
            set: function (t) {
              (this._fillAlpha = t), (this.isFilled = t > 0 && null != this._fillColor);
            },
          },
          {
            key: 'setFillStyle',
            value: function (t, e) {
              return void 0 === e && (e = 1), (this.fillColor = t), (this.fillAlpha = e), this;
            },
          },
          {
            key: 'strokeColor',
            get: function () {
              return this._strokeColor;
            },
            set: function (t) {
              (this._strokeColor = t), (this.isStroked = null != t && this._strokeAlpha > 0 && this._lineWidth > 0);
            },
          },
          {
            key: 'strokeAlpha',
            get: function () {
              return this._strokeAlpha;
            },
            set: function (t) {
              (this._strokeAlpha = t), (this.isStroked = t > 0 && null != this._strokeColor && this._lineWidth > 0);
            },
          },
          {
            key: 'lineWidth',
            get: function () {
              return this._lineWidth;
            },
            set: function (t) {
              (this._lineWidth = t), (this.isStroked = t > 0 && null != this._strokeColor);
            },
          },
          {
            key: 'setStrokeStyle',
            value: function (t, e, i) {
              return (
                void 0 === i && (i = 1), (this.lineWidth = t), (this.strokeColor = e), (this.strokeAlpha = i), this
              );
            },
          },
          {
            key: 'updateData',
            value: function () {
              var t = this.geom,
                e = this.pathData;
              e.length = 0;
              var i,
                n = t.width,
                s = t.height,
                r = t.cornerRadius,
                o = this.iteration + 1;
              if (((i = r.tl), ae(i)))
                if (i.convex) {
                  var a = i.x,
                    h = i.y;
                  Ut(a, h, i.x, i.y, 180, 270, !1, o, e);
                } else {
                  Ut((a = 0), (h = 0), i.x, i.y, 90, 0, !0, o, e);
                }
              else Gt(0, 0, e);
              if (((i = r.tr), ae(i)))
                if (i.convex) {
                  (a = n - i.x), (h = i.y);
                  Ut(a, h, i.x, i.y, 270, 360, !1, o, e);
                } else {
                  Ut((a = n), (h = 0), i.x, i.y, 180, 90, !0, o, e);
                }
              else Gt(n, 0, e);
              if (((i = r.br), ae(i)))
                if (i.convex) {
                  (a = n - i.x), (h = s - i.y);
                  Ut(a, h, i.x, i.y, 0, 90, !1, o, e);
                } else {
                  Ut((a = n), (h = s), i.x, i.y, 270, 180, !0, o, e);
                }
              else Gt(n, s, e);
              if (((i = r.bl), ae(i)))
                if (i.convex) {
                  (a = i.x), (h = s - i.y);
                  Ut(a, h, i.x, i.y, 90, 180, !1, o, e);
                } else {
                  Ut((a = 0), (h = s), i.x, i.y, 360, 270, !0, o, e);
                }
              else Gt(0, s, e);
              return e.push(e[0], e[1]), (this.pathIndexes = re(e)), this;
            },
          },
          {
            key: 'setShapeType',
            value: function (t) {
              return 'string' == typeof t && (t = he[t]), (this.shapeType = t), this;
            },
          },
          {
            key: 'width',
            get: function () {
              return this.geom.width;
            },
            set: function (t) {
              this.resize(t, this.height);
            },
          },
          {
            key: 'height',
            get: function () {
              return this.geom.height;
            },
            set: function (t) {
              this.resize(this.width, t);
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              if ((void 0 === e && (e = t), this.geom.width === t && this.geom.height === e)) return this;
              this.geom.setSize(t, e),
                1 === this.shapeType && this.setRadius({ x: t / 2, y: e / 2 }),
                this.updateDisplayOrigin(),
                (this.dirty = !0);
              var i = this.input;
              return i && !i.customHitArea && ((i.hitArea.width = t), (i.hitArea.height = e)), this;
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return this.setSize(t, e), this;
            },
          },
          {
            key: 'radius',
            get: function () {
              return this.geom.radius;
            },
            set: function (t) {
              this.geom.setRadius(t), this.updateDisplayOrigin(), (this.dirty = !0);
            },
          },
          {
            key: 'radiusTL',
            get: function () {
              return this.geom.radiusTL;
            },
            set: function (t) {
              (this.geom.radiusTL = t), (this.dirty = !0);
            },
          },
          {
            key: 'radiusTR',
            get: function () {
              return this.geom.radiusTR;
            },
            set: function (t) {
              (this.geom.radiusTR = t), (this.dirty = !0);
            },
          },
          {
            key: 'radiusBL',
            get: function () {
              return this.geom.radiusBL;
            },
            set: function (t) {
              (this.geom.radiusBL = t), (this.dirty = !0);
            },
          },
          {
            key: 'radiusBR',
            get: function () {
              return this.geom.radiusBR;
            },
            set: function (t) {
              (this.geom.radiusBR = t), (this.dirty = !0);
            },
          },
          {
            key: 'setRadius',
            value: function (t) {
              return void 0 === t && (t = 0), (this.radius = t), this;
            },
          },
          {
            key: 'setRadiusTL',
            value: function (t) {
              return void 0 === t && (t = 0), (this.radiusTL = t), this;
            },
          },
          {
            key: 'setRadiusTR',
            value: function (t) {
              return void 0 === t && (t = 0), (this.radiusTR = t), this;
            },
          },
          {
            key: 'setRadiusBL',
            value: function (t) {
              return void 0 === t && (t = 0), (this.radiusBL = t), this;
            },
          },
          {
            key: 'setRadiusBR',
            value: function (t) {
              return void 0 === t && (t = 0), (this.radiusBR = t), this;
            },
          },
          {
            key: 'cornerRadius',
            get: function () {
              return this.geom.cornerRadius;
            },
            set: function (t) {
              this.radius = t;
            },
          },
          {
            key: 'setCornerRadius',
            value: function (t) {
              return this.setRadius(t);
            },
          },
          {
            key: 'iteration',
            get: function () {
              return this._iteration;
            },
            set: function (t) {
              void 0 !== this._iteration
                ? this._iteration !== t && ((this._iteration = t), (this.dirty = !0))
                : (this._iteration = t);
            },
          },
          {
            key: 'setIteration',
            value: function (t) {
              return void 0 === t && (t = 6), (this.iteration = t), this;
            },
          },
        ]),
        i
      );
    })(ie),
    ae = function (t) {
      return t.x > 0 && t.y > 0;
    },
    he = { rectangle: 0, circle: 1 };
  Object.assign(oe.prototype, ee),
    M.register('roundRectangle', function (t, e, i, n, s, r, o) {
      var a = new oe(this.scene, t, e, i, n, s, r, o);
      return this.scene.add.existing(a), a;
    }),
    $(window, 'RexPlugins.UI.RoundRectangle', oe);
  var le = Phaser.Renderer.WebGL.Utils,
    ue = {
      renderWebGL: function (t, e, i, n) {
        if ((e.dirty && (e.updateTexture(), (e.dirty = !1)), 0 !== e.width && 0 !== e.height)) {
          i.addToRenderList(e);
          var s = e.frame,
            r = s.width,
            o = s.height,
            a = le.getTintAppendFloatAlpha,
            h = t.pipelines.set(e.pipeline, e),
            l = h.setTexture2D(s.glTexture, e);
          t.pipelines.preBatch(e),
            h.batchTexture(
              e,
              s.glTexture,
              r,
              o,
              e.x,
              e.y,
              r / e.resolution,
              o / e.resolution,
              e.scaleX,
              e.scaleY,
              e.rotation,
              e.flipX,
              e.flipY,
              e.scrollFactorX,
              e.scrollFactorY,
              e.displayOriginX,
              e.displayOriginY,
              0,
              0,
              r,
              o,
              a(e.tintTopLeft, i.alpha * e._alphaTL),
              a(e.tintTopRight, i.alpha * e._alphaTR),
              a(e.tintBottomLeft, i.alpha * e._alphaBL),
              a(e.tintBottomRight, i.alpha * e._alphaBR),
              e.tintFill,
              0,
              0,
              i,
              n,
              !1,
              l
            ),
            t.pipelines.postBatch(e);
        }
      },
      renderCanvas: function (t, e, i, n) {
        e.dirty && (e.updateTexture(), (e.dirty = !1)),
          0 !== e.width && 0 !== e.height && (i.addToRenderList(e), t.batchSprite(e, e.frame, i, n));
      },
    },
    ce = Phaser.Display.Color,
    de = {
      clear: function () {
        return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height), (this.dirty = !0), this;
      },
      fill: function (t) {
        return (
          (this.context.fillStyle = t),
          this.context.fillRect(0, 0, this.canvas.width, this.canvas.height),
          (this.dirty = !0),
          this
        );
      },
      drawFrame: function (t, e, i, n, s, r, o, a, h, l) {
        var u = this.scene.sys.textures.getFrame(t, e);
        if (!u) return this;
        var c = u.cutWidth,
          d = u.cutHeight;
        void 0 === i && (i = 0),
          void 0 === n && (n = 0),
          void 0 === s && (s = c),
          void 0 === r && (r = d),
          void 0 === o && (o = 0),
          void 0 === a && (a = 0),
          void 0 === h && (h = c),
          void 0 === l && (l = d);
        var f = u.cutX + o,
          p = u.cutY + a;
        return this.context.drawImage(u.source.image, f, p, h, l, i, n, s, r), (this.dirty = !0), this;
      },
      getDataURL: function (t, e) {
        return this.canvas.toDataURL(t, e);
      },
      getPixel: function (t, e, i) {
        void 0 === i && (i = new ce());
        var n = this.context.getImageData(t, e, 1, 1);
        return i.setTo(n.data[0], n.data[1], n.data[2], n.data[3]), i;
      },
      setPixel: function (t, e, i, n, s, r) {
        if ('number' != typeof i) {
          var o = i;
          (i = o.red), (n = o.green), (s = o.blue), (r = o.alpha);
        }
        void 0 === r && (r = 0 !== i || 0 !== n || 0 !== s ? 255 : 0);
        var a = this.context.createImageData(1, 1);
        return (
          (a.data[0] = i),
          (a.data[1] = n),
          (a.data[2] = s),
          (a.data[3] = r),
          this.context.putImageData(a, t, e),
          (this.dirty = !0),
          this
        );
      },
    },
    fe = function (t, e, i, n, s, r, o) {
      var a,
        h = t.sys.textures,
        l = t.renderer;
      void 0 === n && (n = 0), void 0 === s && (s = 0), void 0 === r && (r = e.width), void 0 === o && (o = e.height);
      var u = (a = h.exists(i) ? h.get(i) : h.createCanvas(i, r, o)).getSourceImage();
      u.width !== r && (u.width = r), u.height !== o && (u.height = o);
      var c = u.getContext('2d', { willReadFrequently: !0 });
      c.clearRect(0, 0, r, o),
        c.drawImage(e, n, s, r, o),
        l.gl && a && l.canvasToTexture(u, a.source[0].glTexture, !0, 0);
    },
    pe = {
      updateTexture: function (t, e) {
        t && (e ? t.call(e, this.canvas, this.context) : t(this.canvas, this.context)),
          (this.canvas.width === this.frame.width && this.canvas.height === this.frame.height) ||
            this.frame.setSize(this.canvas.width, this.canvas.height),
          this.renderer &&
            this.renderer.gl &&
            ((this.frame.source.glTexture = this.renderer.canvasToTexture(
              this.canvas,
              this.frame.source.glTexture,
              !0
            )),
            (this.frame.glTexture = this.frame.source.glTexture)),
          (this.dirty = !1);
        var i = this.input;
        return i && !i.customHitArea && ((i.hitArea.width = this.width), (i.hitArea.height = this.height)), this;
      },
      generateTexture: function (t, e, i, n, s) {
        var r = this.canvas;
        return (
          void 0 === n ? (n = r.width) : (n *= this.resolution),
          void 0 === s ? (s = r.height) : (s *= this.resolution),
          fe(this.scene, r, t, e, i, n, s),
          this
        );
      },
      loadTexture: function (t, e) {
        var i = this.scene.sys.textures.getFrame(t, e);
        return i
          ? (this.width !== i.cutWidth || this.height !== i.cutHeight
              ? this.setSize(i.cutWidth, i.cutHeight)
              : this.clear(),
            this.drawFrame(t, e),
            (this.dirty = !0),
            this)
          : this;
      },
    };
  ct();
  var ve = Phaser.Display.Canvas.CanvasPool,
    ge = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a) {
        var h;
        return (
          r(this, i),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 1),
          void 0 === a && (a = 1),
          ((h = e.call(this, t, 'rexCanvas')).renderer = t.sys.game.renderer),
          (h.resolution = 1),
          (h._width = o),
          (h._height = a),
          (o = Math.max(Math.ceil(o * h.resolution), 1)),
          (a = Math.max(Math.ceil(a * h.resolution), 1)),
          (h.canvas = ve.create(d(h), o, a)),
          (h.context = h.canvas.getContext('2d', { willReadFrequently: !0 })),
          (h.dirty = !1),
          h.setPosition(n, s),
          h.setOrigin(0.5, 0.5),
          h.initPipeline(),
          h.initPostPipeline(!0),
          (h._crop = h.resetCropObject()),
          (h.texture = t.sys.textures.addCanvas(null, h.canvas, !0)),
          (h.frame = h.texture.get()),
          (h.frame.source.resolution = h.resolution),
          h.renderer &&
            h.renderer.gl &&
            (h.renderer.deleteTexture(h.frame.source.glTexture), (h.frame.source.glTexture = null)),
          (h.dirty = !0),
          h
        );
      }
      return (
        a(i, [
          {
            key: 'preDestroy',
            value: function () {
              ve.remove(this.canvas), this.texture.destroy(), (this.canvas = null), (this.context = null);
            },
          },
          {
            key: 'width',
            get: function () {
              return this._width;
            },
            set: function (t) {
              this.setSize(t, this._height);
            },
          },
          {
            key: 'height',
            get: function () {
              return this._height;
            },
            set: function (t) {
              this.setSize(this._width, t);
            },
          },
          {
            key: 'setCanvasSize',
            value: function (t, e) {
              return (
                (this._width === t && this._height === e) ||
                  ((this._width = t),
                  (this._height = e),
                  this.updateDisplayOrigin(),
                  (t = Math.max(Math.ceil(t * this.resolution), 1)),
                  (e = Math.max(Math.ceil(e * this.resolution), 1)),
                  (this.canvas.width = t),
                  (this.canvas.height = e),
                  this.frame.setSize(t, e),
                  (this.dirty = !0)),
                this
              );
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              return this.setCanvasSize(t, e), this;
            },
          },
          {
            key: 'displayWidth',
            get: function () {
              return this.scaleX * this._width;
            },
            set: function (t) {
              this.scaleX = t / this._width;
            },
          },
          {
            key: 'displayHeight',
            get: function () {
              return this.scaleY * this._height;
            },
            set: function (t) {
              this.scaleY = t / this._height;
            },
          },
          {
            key: 'setDisplaySize',
            value: function (t, e) {
              return (this.displayWidth = t), (this.displayHeight = e), this;
            },
          },
          {
            key: 'getCanvas',
            value: function (t) {
              return t || (this.dirty = !0), this.canvas;
            },
          },
          {
            key: 'getContext',
            value: function (t) {
              return t || (this.dirty = !0), this.context;
            },
          },
          {
            key: 'needRedraw',
            value: function () {
              return (this.dirty = !0), this;
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return this.setSize(t, e), this;
            },
          },
        ]),
        i
      );
    })(Phaser.GameObjects.GameObject),
    ye = Phaser.GameObjects.Components;
  Phaser.Class.mixin(ge, [
    ye.Alpha,
    ye.BlendMode,
    ye.Crop,
    ye.Depth,
    ye.Flip,
    ye.GetBounds,
    ye.Mask,
    ye.Origin,
    ye.Pipeline,
    ye.PostPipeline,
    ye.ScrollFactor,
    ye.Tint,
    ye.Transform,
    ye.Visible,
    ue,
    de,
    pe,
  ]);
  var ke = Phaser.Utils.String.Pad,
    me = function (t, e, i) {
      if (null == t) return t;
      switch (n(t)) {
        case 'string':
        default:
          return t;
        case 'number':
          return '#'.concat(ke(Math.floor(t).toString(16), 6, '0', 1));
        case 'function':
          return t(e, i);
        case 'object':
          return t.hasOwnProperty('r')
            ? t.hasOwnProperty('a')
              ? 'rgba('.concat(t.r, ',').concat(t.g, ',').concat(t.b, ',').concat(t.a, ')')
              : 'rgb('.concat(t.r, ',').concat(t.g, ',').concat(t.b, ')')
            : t.hasOwnProperty('h')
            ? t.hasOwnProperty('a')
              ? 'hsla('.concat(t.h, ',').concat(t.s, ',').concat(t.l, ',').concat(t.a, ')')
              : 'hsl('.concat(t.h, ',').concat(t.s, ',').concat(t.l, ')')
            : t;
      }
    },
    be = Phaser.Math.DegToRad,
    xe = function (t, e, i, n, s, r, o) {
      var a,
        h,
        l,
        u,
        c,
        d = new Vt(e, i, n, s, r),
        f = d.minWidth,
        p = d.minHeight,
        v = n >= f ? 1 : n / f,
        g = s >= p ? 1 : s / p,
        y = d.cornerRadius;
      t.save(),
        t.beginPath(),
        t.translate(e, i),
        (a = y.tl),
        we(a)
          ? ((h = a.x * v),
            (l = a.y * g),
            Ce(a) ? Se(t, h, l, h, l, 180, 270, !1, o) : Se(t, 0, 0, h, l, 90, 0, !0, o),
            (u = 0),
            (c = l))
          : (t.lineTo(0, 0), (u = 0), (c = 0)),
        (a = y.tr),
        we(a)
          ? ((h = a.x * v),
            (l = a.y * g),
            Ce(a) ? Se(t, n - h, l, h, l, 270, 360, !1, o) : Se(t, n, 0, h, l, 180, 90, !0, o))
          : t.lineTo(n, 0),
        (a = y.br),
        we(a)
          ? ((h = a.x * v),
            (l = a.y * g),
            Ce(a) ? Se(t, n - h, s - l, h, l, 0, 90, !1, o) : Se(t, n, s, h, l, 270, 180, !0, o))
          : t.lineTo(n, s),
        (a = y.bl),
        we(a)
          ? ((h = a.x * v),
            (l = a.y * g),
            Ce(a) ? Se(t, h, s - l, h, l, 90, 180, !1, o) : Se(t, 0, s, h, l, 360, 270, !0, o))
          : t.lineTo(0, s),
        t.lineTo(u, c),
        t.closePath(),
        t.restore();
    },
    Ce = function (t) {
      return !t.hasOwnProperty('convex') || t.convex;
    },
    we = function (t) {
      return t.x > 0 && t.y > 0;
    },
    Se = function (t, e, i, n, s, r, o, a, h) {
      if ((a && o > r ? (o -= 360) : !a && o < r && (o += 360), (r = be(r)), (o = be(o)), null == h))
        t.ellipse(e, i, n, s, 0, r, o, a);
      else
        for (var l, u, c, d = (o - r) / (h += 1), f = 0; f <= h; f++)
          (c = r + d * f), (l = e + n * Math.cos(c)), (u = i + s * Math.sin(c)), t.lineTo(l, u);
    },
    Pe = function (t, e, i, n, s, r, o, a) {
      if (null != e || null != i) {
        var h = t.canvas.width,
          l = t.canvas.height;
        null == i && (n = 0);
        var u = n / 2;
        (h = Math.max(1, h - n)),
          (l = Math.max(1, l - n)),
          (function (t, e, i, n, s, r, o, a, h, l, u, c, d) {
            if ((xe(e, i, n, s, r, o, d), null != a)) {
              var f;
              null != u &&
                ((f = c ? e.createLinearGradient(0, 0, s, 0) : e.createLinearGradient(0, 0, 0, r)).addColorStop(0, a),
                f.addColorStop(1, u),
                (a = f)),
                (e.fillStyle = a),
                e.fill();
            }
            null != h && l > 0 && ((e.strokeStyle = h), (e.lineWidth = l), e.stroke());
          })(t.canvas, t.context, u, u, h, l, s, e, i, n, r, o, a);
      }
    },
    Te = function () {
      Pe(
        this,
        this.fillStyle,
        this.strokeStyle,
        this.lineWidth,
        this.radius,
        this.fillColor2,
        this.isHorizontalGradient,
        this.iteration
      );
    },
    Oe = Phaser.Utils.Objects.GetValue,
    Me = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l, u, c, d, f) {
        var p;
        r(this, i),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 1),
          void 0 === a && (a = o),
          void 0 === h && (h = 0),
          ((p = e.call(this, t, n, s, o, a)).type = 'rexRoundRectangleCanvas');
        var v = Oe(h, 'radius', h),
          g = Oe(h, 'iteration', void 0);
        return p.setRadius(v), p.setIteration(g), p.setFillStyle(l, d, f), p.setStrokeStyle(u, c), p;
      }
      return (
        a(i, [
          {
            key: 'radius',
            get: function () {
              return this._radius;
            },
            set: function (t) {
              (this.dirty |= this._radius != t), (this._radius = t);
            },
          },
          {
            key: 'setRadius',
            value: function (t) {
              return (this.radius = t), this;
            },
          },
          {
            key: 'iteration',
            get: function () {
              return this._iteration;
            },
            set: function (t) {
              (this.dirty |= this._iteration != t), (this._iteration = t);
            },
          },
          {
            key: 'setIteration',
            value: function (t) {
              return (this.iteration = t), this;
            },
          },
          {
            key: 'fillStyle',
            get: function () {
              return this._fillStyle;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), (this.dirty |= this._fillStyle != t), (this._fillStyle = t);
            },
          },
          {
            key: 'fillColor2',
            get: function () {
              return this._fillColor2;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), (this.dirty |= this._fillColor2 != t), (this._fillColor2 = t);
            },
          },
          {
            key: 'isHorizontalGradient',
            get: function () {
              return this._isHorizontalGradient;
            },
            set: function (t) {
              (this.dirty |= this._isHorizontalGradient != t), (this._isHorizontalGradient = t);
            },
          },
          {
            key: 'setFillStyle',
            value: function (t, e, i) {
              return (
                void 0 === i && (i = !0),
                (this.fillStyle = t),
                (this.fillColor2 = e),
                (this.isHorizontalGradient = i),
                this
              );
            },
          },
          {
            key: 'strokeStyle',
            get: function () {
              return this._strokeStyle;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), (this.dirty |= this._strokeStyle != t), (this._strokeStyle = t);
            },
          },
          {
            key: 'lineWidth',
            get: function () {
              return this._lineWidth;
            },
            set: function (t) {
              (this.dirty |= this._lineWidth != t), (this._lineWidth = t);
            },
          },
          {
            key: 'setStrokeStyle',
            value: function (t, e) {
              return (this.strokeStyle = t), (this.lineWidth = e), this;
            },
          },
          {
            key: 'updateTexture',
            value: function () {
              return this.clear(), Te.call(this), g(u(i.prototype), 'updateTexture', this).call(this), this;
            },
          },
        ]),
        i
      );
    })(ge);
  M.register('roundRectangleCanvas', function (t, e, i, n, s, r, o, a, h, l) {
    var u = new Me(this.scene, t, e, i, n, s, r, o, a, h, l);
    return this.scene.add.existing(u), u;
  }),
    $(window, 'RexPlugins.UI.RoundRectangleCanvas', Me);
  /**
   * @author       Richard Davey <rich@photonstorm.com>
   * @copyright    2019 Photon Storm Ltd.
   * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
   */
  var Ee = Phaser.Renderer.WebGL.Utils,
    _e = {
      renderWebGL: function (t, e, i, n) {
        if (0 !== e.width && 0 !== e.height) {
          i.addToRenderList(e);
          var s = e.frame,
            r = s.width,
            o = s.height,
            a = Ee.getTintAppendFloatAlpha,
            h = t.pipelines.set(e.pipeline, e),
            l = h.setTexture2D(s.glTexture, e);
          t.pipelines.preBatch(e),
            h.batchTexture(
              e,
              s.glTexture,
              r,
              o,
              e.x,
              e.y,
              r / e.style.resolution,
              o / e.style.resolution,
              e.scaleX,
              e.scaleY,
              e.rotation,
              e.flipX,
              e.flipY,
              e.scrollFactorX,
              e.scrollFactorY,
              e.displayOriginX,
              e.displayOriginY,
              0,
              0,
              r,
              o,
              a(e.tintTopLeft, i.alpha * e._alphaTL),
              a(e.tintTopRight, i.alpha * e._alphaTR),
              a(e.tintBottomLeft, i.alpha * e._alphaBL),
              a(e.tintBottomRight, i.alpha * e._alphaBR),
              e.tintFill,
              0,
              0,
              i,
              n,
              !1,
              l
            ),
            t.pipelines.postBatch(e);
        }
      },
      renderCanvas: function (t, e, i, n) {
        0 !== e.width && 0 !== e.height && (i.addToRenderList(e), t.batchSprite(e, e.frame, i, n));
      },
    },
    Re = Phaser.Display.Canvas.CanvasPool;
  ct();
  var Le = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'setStyle',
            value: function (t) {
              return this.style.setStyle(t);
            },
          },
          {
            key: 'setFont',
            value: function (t) {
              return this.style.setFont(t);
            },
          },
          {
            key: 'setFontFamily',
            value: function (t) {
              return this.style.setFontFamily(t);
            },
          },
          {
            key: 'setFontSize',
            value: function (t) {
              return this.style.setFontSize(t);
            },
          },
          {
            key: 'setFontStyle',
            value: function (t) {
              return this.style.setFontStyle(t);
            },
          },
          {
            key: 'setTestString',
            value: function (t) {
              return this.style.setTestString(t);
            },
          },
          {
            key: 'setFixedSize',
            value: function (t, e) {
              return this.style.setFixedSize(t, e);
            },
          },
          {
            key: 'setBackgroundColor',
            value: function (t, e, i) {
              return this.style.setBackgroundColor(t, e, i);
            },
          },
          {
            key: 'setBackgroundStrokeColor',
            value: function (t, e) {
              return this.style.setBackgroundStrokeColor(t, e);
            },
          },
          {
            key: 'setBackgroundCornerRadius',
            value: function (t, e) {
              return this.style.setBackgroundCornerRadius(t, e);
            },
          },
          {
            key: 'setFill',
            value: function (t) {
              return this.style.setFill(t);
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return this.style.setColor(t);
            },
          },
          {
            key: 'setStroke',
            value: function (t, e) {
              return this.style.setStroke(t, e);
            },
          },
          {
            key: 'setShadow',
            value: function (t, e, i, n, s, r) {
              return this.style.setShadow(t, e, i, n, s, r);
            },
          },
          {
            key: 'setShadowOffset',
            value: function (t, e) {
              return this.style.setShadowOffset(t, e);
            },
          },
          {
            key: 'setShadowColor',
            value: function (t) {
              return this.style.setShadowColor(t);
            },
          },
          {
            key: 'setShadowBlur',
            value: function (t) {
              return this.style.setShadowBlur(t);
            },
          },
          {
            key: 'setShadowStroke',
            value: function (t) {
              return this.style.setShadowStroke(t);
            },
          },
          {
            key: 'setShadowFill',
            value: function (t) {
              return this.style.setShadowFill(t);
            },
          },
          {
            key: 'setWrapMode',
            value: function (t) {
              return this.style.setWrapMode(t);
            },
          },
          {
            key: 'setWrapWidth',
            value: function (t) {
              return this.style.setWrapWidth(t);
            },
          },
          {
            key: 'setWordWrapWidth',
            value: function (t) {
              return this.style.setWrapWidth(t);
            },
          },
          {
            key: 'setAlign',
            value: function (t) {
              return this.style.setHAlign(t);
            },
          },
          {
            key: 'setHAlign',
            value: function (t) {
              return this.style.setHAlign(t);
            },
          },
          {
            key: 'setVAlign',
            value: function (t) {
              return this.style.setVAlign(t);
            },
          },
          {
            key: 'setLineSpacing',
            value: function (t) {
              return (this.lineSpacing = t), this.updateText(!1), this;
            },
          },
          {
            key: 'setXOffset',
            value: function (t) {
              return this.style.setXOffset(t);
            },
          },
          {
            key: 'setMaxLines',
            value: function (t) {
              return this.style.setMaxLines(t);
            },
          },
          {
            key: 'setResolution',
            value: function (t) {
              return this.style.setResolution(t);
            },
          },
          {
            key: 'getTextMetrics',
            value: function () {
              return this.style.getTextMetrics();
            },
          },
          {
            key: 'setTextMetrics',
            value: function (t, e) {
              return this.style.setTextMetrics(t, e);
            },
          },
          {
            key: 'measureTextMargins',
            value: function (t, e) {
              return (function (t, e, i) {
                void 0 === i && (i = {});
                var n = Re.create(this),
                  s = n.getContext('2d', { willReadFrequently: !0 });
                t.syncFont(n, s);
                var r = s.measureText(e),
                  o = Math.ceil(r.width * t.baselineX),
                  a = o,
                  h = 2 * a;
                if (
                  ((a = (a * t.baselineY) | 0),
                  (n.width = o),
                  (n.height = h),
                  (s.fillStyle = '#f00'),
                  s.fillRect(0, 0, o, h),
                  (s.font = t._font),
                  (s.textBaseline = 'alphabetic'),
                  (s.fillStyle = '#000'),
                  s.fillText(t.testString, 0, a),
                  (i.left = 0),
                  0 === o || 0 === h || !s.getImageData(0, 0, o, h))
                )
                  return Re.remove(n), i;
                for (var l = s.getImageData(0, 0, o, h).data, u = !1, c = 0; c < o; c++) {
                  for (var d = 0; d < h; d++)
                    if (255 !== l[4 * (d * o + c)]) {
                      (i.left = c), (u = !0);
                      break;
                    }
                  if (u) break;
                }
                return Re.remove(n), i;
              })(this.style, t, e);
            },
          },
        ]),
        i
      );
    })(Phaser.GameObjects.GameObject),
    Be = Phaser.GameObjects.Components;
  Phaser.Class.mixin(Le, [
    Be.Alpha,
    Be.BlendMode,
    Be.ComputedSize,
    Be.Crop,
    Be.Depth,
    Be.Flip,
    Be.GetBounds,
    Be.Mask,
    Be.Origin,
    Be.Pipeline,
    Be.PostPipeline,
    Be.ScrollFactor,
    Be.Tint,
    Be.Transform,
    Be.Visible,
    _e,
  ]);
  var De = {
      backgroundColor: ['backgroundColor', null, me],
      backgroundColor2: ['backgroundColor2', null, me],
      backgroundHorizontalGradient: ['backgroundHorizontalGradient', !0, null],
      backgroundStrokeColor: ['backgroundStrokeColor', null, me],
      backgroundStrokeLineWidth: ['backgroundStrokeLineWidth', 2, null],
      backgroundCornerRadius: ['backgroundCornerRadius', 0, null],
      backgroundCornerIteration: ['backgroundCornerIteration', null, null],
      fontFamily: ['fontFamily', 'Courier', null],
      fontSize: ['fontSize', '16px', null],
      fontStyle: ['fontStyle', '', null],
      color: ['color', '#fff', me],
      stroke: ['stroke', '#fff', me],
      strokeThickness: ['strokeThickness', 0, null],
      shadowOffsetX: ['shadow.offsetX', 0, null],
      shadowOffsetY: ['shadow.offsetY', 0, null],
      shadowColor: ['shadow.color', '#000', me],
      shadowBlur: ['shadow.blur', 0, null],
      shadowStroke: ['shadow.stroke', !1, null],
      shadowFill: ['shadow.fill', !1, null],
      underlineColor: ['underline.color', '#000', me],
      underlineThickness: ['underline.thickness', 0, null],
      underlineOffset: ['underline.offset', 0, null],
      strikethroughColor: ['strikethrough.color', '#000', me],
      strikethroughThickness: ['strikethrough.thickness', 0, null],
      strikethroughOffset: ['strikethrough.offset', 0, null],
      halign: ['halign', 'left', null],
      valign: ['valign', 'top', null],
      maxLines: ['maxLines', 0, null],
      fixedWidth: ['fixedWidth', 0, null],
      fixedHeight: ['fixedHeight', 0, null],
      resolution: ['resolution', 0, null],
      lineSpacing: ['lineSpacing', 0, null],
      xOffset: ['xOffset', 0, null],
      rtl: ['rtl', !1, null],
      testString: ['testString', '|MÃ‰qgy', null],
      baselineX: ['baselineX', 1.2, null],
      baselineY: ['baselineY', 1.4, null],
      wrapMode: ['wrap.mode', 0, null],
      wrapWidth: ['wrap.width', 0, null],
      wrapCallback: ['wrap.callback', null],
      wrapCallbackScope: ['wrap.callbackScope', null],
    },
    Ie = Phaser.Display.Canvas.CanvasPool,
    je = function (t) {
      var e = Ie.create(this),
        i = e.getContext('2d', { willReadFrequently: !0 });
      t.syncFont(e, i);
      var n = i.measureText(t.testString);
      if ('actualBoundingBoxAscent' in n) {
        var s = n.actualBoundingBoxAscent,
          r = n.actualBoundingBoxDescent,
          o = { ascent: s, descent: r, fontSize: s + r };
        return Ie.remove(e), o;
      }
      var a = Math.ceil(n.width * t.baselineX),
        h = a,
        l = 2 * h;
      (h = (h * t.baselineY) | 0),
        (e.width = a),
        (e.height = l),
        (i.fillStyle = '#f00'),
        i.fillRect(0, 0, a, l),
        (i.font = t._font),
        (i.textBaseline = 'alphabetic'),
        (i.fillStyle = '#000'),
        i.fillText(t.testString, 0, h);
      o = { ascent: 0, descent: 0, fontSize: 0 };
      if (!i.getImageData(0, 0, a, l))
        return (o.ascent = h), (o.descent = h + 6), (o.fontSize = o.ascent + o.descent), Ie.remove(e), o;
      var u,
        c,
        d = i.getImageData(0, 0, a, l).data,
        f = d.length,
        p = 4 * a,
        v = 0,
        g = !1;
      for (u = 0; u < h; u++) {
        for (c = 0; c < p; c += 4)
          if (255 !== d[v + c]) {
            g = !0;
            break;
          }
        if (g) break;
        v += p;
      }
      for (o.ascent = h - u, v = f - p, g = !1, u = l; u > h; u--) {
        for (c = 0; c < p; c += 4)
          if (255 !== d[v + c]) {
            g = !0;
            break;
          }
        if (g) break;
        v -= p;
      }
      return (o.descent = u - h), (o.fontSize = o.ascent + o.descent), Ie.remove(e), o;
    },
    Ae = 0,
    ze = 1,
    Fe = 2,
    Ve = 0,
    We = 1,
    Ye = 2,
    Xe = /(?:\r\n|\r|\n)/,
    Ge = Phaser.Utils.Objects.GetAdvancedValue,
    He = Phaser.Utils.Objects.GetValue,
    Ue = (function () {
      function t(e, i, n) {
        r(this, t),
          (this.parent = e),
          void 0 === n && (n = De),
          (this.propertyMap = n),
          this.backgroundColor,
          this.backgroundColor2,
          this.backgroundHorizontalGradient,
          this.backgroundStrokeColor,
          this.backgroundStrokeLineWidth,
          this.backgroundCornerRadius,
          this.backgroundCornerIteration,
          this.fontFamily,
          this.fontSize,
          this.fontStyle,
          this.color,
          this.stroke,
          this.strokeThickness,
          this.shadowOffsetX,
          this.shadowOffsetY,
          this.shadowColor,
          this.shadowBlur,
          this.shadowStroke,
          this.shadowFill,
          this.underlineColor,
          this.underlineThickness,
          this.underlineOffset,
          this.strikethroughColor,
          this.strikethroughThickness,
          this.strikethroughOffset,
          this.halign,
          this.valign,
          this.maxLines,
          this.fixedWidth,
          this.fixedHeight,
          this.resolution,
          this.xOffset,
          this.rtl,
          this.testString,
          this.baselineX,
          this.baselineY,
          this.wrapMode,
          this.wrapWidth,
          this.wrapCallback,
          this.wrapCallbackScope,
          this._font,
          this.setStyle(i, !1, !0);
      }
      return (
        a(t, [
          {
            key: 'isWrapFitMode',
            get: function () {
              return this.fixedWidth > 0 && this.wrapMode !== Ve && 0 === this.wrapWidth;
            },
          },
          {
            key: 'setStyle',
            value: function (t, e, i) {
              if ((void 0 === e && (e = !0), void 0 === i && (i = !1), t && t.hasOwnProperty('wordWrap'))) {
                var n = t.wordWrap;
                n.hasOwnProperty('width') && (t.wrap = { mode: 'word', width: n.width });
              }
              if (t && t.hasOwnProperty('wrap')) {
                var s = t.wrap;
                if (s.hasOwnProperty('mode')) {
                  var r = s.mode;
                  'string' == typeof r && (s.mode = Ne[r]);
                } else s.hasOwnProperty('width') && (s.mode = 1);
              }
              t && t.rtl && i && !t.hasOwnProperty('halign') && (t.halign = 'right'),
                t &&
                  t.hasOwnProperty('fontSize') &&
                  'number' == typeof t.fontSize &&
                  (t.fontSize = t.fontSize.toString() + 'px');
              var o = this.propertyMap;
              for (var a in o) {
                var h = o[a],
                  l = h[0],
                  u = i ? h[1] : this[a],
                  c = h[2];
                if ('wrapCallback' === a || 'wrapCallbackScope' === a) this[a] = He(t, l, u);
                else {
                  var d = Ge(t, l, u);
                  c && (d = c(d)), (this[a] = d);
                }
              }
              var f = He(t, 'font', null);
              this._font = null === f ? this.fontStyle + ' ' + this.fontSize + ' ' + this.fontFamily : f;
              var p = He(t, 'fill', null);
              null !== p && (this.color = me(p));
              var v = He(t, 'metrics', !1);
              return (
                v
                  ? (this.metrics = {
                      ascent: He(v, 'ascent', 0),
                      descent: He(v, 'descent', 0),
                      fontSize: He(v, 'fontSize', 0),
                    })
                  : (!e && this.metrics) || (this.metrics = je(this)),
                e ? this.parent.updateText() : this.parent
              );
            },
          },
          {
            key: 'syncFont',
            value: function (t, e) {
              e.font = this._font;
            },
          },
          {
            key: 'syncStyle',
            value: function (t, e) {
              (e.textBaseline = 'alphabetic'),
                (e.fillStyle = this.color),
                (e.strokeStyle = this.stroke),
                (e.lineWidth = this.strokeThickness),
                (e.lineCap = 'round'),
                (e.lineJoin = 'round');
            },
          },
          {
            key: 'syncShadow',
            value: function (t, e) {
              e
                ? ((t.shadowOffsetX = this.shadowOffsetX),
                  (t.shadowOffsetY = this.shadowOffsetY),
                  (t.shadowColor = this.shadowColor),
                  (t.shadowBlur = this.shadowBlur))
                : ((t.shadowOffsetX = 0), (t.shadowOffsetY = 0), (t.shadowColor = 0), (t.shadowBlur = 0));
            },
          },
          {
            key: 'update',
            value: function (t) {
              return (
                t &&
                  ((this._font = ''
                    .concat(this.fontStyle, ' ')
                    .concat(this.fontSize, ' ')
                    .concat(this.fontFamily)
                    .trim()),
                  (this.metrics = je(this))),
                this.parent.updateText(t)
              );
            },
          },
          {
            key: 'buildFont',
            value: function () {
              var t = ''.concat(this.fontStyle, ' ').concat(this.fontSize, ' ').concat(this.fontFamily).trim();
              return t !== this._font && (this._font = t), this;
            },
          },
          {
            key: 'setFont',
            value: function (t) {
              return (
                'string' == typeof t
                  ? ((this.fontFamily = t), (this.fontSize = ''), (this.fontStyle = ''))
                  : ((this.fontFamily = He(t, 'fontFamily', 'Courier')),
                    (this.fontSize = He(t, 'fontSize', '16px')),
                    (this.fontStyle = He(t, 'fontStyle', ''))),
                this.update(!0)
              );
            },
          },
          {
            key: 'setFontFamily',
            value: function (t) {
              return (this.fontFamily = t), this.update(!0);
            },
          },
          {
            key: 'setFontStyle',
            value: function (t) {
              return (this.fontStyle = t), this.update(!0);
            },
          },
          {
            key: 'setFontSize',
            value: function (t) {
              return 'number' == typeof t && (t = t.toString() + 'px'), (this.fontSize = t), this.update(!0);
            },
          },
          {
            key: 'setTestString',
            value: function (t) {
              return (this.testString = t), this.update(!0);
            },
          },
          {
            key: 'setFixedSize',
            value: function (t, e) {
              return (
                (this.fixedWidth = t),
                (this.fixedHeight = e),
                t && (this.parent.width = t),
                e && (this.parent.height = e),
                this.update(this.isWrapFitMode)
              );
            },
          },
          {
            key: 'setResolution',
            value: function (t) {
              return (this.resolution = t), this.update(!1);
            },
          },
          {
            key: 'setXOffset',
            value: function (t) {
              return (this.xOffset = t), this.update(!1);
            },
          },
          {
            key: 'setBackgroundColor',
            value: function (t, e, i) {
              return (
                void 0 === i && (i = !0),
                (this.backgroundColor = me(t, this.parent.canvas, this.parent.context)),
                (this.backgroundColor2 = me(e, this.parent.canvas, this.parent.context)),
                (this.backgroundHorizontalGradient = i),
                this.update(!1)
              );
            },
          },
          {
            key: 'setBackgroundStrokeColor',
            value: function (t, e) {
              return (
                (this.backgroundStrokeColor = me(t, this.parent.canvas, this.parent.context)),
                (this.backgroundStrokeLineWidth = e),
                this.update(!1)
              );
            },
          },
          {
            key: 'setBackgroundCornerRadius',
            value: function (t, e) {
              return (this.backgroundCornerRadius = t), (this.backgroundCornerIteration = e), this.update(!1);
            },
          },
          {
            key: 'setFill',
            value: function (t) {
              return (this.color = me(t, this.parent.canvas, this.parent.context)), this.update(!1);
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return (this.color = me(t, this.parent.canvas, this.parent.context)), this.update(!1);
            },
          },
          {
            key: 'setStroke',
            value: function (t, e) {
              return (
                void 0 === t
                  ? (this.strokeThickness = 0)
                  : (void 0 === e && (e = this.strokeThickness),
                    (this.stroke = me(t, this.parent.canvas, this.parent.context)),
                    (this.strokeThickness = e)),
                this.update(!0)
              );
            },
          },
          {
            key: 'setShadow',
            value: function (t, e, i, n, s, r) {
              return (
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = '#000'),
                void 0 === n && (n = 0),
                void 0 === s && (s = !1),
                void 0 === r && (r = !0),
                (this.shadowOffsetX = t),
                (this.shadowOffsetY = e),
                (this.shadowColor = me(i, this.parent.canvas, this.parent.context)),
                (this.shadowBlur = n),
                (this.shadowStroke = s),
                (this.shadowFill = r),
                this.update(!1)
              );
            },
          },
          {
            key: 'setShadowOffset',
            value: function (t, e) {
              return (
                void 0 === t && (t = 0),
                void 0 === e && (e = t),
                (this.shadowOffsetX = t),
                (this.shadowOffsetY = e),
                this.update(!1)
              );
            },
          },
          {
            key: 'setShadowColor',
            value: function (t) {
              return (
                void 0 === t && (t = '#000'),
                (this.shadowColor = me(t, this.parent.canvas, this.parent.context)),
                this.update(!1)
              );
            },
          },
          {
            key: 'setShadowBlur',
            value: function (t) {
              return void 0 === t && (t = 0), (this.shadowBlur = t), this.update(!1);
            },
          },
          {
            key: 'setShadowStroke',
            value: function (t) {
              return (this.shadowStroke = t), this.update(!1);
            },
          },
          {
            key: 'setShadowFill',
            value: function (t) {
              return (this.shadowFill = t), this.update(!1);
            },
          },
          {
            key: 'setUnderline',
            value: function (t, e, i) {
              return (
                void 0 === t && (t = '#000'),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                (this.underlineColor = me(t, this.parent.canvas, this.parent.context)),
                (this.underlineThickness = e),
                (this.underlineOffset = i),
                this.update(!1)
              );
            },
          },
          {
            key: 'setUnderlineColor',
            value: function (t) {
              return (
                void 0 === t && (t = '#000'),
                (this.underlineColor = me(t, this.parent.canvas, this.parent.context)),
                this.update(!1)
              );
            },
          },
          {
            key: 'setUnderlineThickness',
            value: function (t) {
              return void 0 === t && (t = 0), (this.underlineThickness = t), this.update(!1);
            },
          },
          {
            key: 'setUnderlineOffset',
            value: function (t) {
              return void 0 === t && (t = 0), (this.underlineOffset = t), this.update(!1);
            },
          },
          {
            key: 'setStrikethrough',
            value: function (t, e, i) {
              return (
                void 0 === t && (t = '#000'),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                (this.strikethroughColor = me(t, this.parent.canvas, this.parent.context)),
                (this.strikethroughThickness = e),
                (this.strikethroughOffset = i),
                this.update(!1)
              );
            },
          },
          {
            key: 'setStrikethroughColor',
            value: function (t) {
              return (
                void 0 === t && (t = '#000'),
                (this.strikethroughColor = me(t, this.parent.canvas, this.parent.context)),
                this.update(!1)
              );
            },
          },
          {
            key: 'setStrikethroughThickness',
            value: function (t) {
              return void 0 === t && (t = 0), (this.strikethroughThickness = t), this.update(!1);
            },
          },
          {
            key: 'setStrikethroughOffset',
            value: function (t) {
              return void 0 === t && (t = 0), (this.strikethroughOffset = t), this.update(!1);
            },
          },
          {
            key: 'setWrapMode',
            value: function (t) {
              return 'string' == typeof t && (t = Ne[t.toLowerCase()] || 0), (this.wrapMode = t), this.update(!0);
            },
          },
          {
            key: 'setWrapWidth',
            value: function (t) {
              return (this.wrapWidth = t), this.update(!1);
            },
          },
          {
            key: 'setAlign',
            value: function (t, e) {
              return (
                void 0 === t && (t = 'left'),
                void 0 === e && (e = 'top'),
                (this.halign = t),
                (this.valign = e),
                this.update(!1)
              );
            },
          },
          {
            key: 'setHAlign',
            value: function (t) {
              return void 0 === t && (t = 'left'), (this.halign = t), this.update(!1);
            },
          },
          {
            key: 'setVAlign',
            value: function (t) {
              return void 0 === t && (t = 'top'), (this.valign = t), this.update(!1);
            },
          },
          {
            key: 'setMaxLines',
            value: function (t) {
              return void 0 === t && (t = 0), (this.maxLines = t), this.update(!1);
            },
          },
          {
            key: 'getTextMetrics',
            value: function () {
              var t = this.metrics;
              return { ascent: t.ascent, descent: t.descent, fontSize: t.fontSize };
            },
          },
          {
            key: 'setTextMetrics',
            value: function (t, e) {
              return (
                (this.metrics.ascent = t.ascent),
                (this.metrics.descent = t.descent),
                (this.metrics.fontSize = t.fontSize),
                e &&
                  ('string' == typeof e
                    ? ((this.fontFamily = e), (this.fontSize = ''), (this.fontStyle = ''))
                    : ((this.fontFamily = He(e, 'fontFamily', this.fontFamily)),
                      (this.fontSize = He(e, 'fontSize', this.fontSize)),
                      (this.fontStyle = He(e, 'fontStyle', this.fontStyle)))),
                this.parent.updateText(!0)
              );
            },
          },
          {
            key: 'lineHeight',
            get: function () {
              return this.metrics.fontSize + this.strokeThickness + this.parent.lineSpacing;
            },
          },
          {
            key: 'toJSON',
            value: function () {
              var t = {},
                e = this.propertyMap;
              for (var i in e) t[i] = this[i];
              return (t.metrics = this.getTextMetrics()), t;
            },
          },
          {
            key: 'destroy',
            value: function () {
              this.parent = void 0;
            },
          },
        ]),
        t
      );
    })(),
    Ne = { none: Ve, word: We, char: Ye, character: Ye },
    Ke = {
      draw: function (t, e, i, n) {
        var s = this.penManager;
        this.hitAreaManager.clear();
        var r = this.context;
        r.save();
        var o = this.defaultStyle;
        this.clear(),
          Pe(
            this,
            o.backgroundColor,
            o.backgroundStrokeColor,
            o.backgroundStrokeLineWidth,
            o.backgroundCornerRadius,
            o.backgroundColor2,
            o.backgroundHorizontalGradient,
            o.backgroundCornerIteration
          ),
          (t += this.startXOffset),
          (e += this.startYOffset);
        var a,
          h,
          l,
          u,
          c,
          d,
          f = o.halign,
          p = o.valign,
          v = o.lineHeight,
          g = s.lines,
          y = g.length,
          k = o.maxLines;
        k > 0 && y > k
          ? ((h = k), (l = 'center' === p ? Math.floor((y - h) / 2) : 'bottom' === p ? y - h : 0))
          : ((h = y), (l = 0)),
          (u = l + h);
        var m = this.rtl,
          b = m ? this.parent.width : void 0;
        (d = 'center' === p ? Math.max((n - h * v) / 2, 0) : 'bottom' === p ? Math.max(n - h * v - 2, 0) : 0), (d += e);
        for (var x = l; x < u; x++)
          if (0 !== (a = s.getLineWidth(x))) {
            for (var C = g[x], w = C.length, S = f, P = 0; P < w; P++) {
              var T = C[P].prop.align;
              if (void 0 !== T) {
                S = T;
                break;
              }
            }
            (c = 'center' === S ? (i - a) / 2 : 'right' === S ? (m ? 0 : i - a) : m ? i - a : 0), (c += t);
            for (P = 0; P < w; P++) this.drawPen(C[P], c, d, b);
          }
        r.restore();
      },
      drawPen: function (t, e, i, n) {
        (e += t.x), (i += t.y + (t.prop.y || 0)), void 0 !== n && (e = n - e);
        var s = this.canvas,
          r = this.context;
        r.save();
        var o = this.parser.propToContextStyle(this.defaultStyle, t.prop);
        if ((o.buildFont(), o.syncFont(s, r), o.syncStyle(s, r), o.underlineThickness > 0 && t.width > 0)) {
          var a = i + o.underlineOffset - o.underlineThickness / 2;
          this.drawLine(e, a, t.width, o.underlineThickness, o.underlineColor, o);
        }
        if (
          (t.isTextPen && this.drawText(e, i, t.text, o),
          t.isImagePen && this.drawImage(e, i, t.prop.img, t.prop.color, o),
          o.strikethroughThickness > 0 && t.width > 0)
        ) {
          a = i + o.strikethroughOffset - o.strikethroughThickness / 2;
          this.drawLine(e, a, t.width, o.strikethroughThickness, o.strikethroughColor, o);
        }
        if ((r.restore(), t.hasAreaMarker && t.width > 0)) {
          var h,
            l = t.prop.area;
          if (l) h = { key: l };
          else {
            var u = t.prop.url;
            h = { key: 'url:'.concat(u), url: u };
          }
          this.hitAreaManager.add(e, i - this.startYOffset, t.width, this.defaultStyle.lineHeight, h);
        }
      },
      clear: function () {
        var t = this.canvas;
        this.context.clearRect(0, 0, t.width, t.height);
      },
      drawLine: function (t, e, i, n, s, r) {
        this.autoRound && ((t = Math.round(t)), (e = Math.round(e)));
        var o = this.context;
        r.syncShadow(o, r.shadowStroke);
        var a = o.lineCap;
        (o.lineCap = 'butt'),
          (o.strokeStyle = s),
          (o.lineWidth = n),
          o.beginPath(),
          o.moveTo(t, e),
          o.lineTo(t + i, e),
          o.stroke(),
          (o.lineCap = a);
      },
      drawText: function (t, e, i, n) {
        this.autoRound && ((t = Math.round(t)), (e = Math.round(e)));
        var s = this.context;
        n.stroke &&
          'none' !== n.stroke &&
          n.strokeThickness > 0 &&
          (n.syncShadow(s, n.shadowStroke), s.strokeText(i, t, e)),
          n.color && 'none' !== n.color && (n.syncShadow(s, n.shadowFill), s.fillText(i, t, e));
      },
      drawImage: function (t, e, i, n, s) {
        (e -= this.startYOffset), this.parent.imageManager.draw(i, this.context, t, e, n, this.autoRound);
      },
    },
    Je = Phaser.Utils.Objects.GetValue,
    qe = Ae,
    Ze = ze,
    $e = (function () {
      function t(e) {
        r(this, t), (this.prop = {}), this.resetFromJSON(e);
      }
      return (
        a(t, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              (this.text = Je(t, 'text', '')),
                (this.x = Je(t, 'x', 0)),
                (this.y = Je(t, 'y', 0)),
                (this.width = Je(t, 'width', 0));
              var e = Je(t, 'prop', null);
              null === e && (e = {}),
                (this.prop = e),
                (this.newLineMode = Je(t, 'newLineMode', 0)),
                (this.startIndex = Je(t, 'startIndex', 0));
            },
          },
          {
            key: 'plainText',
            get: function () {
              var t = this.text;
              return this.newLineMode === Ze && (t += '\n'), t;
            },
          },
          {
            key: 'wrapText',
            get: function () {
              var t = this.text;
              return this.newLineMode !== qe && (t += '\n'), t;
            },
          },
          {
            key: 'rawTextLength',
            get: function () {
              var t = this.text.length;
              return this.newLineMode === Ze && (t += 1), t;
            },
          },
          {
            key: 'endIndex',
            get: function () {
              return this.startIndex + this.rawTextLength;
            },
          },
          {
            key: 'lastX',
            get: function () {
              return this.x + this.width;
            },
          },
          {
            key: 'isTextPen',
            get: function () {
              return '' !== this.text;
            },
          },
          {
            key: 'isImagePen',
            get: function () {
              return !!this.prop.img;
            },
          },
          {
            key: 'hasAreaMarker',
            get: function () {
              return !!this.prop.area || !!this.prop.url;
            },
          },
        ]),
        t
      );
    })(),
    Qe = function (t, e) {
      var i = Array.isArray(t);
      if ((void 0 === e ? (e = i ? [] : {}) : wt(e), i)) {
        e.length = t.length;
        for (var n = 0, s = t.length; n < s; n++) e[n] = t[n];
      } else for (var r in t) e[r] = t[r];
      return e;
    },
    ti = Phaser.Utils.Objects.GetFastValue,
    ei = Ae,
    ii = Fe,
    ni = (function () {
      function t(e) {
        r(this, t),
          (this.pens = []),
          (this.lines = []),
          (this.maxLinesWidth = void 0),
          (this.pensPool = e.pensPool),
          (this.linesPool = e.linesPool),
          (this.tagToText = ti(e, 'tagToText', j)),
          (this.tagToTextScope = ti(e, 'tagToTextScope', void 0));
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              this.clear(), (this.tagToText = void 0), (this.tagToTextScope = void 0);
            },
          },
          {
            key: 'clear',
            value: function () {
              for (var t = 0, e = this.lines.length; t < e; t++) this.lines[t].length = 0;
              this.pensPool.pushMultiple(this.pens),
                this.linesPool.pushMultiple(this.lines),
                (this.maxLinesWidth = void 0);
            },
          },
          {
            key: 'addTextPen',
            value: function (t, e, i, n, s, r) {
              var o = this.pensPool.pop();
              return (
                null == o && (o = new $e()),
                (si.text = t),
                (si.x = e),
                (si.y = i),
                (si.width = n),
                (si.prop = s),
                (si.newLineMode = r),
                o.resetFromJSON(si),
                this.addPen(o),
                this
              );
            },
          },
          {
            key: 'addImagePen',
            value: function (t, e, i, n) {
              return this.addTextPen('', t, e, i, n, ei), this;
            },
          },
          {
            key: 'addNewLinePen',
            value: function () {
              var t = this.lastPen,
                e = t ? t.lastX : 0,
                i = t ? t.y : 0,
                n = t ? Qe(t.prop) : null;
              return this.addTextPen('', e, i, 0, n, ii), this;
            },
          },
          {
            key: 'addPen',
            value: function (t) {
              var e = this.lastPen;
              (t.startIndex = null == e ? 0 : e.endIndex), this.pens.push(t);
              var i = this.lastLine;
              null == i && ((i = this.linesPool.pop() || []), this.lines.push(i)),
                i.push(t),
                t.newLineMode !== ei && ((i = this.linesPool.pop() || []), this.lines.push(i)),
                (this.maxLinesWidth = void 0);
            },
          },
          {
            key: 'clone',
            value: function (e) {
              null == e && (e = new t()), e.clear();
              for (var i = 0, n = this.lines.length; i < n; i++)
                for (var s = this.lines[i], r = 0, o = s.length; r < o; r++) {
                  var a = s[r];
                  e.addPen(a.text, a.x, a.y, a.width, Qe(a.prop), a.newLineMode);
                }
              return e;
            },
          },
          {
            key: 'lastPen',
            get: function () {
              return this.pens[this.pens.length - 1];
            },
          },
          {
            key: 'lastLine',
            get: function () {
              return this.lines[this.lines.length - 1];
            },
          },
          {
            key: 'getLineStartIndex',
            value: function (t) {
              if (t >= this.lines.length) return this.getLineEndIndex(t);
              var e = this.lines[t];
              return e && e[0] ? e[0].startIndex : 0;
            },
          },
          {
            key: 'getLineEndIndex',
            value: function (t) {
              t >= this.lines.length && (t = this.lines.length - 1);
              var e,
                i,
                n = !1;
              for (e = t; e >= 0 && !(n = null != (i = this.lines[e]) && i.length > 0); e--);
              return n ? i[i.length - 1].endIndex : 0;
            },
          },
          {
            key: 'getLineWidth',
            value: function (t) {
              var e = this.lines[t];
              if (!e) return 0;
              var i = e[e.length - 1];
              return null == i ? 0 : i.lastX;
            },
          },
          {
            key: 'getMaxLineWidth',
            value: function () {
              if (void 0 !== this.maxLinesWidth) return this.maxLinesWidth;
              for (var t, e = 0, i = 0, n = this.lines.length; i < n; i++) (t = this.getLineWidth(i)) > e && (e = t);
              return (this.maxLinesWidth = e), e;
            },
          },
          {
            key: 'getLineWidths',
            value: function () {
              for (var t = [], e = 0, i = this.lines.length; e < i; e++) t.push(this.getLineWidth(e));
              return t;
            },
          },
          {
            key: 'linesCount',
            get: function () {
              return this.lines.length;
            },
          },
          {
            key: 'plainText',
            get: function () {
              for (var t = '', e = this.pens, i = 0, n = e.length; i < n; i++) t += e[i].plainText;
              return t;
            },
          },
          {
            key: 'rawTextLength',
            get: function () {
              for (var t = 0, e = this.pens, i = 0, n = this.pens.length; i < n; i++) t += e[i].rawTextLength;
              return t;
            },
          },
          {
            key: 'getSliceTagText',
            value: function (t, e, i) {
              var n = this.lastPen;
              if (null == n) return '';
              var s = n.endIndex;
              (void 0 !== t && 0 !== t) || (t = -1), (void 0 !== e && e !== s) || (e = s + 1), void 0 === i && (i = !1);
              for (
                var r, o, a, h, l, u, c = '', d = 0, f = this.pens.length;
                d < f &&
                ((h = (r = this.pens[d]).endIndex) <= t ||
                  ((r = this.pens[d]),
                  (o = i ? r.wrapText : r.plainText),
                  (l = r.prop),
                  ((a = r.startIndex) >= t && h <= e) || (o = o.substring(t - a, e - a)),
                  this.tagToTextScope
                    ? (c += this.tagToText.call(this.tagToTextScope, o, l, u))
                    : (c += this.tagToText(o, l, u)),
                  (u = l),
                  !(h >= e)));
                d++
              );
              return c;
            },
          },
          {
            key: 'length',
            get: function () {
              return this.lines.length;
            },
            set: function (t) {
              this.clear();
            },
          },
        ]),
        t
      );
    })(),
    si = {},
    ri = Phaser.Geom.Rectangle,
    oi = new ot(),
    ai = (function () {
      function t() {
        r(this, t), (this.hitAreas = []);
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              this.clear();
            },
          },
          {
            key: 'clear',
            value: function () {
              for (var t = 0, e = this.hitAreas.length; t < e; t++) wt(this.hitAreas[t].data);
              return oi.pushMultiple(this.hitAreas), this;
            },
          },
          {
            key: 'add',
            value: function (t, e, i, n, s) {
              var r = oi.pop();
              return (
                null === r ? (r = new ri(t, e, i, n)) : r.setTo(t, e, i, n), (r.data = s), this.hitAreas.push(r), this
              );
            },
          },
          {
            key: 'getFirst',
            value: function (t, e) {
              for (var i = 0, n = this.hitAreas.length; i < n; i++) {
                var s = this.hitAreas[i];
                if (s.contains(t, e)) return s;
              }
              return null;
            },
          },
          {
            key: 'getByKey',
            value: function (t) {
              for (var e = 0, i = this.hitAreas.length; e < i; e++) {
                var n = this.hitAreas[e];
                if (n.data.key === t) return n;
              }
              return null;
            },
          },
          {
            key: 'drawBounds',
            value: function (t, e, i) {
              void 0 === e && (e = 16777215),
                i && t.save().scaleCanvas(i.scaleX, i.scaleY).rotateCanvas(i.rotation).translateCanvas(i.x, i.y);
              for (var n = 0, s = this.hitAreas.length; n < s; n++) {
                var r = this.hitAreas[n];
                t.lineStyle(1, e).strokeRect(r.x, r.y, r.width, r.height);
              }
              return i && t.restore(), this;
            },
          },
        ]),
        t
      );
    })(),
    hi = function (t, e, i, n) {
      var s = this.hitAreaManager.getFirst(e, i);
      if (null !== s) {
        var r = s.data.key;
        ci.call(this, 'areadown', r, t, e, i, n), (s.data.isDown = !0);
      }
    },
    li = function (t, e, i, n) {
      var s = this.hitAreaManager.getFirst(e, i);
      if (null !== s) {
        var r = s.data,
          o = r.key;
        if ((ci.call(this, 'areaup', o, t, e, i, n), r.isDown)) {
          ci.call(this, 'areaclick', o, t, e, i, n);
          var a = r.url;
          a && window.open(a, '_blank');
        }
        r.isDown = !1;
      }
    },
    ui = function (t, e, i, n) {
      if (null !== e) {
        var s = this.hitAreaManager.getFirst(e, i),
          r = s ? s.data.key : null;
        if (this.lastHitAreaKey !== r) {
          if (null !== this.lastHitAreaKey) {
            ci.call(this, 'areaout', this.lastHitAreaKey, t, e, i, n);
            var o = this.hitAreaManager.getByKey(this.lastHitAreaKey);
            this.urlTagCursorStyle && o.data.url && (this.scene.input.manager.canvas.style.cursor = ''),
              (o.isDown = !1);
          }
          null !== r &&
            (ci.call(this, 'areaover', r, t, e, i, n),
            this.urlTagCursorStyle &&
              s.data.url &&
              (this.scene.input.manager.canvas.style.cursor = this.urlTagCursorStyle)),
            (this.lastHitAreaKey = r);
        }
      } else
        null !== this.lastHitAreaKey &&
          (ci.call(this, 'areaout', this.lastHitAreaKey, t, e, i, n),
          (this.hitAreaManager.getByKey(this.lastHitAreaKey).isDown = !1),
          (this.lastHitAreaKey = null));
    },
    ci = function (t, e, i, n, s, r) {
      this.parent.emit(''.concat(t, '-').concat(e), i, n, s, r), this.parent.emit(t, e, i, n, s, r);
    },
    di = Ae,
    fi = ze,
    pi = Fe,
    vi = Ve,
    gi = We,
    yi = Ye,
    ki = Xe,
    mi = function t(e, i, n, s, r, o) {
      s <= 0 && (n = vi);
      var a = [];
      if (!e || !e.length) return a;
      for (var h, l, u, c = n === vi, d = n === gi, f = e.split(ki), p = 0, v = f.length; p < v; p++)
        if (((h = f[p]), (u = p === v - 1 ? di : fi), c)) {
          var g = i(h);
          a.push(o.getLine(h, g, u));
        } else {
          var y, k, m, b, C;
          if (((l = 0 === p ? s - r : s), h.length <= 100))
            if ((g = i(h)) <= l) {
              a.push(o.getLine(h, g, u));
              continue;
            }
          d ? (k = '' === (y = h.split(' '))[y.length - 1]) && (y.length -= 1) : (y = h);
          for (var w, S = '', P = 0, T = d ? i(' ') : void 0, O = 0, M = y.length; O < M; O++)
            if (((b = i((m = y[O]))), (C = O === M - 1), !d || (C && !k) || ((m += ' '), (b += T)), d && b > s)) {
              '' !== S ? a.push(o.getLine(S, P, pi)) : 0 === O && r > 0 && a.push(o.getLine('', 0, pi)),
                a.push.apply(a, x(t(m, i, yi, s, 0, o)));
              var E = a.pop();
              (S = E.text), (P = E.width), o.freeLine(E), ' ' === S && ((S = ''), (P = 0));
            } else
              (w = P + b) > l ? (a.push(o.getLine(S, P, pi)), (S = m), (P = b), (l = s)) : ((S += m), (P = w)),
                C && a.push(o.getLine(S, P, u));
        }
      return a;
    },
    bi = Phaser.Utils.Objects.GetValue,
    xi = Ve,
    Ci = Ae,
    wi = (function () {
      function t(e) {
        r(this, t),
          (this.parent = e.parent),
          (this.scene = this.parent.scene),
          (this.context = bi(e, 'context', null)),
          (this.canvas = this.context.canvas),
          (this.parser = bi(e, 'parser', null)),
          (this.defaultStyle = bi(e, 'style', null)),
          (this.autoRound = !0),
          (this.pensPool = e.pensPool),
          (this.linesPool = e.linesPool),
          (this.wrapTextLinesPool = e.wrapTextLinesPool),
          (this.penManager = this.newPenManager()),
          (this._tmpPenManager = null),
          (this.hitAreaManager = new ai()),
          (this.lastHitAreaKey = null),
          (this.urlTagCursorStyle = null);
        var i = this.context;
        this.getTextWidth = function (t) {
          return i.measureText(t).width;
        };
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              (this.parent = void 0),
                (this.scene = void 0),
                (this.context = void 0),
                (this.canvas = void 0),
                (this.parser = void 0),
                (this.defaultStyle = void 0),
                this.penManager && (this.penManager.destroy(), (this.penManager = void 0)),
                this._tmpPenManager && (this._tmpPenManager.destroy(), (this._tmpPenManager = void 0)),
                this.hitAreaManager && (this.hitAreaManager.destroy(), (this.hitAreaManager = void 0)),
                (this.pensPool = void 0),
                (this.linesPool = void 0),
                (this.wrapTextLinesPool = void 0);
            },
          },
          {
            key: 'updatePenManager',
            value: function (t, e, i, n, s) {
              if ((void 0 === s && (s = this.penManager), s.clear(), '' === t)) return s;
              var r = this.parent.style;
              if (r.isWrapFitMode) {
                var o = this.parent.padding;
                i = r.fixedWidth - o.left - o.right;
              }
              for (
                var a,
                  h,
                  l,
                  u,
                  c,
                  d = this.canvas,
                  f = this.context,
                  p = function (t) {
                    return f.measureText(t).width;
                  },
                  v = 0,
                  g = 0,
                  y = r.wrapCallback,
                  k = r.wrapCallbackScope,
                  m = !0,
                  b = this.parser.splitText(t),
                  x = this.wrapTextLinesPool,
                  C = 0,
                  w = b.length;
                C < w;
                C++
              )
                if (((a = (u = this.parser.tagTextToProp(b[C], h)).plainText), (h = u.prop).img)) {
                  var S = this.imageManager.getOuterWidth(h.img);
                  i > 0 && e !== xi && i < v + S && (s.addNewLinePen(), (g += n), (v = 0)),
                    s.addImagePen(v, g, S, Qe(h)),
                    (v += S);
                } else if ('' !== a) {
                  if (
                    (f.save(),
                    (l = this.parser.propToContextStyle(this.defaultStyle, h)).buildFont(),
                    l.syncFont(d, f),
                    l.syncStyle(d, f),
                    y)
                  ) {
                    'string' == typeof (c = y.call(k, a, p, i, v)) && (c = c.split('\n'));
                    for (var P = 0, T = c.length; P < T; P++)
                      'string' == typeof (O = c[P]) ? (c[P] = x.getLine(O, p(O), P < T - 1 ? 2 : 0)) : (m = !1);
                  } else c = mi(a, p, e, i, v, x);
                  var O;
                  for (P = 0, T = c.length; P < T; P++)
                    (O = c[P]),
                      s.addTextPen(O.text, v, g, O.width, Qe(h), O.newLineMode),
                      O.newLineMode !== Ci ? ((v = 0), (g += n)) : (v += O.width);
                  m && x.freeLines(c), (c = null), f.restore();
                }
              for (C = 0, w = this.lines.length; C < w; C++) {
                var M = this.lines[C],
                  E = M[M.length - 1];
                E && (E.width += this.parser.getStrokeThinkness(this.defaultStyle, E.prop));
              }
              return s;
            },
          },
          {
            key: 'startXOffset',
            get: function () {
              var t = this.defaultStyle;
              return t.strokeThickness / 2 + t.xOffset;
            },
          },
          {
            key: 'startYOffset',
            get: function () {
              var t = this.defaultStyle;
              return t.strokeThickness / 2 + t.metrics.ascent;
            },
          },
          {
            key: 'lines',
            get: function () {
              return this.penManager.lines;
            },
          },
          {
            key: 'desplayLinesCount',
            get: function () {
              var t = this.penManager.linesCount,
                e = this.defaultStyle.maxLines;
              return e > 0 && t > e && (t = e), t;
            },
          },
          {
            key: 'linesWidth',
            get: function () {
              return Math.ceil(this.penManager.getMaxLineWidth());
            },
          },
          {
            key: 'linesHeight',
            get: function () {
              var t = this.desplayLinesCount,
                e = this.defaultStyle.lineHeight * t;
              return t > 0 && (e -= this.defaultStyle.lineSpacing), e;
            },
          },
          {
            key: 'imageManager',
            get: function () {
              return this.parent.imageManager;
            },
          },
          {
            key: 'rtl',
            get: function () {
              return this.parent.style.rtl;
            },
          },
          {
            key: 'newPenManager',
            value: function () {
              return new ni({
                pensPool: this.pensPool,
                linesPool: this.linesPool,
                tagToText: this.parser.propToTagText,
                tagToTextScope: this.parser,
              });
            },
          },
          {
            key: 'tmpPenManager',
            get: function () {
              return null === this._tmpPenManager && (this._tmpPenManager = this.newPenManager()), this._tmpPenManager;
            },
          },
          {
            key: 'getPlainText',
            value: function (t, e, i) {
              var n;
              if (null == t) n = this.penManager.plainText;
              else {
                var s = this.parser.splitText(t, 1);
                n = '';
                for (var r = 0, o = s.length; r < o; r++) n += s[r];
              }
              return (
                (null == e && null == i) ||
                  (null == e && (e = 0), null == i && (i = n.length), (n = n.substring(e, i))),
                n
              );
            },
          },
          {
            key: 'getPenManager',
            value: function (t, e) {
              if (void 0 === t) return this.copyPenManager(e, this.penManager);
              void 0 === e && (e = this.newPenManager());
              var i = this.defaultStyle;
              return this.updatePenManager(t, i.wrapMode, i.wrapWidth, i.lineHeight, e), e;
            },
          },
          {
            key: 'getText',
            value: function (t, e, i, n) {
              if (null == t) return this.penManager.getSliceTagText(e, i, n);
              var s = this.tmpPenManager,
                r = this.defaultStyle;
              return this.updatePenManager(t, r.wrapMode, r.wrapWidth, r.lineHeight, s), s.getSliceTagText(e, i, n);
            },
          },
          {
            key: 'copyPenManager',
            value: function (t, e) {
              return void 0 === e && (e = this.penManager), e.copy(t);
            },
          },
          {
            key: 'getTextWidth',
            value: function (t) {
              return void 0 === t && (t = this.penManager), t.getMaxLineWidth();
            },
          },
          {
            key: 'getLastPen',
            value: function (t) {
              return void 0 === t && (t = this.penManager), t.lastPen;
            },
          },
        ]),
        t
      );
    })(),
    Si = {
      setInteractive: function () {
        this.parent
          .on('pointerdown', hi, this)
          .on('pointerup', li, this)
          .on('pointermove', ui, this)
          .on('pointerover', ui, this)
          .on(
            'pointerout',
            function (t, e) {
              ui.call(this, t, null, null, e);
            },
            this
          );
      },
    };
  /**
   * @author       Richard Davey <rich@photonstorm.com>
   * @copyright    2018 Photon Storm Ltd.
   * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}
   */ Object.assign(wi.prototype, Ke, Si);
  var Pi = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'freeLine',
            value: function (t) {
              if (t) return this.push(t), this;
            },
          },
          {
            key: 'freeLines',
            value: function (t) {
              if (t) return this.pushMultiple(t), this;
            },
          },
          {
            key: 'getLine',
            value: function (t, e, i) {
              var n = this.pop();
              return null === n && (n = {}), (n.text = t), (n.width = e), (n.newLineMode = i), n;
            },
          },
        ]),
        i
      );
    })(ot),
    Ti = Phaser.Utils.Objects.IsPlainObject,
    Oi = Phaser.Utils.Objects.GetValue,
    Mi = function (t, e) {
      Ti(t) ? (t = (e = t).key) : void 0 === e && (e = { key: t }), e.hasOwnProperty('key') || (e.key = t);
      var i = e.key,
        n = e.frame,
        s = e.width,
        r = e.height;
      if (void 0 === s || void 0 === r) {
        var o = this.textureManager.getFrame(i, n),
          a = o ? o.cutWidth : 0,
          h = o ? o.cutHeight : 0;
        void 0 === s && void 0 === r
          ? ((s = a), (r = h))
          : void 0 === s
          ? (s = a * (r / h))
          : void 0 === r && (r = h * (s / a));
      }
      this.images[t] = {
        key: i,
        frame: n,
        width: s,
        height: r,
        y: Oi(e, 'y', 0),
        left: Oi(e, 'left', 0),
        right: Oi(e, 'right', 0),
        originX: Oi(e, 'originX', 0),
        originY: Oi(e, 'originY', 0),
        tintFill: Oi(e, 'tintFill', !1),
      };
    },
    Ei = Phaser.Display.Canvas.CanvasPool,
    _i = function (t, e, i, n, s, r, o, a) {
      void 0 === i && (i = 0),
        void 0 === n && (n = 0),
        void 0 === s && (s = t.cutWidth),
        void 0 === r && (r = t.cutHeight),
        void 0 === a && (a = !1),
        a && ((i = Math.round(i)), (n = Math.round(n)));
      var h = e.getContext('2d', { willReadFrequently: !0 });
      if (o) {
        var l = Ei.create(null, s, r, Phaser.CANVAS, !0),
          u = l.getContext('2d', { willReadFrequently: !0 });
        u.drawImage(t.source.image, t.cutX, t.cutY, t.cutWidth, t.cutHeight, 0, 0, s, r),
          (u.globalCompositeOperation = 'source-in'),
          (u.fillStyle = o),
          u.fillRect(0, 0, s, r),
          h.drawImage(l, 0, 0, s, r, i, n, s, r),
          Ei.remove(l);
      } else h.drawImage(t.source.image, t.cutX, t.cutY, t.cutWidth, t.cutHeight, i, n, s, r);
    },
    Ri = (function () {
      function t(e) {
        r(this, t), (this.textureManager = e.sys.textures), (this.images = {});
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              (this.textureManager = void 0), (this.images = void 0);
            },
          },
          {
            key: 'add',
            value: function (t, e) {
              if ('string' == typeof t) Mi.call(this, t, e);
              else if (Array.isArray(t)) for (var i = 0, n = (s = t).length; i < n; i++) Mi.call(this, s[i]);
              else {
                var s = t;
                for (var t in s) Mi.call(this, t, s[t]);
              }
              return this;
            },
          },
          {
            key: 'has',
            value: function (t) {
              return this.images.hasOwnProperty(t);
            },
          },
          {
            key: 'remove',
            value: function (t) {
              return this.has(t) && delete this.images[t], this;
            },
          },
          {
            key: 'get',
            value: function (t) {
              return this.has(t) || (this.textureManager.exists(t) && this.add(t)), this.images[t];
            },
          },
          {
            key: 'getOuterWidth',
            value: function (t) {
              var e = this.get(t);
              return e ? e.width + e.left + e.right : 0;
            },
          },
          {
            key: 'getFrame',
            value: function (t) {
              var e = this.get(t);
              return e ? this.textureManager.getFrame(e.key, e.frame) : void 0;
            },
          },
          {
            key: 'hasTexture',
            value: function (t) {
              return !!this.getFrame(t);
            },
          },
        ]),
        t
      );
    })(),
    Li = {
      draw: function (t, e, i, n, s, r) {
        var o = this.get(t),
          a = this.textureManager.getFrame(o.key, o.frame),
          h = o.width,
          l = o.height;
        (i += o.left - o.originX * h),
          (n += o.y - o.originY * l),
          o.tintFill || (s = void 0),
          _i(a, e.canvas, i, n, h, l, s, r);
      },
    };
  Object.assign(Ri.prototype, Li);
  var Bi = function (t, e) {
      var i;
      return (
        t || 0 === t || (t = ''),
        void 0 === e && (e = !0),
        Array.isArray(t) && (t = t.join('\n')),
        (i = e ? ''.concat(this.text, '\n').concat(t) : ''.concat(this.text).concat(t)) != this.text && this.setText(i),
        this
      );
    },
    Di = Phaser.Utils.Objects.IsPlainObject,
    Ii = Phaser.DOM.AddToDOM,
    ji = Phaser.Display.Canvas.CanvasPool,
    Ai = Phaser.GameObjects.GameObject,
    zi = Phaser.Utils.Objects.GetValue,
    Fi = Phaser.DOM.RemoveFromDOM,
    Vi = Xe,
    Wi = null,
    Yi = null,
    Xi = null,
    Gi = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u;
        if ((r(this, i), Di(n))) {
          var c = n;
          (n = zi(c, 'x', 0)), (s = zi(c, 'y', 0)), (o = zi(c, 'text', '')), (a = zi(c, 'style'));
        }
        if (
          (void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          ((u = e.call(this, t, h)).renderer = t.sys.game.renderer),
          u.setPosition(n, s),
          u.setOrigin(0, 0),
          u.initPipeline(),
          u.initPostPipeline(!0),
          (u.canvas = ji.create(d(u))),
          (u.context = u.canvas.getContext('2d', { willReadFrequently: !0 })),
          (u._imageManager = void 0),
          a)
        ) {
          if (a.hasOwnProperty('align')) {
            var f = a.align;
            delete a.align, (a.halign = f);
          }
          a.hasOwnProperty('stroke') && !a.hasOwnProperty('strokeThickness') && (a.strokeThickness = 1);
        }
        u.style = new Ue(d(u), a);
        var p,
          v,
          g,
          y = zi(a, 'images', void 0);
        return (
          y && u.addImage(y),
          (u.autoRound = !0),
          (u._text = void 0),
          (u.padding = { left: 0, right: 0, top: 0, bottom: 0 }),
          (u.width = 1),
          (u.height = 1),
          (u.lineSpacing = 0),
          (u.dirty = !1),
          0 === u.style.resolution && (u.style.resolution = 1),
          (u._crop = u.resetCropObject()),
          (u.texture = t.sys.textures.addCanvas(null, u.canvas, !0)),
          (u.frame = u.texture.get()),
          (u.frame.source.resolution = u.style.resolution),
          u.renderer &&
            u.renderer.gl &&
            (u.renderer.deleteTexture(u.frame.source.glTexture), (u.frame.source.glTexture = null)),
          zi(a, 'sharedPool', !0)
            ? (Wi ||
                ((Wi = {}),
                (Yi = new ot()),
                (Xi = new Pi()),
                u.scene.game.events.once('destroy', function () {
                  (Wi = null), (Yi = null), (Xi = null);
                })),
              Wi.hasOwnProperty(h) || (Wi[h] = new ot()),
              (p = Wi[h]),
              (v = Yi),
              (g = Xi))
            : ((p = new ot()), (v = new ot()), (g = new Pi())),
          (u.canvasText = new wi({
            parent: d(u),
            context: u.context,
            parser: l,
            style: u.style,
            pensPool: p,
            linesPool: v,
            wrapTextLinesPool: g,
          })),
          (u.parser = l),
          u.initRTL(),
          a && a.padding && u.setPadding(a.padding),
          a && a.lineSpacing && u.setLineSpacing(a.lineSpacing),
          u.setText(o),
          u.setUrlTagCursorStyle(zi(a, 'urlTagCursorStyle', 'pointer')),
          zi(a, 'interactive', !1) && u.setInteractive(),
          u
        );
      }
      return (
        a(i, [
          {
            key: 'preDestroy',
            value: function () {
              Fi(this.canvas),
                this.canvasText.destroy(),
                (this.canvasText = void 0),
                this._imageManager && (this._imageManager.destroy(), (this._imageManager = void 0)),
                ji.remove(this.canvas),
                this.texture.destroy();
            },
          },
          {
            key: 'text',
            get: function () {
              return this._text;
            },
            set: function (t) {
              this.setText(t);
            },
          },
          {
            key: 'initRTL',
            value: function () {
              this.style.rtl &&
                ((this.canvas.dir = 'rtl'),
                (this.context.direction = 'rtl'),
                (this.canvas.style.display = 'none'),
                Ii(this.canvas, this.scene.sys.canvas),
                (this.originX = 1));
            },
          },
          {
            key: 'setRTL',
            value: function (t) {
              void 0 === t && (t = !0);
              var e = this.style;
              if (e.rtl === t) return this;
              if (
                ((e.rtl = t),
                t
                  ? ((this.canvas.dir = 'rtl'),
                    (this.context.direction = 'rtl'),
                    (this.canvas.style.display = 'none'),
                    Ii(this.canvas, this.scene.sys.canvas))
                  : ((this.canvas.dir = 'ltr'), (this.context.direction = 'ltr')),
                'left' === e.halign ? (e.halign = 'right') : 'right' === e.halign && (e.halign = 'left'),
                this._imageManager)
              ) {
                var i = this._imageManager.images;
                for (var n in i) i[n].originX = 1 - i[n].originX;
              }
              return this;
            },
          },
          {
            key: 'setText',
            value: function (t) {
              return (
                (t = null == t ? '' : Array.isArray(t) ? t.join('\n') : t.toString()) === this._text ||
                  ((this._text = t), this.updateText()),
                this
              );
            },
          },
          {
            key: 'setPadding',
            value: function (t, e, i, s) {
              if ('object' === n(t)) {
                var r = t,
                  o = zi(r, 'x', null);
                null !== o ? ((t = o), (i = o)) : ((t = zi(r, 'left', 0)), (i = zi(r, 'right', t)));
                var a = zi(r, 'y', null);
                null !== a ? ((e = a), (s = a)) : ((e = zi(r, 'top', 0)), (s = zi(r, 'bottom', e)));
              } else void 0 === t && (t = 0), void 0 === e && (e = t), void 0 === i && (i = t), void 0 === s && (s = e);
              return (
                (this.padding.left = t),
                (this.padding.top = e),
                (this.padding.right = i),
                (this.padding.bottom = s),
                this.updateText(!1)
              );
            },
          },
          {
            key: 'updateText',
            value: function (t) {
              void 0 === t && (t = !0);
              var e = this.canvasText,
                i = this.style;
              t && e.updatePenManager(this._text, i.wrapMode, i.wrapWidth, i.lineHeight);
              var n,
                s,
                r = this.padding,
                o = Math.ceil(e.linesWidth);
              0 === i.fixedWidth
                ? ((this.width = o + r.left + r.right), (n = o))
                : ((this.width = i.fixedWidth), (n = this.width - r.left - r.right) < o && (n = o)),
                0 === i.fixedHeight
                  ? ((this.height = e.linesHeight + r.top + r.bottom), (s = e.linesHeight))
                  : ((this.height = i.fixedHeight),
                    (s = this.height - r.top - r.bottom) < e.linesHeight && (s = e.linesHeight));
              var a = this.width,
                h = this.height;
              this.updateDisplayOrigin();
              var l = i.resolution;
              (a *= l), (h *= l), (a = Math.max(Math.ceil(a), 1)), (h = Math.max(Math.ceil(h), 1));
              var u = this.canvas,
                c = this.context;
              u.width !== a || u.height !== h
                ? ((u.width = a), (u.height = h), this.frame.setSize(a, h))
                : c.clearRect(0, 0, a, h),
                c.save(),
                c.scale(l, l);
              var d = this.style.rtl ? r.right : r.left,
                f = r.top;
              e.draw(d, f, n, s),
                c.restore(),
                this.renderer &&
                  this.renderer.gl &&
                  ((this.frame.source.glTexture = this.renderer.canvasToTexture(u, this.frame.source.glTexture, !0)),
                  (this.frame.glTexture = this.frame.source.glTexture)),
                (this.dirty = !0);
              var p = this.input;
              return p && !p.customHitArea && ((p.hitArea.width = this.width), (p.hitArea.height = this.height)), this;
            },
          },
          {
            key: 'toJSON',
            value: function () {
              var t = Components.ToJSON(this),
                e = {
                  autoRound: this.autoRound,
                  text: this._text,
                  style: this.style.toJSON(),
                  resolution: this.resolution,
                  padding: {
                    left: this.padding.left,
                    right: this.padding.right,
                    top: this.padding.top,
                    bottom: this.padding.bottom,
                  },
                };
              return (t.data = e), t;
            },
          },
          {
            key: 'setInteractive',
            value: function (t, e, i) {
              var n = !!this.input;
              return Ai.prototype.setInteractive.call(this, t, e, i), n || this.canvasText.setInteractive(), this;
            },
          },
          {
            key: 'setUrlTagCursorStyle',
            value: function (t) {
              return (this.urlTagCursorStyle = t), this;
            },
          },
          {
            key: 'urlTagCursorStyle',
            get: function () {
              return this.canvasText.urlTagCursorStyle;
            },
            set: function (t) {
              this.canvasText.urlTagCursorStyle = t;
            },
          },
          {
            key: 'getWrappedText',
            value: function (t, e, i) {
              return (
                'number' == typeof t && ((i = e), (e = t), (t = void 0)),
                (t = this.canvasText.getText(t, e, i, !0)).split(Vi)
              );
            },
          },
          {
            key: 'getPlainText',
            value: function (t, e, i) {
              return 'number' == typeof t && ((i = e), (e = t), (t = void 0)), this.canvasText.getPlainText(t, e, i);
            },
          },
          {
            key: 'getText',
            value: function (t, e, i, n) {
              return (
                'number' == typeof t && ((n = i), (i = e), (e = t), (t = void 0)),
                void 0 === n && (n = !1),
                this.canvasText.getText(t, e, i, n)
              );
            },
          },
          {
            key: 'getSubString',
            value: function (t, e, i) {
              return 'number' == typeof t && ((i = e), (e = t), (t = void 0)), this.getText(t, e, i);
            },
          },
          {
            key: 'copyPenManager',
            value: function (t) {
              return this.canvasText.copyPenManager(t);
            },
          },
          {
            key: 'getPenManager',
            value: function (t, e) {
              return this.canvasText.getPenManager(t, e);
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              return this.setFixedSize(t, e);
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return this.setFixedSize(t, e);
            },
          },
          {
            key: 'imageManager',
            get: function () {
              return this._imageManager || (this._imageManager = new Ri(this.scene)), this._imageManager;
            },
          },
          {
            key: 'addImage',
            value: function (t, e) {
              return this.imageManager.add(t, e), this;
            },
          },
          {
            key: 'drawAreaBounds',
            value: function (t, e) {
              return this.canvasText.hitAreaManager.drawBounds(t, e, this), this;
            },
          },
          {
            key: 'generateTexture',
            value: function (t, e, i, n, s) {
              var r = this.canvas;
              return (
                void 0 === n ? (n = r.width) : (n *= this.resolution),
                void 0 === s ? (s = r.height) : (s *= this.resolution),
                fe(this.scene, r, t, e, i, n, s),
                this
              );
            },
          },
        ]),
        i
      );
    })(Le),
    Hi = { appendText: Bi };
  Object.assign(Gi.prototype, Hi);
  var Ui,
    Ni,
    Ki = !1,
    Ji = !0,
    qi = { plainText: null, prevProp: null },
    Zi = function (t, e, i, n) {
      return e === Ji ? (t[i] = n) : t.hasOwnProperty(i) && delete t[i], t;
    },
    $i = function (t) {
      var e = t.b,
        i = t.weight,
        n = t.i;
      return e || i || n
        ? n
          ? e
            ? 'bold italic'
            : i
            ? ''.concat(i, ' italic')
            : 'italic'
          : e
          ? 'bold'
          : i.toString()
        : '';
    },
    Qi = new Ue(),
    tn = {},
    en = function (t) {
      return t.replace(nn, '\\$&').replace(sn, '\\x2d');
    },
    nn = /[|\\{}()[\]^$+*?.]/g,
    sn = /-/g,
    rn = {},
    on = function (t, e, i, n) {
      return void 0 === n ? ''.concat(t).concat(i).concat(e) : ''.concat(t).concat(i, '=(').concat(n, ')').concat(e);
    },
    an = function (t, e, i) {
      return ''.concat(t, '/').concat(i).concat(e);
    },
    hn = '[-.0-9]+',
    ln = '[a-z]+|#[0-9abcdef]+',
    un = '[^\\]]+',
    cn = function (t, e) {
      if (void 0 === e) {
        var i = t;
        (t = i[0]), (e = i[1]);
      }
      if (Ui === t && Ni === e) return !1;
      (Ui = t), (Ni = e), (t = en(t)), (e = en(e));
      var n = on(t, e, 'esc'),
        s = an(t, e, 'esc'),
        r = on(t, e, 'raw'),
        o = an(t, e, 'raw'),
        a = on(t, e, 'b'),
        h = an(t, e, 'b'),
        l = on(t, e, 'i'),
        u = an(t, e, 'i'),
        c = 'weight',
        d = on(t, e, c, hn),
        f = an(t, e, c),
        p = 'size',
        v = on(t, e, p, hn),
        g = an(t, e, p),
        y = 'color',
        k = on(t, e, y, ln),
        m = an(t, e, y),
        b = on(t, e, 'u'),
        x = on(t, e, 'u', ln),
        C = an(t, e, 'u'),
        w = on(t, e, 's'),
        S = on(t, e, 's', ln),
        P = an(t, e, 's'),
        T = 'shadow',
        O = on(t, e, T),
        M = an(t, e, T),
        E = 'stroke',
        _ = on(t, e, E),
        R = on(t, e, E, ln),
        L = an(t, e, E),
        B = on(t, e, 'y', hn),
        D = an(t, e, 'y'),
        I = on(t, e, 'img', un),
        j = an(t, e, 'img'),
        A = 'area',
        z = on(t, e, A, un),
        F = an(t, e, A),
        V = on(t, e, 'url', un),
        W = an(t, e, 'url'),
        Y = 'align',
        X = on(t, e, Y, un),
        G = an(t, e, Y),
        H = on(t, e, 'id', un),
        U = an(t, e, 'id');
      return (
        (rn.RE_ESC_OPEN = new RegExp(n, 'i')),
        (rn.RE_ESC_CLOSE = new RegExp(s, 'i')),
        (rn.RE_RAW_OPEN = new RegExp(r, 'i')),
        (rn.RE_RAW_CLOSE = new RegExp(o, 'i')),
        (rn.RE_BLOD_OPEN = new RegExp(a, 'i')),
        (rn.RE_BLOD_CLOSE = new RegExp(h, 'i')),
        (rn.RE_ITALICS_OPEN = new RegExp(l, 'i')),
        (rn.RE_ITALICS_CLOSE = new RegExp(u, 'i')),
        (rn.RE_WEIGHT_OPEN = new RegExp(d, 'i')),
        (rn.RE_WEIGHT_CLOSE = new RegExp(f, 'i')),
        (rn.RE_SIZE_OPEN = new RegExp(v, 'i')),
        (rn.RE_SIZE_CLOSE = new RegExp(g, 'i')),
        (rn.RE_COLOR_OPEN = new RegExp(k, 'i')),
        (rn.RE_COLOR_CLOSE = new RegExp(m, 'i')),
        (rn.RE_UNDERLINE_OPEN = new RegExp(b, 'i')),
        (rn.RE_UNDERLINE_OPENC = new RegExp(x, 'i')),
        (rn.RE_UNDERLINE_CLOSE = new RegExp(C, 'i')),
        (rn.RE_STRIKETHROUGH_OPEN = new RegExp(w, 'i')),
        (rn.RE_STRIKETHROUGH_OPENC = new RegExp(S, 'i')),
        (rn.RE_STRIKETHROUGH_CLOSE = new RegExp(P, 'i')),
        (rn.RE_SHADOW_OPEN = new RegExp(O, 'i')),
        (rn.RE_SHADOW_CLOSE = new RegExp(M, 'i')),
        (rn.RE_STROKE_OPEN = new RegExp(_, 'i')),
        (rn.RE_STROKE_OPENC = new RegExp(R, 'i')),
        (rn.RE_STROKE_CLOSE = new RegExp(L, 'i')),
        (rn.RE_OFFSETY_OPEN = new RegExp(B, 'i')),
        (rn.RE_OFFSETY_CLOSE = new RegExp(D, 'i')),
        (rn.RE_IMAGE_OPEN = new RegExp(I, 'i')),
        (rn.RE_IMAGE_CLOSE = new RegExp(j, 'i')),
        (rn.RE_AREA_OPEN = new RegExp(z, 'i')),
        (rn.RE_AREA_CLOSE = new RegExp(F, 'i')),
        (rn.RE_URL_OPEN = new RegExp(V, 'i')),
        (rn.RE_URL_CLOSE = new RegExp(W, 'i')),
        (rn.RE_ALIGN_OPEN = new RegExp(X, 'i')),
        (rn.RE_ALIGN_CLOSE = new RegExp(G, 'i')),
        (rn.RE_ID_OPEN = new RegExp(H, 'i')),
        (rn.RE_ID_CLOSE = new RegExp(U, 'i')),
        (rn.RE_SPLITTEXT = new RegExp(
          [
            r,
            o,
            n,
            s,
            a,
            h,
            l,
            u,
            d,
            f,
            v,
            g,
            k,
            m,
            b,
            x,
            C,
            w,
            S,
            P,
            O,
            M,
            _,
            R,
            L,
            B,
            D,
            I,
            j,
            z,
            F,
            V,
            W,
            X,
            G,
            H,
            U,
          ].join('|'),
          'ig'
        )),
        !0
      );
    },
    dn = function (t, e) {
      return void 0 !== t && cn(t, e), Object.assign({}, rn);
    },
    fn = Phaser.Utils.Objects.GetValue,
    pn = (function () {
      function t(e) {
        r(this, t);
        var i = fn(e, 'delimiters', '[]');
        (this.tagRegex = dn(i)), (this.delimiters = i);
      }
      return (
        a(t, [
          {
            key: 'getStrokeThinkness',
            value: function (t, e) {
              return e.hasOwnProperty('stroke') ? t.strokeThickness : 0;
            },
          },
          {
            key: 'setDelimiters',
            value: function (t, e) {
              return cn(t, e) && (this.tagRegex = dn()), this;
            },
          },
        ]),
        t
      );
    })(),
    vn = {
      splitText: function (t, e) {
        for (var i = this.tagRegex, n = [], s = 0, r = !1, o = !1; ; ) {
          var a = i.RE_SPLITTEXT.exec(t);
          if (!a) break;
          var h = a[0];
          if (o) {
            if (!i.RE_ESC_CLOSE.test(h)) continue;
            o = !1;
          } else if (r) {
            if (!i.RE_RAW_CLOSE.test(h)) continue;
            r = !1;
          } else i.RE_ESC_OPEN.test(h) ? (o = !0) : i.RE_RAW_OPEN.test(h) && (r = !0);
          var l = i.RE_SPLITTEXT.lastIndex,
            u = l - h.length;
          if (s < u) {
            var c = t.substring(s, u);
            n.push(c);
          }
          void 0 === e && n.push(h), (s = l);
        }
        var d = t.length;
        return s < d && n.push(t.substring(s, d)), n;
      },
      tagTextToProp: function (t, e) {
        var i = this.tagRegex;
        null == e && (e = {});
        var n = '';
        if ((e.img && Zi(e, Ki, 'img'), e.esc)) i.RE_ESC_CLOSE.test(t) ? Zi(e, Ki, 'esc') : (n = t);
        else if (e.raw) i.RE_RAW_CLOSE.test(t) ? Zi(e, Ki, 'raw') : (n = t);
        else if (i.RE_ESC_OPEN.test(t)) Zi(e, Ji, 'esc', !0);
        else if (i.RE_ESC_CLOSE.test(t)) Zi(e, Ki, 'esc');
        else if (i.RE_RAW_OPEN.test(t)) Zi(e, Ji, 'raw', !0);
        else if (i.RE_RAW_CLOSE.test(t)) Zi(e, Ki, 'raw');
        else if (i.RE_BLOD_OPEN.test(t)) Zi(e, Ji, 'b', !0);
        else if (i.RE_BLOD_CLOSE.test(t)) Zi(e, Ki, 'b');
        else if (i.RE_ITALICS_OPEN.test(t)) Zi(e, Ji, 'i', !0);
        else if (i.RE_ITALICS_CLOSE.test(t)) Zi(e, Ki, 'i');
        else if (i.RE_WEIGHT_OPEN.test(t)) {
          var s = t.match(i.RE_WEIGHT_OPEN);
          Zi(e, Ji, 'weight', s[1]);
        } else if (i.RE_WEIGHT_CLOSE.test(t)) Zi(e, Ki, 'weight');
        else if (i.RE_SIZE_OPEN.test(t)) {
          s = t.match(i.RE_SIZE_OPEN);
          Zi(e, Ji, 'size', ''.concat(s[1], 'px'));
        } else if (i.RE_SIZE_CLOSE.test(t)) Zi(e, Ki, 'size');
        else if (i.RE_COLOR_OPEN.test(t)) {
          s = t.match(i.RE_COLOR_OPEN);
          Zi(e, Ji, 'color', s[1]);
        } else if (i.RE_COLOR_CLOSE.test(t)) Zi(e, Ki, 'color');
        else if (i.RE_UNDERLINE_OPEN.test(t)) Zi(e, Ji, 'u', !0);
        else if (i.RE_UNDERLINE_OPENC.test(t)) {
          s = t.match(i.RE_UNDERLINE_OPENC);
          Zi(e, Ji, 'u', s[1]);
        } else if (i.RE_UNDERLINE_CLOSE.test(t)) Zi(e, Ki, 'u');
        else if (i.RE_STRIKETHROUGH_OPEN.test(t)) Zi(e, Ji, 's', !0);
        else if (i.RE_STRIKETHROUGH_OPENC.test(t)) {
          s = t.match(i.RE_STRIKETHROUGH_OPENC);
          Zi(e, Ji, 's', s[1]);
        } else if (i.RE_STRIKETHROUGH_CLOSE.test(t)) Zi(e, Ki, 's');
        else if (i.RE_SHADOW_OPEN.test(t)) Zi(e, Ji, 'shadow', !0);
        else if (i.RE_SHADOW_CLOSE.test(t)) Zi(e, Ki, 'shadow');
        else if (i.RE_STROKE_OPEN.test(t)) Zi(e, Ji, 'stroke', !0);
        else if (i.RE_STROKE_OPENC.test(t)) {
          s = t.match(i.RE_STROKE_OPENC);
          Zi(e, Ji, 'stroke', s[1]);
        } else if (i.RE_STROKE_CLOSE.test(t)) Zi(e, Ki, 'stroke');
        else if (i.RE_OFFSETY_OPEN.test(t)) {
          s = t.match(i.RE_OFFSETY_OPEN);
          Zi(e, Ji, 'y', parseFloat(s[1]));
        } else if (i.RE_OFFSETY_CLOSE.test(t)) Zi(e, Ki, 'y');
        else if (i.RE_IMAGE_OPEN.test(t)) {
          s = t.match(i.RE_IMAGE_OPEN);
          Zi(e, Ji, 'img', s[1]);
        } else if (i.RE_IMAGE_CLOSE.test(t)) Zi(e, Ki, 'img');
        else if (i.RE_AREA_OPEN.test(t)) {
          s = t.match(i.RE_AREA_OPEN);
          Zi(e, Ji, 'area', s[1]);
        } else if (i.RE_AREA_CLOSE.test(t)) Zi(e, Ki, 'area');
        else if (i.RE_URL_OPEN.test(t)) {
          s = t.match(i.RE_URL_OPEN);
          Zi(e, Ji, 'url', s[1]);
        } else if (i.RE_URL_CLOSE.test(t)) Zi(e, Ki, 'url');
        else if (i.RE_ALIGN_OPEN.test(t)) {
          s = t.match(i.RE_ALIGN_OPEN);
          Zi(e, Ji, 'align', s[1]);
        } else if (i.RE_ALIGN_CLOSE.test(t)) Zi(e, Ki, 'align');
        else if (i.RE_ID_OPEN.test(t)) {
          s = t.match(i.RE_ID_OPEN);
          Zi(e, Ji, 'id', s[1]);
        } else i.RE_ID_CLOSE.test(t) ? Zi(e, Ki, 'id') : (n = t);
        var r = qi;
        return (r.plainText = n), (r.prop = e), r;
      },
      propToContextStyle: function (t, e) {
        var i = Qi;
        if (e.hasOwnProperty('img')) i.image = e.img;
        else {
          if (
            ((i.image = null),
            e.hasOwnProperty('family') ? (i.fontFamily = e.family) : (i.fontFamily = t.fontFamily),
            e.hasOwnProperty('size'))
          ) {
            var n = e.size;
            'number' == typeof n && (n = ''.concat(n, 'px')), (i.fontSize = n);
          } else i.fontSize = t.fontSize;
          (i.fontStyle = $i(e)),
            e.hasOwnProperty('color') ? (i.color = e.color) : (i.color = t.color),
            e.hasOwnProperty('stroke')
              ? !0 === e.stroke
                ? ((i.stroke = t.stroke), (i.strokeThickness = t.strokeThickness))
                : ((i.stroke = e.stroke), (i.strokeThickness = t.strokeThickness))
              : ((i.stroke = t.stroke), (i.strokeThickness = 0));
        }
        return (
          e.hasOwnProperty('shadow')
            ? !0 === e.shadow
              ? ((i.shadowColor = t.shadowColor),
                (i.shadowOffsetX = t.shadowOffsetX),
                (i.shadowOffsetY = t.shadowOffsetY),
                (i.shadowBlur = t.shadowBlur),
                (i.shadowStroke = !0),
                (i.shadowFill = !0))
              : ((i.shadowColor = e.shadow),
                (i.shadowOffsetX = t.shadowOffsetX),
                (i.shadowOffsetY = t.shadowOffsetY),
                (i.shadowBlur = t.shadowBlur),
                (i.shadowStroke = !0),
                (i.shadowFill = !0))
            : ((i.shadowColor = '#000'),
              (i.shadowOffsetX = 0),
              (i.shadowOffsetY = 0),
              (i.shadowBlur = 0),
              (i.shadowStroke = !1),
              (i.shadowFill = !1)),
          e.hasOwnProperty('u')
            ? !0 === e.u
              ? ((i.underlineColor = t.underlineColor),
                (i.underlineThickness = t.underlineThickness),
                (i.underlineOffset = t.underlineOffset))
              : ((i.underlineColor = e.u),
                (i.underlineThickness = t.underlineThickness),
                (i.underlineOffset = t.underlineOffset))
            : ((i.underlineColor = '#000'), (i.underlineThickness = 0), (i.underlineOffset = 0)),
          e.hasOwnProperty('s')
            ? !0 === e.s
              ? ((i.strikethroughColor = t.strikethroughColor),
                (i.strikethroughThickness = t.strikethroughThickness),
                (i.strikethroughOffset = t.strikethroughOffset))
              : ((i.strikethroughColor = e.s),
                (i.strikethroughThickness = t.strikethroughThickness),
                (i.strikethroughOffset = t.strikethroughOffset))
            : ((i.strikethroughColor = '#000'), (i.strikethroughThickness = 0), (i.strikethroughOffset = 0)),
          i
        );
      },
      propToTagText: function (t, e, i) {
        null == i && (i = tn);
        var n = this.delimiters[0],
          s = this.delimiters[1],
          r = [];
        for (var o in i) e.hasOwnProperty(o) || r.push(''.concat(n, '/').concat(o).concat(s));
        for (var o in e) {
          var a = e[o];
          if (i[o] !== a)
            switch (o) {
              case 'size':
                r.push(''.concat(n, 'size=').concat(a.replace('px', '')).concat(s));
                break;
              case 'color':
              case 'weight':
              case 'stroke':
              case 'y':
              case 'img':
              case 'area':
              case 'url':
              case 'align':
              case 'id':
                r.push(''.concat(n).concat(o, '=').concat(a).concat(s));
                break;
              case 'u':
              case 's':
                !0 === a
                  ? r.push(''.concat(n).concat(o).concat(s))
                  : r.push(''.concat(n).concat(o, '=').concat(a).concat(s));
                break;
              default:
                r.push(''.concat(n).concat(o).concat(s));
            }
        }
        return r.push(t), r.join('');
      },
    };
  Object.assign(pn.prototype, vn);
  var gn = (function (t) {
    l(i, t);
    var e = p(i);
    function i(t, n, s, o, a) {
      r(this, i);
      var h = new pn(a);
      return e.call(this, t, n, s, o, a, 'rexBBCodeText', h);
    }
    return (
      a(i, [
        {
          key: 'setDelimiters',
          value: function (t, e) {
            return this.parse.setDelimiters(t, e), this;
          },
        },
      ]),
      i
    );
  })(Gi);
  M.register('BBCodeText', function (t, e, i, n) {
    var s = new gn(this.scene, t, e, i, n);
    return this.scene.add.existing(s), s;
  }),
    $(window, 'RexPlugins.UI.BBCodeText', gn);
  var yn = { plainText: null, prevProp: null },
    kn = new Ue(),
    mn = (function () {
      function t(e) {
        r(this, t), void 0 === e && (e = {}), (this.tags = e);
      }
      return (
        a(t, [
          {
            key: 'addTag',
            value: function (t, e) {
              this.tags[t] = e;
            },
          },
          {
            key: 'getTag',
            value: function (t) {
              return this.tags[t];
            },
          },
          {
            key: 'splitText',
            value: function (t, e) {
              for (var i = [], n = 0; ; ) {
                var s = Cn.exec(t);
                if (!s) break;
                var r = s[0],
                  o = Cn.lastIndex - r.length;
                if ((n < o && i.push(t.substring(n, o)), void 0 === e)) i.push(r);
                else if (1 === e)
                  if (wn.test(r)) {
                    var a = r.match(Sn);
                    i.push(a[2]);
                  } else if (Pn.test(r)) {
                    a = r.match(Tn);
                    i.push(a[2]);
                  }
                n = Cn.lastIndex;
              }
              var h = t.length;
              return n < h && i.push(t.substring(n, h)), i;
            },
          },
          {
            key: 'tagTextToProp',
            value: function (t, e) {
              var i, n;
              if (wn.test(t)) {
                if (null != (o = t.match(Sn))) {
                  var s = o[1],
                    r = this.tags;
                  ((n = r.hasOwnProperty(s) ? r[s] : {})._class = s), (i = o[2]);
                }
              } else if (Pn.test(t)) {
                var o;
                if (null != (o = t.match(Tn))) {
                  var a = o[1];
                  ((n = bn(a))._style = a), (i = o[2]);
                }
              }
              null == i && (i = t), null == n && (n = {});
              var h = yn;
              return (h.plainText = i), (h.prop = n), h;
            },
          },
          {
            key: 'propToContextStyle',
            value: function (t, e) {
              var i = kn;
              if (e.hasOwnProperty('img')) i.image = e.img;
              else {
                if (
                  ((i.image = null),
                  e.hasOwnProperty('family') || e.hasOwnProperty('fontFamily') || e.hasOwnProperty('font-family'))
                ) {
                  var n = e.hasOwnProperty('family')
                    ? e.family
                    : e.hasOwnProperty('fontFamily')
                    ? e.fontFamily
                    : e['font-family'];
                  i.fontFamily = n;
                } else i.fontFamily = t.fontFamily;
                if (e.hasOwnProperty('size') || e.hasOwnProperty('fontSize') || e.hasOwnProperty('font-size')) {
                  var s = e.hasOwnProperty('size')
                    ? e.size
                    : e.hasOwnProperty('fontSize')
                    ? e.fontSize
                    : e['font-size'];
                  'number' == typeof s && (s = ''.concat(s, 'px')), (i.fontSize = s);
                } else i.fontSize = t.fontSize;
                if (e.hasOwnProperty('style') || e.hasOwnProperty('fontStyle') || e.hasOwnProperty('font-style')) {
                  var r = e.hasOwnProperty('style')
                    ? e.style
                    : e.hasOwnProperty('fontStyle')
                    ? e.fontStyle
                    : e['font-style'];
                  i.fontStyle = r;
                } else i.fontStyle = t.fontStyle;
                if (e.hasOwnProperty('color') || e.hasOwnProperty('font-color')) {
                  var o = e.hasOwnProperty('color') ? e.color : e['font-color'];
                  i.color = o;
                } else i.color = t.color;
                if (e.hasOwnProperty('stroke')) {
                  var a = e.stroke;
                  (i.stroke = a.hasOwnProperty('color') ? a.color : t.stroke),
                    (i.strokeThickness = a.hasOwnProperty('thickness') ? a.thickness : t.strokeThickness);
                } else (i.stroke = t.stroke), (i.strokeThickness = t.strokeThickness);
              }
              if (e.hasOwnProperty('shadow')) {
                var h = e.shadow;
                (i.shadowColor = h.hasOwnProperty('color') ? h.color : t.shadowColor),
                  (i.shadowOffsetX = h.hasOwnProperty('offsetX') ? h.offsetX : t.shadowOffsetX),
                  (i.shadowOffsetY = h.hasOwnProperty('offsetY') ? h.offsetY : t.shadowOffsetY),
                  (i.shadowBlur = h.hasOwnProperty('blur') ? h.blur : t.shadowBlur),
                  (i.shadowStroke = !0),
                  (i.shadowFill = !0);
              } else
                (i.shadowColor = t.shadowColor),
                  (i.shadowOffsetX = t.shadowOffsetX),
                  (i.shadowOffsetY = t.shadowOffsetY),
                  (i.shadowBlur = t.shadowBlur),
                  (i.shadowStroke = t.shadowStroke),
                  (i.shadowFill = t.shadowFill);
              if (e.hasOwnProperty('u') || e.hasOwnProperty('underline')) {
                var l = e.hasOwnProperty('u') ? e.u : e.underline;
                (i.underlineColor = l.hasOwnProperty('color') ? l.color : t.underlineColor),
                  (i.underlineThickness = l.hasOwnProperty('thickness') ? l.thickness : t.underlineThickness),
                  (i.underlineOffset = l.hasOwnProperty('offset') ? l.offset : t.underlineOffset);
              } else
                (i.underlineColor = t.underlineColor),
                  (i.underlineThickness = t.underlineThickness),
                  (i.underlineOffset = t.underlineOffset);
              if (e.hasOwnProperty('s') || e.hasOwnProperty('strikethrough')) {
                var u = e.hasOwnProperty('s') ? e.s : e.strikethrough;
                (i.strikethroughColor = u.hasOwnProperty('color') ? u.color : t.strikethroughColor),
                  (i.strikethroughThickness = u.hasOwnProperty('thickness') ? u.thickness : t.strikethroughThickness),
                  (i.strikethroughOffset = u.hasOwnProperty('offset') ? u.offset : t.strikethroughOffset);
              } else
                (i.strikethroughColor = t.strikethroughColor),
                  (i.strikethroughThickness = t.strikethroughThickness),
                  (i.strikethroughOffset = t.strikethroughOffset);
              return i;
            },
          },
          {
            key: 'getStrokeThinkness',
            value: function (t, e) {
              var i;
              if (e.hasOwnProperty('stroke')) {
                var n = e.stroke;
                i = n.hasOwnProperty('thickness') ? n.thickness : t.strokeThickness;
              } else i = t.strokeThickness;
              return i;
            },
          },
          {
            key: 'propToTagText',
            value: function (t, e, i) {
              return e.hasOwnProperty('_class')
                ? '' === t && this.isTextTag(e._class)
                  ? ''
                  : "<class='".concat(e._class, "'>").concat(t, '</class>')
                : e.hasOwnProperty('_style')
                ? "<style='".concat(e._style, "'>").concat(t, '</style>')
                : t;
            },
          },
          {
            key: 'destroy',
            value: function () {
              this.tags = void 0;
            },
          },
          {
            key: 'isTextTag',
            value: function (t) {
              var e = this.tags[t];
              return !!e && null == e.img;
            },
          },
        ]),
        t
      );
    })(),
    bn = function (t) {
      for (var e, i, n, s = {}, r = 0, o = (t = t.split(';')).length; r < o; r++)
        if (((i = (e = t[r].split(':'))[0]), (n = e[1]), !xn(i) && !xn(n))) {
          switch (i) {
            case 'stroke':
              var a = n.split(' ');
              (n = {}),
                (h = a.length) >= 1 && (n.color = a[0]),
                h >= 2 && (n.thickness = parseInt(a[1].replace('px', '')));
              break;
            case 'shadow':
              a = n.split(' ');
              (n = {}),
                (h = a.length) >= 1 && (n.color = a[0]),
                h >= 2 && (n.offsetX = parseInt(a[1].replace('px', ''))),
                h >= 3 && (n.offsetY = parseInt(a[2].replace('px', ''))),
                h >= 4 && (n.blur = parseInt(a[3].replace('px', '')));
              break;
            case 'u':
            case 'underline':
            case 's':
            case 'strikethrough':
              var h;
              a = n.split(' ');
              (n = {}),
                (h = a.length) >= 1 && (n.color = a[0]),
                h >= 2 && (n.thickness = parseInt(a[1].replace('px', ''))),
                h >= 3 && (n.offset = parseInt(a[2].replace('px', ''))),
                'underline' === i ? (i = 'u') : 'strikethrough' === i && (i = 's');
              break;
            case 'y':
              n = parseFloat(n);
          }
          s[i] = n;
        }
      return s;
    },
    xn = function (t) {
      return 0 === (t = t.replace(On, '')).length;
    },
    Cn =
      /<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>|<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/g,
    wn = /<\s*class=/i,
    Sn = /<\s*class=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/class\s*\>/,
    Pn = /<\s*style=/i,
    Tn = /<\s*style=["|']([^"|']+)["|']\s*\>([\s\S]*?)<\s*\/style\s*\>/,
    On = /^\s+|\s+$/,
    Mn = Phaser.Utils.Objects.GetValue,
    En = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a) {
        r(this, i);
        var h = Mn(a, 'tags', void 0),
          l = new mn(h);
        return e.call(this, t, n, s, o, a, 'rexTagText', l);
      }
      return (
        a(i, [
          {
            key: 'addTag',
            value: function (t, e) {
              return this.parser.addTag(t, e), this.updateText(!0);
            },
          },
          {
            key: 'addTags',
            value: function (t) {
              for (var e in t) this.parser.addTag(e, t[e]);
              return this.updateText(!0);
            },
          },
          {
            key: 'getTag',
            value: function (t) {
              return this.parser.getTag(t);
            },
          },
          {
            key: 'preDestroy',
            value: function () {
              g(u(i.prototype), 'preDestroy', this).call(this), this.parser.destroy(), (this.parser = void 0);
            },
          },
        ]),
        i
      );
    })(Gi);
  M.register('tagText', function (t, e, i, n) {
    var s = new En(this.scene, t, e, i, n);
    return this.scene.add.existing(s), s;
  }),
    $(window, 'RexPlugins.UI.TagText', En);
  var _n = Phaser.Utils.Objects.GetValue,
    Rn = function (t, e) {
      return void 0 === e ? t : t[e];
    },
    Ln = function (t, e, i) {
      void 0 === t && (t = {}), void 0 === e && (e = 0);
      var s = n(e);
      return (
        'string' === s
          ? (t[e] = i)
          : 'number' === s
          ? ((t.left = e), (t.right = e), (t.top = e), (t.bottom = e))
          : ((t.left = _n(e, 'left', 0)),
            (t.right = _n(e, 'right', 0)),
            (t.top = _n(e, 'top', 0)),
            (t.bottom = _n(e, 'bottom', 0))),
        t
      );
    },
    Bn = (function () {
      function t(e, i) {
        r(this, t), this.setParent(e), (this.type = i), (this.renderable = !1), this.reset().setActive();
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              this.parent.removeChild(this);
            },
          },
          {
            key: 'setParent',
            value: function (t) {
              return (this.parent = t), this;
            },
          },
          {
            key: 'scene',
            get: function () {
              return this.parent.scene;
            },
          },
          {
            key: 'canvas',
            get: function () {
              return this.parent ? this.parent.canvas : null;
            },
          },
          {
            key: 'context',
            get: function () {
              return this.parent ? this.parent.context : null;
            },
          },
          {
            key: 'setDirty',
            value: function (t) {
              return t && this.parent && (this.parent.dirty = !0), this;
            },
          },
          {
            key: 'active',
            get: function () {
              return this._active;
            },
            set: function (t) {
              this.setDirty(this._active != t), (this._active = t);
            },
          },
          {
            key: 'setActive',
            value: function (t) {
              return void 0 === t && (t = !0), (this.active = t), this;
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              return this;
            },
          },
          {
            key: 'onFree',
            value: function () {
              this.reset().setParent();
            },
          },
          {
            key: 'reset',
            value: function () {
              return this;
            },
          },
          { key: 'render', value: function () {} },
          {
            key: 'contains',
            value: function (t, e) {
              return !1;
            },
          },
        ]),
        t
      );
    })();
  Object.assign(Bn.prototype, St);
  var Dn,
    In,
    jn,
    An,
    zn,
    Fn = {
      renderContent: function () {},
      render: function () {
        if (!this.willRender) return this;
        var t = this.context;
        if ((t.save(), (t.globalAlpha = this.alpha), this.toLocalPosition)) {
          var e = this.drawX,
            i = this.drawY;
          this.autoRound && ((e = Math.round(e)), (i = Math.round(i))),
            t.translate(e, i),
            t.scale(this.scaleX, this.scaleY),
            t.rotate(this.rotation);
        }
        return (
          this.drawBelowCallback && this.drawBelowCallback(this),
          this.renderContent(),
          this.drawAboveCallback && this.drawAboveCallback(this),
          t.restore(),
          this
        );
      },
    },
    Vn = Phaser.Math.RotateAround,
    Wn = Phaser.Geom.Rectangle,
    Yn = function (t) {
      void 0 === In && (In = new Wn());
      var e = t.drawTLX,
        i = t.drawTLY;
      return In.setTo(e, i, t.drawTRX - e, t.drawBLY - i), In;
    },
    Xn = Phaser.Math.RotateAround,
    Gn = function (t, e, i, n) {
      return (
        void 0 === n ? (n = {}) : !0 === n && (void 0 === jn && (jn = {}), (n = jn)),
        (n.x = e),
        (n.y = i),
        0 !== t.rotation && Xn(n, 0, 0, t.rotation),
        (n.x = n.x * t.scaleX + t.drawX),
        (n.y = n.y * t.scaleY + t.drawY),
        n
      );
    },
    Hn = Phaser.GameObjects.Components.TransformMatrix,
    Un = {},
    Nn = function (t, e, i, n, s) {
      var r = Gn(e, i, n, !0),
        o = (function (t, e, i, n) {
          void 0 === n ? (n = {}) : !0 === n && (n = Un);
          var s = e - t.width * t.originX,
            r = i - t.height * t.originY;
          return (
            void 0 === An && ((An = new Hn()), (zn = new Hn())),
            t.parentContainer
              ? t.getWorldTransformMatrix(An, zn)
              : An.applyITRS(t.x, t.y, t.rotation, t.scaleX, t.scaleY),
            An.transformPoint(s, r, n),
            n
          );
        })(t, r.x, r.y, s);
      return o;
    },
    Kn = function (t, e, i, n, s) {
      'number' != typeof i && ((s = i), (i = 0), (n = 0));
      var r = e.drawCenterX + i,
        o = e.drawCenterY + n;
      return Nn(t, e, r, o, s);
    },
    Jn = {
      contains: function (t, e) {
        if (0 === this.width || 0 === this.height) return !1;
        var i = (function (t, e, i, n) {
          return (
            void 0 === n ? (n = {}) : !0 === n && (void 0 === Dn && (Dn = {}), (n = Dn)),
            (n.x = (t - i.drawX) / i.scaleX),
            (n.y = (e - i.drawY) / i.scaleY),
            0 !== i.rotation && Vn(n, 0, 0, -i.rotation),
            n
          );
        })(t, e, this, !0);
        return Yn(this).contains(i.x, i.y);
      },
      getWorldPosition: function (t, e, i) {
        return Kn(this.parent, this, t, e, i);
      },
    };
  Object.assign(Jn, Fn);
  var qn = Phaser.Math.DegToRad,
    Zn = Phaser.Math.RadToDeg,
    $n = Phaser.Utils.Objects.GetValue,
    Qn = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, n)).renderable = !0),
          (s.scrollFactorX = 1),
          (s.scrollFactorY = 1),
          (s.toLocalPosition = !0),
          (s.originX = 0),
          (s.offsetX = 0),
          (s.offsetY = 0),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'visible',
            get: function () {
              return this._visible;
            },
            set: function (t) {
              this.setDirty(this._visible != t), (this._visible = t);
            },
          },
          {
            key: 'setVisible',
            value: function (t) {
              return void 0 === t && (t = !0), (this.visible = t), this;
            },
          },
          {
            key: 'alpha',
            get: function () {
              return this._alpha;
            },
            set: function (t) {
              this.setDirty(this._alpha != t), (this._alpha = t);
            },
          },
          {
            key: 'setAlpha',
            value: function (t) {
              return (this.alpha = t), this;
            },
          },
          {
            key: 'x',
            get: function () {
              return this._x;
            },
            set: function (t) {
              this.setDirty(this._x != t), (this._x = t);
            },
          },
          {
            key: 'setX',
            value: function (t) {
              return (this.x = t), this;
            },
          },
          {
            key: 'y',
            get: function () {
              return this._y;
            },
            set: function (t) {
              this.setDirty(this._y != t), (this._y = t);
            },
          },
          {
            key: 'setY',
            value: function (t) {
              return (this.y = t), this;
            },
          },
          {
            key: 'setPosition',
            value: function (t, e) {
              return (this.x = t), (this.y = e), this;
            },
          },
          {
            key: 'setInitialPosition',
            value: function (t, e) {
              return (this.x0 = t), (this.y0 = e), this;
            },
          },
          {
            key: 'setScrollFactorX',
            value: function (t) {
              return (this.scrollFactorX = t), this;
            },
          },
          {
            key: 'setScrollFactorY',
            value: function (t) {
              return (this.scrollFactorY = t), this;
            },
          },
          {
            key: 'setScrollFactor',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.scrollFactorX = t), (this.scrollFactorY = e), this;
            },
          },
          {
            key: 'rotation',
            get: function () {
              return this._rotation;
            },
            set: function (t) {
              this.setDirty(this._rotation != t), (this._rotation = t);
            },
          },
          {
            key: 'setRotation',
            value: function (t) {
              return (this.rotation = t), this;
            },
          },
          {
            key: 'angle',
            get: function () {
              return Zn(this._rotation);
            },
            set: function (t) {
              this.rotation = qn(t);
            },
          },
          {
            key: 'setAngle',
            value: function (t) {
              return (this.angle = t), this;
            },
          },
          {
            key: 'scaleX',
            get: function () {
              return this._scaleX;
            },
            set: function (t) {
              this.setDirty(this._scaleX !== t), (this._scaleX = t);
            },
          },
          {
            key: 'setScaleX',
            value: function (t) {
              return (this.scaleX = t), this;
            },
          },
          {
            key: 'width',
            get: function () {
              return 0;
            },
            set: function (t) {},
          },
          {
            key: 'setWidth',
            value: function (t, e) {
              return void 0 === e && (e = !1), (this.width = t), e && (this.scaleY = this.scaleX), this;
            },
          },
          {
            key: 'leftSpace',
            get: function () {
              return this._leftSpace;
            },
            set: function (t) {
              this.setDirty(this._leftSpace !== t), (this._leftSpace = t);
            },
          },
          {
            key: 'setLeftSpace',
            value: function (t) {
              return (this.leftSpace = t), this;
            },
          },
          {
            key: 'rightSpace',
            get: function () {
              return this._rightSpace;
            },
            set: function (t) {
              this.setDirty(this._rightSpace !== t), (this._rightSpace = t);
            },
          },
          {
            key: 'setRightSpace',
            value: function (t) {
              return (this.rightSpace = t), this;
            },
          },
          {
            key: 'outerWidth',
            get: function () {
              return this.width + this.leftSpace + this.rightSpace;
            },
          },
          {
            key: 'scaleY',
            get: function () {
              return this._scaleY;
            },
            set: function (t) {
              this.setDirty(this._scaleY !== t), (this._scaleY = t);
            },
          },
          {
            key: 'setScaleY',
            value: function (t) {
              return (this.scaleY = t), this;
            },
          },
          {
            key: 'height',
            get: function () {
              return 0;
            },
            set: function (t) {},
          },
          {
            key: 'setHeight',
            value: function (t, e) {
              return void 0 === e && (e = !1), (this.height = t), e && (this.scaleX = this.scaleY), this;
            },
          },
          {
            key: 'setScale',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.scaleX = t), (this.scaleY = e), this;
            },
          },
          {
            key: 'setOrigin',
            value: function (t) {
              return (this.originX = t), this;
            },
          },
          {
            key: 'setAlign',
            value: function (t) {
              return (this.align = t), this;
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              if (!t) return this;
              t.hasOwnProperty('x') && this.setX(t.x),
                t.hasOwnProperty('y') && this.setY(t.y),
                t.hasOwnProperty('rotation')
                  ? this.setRotation(t.rotation)
                  : t.hasOwnProperty('angle') && this.setAngle(t.angle),
                t.hasOwnProperty('alpha') && this.setAlpha(t.alpha);
              var e = $n(t, 'width', void 0),
                i = $n(t, 'height', void 0),
                n = $n(t, 'scaleX', void 0),
                s = $n(t, 'scaleY', void 0);
              return (
                void 0 !== e
                  ? void 0 === i && void 0 === s
                    ? this.setWidth(e, !0)
                    : this.setWidth(e)
                  : void 0 !== n && this.setScaleX(n),
                void 0 !== i
                  ? void 0 === e && void 0 === n
                    ? this.setHeight(i, !0)
                    : this.setHeight(i)
                  : void 0 !== s && this.setScaleY(s),
                t.hasOwnProperty('leftSpace') && this.setLeftSpace(t.leftSpace),
                t.hasOwnProperty('rightSpace') && this.setRightSpace(t.rightSpace),
                t.hasOwnProperty('align') && this.setAlign(t.align),
                this
              );
            },
          },
          {
            key: 'setDrawBelowCallback',
            value: function (t) {
              return (this.drawBelowCallback = t), this;
            },
          },
          {
            key: 'setDrawAboveCallback',
            value: function (t) {
              return (this.drawAboveCallback = t), this;
            },
          },
          {
            key: 'reset',
            value: function () {
              return (
                this.setVisible()
                  .setAlpha(1)
                  .setPosition(0, 0)
                  .setRotation(0)
                  .setScale(1, 1)
                  .setLeftSpace(0)
                  .setRightSpace(0)
                  .setOrigin(0)
                  .setAlign()
                  .setDrawBelowCallback()
                  .setDrawAboveCallback(),
                this
              );
            },
          },
          {
            key: 'willRender',
            get: function () {
              return this.visible && this.alpha > 0;
            },
          },
          {
            key: 'drawX',
            get: function () {
              var t = this.x + this.leftSpace + this.offsetX - this.originX * this.width;
              return this.parent._textOX * this.scrollFactorX + t;
            },
          },
          {
            key: 'drawY',
            get: function () {
              var t = this.y + this.offsetY;
              return this.parent._textOY * this.scrollFactorY + t;
            },
          },
          {
            key: 'drawTLX',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawTLY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawBLX',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawBLY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawTRX',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawTRY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawBRX',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawBRY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawCenterX',
            get: function () {
              return (this.drawTRX + this.drawTLX) / 2;
            },
          },
          {
            key: 'drawCenterY',
            get: function () {
              return (this.drawBLY + this.drawTLY) / 2;
            },
          },
        ]),
        i
      );
    })(Bn);
  Object.assign(Qn.prototype, Jn);
  var ts = function (t, e, i) {
      return e.hasOwnProperty(t) ? e[t] : i[t];
    },
    es = Phaser.Utils.Objects.GetValue,
    is = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          (s = e.call(this, t, 'background')).setScrollFactor(0),
          s.setColor(es(n, 'color', null), es(n, 'color2', null), es(n, 'horizontalGradient', !0)),
          s.setStroke(es(n, 'stroke', null), es(n, 'strokeThickness', 2)),
          s.setCornerRadius(es(n, 'cornerRadius', 0), es(n, 'cornerIteration', null)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'color',
            get: function () {
              return this._color;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), this.setDirty(this._color != t), (this._color = t);
            },
          },
          {
            key: 'color2',
            get: function () {
              return this._color2;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), this.setDirty(this._color2 != t), (this._color2 = t);
            },
          },
          {
            key: 'horizontalGradient',
            get: function () {
              return this._horizontalGradient;
            },
            set: function (t) {
              this.setDirty(this._horizontalGradient != t), (this._horizontalGradient = t);
            },
          },
          {
            key: 'setColor',
            value: function (t, e, i) {
              return void 0 === i && (i = !0), (this.color = t), (this.color2 = e), (this.horizontalGradient = i), this;
            },
          },
          {
            key: 'stroke',
            get: function () {
              return this._stroke;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), this.setDirty(this._stroke != t), (this._stroke = t);
            },
          },
          {
            key: 'strokeThickness',
            get: function () {
              return this._strokeThickness;
            },
            set: function (t) {
              this.setDirty(this._strokeThickness != t), (this._strokeThickness = t);
            },
          },
          {
            key: 'setStroke',
            value: function (t, e) {
              return null != t && void 0 === e && (e = 2), (this.stroke = t), (this.strokeThickness = e), this;
            },
          },
          {
            key: 'cornerRadius',
            get: function () {
              return this._cornerRadius;
            },
            set: function (t) {
              this.setDirty(this._cornerRadius != t), (this._cornerRadius = t);
            },
          },
          {
            key: 'cornerIteration',
            get: function () {
              return this._cornerIteration;
            },
            set: function (t) {
              this.setDirty(this._cornerIteration != t), (this._cornerIteration = t);
            },
          },
          {
            key: 'modifyStyle',
            value: function (t) {
              return (
                t.hasOwnProperty('color') &&
                  this.setColor(t.color, ts('color2', t, this), ts('horizontalGradient', t, this)),
                t.hasOwnProperty('stroke') && this.setStroke(t.stroke, ts('strokeThickness', t, this)),
                t.hasOwnProperty('cornerRadius') &&
                  this.setCornerRadius(t.cornerRadius, ts('cornerIteration', t, this)),
                this
              );
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              return g(u(i.prototype), 'modifyPorperties', this).call(this, t), this.modifyStyle(t), this;
            },
          },
          {
            key: 'setCornerRadius',
            value: function (t, e) {
              return (this.cornerRadius = t), (this.cornerIteration = e), this;
            },
          },
          {
            key: 'renderContent',
            value: function () {
              Pe(
                this.parent,
                this.color,
                this.stroke,
                this.strokeThickness,
                this.cornerRadius,
                this.color2,
                this.horizontalGradient,
                this.cornerIteration
              );
            },
          },
        ]),
        i
      );
    })(Qn),
    ns = Phaser.Utils.Objects.GetValue,
    ss = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          (s = e.call(this, t, 'innerbounds')).setScrollFactor(0),
          s.setColor(ns(n, 'color', null), ns(n, 'color2', null), ns(n, 'horizontalGradient', !0)),
          s.setStroke(ns(n, 'stroke', null), ns(n, 'strokeThickness', 2)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'color',
            get: function () {
              return this._color;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), this.setDirty(this._color != t), (this._color = t);
            },
          },
          {
            key: 'color2',
            get: function () {
              return this._color2;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), this.setDirty(this._color2 != t), (this._color2 = t);
            },
          },
          {
            key: 'horizontalGradient',
            get: function () {
              return this._horizontalGradient;
            },
            set: function (t) {
              this.setDirty(this._horizontalGradient != t), (this._horizontalGradient = t);
            },
          },
          {
            key: 'setColor',
            value: function (t, e, i) {
              return void 0 === i && (i = !0), (this.color = t), (this.color2 = e), (this.horizontalGradient = i), this;
            },
          },
          {
            key: 'stroke',
            get: function () {
              return this._stroke;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)), this.setDirty(this._stroke != t), (this._stroke = t);
            },
          },
          {
            key: 'strokeThickness',
            get: function () {
              return this._strokeThickness;
            },
            set: function (t) {
              this.setDirty(this._strokeThickness != t), (this._strokeThickness = t);
            },
          },
          {
            key: 'setStroke',
            value: function (t, e) {
              return null != t && void 0 === e && (e = 2), (this.stroke = t), (this.strokeThickness = e), this;
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              g(u(i.prototype), 'modifyPorperties', this).call(this, t),
                t.hasOwnProperty('color') &&
                  this.setColor(t.color, ns(t, 'color2', null), ns(t, 'horizontalGradient', !0)),
                t.hasOwnProperty('stroke') && this.setStroke(t.stroke, ns(t, 'strokeThickness', 2));
            },
          },
          {
            key: 'renderContent',
            value: function () {
              var t = this.parent.padding,
                e = t.left,
                i = t.top,
                n = this.parent.width - t.left - t.right,
                s = this.parent.height - t.top - t.bottom,
                r = this.context;
              if (null != this.color) {
                var o, a;
                if (null != this.color2)
                  (a = this.horizontalGradient
                    ? r.createLinearGradient(0, 0, n, 0)
                    : r.createLinearGradient(0, 0, 0, s)).addColorStop(0, this.color),
                    a.addColorStop(1, this.color2),
                    (o = a);
                else o = this.color;
                (r.fillStyle = o), r.fillRect(e, i, n, s);
              }
              null != this.stroke &&
                this.strokeThickness > 0 &&
                ((r.strokeStyle = this.stroke), (r.lineWidth = this.strokeThickness), r.strokeRect(e, i, n, s));
            },
          },
        ]),
        i
      );
    })(Qn),
    rs = Phaser.Utils.Objects.GetValue,
    os = (function () {
      function t(e, i) {
        r(this, t), (this.parent = e), this.set(i);
      }
      return (
        a(t, [
          {
            key: 'toJSON',
            value: function () {
              return {
                bold: this.bold,
                italic: this.italic,
                fontSize: this.fontSize,
                fontFamily: this.fontFamily,
                color: this.color,
                stroke: this.stroke,
                strokeThickness: this.strokeThickness,
                shaodwColor: this.shadowColor,
                shadowBlur: this.shadowBlur,
                shadowOffsetX: this.shadowOffsetX,
                shadowOffsetY: this.shadowOffsetY,
                offsetX: this.offsetX,
                offsetY: this.offsetY,
                leftSpace: this.leftSpace,
                rightSpace: this.rightSpace,
                backgroundHeight: this.backgroundHeight,
                backgroundBottomY: this.backgroundBottomY,
                align: this.align,
              };
            },
          },
          {
            key: 'set',
            value: function (t) {
              return (
                this.setBold(rs(t, 'bold', !1)),
                this.setItalic(rs(t, 'italic', !1)),
                this.setFontSize(rs(t, 'fontSize', '16px')),
                this.setFontFamily(rs(t, 'fontFamily', 'Courier')),
                this.setColor(rs(t, 'color', '#fff')),
                this.setStrokeStyle(rs(t, 'stroke', null), rs(t, 'strokeThickness', 0)),
                this.setShadow(
                  rs(t, 'shadowColor', null),
                  rs(t, 'shadowOffsetX', 0),
                  rs(t, 'shadowOffsetY', 0),
                  rs(t, 'shadowBlur', 0)
                ),
                this.setOffset(rs(t, 'offsetX', 0), rs(t, 'offsetY', 0)),
                this.setSpace(rs(t, 'leftSpace', 0), rs(t, 'rightSpace', 0)),
                this.setAlign(rs(t, 'align', void 0)),
                this.setBackgroundColor(rs(t, 'backgroundColor', null)),
                this.setBackgroundHeight(rs(t, 'backgroundHeight', void 0)),
                this.setBackgroundBottomY(rs(t, 'backgroundBottomY', void 0)),
                this
              );
            },
          },
          {
            key: 'modify',
            value: function (t) {
              return (
                t.hasOwnProperty('bold') && this.setBold(t.bold),
                t.hasOwnProperty('italic') && this.setItalic(t.italic),
                t.hasOwnProperty('fontSize') && this.setFontSize(t.fontSize),
                t.hasOwnProperty('fontFamily') && this.setFontFamily(t.fontFamily),
                t.hasOwnProperty('color') && this.setColor(t.color),
                (t.hasOwnProperty('stroke') || t.hasOwnProperty('strokeThickness')) &&
                  this.setStrokeStyle(ts('stroke', t, this), ts('strokeThickness', t, this)),
                t.hasOwnProperty('shadowColor') && this.setShadowColor(t.shadowColor),
                (t.hasOwnProperty('shadowOffsetX') || t.hasOwnProperty('shadowOffsetY')) &&
                  this.setShadowOffset(ts('shadowOffsetX', t, this), ts('shadowOffsetY', t, this)),
                t.hasOwnProperty('shadowBlur') && this.setShadowBlur(t.shaodwBlur),
                t.hasOwnProperty('offsetX') && this.setOffsetX(t.offsetX),
                t.hasOwnProperty('offsetY') && this.setOffsetY(t.offsetY),
                t.hasOwnProperty('leftSpace') && this.setLeftSpace(t.leftSpace),
                t.hasOwnProperty('rightSpace') && this.setRightSpace(t.rightSpace),
                t.hasOwnProperty('align') && this.setAlign(t.align),
                t.hasOwnProperty('backgroundColor') && this.setBackgroundColor(t.backgroundColor),
                t.hasOwnProperty('backgroundHeight') && this.setBackgroundHeight(t.backgroundHeight),
                t.hasOwnProperty('backgroundBottomY') && this.setBackgroundBottomY(t.backgroundBottomY),
                this
              );
            },
          },
          {
            key: 'setUpdateTextFlag',
            value: function () {
              return this.parent && (this.parent.updateTextFlag = !0), this;
            },
          },
          {
            key: 'clone',
            value: function () {
              return new t(null, this.toJSON());
            },
          },
          {
            key: 'copyFrom',
            value: function (t) {
              return this.set(t.toJSON()), this;
            },
          },
          {
            key: 'copyTo',
            value: function (t) {
              return t.set(this.toJSON()), this;
            },
          },
          {
            key: 'setBold',
            value: function (t) {
              return void 0 === t && (t = !0), (this.bold = t), this.setUpdateTextFlag(), this;
            },
          },
          {
            key: 'setItalic',
            value: function (t) {
              return void 0 === t && (t = !0), (this.italic = t), this.setUpdateTextFlag(), this;
            },
          },
          {
            key: 'fontStyle',
            get: function () {
              return this.bold && this.italic ? 'bold italic' : this.bold ? 'bold' : this.italic ? 'italic' : '';
            },
          },
          {
            key: 'setFontSize',
            value: function (t) {
              return (
                'number' == typeof t && (t = ''.concat(t, 'px')), (this.fontSize = t), this.setUpdateTextFlag(), this
              );
            },
          },
          {
            key: 'setFontFamily',
            value: function (t) {
              return (this.fontFamily = t), this.setUpdateTextFlag(), this;
            },
          },
          {
            key: 'font',
            get: function () {
              return ''.concat(this.fontStyle, ' ').concat(this.fontSize, ' ').concat(this.fontFamily);
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return (this.color = me(t)), this;
            },
          },
          {
            key: 'hasFill',
            get: function () {
              return null != this.color;
            },
          },
          {
            key: 'setStrokeStyle',
            value: function (t, e) {
              return (this.stroke = me(t)), void 0 !== e && (this.strokeThickness = e), this;
            },
          },
          {
            key: 'setStrokeThickness',
            value: function (t) {
              return (this.strokeThickness = t), this;
            },
          },
          {
            key: 'hasStroke',
            get: function () {
              return null != this.stroke && this.strokeThickness > 0;
            },
          },
          {
            key: 'setShadowColor',
            value: function (t) {
              return (this.shadowColor = me(t)), this;
            },
          },
          {
            key: 'setShadowOffset',
            value: function (t, e) {
              return (
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                (this.shadowOffsetX = t),
                (this.shadowOffsetY = e),
                this
              );
            },
          },
          {
            key: 'setShadowBlur',
            value: function (t) {
              return void 0 === t && (t = 0), (this.shaodwBlur = t), this;
            },
          },
          {
            key: 'setShadow',
            value: function (t, e, i, n) {
              return this.setShadowColor(t).setShadowOffset(e, i).setShadowBlur(n), this;
            },
          },
          {
            key: 'setBackgroundColor',
            value: function (t) {
              return (this.backgroundColor = me(t)), this;
            },
          },
          {
            key: 'hasBackgroundColor',
            get: function () {
              return null != this.backgroundColor;
            },
          },
          {
            key: 'setBackgroundHeight',
            value: function (t) {
              return (this.backgroundHeight = t), this;
            },
          },
          {
            key: 'setBackgroundBottomY',
            value: function (t) {
              return (this.backgroundBottomY = t), this;
            },
          },
          {
            key: 'setOffsetX',
            value: function (t) {
              return void 0 === t && (t = 0), (this.offsetX = t), this;
            },
          },
          {
            key: 'setOffsetY',
            value: function (t) {
              return void 0 === t && (t = 0), (this.offsetY = t), this;
            },
          },
          {
            key: 'setOffset',
            value: function (t, e) {
              return this.setOffsetX(t).setOffsetY(e), this;
            },
          },
          {
            key: 'setLeftSpace',
            value: function (t) {
              return void 0 === t && (t = 0), (this.leftSpace = t), this;
            },
          },
          {
            key: 'setRightSpace',
            value: function (t) {
              return void 0 === t && (t = 0), (this.rightSpace = t), this;
            },
          },
          {
            key: 'setSpace',
            value: function (t, e) {
              return this.setLeftSpace(t).setRightSpace(e), this;
            },
          },
          {
            key: 'setAlign',
            value: function (t) {
              return (this.align = t), this;
            },
          },
          {
            key: 'syncFont',
            value: function (t) {
              return (t.font = this.font), this;
            },
          },
          {
            key: 'syncStyle',
            value: function (t) {
              t.textBaseline = 'alphabetic';
              var e = this.hasFill,
                i = this.hasStroke;
              return (
                (t.fillStyle = e ? this.color : '#000'),
                (t.strokeStyle = i ? this.stroke : '#000'),
                (t.lineWidth = i ? this.strokeThickness : 0),
                (t.lineCap = 'round'),
                (t.lineJoin = 'round'),
                this
              );
            },
          },
          {
            key: 'syncShadow',
            value: function (t) {
              null != t.shadowColor
                ? ((t.shadowColor = this.shadowColor),
                  (t.shadowOffsetX = this.shadowOffsetX),
                  (t.shadowOffsetY = this.shadowOffsetY),
                  (t.shadowBlur = this.shadowBlur))
                : ((t.shadowColor = 0), (t.shadowOffsetX = 0), (t.shadowOffsetY = 0), (t.shadowBlur = 0));
            },
          },
          {
            key: 'getTextMetrics',
            value: function (t, e) {
              return this.syncFont(t).syncStyle(t), t.measureText(e);
            },
          },
        ]),
        t
      );
    })(),
    as = Phaser.Utils.Array.Remove,
    hs = Phaser.Utils.Array.Remove,
    ls = 'text',
    us = 'image',
    cs = 'drawer',
    ds = 'space',
    fs = 'command',
    ps = function (t) {
      return t.type === ls && '\n' === t.text;
    },
    vs = function (t) {
      return t.type === ls && '\f' === t.text;
    },
    gs = function (t) {
      return t.type === ls;
    },
    ys = function (t) {
      return t.type === fs;
    },
    ks = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        var o;
        return (
          r(this, i), ((o = e.call(this, t, ls)).updateTextFlag = !1), (o.style = new os(d(o), s)), o.setText(n), o
        );
      }
      return (
        a(i, [
          {
            key: 'autoRound',
            get: function () {
              return this.parent.autoRound;
            },
          },
          {
            key: 'offsetX',
            get: function () {
              return this.style.offsetX;
            },
            set: function (t) {
              this.style && (this.style.offsetX = t);
            },
          },
          {
            key: 'offsetY',
            get: function () {
              return this.style.offsetY;
            },
            set: function (t) {
              this.style && (this.style.offsetY = t);
            },
          },
          {
            key: 'leftSpace',
            get: function () {
              return this.style.leftSpace * this.scaleX;
            },
            set: function (t) {
              this.style && (this.style.leftSpace = t), k(u(i.prototype), 'leftSpace', t, this, !0);
            },
          },
          {
            key: 'rightSpace',
            get: function () {
              return this.style.rightSpace * this.scaleX;
            },
            set: function (t) {
              this.style && (this.style.rightSpace = t), k(u(i.prototype), 'rightSpace', t, this, !0);
            },
          },
          {
            key: 'align',
            get: function () {
              return this.style.align;
            },
            set: function (t) {
              this.style && (this.style.align = t);
            },
          },
          {
            key: 'modifyStyle',
            value: function (t) {
              return this.setDirty(!0), this.style.modify(t), this.updateTextFlag && this.updateTextSize(), this;
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              return t ? (this.modifyStyle(t), g(u(i.prototype), 'modifyPorperties', this).call(this, t), this) : this;
            },
          },
          {
            key: 'setText',
            value: function (t) {
              return this.setDirty(this.text != t), (this.text = t), this.updateTextSize(), this;
            },
          },
          {
            key: 'updateTextSize',
            value: function () {
              var t = this.text;
              if ('\n' === t || '\f' === t || '' === t) this.clearTextSize();
              else {
                var e,
                  i,
                  n = this.style.getTextMetrics(this.context, this.text);
                (this.textWidth = n.width),
                  'actualBoundingBoxAscent' in n
                    ? ((e = n.actualBoundingBoxAscent), (i = n.actualBoundingBoxDescent))
                    : ((e = 0), (i = 0)),
                  (this.textHeight = e + i),
                  (this.ascent = e),
                  (this.descent = i);
              }
              return (this.updateTextFlag = !1), this;
            },
          },
          {
            key: 'clearTextSize',
            value: function () {
              return (this.textWidth = 0), (this.textHeight = 0), (this.ascent = 0), (this.descent = 0), this;
            },
          },
          {
            key: 'copyTextSize',
            value: function (t) {
              return (
                (this.textWidth = t.textWidth),
                (this.textHeight = t.textHeight),
                (this.ascent = t.ascent),
                (this.descent = t.descent),
                this
              );
            },
          },
          {
            key: 'width',
            get: function () {
              return this.textWidth * this.scaleX;
            },
            set: function (t) {
              this.textWidth > 0 ? (this.scaleX = t / this.textWidth) : (this.scaleX = 1);
            },
          },
          {
            key: 'height',
            get: function () {
              return this.textHeight * this.scaleY;
            },
            set: function (t) {
              this.textHeight > 0 ? (this.scaleY = t / this.textHeight) : (this.scaleY = 1);
            },
          },
          {
            key: 'willRender',
            get: function () {
              return 0 !== this.textWidth && g(u(i.prototype), 'willRender', this);
            },
          },
          {
            key: 'renderContent',
            value: function () {
              var t = this.context,
                e = this.style;
              if (e.hasBackgroundColor) {
                t.fillStyle = e.backgroundColor;
                var i = this.drawTLX,
                  n = this.drawTRX - i,
                  s = e.backgroundBottomY;
                null == s && (s = this.drawBLY);
                var r = e.backgroundHeight;
                null == r && (r = s - this.drawTLY);
                var o = s - r;
                t.fillRect(i, o, n, r);
              }
              var a = e.hasFill,
                h = e.hasStroke;
              (a || h) &&
                (e.syncFont(t).syncStyle(t),
                h && (e.syncShadow(t), t.strokeText(this.text, 0, 0)),
                a && (e.syncShadow(t), t.fillText(this.text, 0, 0)));
            },
          },
          {
            key: 'drawTLX',
            get: function () {
              return -this.leftSpace;
            },
          },
          {
            key: 'drawTLY',
            get: function () {
              return -this.ascent;
            },
          },
          {
            key: 'drawBLX',
            get: function () {
              return -this.leftSpace;
            },
          },
          {
            key: 'drawBLY',
            get: function () {
              return this.descent;
            },
          },
          {
            key: 'drawTRX',
            get: function () {
              return this.textWidth + this.rightSpace;
            },
          },
          {
            key: 'drawTRY',
            get: function () {
              return -this.ascent;
            },
          },
          {
            key: 'drawBRX',
            get: function () {
              return this.textWidth + this.rightSpace;
            },
          },
          {
            key: 'drawBRY',
            get: function () {
              return this.descent;
            },
          },
        ]),
        i
      );
    })(Qn),
    ms = function (t, e) {
      var i = this.createCharChildren(t, e);
      return this.addChild(i), this;
    };
  Phaser.Display.Canvas.CanvasPool;
  var bs = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        var o;
        return r(this, i), (o = e.call(this, t, us)).setTexture(n, s), (o.color = void 0), o;
      }
      return (
        a(i, [
          {
            key: 'frameWidth',
            get: function () {
              return this.frameObj ? this.frameObj.cutWidth : 0;
            },
          },
          {
            key: 'frameHeight',
            get: function () {
              return this.frameObj ? this.frameObj.cutHeight : 0;
            },
          },
          {
            key: 'offsetY',
            get: function () {
              return -this.height;
            },
            set: function (t) {},
          },
          {
            key: 'key',
            get: function () {
              return this._key;
            },
            set: function (t) {
              this.setDirty(this._key != t), (this._key = t);
            },
          },
          {
            key: 'frame',
            get: function () {
              return this._frame;
            },
            set: function (t) {
              this.setDirty(this._frame != t), (this._frame = t);
            },
          },
          {
            key: 'setTexture',
            value: function (t, e) {
              return (this.key = t), (this.frame = e), (this.frameObj = this.scene.sys.textures.getFrame(t, e)), this;
            },
          },
          {
            key: 'width',
            get: function () {
              return this.frameWidth * this.scaleX;
            },
            set: function (t) {
              this.setDirty(this.width !== t), (this.scaleX = t / this.frameWidth);
            },
          },
          {
            key: 'height',
            get: function () {
              return this.frameHeight * this.scaleY;
            },
            set: function (t) {
              this.setDirty(this.height !== t), (this.scaleY = t / this.frameHeight);
            },
          },
          {
            key: 'setHeight',
            value: function (t, e) {
              return void 0 === e && (e = !1), (this.height = t), e && (this.scaleX = this.scaleY), this;
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return (this.color = t), this;
            },
          },
          {
            key: 'modifyPorperties',
            value: function (t) {
              return (
                t.hasOwnProperty('color') && this.setColor(t.color),
                g(u(i.prototype), 'modifyPorperties', this).call(this, t),
                this
              );
            },
          },
          {
            key: 'renderContent',
            value: function () {
              _i(this.frameObj, this.canvas, 0, 0, this.frameWidth, this.frameHeight, this.color, !1);
            },
          },
          {
            key: 'drawTLX',
            get: function () {
              return -this.leftSpace;
            },
          },
          {
            key: 'drawTLY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawBLX',
            get: function () {
              return -this.leftSpace;
            },
          },
          {
            key: 'drawBLY',
            get: function () {
              return this.frameHeight;
            },
          },
          {
            key: 'drawTRX',
            get: function () {
              return this.frameWidth + this.rightSpace;
            },
          },
          {
            key: 'drawTRY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawBRX',
            get: function () {
              return this.frameWidth + this.rightSpace;
            },
          },
          {
            key: 'drawBRY',
            get: function () {
              return this.frameHeight;
            },
          },
        ]),
        i
      );
    })(Qn),
    xs = function (t, e, i) {
      var n = this.createImageChild(t, e, i);
      return this.addChild(n), this;
    },
    Cs = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o) {
        var a;
        return r(this, i), (a = e.call(this, t, cs)).setRenderCallback(n), a.setDrawerSize(s, o), a;
      }
      return (
        a(i, [
          {
            key: 'setRenderCallback',
            value: function (t) {
              return t ? (this.renderContent = t.bind(this)) : delete this.renderContent, this;
            },
          },
          {
            key: 'setDrawerSize',
            value: function (t, e) {
              return (
                !0 === t ? ((this.toLocalPosition = !1), (t = void 0), (e = void 0)) : (this.toLocalPosition = !0),
                void 0 === t && (t = 0),
                void 0 === e && (e = t),
                (this.drawerWidth = t),
                (this.drawerHeight = e),
                this
              );
            },
          },
          {
            key: 'onFree',
            value: function () {
              g(u(i.prototype), 'onFree', this).call(this), this.setRenderCallback();
            },
          },
          {
            key: 'width',
            get: function () {
              return this.drawerWidth * this.scaleX;
            },
            set: function (t) {
              this.setDirty(this.width !== t), (this.scaleX = this.drawerWidth > 0 ? t / this.drawerWidth : 1);
            },
          },
          {
            key: 'height',
            get: function () {
              return this.drawerHeight * this.scaleY;
            },
            set: function (t) {
              this.setDirty(this.height !== t), (this.scaleY = this.drawerHeight > 0 ? t / this.drawerHeight : 1);
            },
          },
          {
            key: 'offsetY',
            get: function () {
              return -this.height;
            },
            set: function (t) {},
          },
          {
            key: 'drawTLX',
            get: function () {
              return -this.leftSpace;
            },
          },
          {
            key: 'drawTLY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawBLX',
            get: function () {
              return -this.leftSpace;
            },
          },
          {
            key: 'drawBLY',
            get: function () {
              return this.drawerHeight;
            },
          },
          {
            key: 'drawTRX',
            get: function () {
              return this.drawerWidth + this.rightSpace;
            },
          },
          {
            key: 'drawTRY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'drawBRX',
            get: function () {
              return this.drawerWidth + this.rightSpace;
            },
          },
          {
            key: 'drawBRY',
            get: function () {
              return this.drawerHeight;
            },
          },
        ]),
        i
      );
    })(Qn),
    ws = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, ds)).setSpaceWidth(n), s;
      }
      return (
        a(i, [
          {
            key: 'width',
            get: function () {
              return this.spaceWidth * this.scaleX;
            },
            set: function (t) {
              this.spaceWidth > 0 ? (this.scaleX = t / this.spaceWidth) : (this.scaleX = 1);
            },
          },
          {
            key: 'setSpaceWidth',
            value: function (t) {
              return (this.spaceWidth = t), this;
            },
          },
        ]),
        i
      );
    })(Qn),
    Ss = function (t) {
      var e = this.createSpaceChild(t);
      return this.addChild(e), this;
    },
    Ps = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a) {
        var h;
        return r(this, i), (h = e.call(this, t, fs)).setName(n).setParameter(o).setCallback(s, a), h;
      }
      return (
        a(i, [
          {
            key: 'setName',
            value: function (t) {
              return (this.name = t), this;
            },
          },
          {
            key: 'setParameter',
            value: function (t) {
              return (this.param = t), this;
            },
          },
          {
            key: 'setCallback',
            value: function (t, e) {
              return (this.callback = t), (this.scope = e), this;
            },
          },
          {
            key: 'exec',
            value: function () {
              return this.scope
                ? this.callback.call(this.scope, this.param, this.name)
                : this.callback(this.param, this.name);
            },
          },
          {
            key: 'onFree',
            value: function () {
              g(u(i.prototype), 'onFree', this).call(this), this.setName().setCallback().setParameter();
            },
          },
        ]),
        i
      );
    })(Bn),
    Ts = function (t, e, i, n) {
      var s = this.createCommandChild(t, e, i, n);
      return this.addChild(s), this;
    },
    Os = function (t) {
      var e = {
        callback: void 0,
        start: 0,
        isLastPage: !1,
        maxLines: void 0,
        padding: void 0,
        letterSpacing: void 0,
        hAlign: void 0,
        vAlign: void 0,
        children: [],
        lines: [],
        maxLineWidth: 0,
        linesHeight: 0,
        lineHeight: void 0,
        maxLineHeight: 0,
        linesWidth: 0,
        lineWidth: void 0,
      };
      return Object.assign(e, t);
    },
    Ms = function (t, e, i, n) {
      void 0 === n && (n = { word: [], width: 0 }), (n.word.length = 0);
      for (var s = t.length, r = e, o = n.word, a = 0; r < s; ) {
        var h = t[r];
        if (h.renderable) {
          var l = h.type === ls ? h.text : null;
          if (null === l || ' ' === l || '\n' === l || '\f' === l) {
            r === e && (o.push(h), (a += h.outerWidth));
            break;
          }
          if ((o.push(h), (a += h.outerWidth), r++, i)) break;
        } else o.push(h), r++;
      }
      return (n.width = a), n;
    },
    Es = function (t) {
      for (var e = 0, i = t.length; e < i; e++) {
        var n = t[e];
        if (void 0 !== n.align) return n.align;
      }
    },
    _s = function (t, e, i) {
      if (0 !== e || 0 !== i)
        for (var n = 0, s = t.length; n < s; n++) {
          var r = t[n];
          r.renderable && ((r.x += e), (r.y += i));
        }
    },
    Rs = function () {
      var t,
        e,
        i = this.defaultTextStyle.getTextMetrics(this.context, this.testString);
      return (
        'actualBoundingBoxAscent' in i
          ? ((t = i.actualBoundingBoxAscent), (e = i.actualBoundingBoxDescent))
          : ((t = 0), (e = 0)),
        (Ls.ascent = t),
        (Ls.descent = e),
        (Ls.height = t + e),
        Ls
      );
    },
    Ls = {},
    Bs = Phaser.Utils.Objects.GetValue,
    Ds = function (t) {
      var e = Bs(t, 'start', 0);
      Ln(this.wrapPadding, Bs(t, 'padding', 0));
      var i,
        n = this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom,
        s = this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right,
        r = Bs(t, 'lineHeight'),
        o = Bs(t, 'ascent', r);
      if (void 0 === r) {
        var a = Bs(t, 'useDefaultTextHeight', !1);
        if (((i = Bs(t, 'maxLines', 0)), this.fixedHeight > 0 && !a)) {
          var h = this.fixedHeight - n;
          if (i > 0) r = h / i;
          else (r = (l = Rs.call(this)).height), (o = l.ascent), (i = Math.floor((h - o) / r));
        } else {
          var l;
          (r = (l = Rs.call(this)).height), (o = l.ascent);
        }
      } else if (this.fixedHeight > 0) {
        if (void 0 === (i = Bs(t, 'maxLines'))) {
          h = this.fixedHeight - n;
          i = Math.floor(h / r);
        }
      } else i = Bs(t, 'maxLines', 0);
      void 0 === o && (o = r);
      var u = 0 === i,
        c = Bs(t, 'wrapWidth', void 0);
      void 0 === c && (c = this.fixedWidth > 0 ? this.fixedWidth - s : 1 / 0);
      for (
        var d = Bs(t, 'letterSpacing', 0),
          f = Bs(t, 'hAlign', 0),
          p = Bs(t, 'vAlign', 0),
          v = Bs(t, 'charWrap', !1),
          g = Os({
            callback: 'runWordWrap',
            start: e,
            padding: this.wrapPadding,
            letterSpacing: d,
            maxLines: i,
            hAlign: f,
            vAlign: p,
            ascent: o,
            lineHeight: r,
            wrapWidth: c,
            charWrap: v,
          }),
          y = this.children,
          k = 0,
          m = y.length;
        k < m;
        k++
      )
        y[k].setActive(!1);
      c += d;
      for (
        var b,
          x = this.padding.left + this.wrapPadding.left,
          C = x,
          w = this.padding.top + this.wrapPadding.top + o,
          S = c,
          P = e,
          T = y.length,
          O = g.children,
          M = g.lines,
          E = [],
          _ = 0,
          R = 0,
          L = !1;
        P < T;

      ) {
        var B = (b = Ms(y, P, v, b)).word,
          D = B.length,
          I = b.width + D * d;
        P += D;
        var j = ps(B[0]);
        L = vs(B[0]);
        var A = j || L;
        if (S < I || A) {
          if (A) {
            var z = B[0];
            z.setActive().setPosition(C, w), O.push(z), E.push(z);
          }
          if (
            ((C = x),
            (w += r),
            (S = c),
            M.push({ children: E, width: _ }),
            (R = Math.max(R, _)),
            (_ = 0),
            (E = []),
            L || (!u && M.length === i))
          )
            break;
          if (A) continue;
        }
        (S -= I), (_ += I);
        for (k = 0, m = B.length; k < m; k++) {
          (W = B[k]).setActive(), O.push(W), E.push(W), W.renderable && (W.setPosition(C, w), (C += W.outerWidth + d));
        }
      }
      E.length > 0 && (M.push({ children: E, width: _ }), (R = Math.max(R, _))),
        (g.start += O.length),
        (g.isLastPage = !L && g.start === T),
        (g.maxLineWidth = R),
        (g.linesHeight = M.length * r);
      var F = this.fixedWidth > 0 ? this.fixedWidth : g.maxLineWidth + s,
        V = this.fixedHeight > 0 ? this.fixedHeight : g.linesHeight + n;
      !(function (t, e, i) {
        var n,
          s,
          r = t.hAlign,
          o = t.vAlign,
          a = t.linesHeight;
        switch (o) {
          case 1:
          case 'center':
            s = (i - a) / 2;
            break;
          case 2:
          case 'bottom':
            s = i - a;
            break;
          default:
            s = 0;
        }
        for (var h = t.lines, l = 0, u = h.length; l < u; l++) {
          var c = h[l],
            d = c.width,
            f = c.children,
            p = Es(f);
          switch ((void 0 === p && (p = r), p)) {
            case 1:
            case 'center':
              n = (e - d) / 2;
              break;
            case 2:
            case 'right':
              n = e - d;
              break;
            default:
              n = 0;
          }
          _s(f, n, s);
        }
      })(g, F - s, (h = V - n)),
        this.setCanvasSize(F, V);
      for (k = 0, m = O.length; k < m; k++) {
        var W;
        (W = O[k]).renderable && ((W.x0 = W.x), (W.y0 = W.y));
      }
      return g;
    },
    Is = Phaser.Utils.Objects.Merge,
    js = Phaser.Utils.Objects.GetValue,
    As = function (t) {
      var e = js(t, 'start', 0);
      Ln(this.wrapPadding, js(t, 'padding', 0));
      var i,
        n = this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom,
        s = this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right,
        r = js(t, 'lineWidth', void 0);
      if (void 0 === r) (i = js(t, 'maxLines', 0)), (r = this.fixedWidth > 0 ? (o = this.fixedWidth - s) / i : 0);
      else if (this.fixedWidth > 0) {
        if (void 0 === (i = js(t, 'maxLines', void 0))) {
          var o = this.fixedWidth - s;
          i = Math.floor(o / r) + 1;
        }
      } else i = js(t, 'maxLines', 0);
      var a = 0 === i,
        h = js(t, 'fixedCharacterHeight', void 0);
      if (void 0 === h) {
        var l = js(t, 'charPerLine', void 0);
        if (void 0 !== l) {
          var u = this.fixedHeight - n;
          h = Math.floor(u / l);
        }
      }
      var c = js(t, 'wrapHeight', void 0);
      void 0 === c && (c = this.fixedHeight > 0 ? this.fixedHeight - n : 1 / 0);
      for (
        var d = js(t, 'letterSpacing', 0),
          f = js(t, 'rtl', !0),
          p = js(t, 'hAlign', f ? 2 : 0),
          v = js(t, 'vAlign', 0),
          g = Os({
            callback: 'runVerticalWrap',
            start: e,
            padding: this.wrapPadding,
            letterSpacing: d,
            maxLines: i,
            hAlign: p,
            vAlign: v,
            lineWidth: r,
            fixedCharacterHeight: h,
            wrapHeight: c,
            rtl: f,
          }),
          y = this.children,
          k = 0,
          m = y.length;
        k < m;
        k++
      )
        y[k].setActive(!1);
      c += d;
      for (
        var b = this.padding.left + this.wrapPadding.left,
          x = this.padding.top + this.wrapPadding.top,
          C = b,
          w = x,
          S = c,
          P = e,
          T = y.length,
          O = g.children,
          M = g.lines,
          E = [],
          _ = 0,
          R = 0;
        P < T;

      ) {
        var L = y[P];
        if ((P++, L.renderable)) {
          var B = (void 0 !== h ? h : L.height) + d,
            D = ps(L),
            I = vs(L),
            j = D || I;
          if (S < B || j) {
            if (
              (D && (L.setActive().setPosition(C, w).setOrigin(0.5), O.push(L), E.push(L)),
              (C = b),
              (w = x),
              (S = c),
              M.push({ children: E, height: _ }),
              (R = Math.max(R, _)),
              (_ = 0),
              (E = []),
              I || (!a && M.length === i))
            )
              break;
            if (j) continue;
          }
          (S -= B), (_ += B), L.setActive().setPosition(C, w).setOrigin(0.5), O.push(L), E.push(L), (w += B);
        } else L.setActive(), O.push(L), E.push(L);
      }
      E.length > 0 && (M.push({ children: E, height: _ }), (R = Math.max(R, _))),
        (g.start += O.length),
        (g.isLastPage = g.start === T),
        (g.maxLineHeight = R),
        (g.linesWidth = M.length * r);
      var A = this.fixedWidth > 0 ? this.fixedWidth : g.linesWidth + s,
        z = this.fixedHeight > 0 ? this.fixedHeight : g.maxLineHeight + n;
      !(function (t, e, i) {
        var n,
          s,
          r = t.hAlign,
          o = t.vAlign,
          a = t.rtl,
          h = t.lines,
          l = t.lineWidth,
          u = t.linesWidth;
        switch (r) {
          case 1:
          case 'center':
            n = (e - u) / 2;
            break;
          case 2:
          case 'right':
            n = e - u;
            break;
          default:
            n = 0;
        }
        a && (n += l);
        for (var c = 0, d = h.length; c < d; c++) {
          var f = h[a ? d - c - 1 : c],
            p = f.children,
            v = f.height,
            g = Es(p);
          switch ((void 0 === g && (g = o), g)) {
            case 1:
            case 'center':
              s = (i - v) / 2;
              break;
            case 2:
            case 'bottom':
              s = i - v;
              break;
            default:
              s = 0;
          }
          _s(p, n, s), (n += l);
        }
      })(g, (o = A - s), (u = z - n)),
        this.setCanvasSize(A, z);
      for (k = 0, m = O.length; k < m; k++) {
        (L = O[k]).renderable && ((L.x0 = L.x), (L.y0 = L.y));
      }
      return g;
    },
    zs = Phaser.Utils.Objects.Merge,
    Fs = Phaser.Utils.Objects.GetValue,
    Vs = Phaser.Utils.Array.GetAll,
    Ws = Phaser.Math.Distance.BetweenPointsSquared,
    Ys = function (t, e, i) {
      for (var n = 0, s = (t = t).length; n < s; n++) {
        var r = t[n];
        if (r.active && r.renderable && r.contains(e, i)) return r;
      }
      return null;
    },
    Xs = function () {
      return (
        this.on('pointerdown', Gs, this)
          .on('pointerdown', Hs, this)
          .on('pointermove', Us, this)
          .on('pointerover', Us, this)
          .on(
            'pointerout',
            function (t, e) {
              Us.call(this, t, null, null, e);
            },
            this
          ),
        this
      );
    },
    Gs = function (t, e, i, n) {
      if (this.childrenInteractiveEnable) {
        var s = Ys(this.children, e, i);
        s && this.emit('child.pointerdown', s, t, e, i, n);
      }
    },
    Hs = function (t, e, i, n) {
      if (this.childrenInteractiveEnable) {
        var s = Ys(this.children, e, i);
        s && this.emit('child.pointerup', s, t, e, i, n);
      }
    },
    Us = function (t, e, i, n) {
      if (this.childrenInteractiveEnable)
        if (null !== e) {
          var s = Ys(this.children, e, i);
          s !== this.lastOverChild &&
            (null !== this.lastOverChild && this.emit('child.pointerout', this.lastOverChild, t, e, i, n),
            null !== s && this.emit('child.pointerover', s, t, e, i, n),
            (this.lastOverChild = s));
        } else
          null !== this.lastOverChild &&
            (this.emit('child.pointerout', this.lastOverChild, t, e, i, n), (this.lastOverChild = null));
    },
    Ns = Phaser.GameObjects.GameObject,
    Ks = Phaser.Utils.Array.BringToTop,
    Js = Phaser.Utils.Array.SendToBack,
    qs = Phaser.Utils.Array.MoveUp,
    Zs = Phaser.Utils.Array.MoveDown,
    $s = Phaser.Utils.Array.MoveAbove,
    Qs = Phaser.Utils.Array.MoveBelow,
    tr = {
      moveChildToFist: function (t) {
        return Js(this.children, t), this;
      },
      moveChildToLast: function (t) {
        return Ks(this.children, t), this;
      },
      movechildUp: function (t) {
        return qs(this.children, t), this;
      },
      movechildDown: function (t) {
        return Zs(this.children, t), this;
      },
      movechildAbove: function (t, e) {
        return $s(this.children, t, e), this;
      },
      movechildBelow: function (t, e) {
        return Qs(this.children, t, e), this;
      },
    },
    er = {
      setFixedSize: function (t, e) {
        return (
          void 0 === t && (t = 0),
          void 0 === e && (e = 0),
          (this.fixedWidth === t && this.fixedHeight === e) ||
            ((this.fixedWidth = t),
            (this.fixedHeight = e),
            (this.dirty = !0),
            this.setCanvasSize(t > 0 ? t : this.width, e > 0 ? e : this.height)),
          this
        );
      },
      setPadding: function (t, e) {
        var i = this.padding,
          n = i.left,
          s = i.right,
          r = i.top,
          o = i.bottom;
        return (
          Ln(i, t, e), (this.dirty = this.dirty || n != i.left || s != i.right || r != i.top || o != i.bottom), this
        );
      },
      getPadding: function (t) {
        return Rn(this.padding, t);
      },
      modifyTextStyle: function (t) {
        return this.textStyle.modify(t), this;
      },
      modifyDefaultTextStyle: function (t) {
        return this.defaultTextStyle.modify(t), this;
      },
      resetTextStyle: function () {
        return this.textStyle.copyFrom(this.defaultTextStyle), this;
      },
      setTestString: function (t) {
        return (this.testString = t), this;
      },
      removeChild: function (t) {
        return (
          this.poolManager.free(t),
          as(this.children, t),
          (this.lastAppendedChildren.length = 0),
          (this.lastOverChild = null),
          (this.dirty = !0),
          this
        );
      },
      removeChildren: function () {
        return (
          this.poolManager.freeMultiple(this.children),
          (this.children.length = 0),
          (this.lastAppendedChildren.length = 0),
          (this.lastOverChild = null),
          (this.dirty = !0),
          this
        );
      },
      popChild: function (t) {
        return (
          hs(this.children, t),
          (this.lastAppendedChildren.length = 0),
          (this.lastOverChild = null),
          (this.dirty = !0),
          this
        );
      },
      clearContent: function () {
        return this.setText(), this;
      },
      addChild: function (t, e) {
        var i,
          n,
          s,
          r = Array.isArray(t);
        void 0 === e || e === this.children.length
          ? r
            ? (i = this.children).push.apply(i, x(t))
            : this.children.push(t)
          : r
          ? (n = this.children).splice.apply(n, [e, 0].concat(x(t)))
          : this.children.splice(e, 0, t);
        ((this.lastAppendedChildren.length = 0), r)
          ? (s = this.lastAppendedChildren).push.apply(s, x(t))
          : this.lastAppendedChildren.push(t);
        return this;
      },
      createCharChild: function (t, e) {
        e && this.textStyle.modify(e);
        var i = this.poolManager.allocate(ls);
        return (
          null === i
            ? (i = new ks(this, t, this.textStyle))
            : i.setParent(this).setActive().modifyStyle(this.textStyle).setText(t),
          i
        );
      },
      createCharChildren: function (t, e) {
        e && this.textStyle.modify(e);
        for (var i = [], n = 0, s = t.length; n < s; n++) {
          var r = t.charAt(n),
            o = this.poolManager.allocate(ls);
          null === o
            ? (o = new ks(this, r, this.textStyle))
            : o.setParent(this).setActive().modifyStyle(this.textStyle).setText(r),
            i.push(o);
        }
        return i;
      },
      setText: function (t, e) {
        return void 0 === t && (t = ''), this.removeChildren(), ms.call(this, t, e), (this.dirty = !0), this;
      },
      appendText: ms,
      insertText: function (t, e, i) {
        var n = this.createCharChildren(e, i);
        return (t = this.getCharChildIndex(t, !0)), this.addChild(n, t), this;
      },
      removeText: function (t, e) {
        void 0 === e && (e = 1);
        for (var i = 0; i < e; i++) {
          var n = this.getCharChildIndex(t, !0);
          if (void 0 === n) break;
          this.removeChild(this.children[n]);
        }
        return this;
      },
      getText: function (t) {
        var e = '';
        return (
          this.forEachCharChild(
            function (t) {
              e += t.text;
            },
            void 0,
            t
          ),
          e
        );
      },
      createImageChild: function (t, e, i) {
        var n = this.poolManager.allocate(us);
        return (
          null === n ? (n = new bs(this, t, e)) : n.setParent(this).setActive().setTexture(t, e),
          n.modifyPorperties(i),
          n
        );
      },
      appendImage: xs,
      createDrawerChild: function (t, e, i) {
        var n = this.poolManager.allocate(cs);
        return (
          null === n
            ? (n = new Cs(this, t, e, i))
            : n.setParent(this).setActive().setRenderCallback(t).setDrawerSize(e, i),
          n
        );
      },
      appendDrawer: function (t, e, i) {
        var n = this.createDrawerChild(t, e, i);
        return this.addChild(n), this;
      },
      createSpaceChild: function (t) {
        var e = this.poolManager.allocate(ds);
        return null === e ? (e = new ws(this, t)) : e.setParent(this).setActive().setSpaceWidth(t), e;
      },
      appendSpace: Ss,
      createCommandChild: function (t, e, i, n) {
        var s = this.poolManager.allocate(fs);
        return (
          null === s
            ? (s = new Ps(this, t, e, i, n))
            : s.setParent(this).setActive().setName(t).setCallback(e, n).setParameter(i),
          s
        );
      },
      appendCommand: Ts,
      setWrapConfig: function (t) {
        return void 0 === t ? (t = {}) : 'object' === n(t) && (t = _(t)), (this.wrapConfig = t), this;
      },
      runWordWrap: function (t) {
        return void 0 === t && (t = {}), Ds.call(this, Is(t, this.wrapConfig));
      },
      runVerticalWrap: function (t) {
        return void 0 === t && (t = {}), As.call(this, zs(t, this.wrapConfig));
      },
      runWrap: function (t) {
        var e = Fs(this.wrapConfig, 'callback');
        return e || (e = Fs(t, 'callback', this.runWordWrap)), 'string' == typeof e && (e = this[e]), e.call(this, t);
      },
      renderContent: function () {
        var t;
        this.clear(), this.setCanvasSize(this.width, this.height), this.background.active && this.background.render();
        for (var e = 0, i = this.children.length; e < i; e++) (t = this.children[e]).active && t.render();
        this.innerBounds.active && this.innerBounds.render();
      },
      forEachChild: function (t, e, i) {
        void 0 === i && (i = !0);
        for (var n = this.children, s = 0, r = 0, o = n.length; r < o; r++) {
          var a,
            h = n[r];
          if (!i || h.active) if (((a = e ? t.call(this, h, s, n) : t(h, s, n)), s++, a)) break;
        }
        return this;
      },
      forEachRenderableChild: function (t, e, i) {
        void 0 === i && (i = !0);
        for (var n = this.children, s = 0, r = 0, o = n.length; r < o; r++) {
          var a,
            h = n[r];
          if (!i || h.active)
            if (h.renderable && !h.removed) if (((a = e ? t.call(this, h, s, n) : t(h, s, n)), s++, a)) break;
        }
        return this;
      },
      forEachCharChild: function (t, e, i) {
        void 0 === i && (i = !0);
        for (var n = this.children, s = 0, r = 0, o = n.length; r < o; r++) {
          var a,
            h = n[r];
          if (!i || h.active)
            if (gs(h) && !h.removed) if (((a = e ? t.call(this, h, s, n) : t(h, s, n)), s++, a)) break;
        }
        return this;
      },
      getChildren: function () {
        return this.children;
      },
      getActiveChildren: function () {
        return Vs(this.children, 'active', !0);
      },
      getCharChildren: function (t, e) {
        return (
          void 0 === e && (e = []),
          this.forEachCharChild(
            function (t) {
              e.push(t);
            },
            void 0,
            t
          ),
          e
        );
      },
      getLastAppendedChildren: function () {
        return this.lastAppendedChildren;
      },
      getNearestChild: function (t, e) {
        var i = { x: t, y: e },
          n = 1 / 0,
          s = null;
        return (
          this.forEachRenderableChild(function (t) {
            var e = Ws(
              i,
              (function (t, e, i, n) {
                'number' != typeof e && ((n = e), (e = 0), (i = 0));
                var s = t.drawCenterX + e,
                  r = t.drawCenterY + i;
                return Gn(t, s, r, n);
              })(t, !0)
            );
            n > e && ((n = e), (s = t));
          }),
          s
        );
      },
      getCharWorldPosition: function (t, e, i, n) {
        return 'number' == typeof t && (t = this.getCharChild(t, !0)), Kn(this, t, e, i, n);
      },
      setToMinSize: function () {
        for (var t = this.children, e = 0, i = 0, n = 0, s = t.length; n < s; n++) {
          var r = t[n];
          if (r.renderable && r.active && r.visible) {
            var o = void 0 !== r.x0 ? r.x0 : r.x,
              a = void 0 !== r.y0 ? r.y0 : r.y;
            (e = Math.max(e, o)), (i = Math.max(i, a));
          }
        }
        var h = e + this.padding.left + this.padding.right + this.wrapPadding.left + this.wrapPadding.right,
          l = i + this.padding.top + this.padding.bottom + this.wrapPadding.top + this.wrapPadding.bottom;
        return (this.width === h && this.height === l) || ((this.dirty = !0), this.setCanvasSize(h, l)), this;
      },
      getCharChildIndex: function (t, e) {
        void 0 === e && (e = !0);
        for (var i = this.children, n = 0, s = i.length; n < s; n++) {
          var r = i[n];
          if ((!e || r.active) && gs(r) && !r.removed) {
            if (0 === t) return n;
            t--;
          }
        }
      },
      getCharChild: function (t, e) {
        void 0 === e && (e = !0);
        for (var i = this.children, n = 0, s = i.length; n < s; n++) {
          var r = i[n];
          if ((!e || r.active) && gs(r) && !r.removed) {
            if (0 === t) return r;
            t--;
          }
        }
      },
      getCharIndex: function (t, e) {
        if ('number' != typeof t && (t = this.children.indexOf(t)) < 0) return null;
        void 0 === e && (e = !0);
        var i = this.children;
        t >= i.length && (t = i.length);
        for (var n = 0, s = 0; s < t; s++) {
          var r = i[s];
          (e && !r.active) || (gs(r) && !r.removed && n++);
        }
        return n;
      },
      setChildrenInteractiveEnable: function (t) {
        return (
          void 0 === t && (t = !0),
          this.childrenInteractiveEnable !== t && (this.lastOverChild = null),
          (this.childrenInteractiveEnable = t),
          this
        );
      },
      setInteractive: function (t, e, i) {
        var n = !!this.input;
        return Ns.prototype.setInteractive.call(this, t, e, i), n || Xs.call(this), this;
      },
    };
  Object.assign(
    er,
    tr,
    {
      setBackgroundColor: function (t, e, i) {
        return this.background.setColor(t, e, i), this;
      },
      setBackgroundStroke: function (t, e) {
        return this.background.setStroke(t, e), this;
      },
      setBackgroundCornerRadius: function (t, e) {
        return this.background.setCornerRadius(t, e), this;
      },
    },
    {
      setInnerBoundsColor: function (t, e, i) {
        return this.innerBounds.setColor(t, e, i), this;
      },
      setInnerBoundsStroke: function (t, e) {
        return this.innerBounds.setStroke(t, e), this;
      },
    },
    {
      setVAlign: function (t) {
        return (this.wrapConfig.vAlign = t), this;
      },
      setHAlign: function (t) {
        return (this.wrapConfig.hAlign = t), this;
      },
    },
    {
      setTextOX: function (t) {
        return t === this._textOX || (this._textOX = t), this;
      },
      setTextOY: function (t) {
        return t === this._textOY || (this._textOY = t), this;
      },
      setTextOXY: function (t, e) {
        if (t !== this._textOX || e !== this._textOY) return (this._textOX = t), (this._textOY = e), this;
      },
      addTextOX: function (t) {
        return this.setTextOX(this._textOX + t), this;
      },
      addTextOY: function (t) {
        return this.setTextOY(this._textOY + t), this;
      },
      addTextOXY: function (t, e) {
        return this.setTextOXY(this._textOX + t, this._textOY + e), this;
      },
    }
  );
  var ir = Phaser.Utils.Objects.GetFastValue,
    nr = {},
    sr = (function () {
      function t(e) {
        r(this, t), (this.pools = ir(e, 'pools', nr));
      }
      return (
        a(t, [
          {
            key: 'free',
            value: function (t) {
              if (!this.pools) return this;
              var e = t.type;
              return (
                this.pools.hasOwnProperty(e) || (this.pools[e] = new ot()), this.pools[e].push(t), t.onFree(), this
              );
            },
          },
          {
            key: 'freeMultiple',
            value: function (t) {
              if (!this.pools) return this;
              for (var e = 0, i = t.length; e < i; e++) this.free(t[e]);
              return this;
            },
          },
          {
            key: 'allocate',
            value: function (t) {
              return this.pools && this.pools.hasOwnProperty(t) ? this.pools[t].pop() : null;
            },
          },
        ]),
        t
      );
    })(),
    rr = Phaser.Utils.Objects.IsPlainObject,
    or = Phaser.Utils.Objects.GetValue,
    ar = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          rr(n)
            ? ((n = or((h = n), 'x', 0)), (s = or(h, 'y', 0)), (o = or(h, 'width', 0)), (a = or(h, 'height', 0)))
            : rr(o) && ((o = or((h = o), 'width', 0)), (a = or(h, 'height', 0)));
        var u = 0 === o ? 1 : o,
          c = 0 === a ? 1 : a;
        ((l = e.call(this, t, n, s, u, c)).type = 'rexDynamicText'),
          (l.autoRound = !0),
          (l.padding = Ln()),
          (l.wrapPadding = Ln());
        var f = or(h, 'style', void 0);
        (l.defaultTextStyle = new os(null, f)),
          (l.textStyle = l.defaultTextStyle.clone()),
          l.setTestString(or(h, 'testString', '|MÉqgy')),
          (l._textOX = 0),
          (l._textOY = 0),
          (l.background = new is(d(l), or(h, 'background', void 0))),
          (l.innerBounds = new ss(d(l), or(h, 'innerBounds', void 0))),
          (l.children = []),
          (l.lastAppendedChildren = []),
          (l.lastOverChild = null),
          (l.poolManager = new sr(h)),
          l.setFixedSize(o, a),
          l.setPadding(or(h, 'padding', 0)),
          l.setWrapConfig(or(h, 'wrap', void 0)),
          l.setChildrenInteractiveEnable(or(h, 'childrenInteractive', !1));
        var p = or(h, 'text', void 0);
        return p && l.setText(p), l;
      }
      return (
        a(i, [
          {
            key: 'updateTexture',
            value: function () {
              return this.renderContent(), g(u(i.prototype), 'updateTexture', this).call(this), this;
            },
          },
          {
            key: 'text',
            get: function () {
              return this.getText(!0);
            },
            set: function (t) {
              this.setText(t);
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              return this.setFixedSize(t, e), this;
            },
          },
          {
            key: 'textOX',
            get: function () {
              return this._textOX;
            },
            set: function (t) {
              this.setTextOX(t);
            },
          },
          {
            key: 'textOY',
            get: function () {
              return this._textOY;
            },
            set: function (t) {
              this.setTextOY(t);
            },
          },
        ]),
        i
      );
    })(ge);
  Object.assign(ar.prototype, er),
    M.register('dynamicText', function (t, e, i, n, s) {
      var r = new ar(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.DynamicText', ar);
  var hr = {
      setEventEmitter: function (t, e) {
        return (
          void 0 === e && (e = Phaser.Events.EventEmitter),
          (this._privateEE = !0 === t || void 0 === t),
          (this._eventEmitter = this._privateEE ? new e() : t),
          this
        );
      },
      destroyEventEmitter: function () {
        return this._eventEmitter && this._privateEE && this._eventEmitter.shutdown(), this;
      },
      getEventEmitter: function () {
        return this._eventEmitter;
      },
      on: function () {
        return this._eventEmitter && this._eventEmitter.on.apply(this._eventEmitter, arguments), this;
      },
      once: function () {
        return this._eventEmitter && this._eventEmitter.once.apply(this._eventEmitter, arguments), this;
      },
      off: function () {
        return this._eventEmitter && this._eventEmitter.off.apply(this._eventEmitter, arguments), this;
      },
      emit: function (t) {
        return this._eventEmitter && t && this._eventEmitter.emit.apply(this._eventEmitter, arguments), this;
      },
      addListener: function () {
        return this._eventEmitter && this._eventEmitter.addListener.apply(this._eventEmitter, arguments), this;
      },
      removeListener: function () {
        return this._eventEmitter && this._eventEmitter.removeListener.apply(this._eventEmitter, arguments), this;
      },
      removeAllListeners: function () {
        return this._eventEmitter && this._eventEmitter.removeAllListeners.apply(this._eventEmitter, arguments), this;
      },
      listenerCount: function () {
        return this._eventEmitter ? this._eventEmitter.listenerCount.apply(this._eventEmitter, arguments) : 0;
      },
      listeners: function () {
        return this._eventEmitter ? this._eventEmitter.listeners.apply(this._eventEmitter, arguments) : [];
      },
      eventNames: function () {
        return this._eventEmitter ? this._eventEmitter.eventNames.apply(this._eventEmitter, arguments) : [];
      },
    },
    lr = {
      hasProperty: function (t) {
        var e = this.gameObject;
        return !!e.hasOwnProperty(t) || void 0 !== e[t];
      },
      getProperty: function (t) {
        return this.gameObject[t];
      },
      setProperty: function (t, e) {
        return (this.gameObject[t] = e), this;
      },
      easeProperty: function (t, e, i, n, s, r, o, a) {
        void 0 === a && (a = this.gameObject);
        var h = this.tweens,
          l = h[t];
        l && l.remove();
        var u = {
          targets: a,
          duration: i,
          ease: n,
          repeat: s,
          yoyo: r,
          onComplete: function () {
            h[t].remove(), (h[t] = null), o && o(a, t);
          },
          onCompleteScope: this,
        };
        return (u[t] = e), ((l = this.scene.tweens.add(u)).timeScale = this.timeScale), (h[t] = l), this;
      },
      getTweenTask: function (t) {
        return this.tweens[t];
      },
      freeTweens: function () {
        var t,
          e = this.tweens;
        for (var i in e) (t = e[i]) && t.remove(), (e[i] = null);
        return this;
      },
    },
    ur = {
      hasMethod: function (t) {
        return 'function' == typeof this.gameObject[t];
      },
      call: function (t) {
        if (!this.hasMethod(t)) return this;
        for (var e = this.gameObject, i = arguments.length, n = new Array(i > 1 ? i - 1 : 0), s = 1; s < i; s++)
          n[s - 1] = arguments[s];
        return e[t].apply(e, n), this;
      },
    },
    cr = (function () {
      function t(e, i, n) {
        r(this, t), (this.GOManager = e), (this.tweens = {}), (this.effects = {}), this.setGO(i, n);
      }
      return (
        a(t, [
          {
            key: 'scene',
            get: function () {
              return this.GOManager.scene;
            },
          },
          {
            key: 'timeScale',
            get: function () {
              return this.GOManager.timeScale;
            },
          },
          {
            key: 'destroy',
            value: function () {
              this.freeGO(), (this.GOManager = void 0);
            },
          },
          {
            key: 'freeGO',
            value: function () {
              return this.freeTweens(), this.gameObject.destroy(), (this.gameObject = void 0), this;
            },
          },
          {
            key: 'setGO',
            value: function (t, e) {
              return t.setName(e), (this.gameObject = t), (this.name = e), this.freeTweens(), this;
            },
          },
          {
            key: 'setTimeScale',
            value: function (t) {
              var e = this.tweens;
              for (var i in e) {
                var n = e[i];
                n && (n.timeScale = t);
              }
              return this;
            },
          },
        ]),
        t
      );
    })();
  Object.assign(cr.prototype, lr, ur, {
    hasData: function (t) {
      var e = this.gameObject;
      return !!e.data && e.data.has(t);
    },
    getData: function (t) {
      return this.gameObject.getData(t);
    },
    setData: function (t, e) {
      return this.gameObject.setData(t, e), this;
    },
  });
  var dr = function (t) {
      for (var e in t) return !1;
      return !0;
    },
    fr = function (t, e) {
      if (!t) return !1;
      if (t.hasOwnProperty(e)) return !0;
      for (; t; ) {
        if (Object.getOwnPropertyDescriptor(t, e)) return !0;
        t = t.__proto__;
      }
      return !1;
    },
    pr = function (t) {
      return t.preFX ? t.preFX : t.postFX ? t.postFX : null;
    },
    vr = function (t, e) {
      t._effectSwitchNames ||
        ((t._effectSwitchNames = []),
        (t.clearAllEffects = function () {
          for (var e = t._effectSwitchNames, i = 0, n = e.length; i < n; i++) t[e[i]] = null;
          return t;
        }),
        t.on('destroy', t.clearAllEffects, t)),
        t._effectSwitchNames.push(e);
    },
    gr = function (t, e, i) {
      if (fr(t, e)) return t;
      var n = pr(t);
      if (!n) return t;
      var s,
        r = '_'.concat(e, 'Effect');
      return (
        Object.defineProperty(t, e, {
          get: function () {
            return s;
          },
          set: function (o) {
            s !== o &&
              (null === (s = o) || !1 === s
                ? t[r] && (n.remove(t[r]), (t[r] = void 0))
                : (t[r] || (t[r] = n.addColorMatrix()), t[r][e](1 === i ? o : void 0)));
          },
        }),
        (t[e] = null),
        vr(t, e),
        t
      );
    },
    yr = {
      barrel: function (t) {
        if (fr(t, 'barrel')) return t;
        var e,
          i = pr(t);
        return i
          ? (Object.defineProperty(t, 'barrel', {
              get: function () {
                return e;
              },
              set: function (n) {
                e !== n &&
                  (null === (e = n) || !1 === e
                    ? t._barrelEffect && (i.remove(t._barrelEffect), (t._barrelEffect = void 0))
                    : (t._barrelEffect || (t._barrelEffect = i.addBarrel()), (t._barrelEffect.amount = e)));
              },
            }),
            (t.barrel = null),
            vr(t, 'barrel'),
            t)
          : t;
      },
      blackWhite: function (t) {
        return gr(t, 'blackWhite'), t;
      },
      bloom: function (t) {
        if (fr(t, 'bloomColor')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 1,
          s = 1,
          r = 1,
          o = 1,
          a = 4;
        return (
          Object.defineProperty(t, 'bloomColor', {
            get: function () {
              return i;
            },
            set: function (h) {
              i !== h &&
                (null === (i = h) || !1 === i
                  ? t._bloom && (e.remove(t._bloom), (t._bloom = void 0), e.setPadding(0))
                  : (t._bloom || ((t._bloom = e.addBloom(i, n, s, r, o, a)), e.setPadding(Math.max(n, s) + 1)),
                    (t._bloom.color = i)));
            },
          }),
          Object.defineProperty(t, 'bloomOffsetX', {
            get: function () {
              return n;
            },
            set: function (i) {
              if (n !== i && ((n = i), t._bloom)) {
                var r = Math.max(n, s);
                e.setPadding(r + 1), (t._bloom.offsetX = n);
              }
            },
          }),
          Object.defineProperty(t, 'bloomOffsetY', {
            get: function () {
              return s;
            },
            set: function (i) {
              if (s !== i && ((s = i), t._bloom)) {
                var r = Math.max(n, s);
                e.setPadding(r + 1), (t._bloom.offsetY = s);
              }
            },
          }),
          Object.defineProperty(t, 'bloomBlurStrength', {
            get: function () {
              return r;
            },
            set: function (e) {
              r !== e && ((r = e), t._bloom && (t._bloom.blurStrength = r));
            },
          }),
          Object.defineProperty(t, 'bloomStrength', {
            get: function () {
              return o;
            },
            set: function (e) {
              o !== e && ((o = e), t._bloom && (t._bloom.strength = o));
            },
          }),
          Object.defineProperty(t, 'bloomSteps', {
            get: function () {
              return a;
            },
            set: function (e) {
              a !== e && ((a = e), t._bloom && (t._bloom.steps = a));
            },
          }),
          (t.bloomColor = null),
          vr(t, 'bloomColor'),
          t
        );
      },
      blur: function (t) {
        if (fr(t, 'blurColor')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 0,
          s = 1,
          r = 1,
          o = 1,
          a = 4;
        return (
          Object.defineProperty(t, 'blurColor', {
            get: function () {
              return i;
            },
            set: function (h) {
              i !== h &&
                (null === (i = h) || !1 === i
                  ? t._blur && (e.remove(t._blur), (t._blur = void 0), e.setPadding(0))
                  : (t._blur || ((t._blur = e.addBlur(n, s, r, o, i, a)), e.setPadding(Math.max(s, r) + 1)),
                    (t._blur.color = i)));
            },
          }),
          Object.defineProperty(t, 'blurQuality', {
            get: function () {
              return n;
            },
            set: function (e) {
              n !== e && ((n = e), t._blur && (t._blur.quality = n));
            },
          }),
          Object.defineProperty(t, 'blurX', {
            get: function () {
              return s;
            },
            set: function (i) {
              if (s !== i && ((s = i), t._blur)) {
                var n = Math.max(s, r);
                e.setPadding(n + 1), (t._blur.x = s);
              }
            },
          }),
          Object.defineProperty(t, 'blurY', {
            get: function () {
              return r;
            },
            set: function (i) {
              if (r !== i && ((r = i), t._blur)) {
                var n = Math.max(s, r);
                e.setPadding(n + 1), (t._blur.y = r);
              }
            },
          }),
          Object.defineProperty(t, 'blurStrength', {
            get: function () {
              return o;
            },
            set: function (e) {
              o !== e && ((o = e), t._blur && (t._blur.strength = o));
            },
          }),
          Object.defineProperty(t, 'blurSteps', {
            get: function () {
              return a;
            },
            set: function (e) {
              a !== e && ((a = e), t._blur && (t._blur.steps = a));
            },
          }),
          (t.blurColor = null),
          vr(t, 'blurColor'),
          t
        );
      },
      bokeh: function (t) {
        if (fr(t, 'bokehRadius')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 1,
          s = 0.2;
        return (
          Object.defineProperty(t, 'bokehRadius', {
            get: function () {
              return i;
            },
            set: function (r) {
              i !== r &&
                (null === (i = r) || !1 === i
                  ? t._bokeh && (e.remove(t._bokeh), (t._bokeh = void 0))
                  : (t._bokeh || (t._bokeh = e.addBokeh(i, n, s)), (t._bokeh.radius = i)));
            },
          }),
          Object.defineProperty(t, 'bokehAmount', {
            get: function () {
              return n;
            },
            set: function (e) {
              n !== e && ((n = e), t._bokeh && (t._bokeh.amount = n));
            },
          }),
          Object.defineProperty(t, 'bokehContrast', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._bokeh && (t._bokeh.contrast = s));
            },
          }),
          (t.bokehRadius = null),
          vr(t, 'bokehRadius'),
          t
        );
      },
      brightness: function (t) {
        return gr(t, 'brightness', 1), t;
      },
      brown: function (t) {
        return gr(t, 'brown'), t;
      },
      circle: function (t) {
        if (fr(t, 'circleColor')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 8,
          s = 0,
          r = 0.4,
          o = 1,
          a = 0.005;
        return (
          Object.defineProperty(t, 'circleColor', {
            get: function () {
              return i;
            },
            set: function (h) {
              i !== h &&
                (null === (i = h) || !1 === i
                  ? t._circle && (e.remove(t._circle), (t._circle = void 0))
                  : (t._circle || ((t._circle = e.addCircle(n, i, s, o, a)), (t.circleBackgroundAlpha = r)),
                    (t._circle.color = i)));
            },
          }),
          Object.defineProperty(t, 'circleThickness', {
            get: function () {
              return n;
            },
            set: function (e) {
              n !== e && ((n = e), t._circle && (t._circle.thickness = n));
            },
          }),
          Object.defineProperty(t, 'circleBackgroundColor', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._circle && (t._circle.backgroundColor = s));
            },
          }),
          Object.defineProperty(t, 'circleBackgroundAlpha', {
            get: function () {
              return r;
            },
            set: function (e) {
              r !== e && ((r = e), t._circle && (t._circle.glcolor2[3] = r));
            },
          }),
          Object.defineProperty(t, 'circleScale', {
            get: function () {
              return o;
            },
            set: function (e) {
              o !== e && ((o = e), t._circle && (t._circle.scale = o));
            },
          }),
          Object.defineProperty(t, 'circleFeather', {
            get: function () {
              return a;
            },
            set: function (e) {
              a !== e && ((a = e), t._circle && (t._circle.feather = a));
            },
          }),
          (t.circleColor = null),
          vr(t, 'circleColor'),
          t
        );
      },
      contrast: function (t) {
        return gr(t, 'contrast', 1), t;
      },
      desaturate: function (t) {
        return gr(t, 'desaturate', 1), t;
      },
      desaturateLuminance: function (t) {
        return gr(t, 'desaturateLuminance'), t;
      },
      displacement: function (t) {
        if (fr(t, 'displacementKey')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 0.005,
          s = 0.005;
        return (
          Object.defineProperty(t, 'displacementKey', {
            get: function () {
              return i;
            },
            set: function (r) {
              i !== r &&
                (null === (i = r) || !1 === i
                  ? t._displacement && (e.remove(t._displacement), (t._displacement = void 0))
                  : (t._displacement || (t._displacement = e.addDisplacement(i, n, s)), t._displacement.setTexture(i)));
            },
          }),
          Object.defineProperty(t, 'displacementX', {
            get: function () {
              return n;
            },
            set: function (e) {
              n !== e && ((n = e), t._displacement && (t._displacement.x = n));
            },
          }),
          Object.defineProperty(t, 'displacementY', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._displacement && (t._displacement.y = s));
            },
          }),
          (t.displacementKey = null),
          vr(t, 'displacementKey'),
          t
        );
      },
      glow: function (t) {
        if (fr(t, 'glowColor')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 4,
          s = 0;
        return (
          Object.defineProperty(t, 'glowColor', {
            get: function () {
              return i;
            },
            set: function (r) {
              i !== r &&
                (null === (i = r) || !1 === i
                  ? t._glow && (e.remove(t._glow), (t._glow = void 0), e.setPadding(0))
                  : (t._glow || ((t._glow = e.addGlow(i, n, s)), e.setPadding(n + 1)), (t._glow.color = i)));
            },
          }),
          Object.defineProperty(t, 'glowOuterStrength', {
            get: function () {
              return n;
            },
            set: function (i) {
              n !== i && ((n = i), t._glow && (e.setPadding(n + 1), (t._glow.outerStrength = n)));
            },
          }),
          Object.defineProperty(t, 'glowInnerStrength', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._glow && (t._glow.innerStrength = s));
            },
          }),
          (t.glowColor = null),
          vr(t, 'glowColor'),
          t
        );
      },
      gradient: function (t) {
        if (fr(t, 'gradientColor')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n,
          s = 0.5,
          r = 0,
          o = 0,
          a = 0,
          h = 1,
          l = 0;
        return (
          Object.defineProperty(t, 'gradientColor', {
            get: function () {
              return [i, n];
            },
            set: function (u) {
              var c, d;
              null === u || !1 === u ? ((c = null), (d = null)) : ((c = u[0]), (d = u[1])),
                (i === c && n === d) ||
                  ((n = d),
                  null === (i = c) || !1 === i
                    ? t._gradient && (e.remove(t._gradient), (t._gradient = void 0))
                    : (t._gradient || (t._gradient = e.addGradient(i, n, s, r, o, a, h, l)),
                      (t._gradient.color1 = i),
                      (t._gradient.color2 = n)));
            },
          }),
          Object.defineProperty(t, 'gradientColor1', {
            get: function () {
              return i;
            },
            set: function (e) {
              null !== e && !1 !== e
                ? i !== e && ((i = e), t._gradient && (t._gradient.color1 = i))
                : (t.gradientColor = e);
            },
          }),
          Object.defineProperty(t, 'gradientColor2', {
            get: function () {
              return n;
            },
            set: function (e) {
              null !== e && !1 !== e
                ? n !== e && ((n = e), t._gradient && (t._gradient.color2 = n))
                : (t.gradientColor = e);
            },
          }),
          Object.defineProperty(t, 'gradientAlpha', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._gradient && (t._gradient.alpha = s));
            },
          }),
          Object.defineProperty(t, 'gradientFromX', {
            get: function () {
              return r;
            },
            set: function (e) {
              r !== e && ((r = e), t._gradient && (t._gradient.fromX = r));
            },
          }),
          Object.defineProperty(t, 'gradientFromY', {
            get: function () {
              return o;
            },
            set: function (e) {
              o !== e && ((o = e), t._gradient && (t._gradient.fromY = o));
            },
          }),
          Object.defineProperty(t, 'gradientToX', {
            get: function () {
              return a;
            },
            set: function (e) {
              a !== e && ((a = e), t._gradient && (t._gradient.toX = a));
            },
          }),
          Object.defineProperty(t, 'gradientToY', {
            get: function () {
              return h;
            },
            set: function (e) {
              h !== e && ((h = e), t._gradient && (t._gradient.toY = h));
            },
          }),
          Object.defineProperty(t, 'gradientSize', {
            get: function () {
              return l;
            },
            set: function (e) {
              l !== e && ((l = e), t._gradient && (t._gradient.size = l));
            },
          }),
          (t.gradientColor = null),
          vr(t, 'gradientColor'),
          t
        );
      },
      grayscale: function (t) {
        return gr(t, 'grayscale', 1), t;
      },
      hue: function (t) {
        return gr(t, 'hue', 1), t;
      },
      kodachrome: function (t) {
        return gr(t, 'kodachrome'), t;
      },
      lsd: function (t) {
        return gr(t, 'lsd'), t;
      },
      negative: function (t) {
        return gr(t, 'negative'), t;
      },
      pixelate: function (t) {
        if (fr(t, 'pixelate')) return t;
        var e,
          i = pr(t);
        return i
          ? (Object.defineProperty(t, 'pixelate', {
              get: function () {
                return e;
              },
              set: function (n) {
                e !== n &&
                  (null === (e = n) || !1 === e
                    ? t._pixelateEffect && (i.remove(t._pixelateEffect), (t._pixelateEffect = void 0))
                    : (t._pixelateEffect || (t._pixelateEffect = i.addPixelate()), (t._pixelateEffect.amount = e)));
              },
            }),
            (t.pixelate = null),
            vr(t, 'pixelate'),
            t)
          : t;
      },
      polaroid: function (t) {
        return gr(t, 'polaroid'), t;
      },
      reveal: function (t) {
        if (fr(t, 'revealLeft')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n,
          s,
          r,
          o = 0.1,
          a = function () {
            (i = null), (n = null), (s = null), (r = null);
          },
          h = function (t) {
            t._revealEffect && (e.remove(t._revealEffect), (t._revealEffect = void 0));
          };
        return (
          Object.defineProperty(t, 'revealLeft', {
            get: function () {
              return i;
            },
            set: function (n) {
              i !== n &&
                (a(),
                null === (i = n) || !1 === i
                  ? h(t)
                  : (t._revealEffect || (t._revealEffect = e.addReveal(o, 0, 0)),
                    (t._revealEffect.direction = 1),
                    (t._revealEffect.axis = 0),
                    (t._revealEffect.progress = i)));
            },
          }),
          Object.defineProperty(t, 'revealRight', {
            get: function () {
              return n;
            },
            set: function (i) {
              n !== i &&
                (a(),
                null === (n = i) || !1 === n
                  ? h(t)
                  : (t._revealEffect || (t._revealEffect = e.addReveal(o, 0, 0)),
                    (t._revealEffect.direction = 0),
                    (t._revealEffect.axis = 0),
                    (t._revealEffect.progress = n)));
            },
          }),
          Object.defineProperty(t, 'revealUp', {
            get: function () {
              return s;
            },
            set: function (i) {
              s !== i &&
                (a(),
                null === (s = i) || !1 === s
                  ? h(t)
                  : (t._revealEffect || (t._revealEffect = e.addReveal(o, 0, 0)),
                    (t._revealEffect.direction = 1),
                    (t._revealEffect.axis = 1),
                    (t._revealEffect.progress = s)));
            },
          }),
          Object.defineProperty(t, 'revealDown', {
            get: function () {
              return r;
            },
            set: function (i) {
              r !== i &&
                (a(),
                null === (r = i) || !1 === r
                  ? h(t)
                  : (t._revealEffect || (t._revealEffect = e.addReveal(o, 0, 0)),
                    (t._revealEffect.direction = 0),
                    (t._revealEffect.axis = 1),
                    (t._revealEffect.progress = r)));
            },
          }),
          Object.defineProperty(t, 'revealWidth', {
            get: function () {
              return o;
            },
            set: function (e) {
              o !== e && ((o = e), t._revealEffect && (t._revealEffect.wipeWidth = o));
            },
          }),
          (t.revealLeft = null),
          vr(t, 'revealLeft'),
          vr(t, 'revealRight'),
          vr(t, 'revealUp'),
          vr(t, 'revealDown'),
          t
        );
      },
      saturate: function (t) {
        return gr(t, 'saturate', 1), t;
      },
      sepia: function (t) {
        return gr(t, 'sepia'), t;
      },
      shadow: function (t) {
        if (fr(t, 'shadowColor')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 0,
          s = 0,
          r = 0.1,
          o = 1,
          a = 6,
          h = 1;
        return (
          Object.defineProperty(t, 'shadowColor', {
            get: function () {
              return i;
            },
            set: function (l) {
              i !== l &&
                (null === (i = l) || !1 === i
                  ? t._shadow && (e.remove(t._shadow), (t._shadow = void 0))
                  : (t._shadow || (t._shadow = e.addShadow(n, s, r, o, i, a, h)), (t._shadow.color = i)));
            },
          }),
          Object.defineProperty(t, 'shadowX', {
            get: function () {
              return n;
            },
            set: function (e) {
              n !== e && ((n = e), t._shadow && (t._shadow.x = n));
            },
          }),
          Object.defineProperty(t, 'shadowY', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._shadow && (t._shadow.y = s));
            },
          }),
          Object.defineProperty(t, 'decay', {
            get: function () {
              return r;
            },
            set: function (e) {
              r !== e && ((r = e), t._shadow && (t._shadow.decay = r));
            },
          }),
          Object.defineProperty(t, 'shadowPower', {
            get: function () {
              return o;
            },
            set: function (e) {
              o !== e && ((o = e), t._shadow && (t._shadow.power = o));
            },
          }),
          Object.defineProperty(t, 'shadowSamples', {
            get: function () {
              return a;
            },
            set: function (e) {
              a !== e && ((a = e), t._shadow && (t._shadow.samples = a));
            },
          }),
          Object.defineProperty(t, 'shadowIntensity', {
            get: function () {
              return h;
            },
            set: function (e) {
              h !== e && ((h = e), t._shadow && (t._shadow.intensity = h));
            },
          }),
          (t.shadowColor = null),
          vr(t, 'shadowColor'),
          t
        );
      },
      shiftToBGR: function (t) {
        return gr(t, 'shiftToBGR'), t;
      },
      shine: function (t) {
        if (fr(t, 'shineSpeed')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 0.5,
          s = 3;
        return (
          Object.defineProperty(t, 'shineSpeed', {
            get: function () {
              return i;
            },
            set: function (r) {
              i !== r &&
                (null === (i = r) || !1 === i
                  ? t._shine && (e.remove(t._shine), (t._shine = void 0))
                  : (t._shine || (t._shine = e.addShine(i, n, s)), (t._shine.speed = i)));
            },
          }),
          Object.defineProperty(t, 'shineLineWidth', {
            get: function () {
              return n;
            },
            set: function (e) {
              n !== e && ((n = e), t._shine && (t._shine.lineWidth = n));
            },
          }),
          Object.defineProperty(t, 'shineGradient', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._shine && (t._shine.gradient = s));
            },
          }),
          (t.shineSpeed = null),
          vr(t, 'shineSpeed'),
          t
        );
      },
      technicolor: function (t) {
        return gr(t, 'technicolor'), t;
      },
      tiltShift: function (t) {
        if (fr(t, 'tiltShiftRadius')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 1,
          s = 0.2,
          r = 1,
          o = 1,
          a = 1;
        return (
          Object.defineProperty(t, 'tiltShiftRadius', {
            get: function () {
              return i;
            },
            set: function (h) {
              i !== h &&
                (null === (i = h) || !1 === i
                  ? t._tiltShift && (e.remove(t._tiltShift), (t._tiltShift = void 0))
                  : (t._tiltShift || (t._tiltShift = e.addTiltShift(i, n, s, r, o, a)), (t._tiltShift.radius = i)));
            },
          }),
          Object.defineProperty(t, 'tiltShiftAmount', {
            get: function () {
              return n;
            },
            set: function (e) {
              n !== e && ((n = e), t._tiltShift && (t._tiltShift.amount = n));
            },
          }),
          Object.defineProperty(t, 'tiltShiftContrast', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._tiltShift && (t._tiltShift.contrast = s));
            },
          }),
          Object.defineProperty(t, 'tiltShiftBlurX', {
            get: function () {
              return r;
            },
            set: function (e) {
              r !== e && ((r = e), t._tiltShift && (t._tiltShift.blurX = r));
            },
          }),
          Object.defineProperty(t, 'tiltShiftBlurY', {
            get: function () {
              return o;
            },
            set: function (e) {
              o !== e && ((o = e), t._tiltShift && (t._tiltShift.blurY = o));
            },
          }),
          Object.defineProperty(t, 'tiltShiftStrength', {
            get: function () {
              return a;
            },
            set: function (e) {
              a !== e && ((a = e), t._tiltShift && (t._tiltShift.strength = a));
            },
          }),
          (t.tiltShiftRadius = null),
          vr(t, 'tiltShiftRadius'),
          t
        );
      },
      vignette: function (t) {
        if (fr(t, 'vignetteColor')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n = 0.5,
          s = 0.5,
          r = 0.5;
        return (
          Object.defineProperty(t, 'vignetteRadius', {
            get: function () {
              return i;
            },
            set: function (o) {
              i !== o &&
                (null === (i = o) || !1 === i
                  ? t._vignette && (e.remove(t._vignette), (t._vignette = void 0))
                  : (t._vignette || (t._vignette = e.addVignette(n, s, i, r)), (t._vignette.radius = i)));
            },
          }),
          Object.defineProperty(t, 'vignetteX', {
            get: function () {
              return n;
            },
            set: function (e) {
              n !== e && ((n = e), t._vignette && (t._vignette.x = n));
            },
          }),
          Object.defineProperty(t, 'vignetteY', {
            get: function () {
              return s;
            },
            set: function (e) {
              s !== e && ((s = e), t._vignette && (t._vignette.y = s));
            },
          }),
          Object.defineProperty(t, 'vignetteStrength', {
            get: function () {
              return r;
            },
            set: function (e) {
              r !== e && ((r = e), t._vignette && (t._vignette.strength = r));
            },
          }),
          (t.vignetteRadius = null),
          vr(t, 'vignetteRadius'),
          t
        );
      },
      vintagePinhole: function (t) {
        return gr(t, 'vintagePinhole'), t;
      },
      wipe: function (t) {
        if (fr(t, 'wipeLeft')) return t;
        var e = pr(t);
        if (!e) return t;
        var i,
          n,
          s,
          r,
          o = 0.1,
          a = function () {
            (i = null), (n = null), (s = null), (r = null);
          },
          h = function (t) {
            t._wipeEffect && (e.remove(t._wipeEffect), (t._wipeEffect = void 0));
          };
        return (
          Object.defineProperty(t, 'wipeLeft', {
            get: function () {
              return i;
            },
            set: function (n) {
              i !== n &&
                (a(),
                null === (i = n) || !1 === i
                  ? h(t)
                  : (t._wipeEffect || (t._wipeEffect = e.addWipe(o, 0, 0)),
                    (t._wipeEffect.direction = 1),
                    (t._wipeEffect.axis = 0),
                    (t._wipeEffect.progress = i)));
            },
          }),
          Object.defineProperty(t, 'wipeRight', {
            get: function () {
              return n;
            },
            set: function (i) {
              n !== i &&
                (a(),
                null === (n = i) || !1 === n
                  ? h(t)
                  : (t._wipeEffect || (t._wipeEffect = e.addWipe(o, 0, 0)),
                    (t._wipeEffect.direction = 0),
                    (t._wipeEffect.axis = 0),
                    (t._wipeEffect.progress = n)));
            },
          }),
          Object.defineProperty(t, 'wipeUp', {
            get: function () {
              return s;
            },
            set: function (i) {
              s !== i &&
                (a(),
                null === (s = i) || !1 === s
                  ? h(t)
                  : (t._wipeEffect || (t._wipeEffect = e.addWipe(o, 0, 0)),
                    (t._wipeEffect.direction = 1),
                    (t._wipeEffect.axis = 1),
                    (t._wipeEffect.progress = s)));
            },
          }),
          Object.defineProperty(t, 'wipeDown', {
            get: function () {
              return r;
            },
            set: function (i) {
              r !== i &&
                (a(),
                null === (r = i) || !1 === r
                  ? h(t)
                  : (t._wipeEffect || (t._wipeEffect = e.addWipe(o, 0, 0)),
                    (t._wipeEffect.direction = 0),
                    (t._wipeEffect.axis = 1),
                    (t._wipeEffect.progress = r)));
            },
          }),
          Object.defineProperty(t, 'wipeWidth', {
            get: function () {
              return o;
            },
            set: function (e) {
              o !== e && ((o = e), t._wipeEffect && (t._wipeEffect.wipeWidth = o));
            },
          }),
          (t.wipeLeft = null),
          vr(t, 'wipeLeft'),
          vr(t, 'wipeRight'),
          vr(t, 'wipeUp'),
          vr(t, 'wipeDown'),
          t
        );
      },
    },
    kr = function (t, e) {
      if (void 0 === e) e = !0;
      else if ('string' == typeof e) e = { config: !0 };
      else if (Array.isArray(e)) for (var i = e, n = ((e = {}), 0), s = i.length; n < s; n++) e[i[n]] = !0;
      if (!0 === e) for (var r in yr) yr[r](t);
      else for (var r in e) e[r] && yr[r] && yr[r](t);
      return t;
    },
    mr = { tint: 0, alpha: 1, revealUp: 2, revealDown: 3, revealLeft: 4, revealRight: 5 },
    br = {
      setGOFadeMode: function (t) {
        return 'string' == typeof t && (t = mr[t]), (this.fadeMode = t), this;
      },
      setGOFadeTime: function (t) {
        return (this.fadeTime = t), this;
      },
      useTintFadeEffect: function (t) {
        return (void 0 === this.fadeMode || 0 === this.fadeMode) && this.fadeTime > 0 && void 0 !== t.setTint;
      },
      useAlphaFadeEffect: function (t) {
        return (void 0 === this.fadeMode || 1 === this.fadeMode) && this.fadeTime > 0 && void 0 !== t.setAlpha;
      },
      useRevealEffect: function (t) {
        return this.fadeMode >= 2 && this.fadeMode <= 5 && this.fadeTime > 0 && (t.preFX || t.postFX);
      },
      fadeBob: function (t, e, i, n) {
        var s = t.gameObject;
        if (this.useTintFadeEffect(s))
          void 0 !== e && t.setProperty('tintGray', 255 * e),
            t.easeProperty('tintGray', Math.floor(255 * i), this.fadeTime, 'Linear', 0, !1, n);
        else if (this.useAlphaFadeEffect(s))
          void 0 !== e && t.setProperty('alpha', e), t.easeProperty('alpha', i, this.fadeTime, 'Linear', 0, !1, n);
        else if (this.useRevealEffect(s)) {
          var r;
          switch ((kr(s, 'reveal'), this.fadeMode)) {
            case 2:
              r = 'revealUp';
              break;
            case 3:
              r = 'revealDown';
              break;
            case 4:
              r = 'revealLeft';
              break;
            case 5:
              r = 'revealRight';
          }
          void 0 === e && (e = 0),
            (s[r] = e),
            t.easeProperty(r, i, this.fadeTime, 'Linear', 0, !1, n),
            t.getTweenTask(r).once('complete', function () {
              s[r] = null;
            });
        } else n && n(s);
        return this;
      },
    },
    xr = function (t) {
      return (t >> 16) & 255;
    },
    Cr = function (t) {
      return (t >> 8) & 255;
    },
    wr = function (t) {
      return 255 & t;
    },
    Sr = Phaser.Events.EventEmitter,
    Pr = function (t, e, i, n, s, r) {
      return (
        void 0 === r ? (r = {}) : !0 === r && (r = Tr),
        'number' != typeof i && ((i = 0), (n = 0)),
        (r.x = s.x + s.width * t + i),
        (r.y = s.y + s.height * e + n),
        r
      );
    },
    Tr = {},
    Or = function (t, e, i, n, s, r, o) {
      if (t.hasOwnProperty('vp')) return t;
      'function' == typeof i && ((o = i), (i = void 0)),
        'function' == typeof s && ((o = s), (s = void 0)),
        void 0 === i && (i = 0.5),
        void 0 === n && (n = 0.5),
        void 0 === s && (s = 0),
        void 0 === r && (r = 0),
        void 0 === o && (o = Pr),
        (function (t) {
          if (t.events) return t;
          var e = new Sr(),
            i = t.x;
          Object.defineProperty(t, 'x', {
            get: function () {
              return i;
            },
            set: function (n) {
              i !== n && ((i = n), e.emit('update', t));
            },
          });
          var n = t.y;
          Object.defineProperty(t, 'y', {
            get: function () {
              return n;
            },
            set: function (i) {
              n !== i && ((n = i), e.emit('update', t));
            },
          });
          var s = t.width;
          Object.defineProperty(t, 'width', {
            get: function () {
              return s;
            },
            set: function (i) {
              s !== i && ((s = i), e.emit('update', t));
            },
          });
          var r = t.height;
          Object.defineProperty(t, 'height', {
            get: function () {
              return r;
            },
            set: function (i) {
              r !== i && ((r = i), e.emit('update', t));
            },
          }),
            (t.events = e);
        })(e);
      var a = e.events;
      t.vp = e;
      var h = function () {
        o(i, n, s, r, e, t);
      };
      a.on('update', h),
        t.once('destroy', function () {
          a.off('update', h), (t.vp = void 0);
        }),
        Object.defineProperty(t, 'vpx', {
          get: function () {
            return i;
          },
          set: function (t) {
            i !== t && ((i = t), h());
          },
        }),
        Object.defineProperty(t, 'vpy', {
          get: function () {
            return n;
          },
          set: function (t) {
            n !== t && ((n = t), h());
          },
        }),
        Object.defineProperty(t, 'vpxOffset', {
          get: function () {
            return s;
          },
          set: function (t) {
            s !== t && ((s = t), h());
          },
        }),
        Object.defineProperty(t, 'vpyOffset', {
          get: function () {
            return r;
          },
          set: function (t) {
            r !== t && ((r = t), h());
          },
        }),
        h();
    },
    Mr = Phaser.Utils.Array.Remove,
    Er = {
      has: function (t) {
        return this.bobs.hasOwnProperty(t);
      },
      exists: function (t) {
        return this.bobs.hasOwnProperty(t);
      },
      get: function (t) {
        return this.bobs[t];
      },
      getGO: function (t) {
        var e = this.get(t);
        return e ? e.gameObject : null;
      },
      addGO: function (t, e) {
        this.remove(t, !0),
          this.useTintFadeEffect(e) &&
            (function (t, e) {
              if (t.hasOwnProperty('tintR')) return t;
              void 0 === e && (e = 16777215);
              var i = xr(e),
                n = Cr(e),
                s = wr(e);
              Object.defineProperty(t, 'tint', {
                get: function () {
                  return e;
                },
                set: function (r) {
                  (r = 16777215 & Math.floor(r)),
                    t.setTint && t.setTint(r),
                    e !== r && ((i = xr((e = r))), (n = Cr(e)), (s = wr(e)));
                },
              }),
                Object.defineProperty(t, 'tintR', {
                  get: function () {
                    return i;
                  },
                  set: function (n) {
                    (n = 255 & Math.floor(n)), i !== n && ((i = n), (t.tint = ((255 & n) << 16) | (65535 & e)));
                  },
                }),
                Object.defineProperty(t, 'tintG', {
                  get: function () {
                    return n;
                  },
                  set: function (i) {
                    (i = 255 & Math.floor(i)), n !== i && ((n = i), (t.tint = ((255 & i) << 8) | (16711935 & e)));
                  },
                }),
                Object.defineProperty(t, 'tintB', {
                  get: function () {
                    return s;
                  },
                  set: function (i) {
                    (i = 255 & Math.floor(i)), s !== i && ((s = i), (t.tint = (255 & i) | (16776960 & e)));
                  },
                }),
                Object.defineProperty(t, 'tintGray', {
                  get: function () {
                    return Math.floor((i + n + s) / 3);
                  },
                  set: function (e) {
                    (e = 255 & Math.floor(e)),
                      (i === e && n === e && s === e) ||
                        ((i = e), (n = e), (s = e), (t.tint = ((255 & e) << 16) | ((255 & e) << 8) | (255 & e)));
                  },
                }),
                (t.tint = e);
            })(e),
          this.viewportCoordinateEnable && Or(e, this.viewport),
          this.effectPropertiesConfig && kr(e, this.effectPropertiesConfig),
          e.once(
            'destroy',
            function () {
              Mr(this.removedGOs, e), this.isEmpty && this.emit('empty');
            },
            this
          );
        var i = new this.BobClass(this, e, t);
        return (this.bobs[t] = i), this;
      },
      add: function (t) {
        for (
          var e = this.createGameObjectCallback,
            i = this.createGameObjectScope,
            n = arguments.length,
            s = new Array(n > 1 ? n - 1 : 0),
            r = 1;
          r < n;
          r++
        )
          s[r - 1] = arguments[r];
        var o = e.call.apply(e, [i, this.scene].concat(s));
        this.addGO(t, o);
        var a = this.get(t);
        return this.fadeBob(a, 0, 1), this;
      },
      forEachGO: function (t, e) {
        for (var i in this.bobs) {
          var n = this.bobs[i].gameObject;
          if (e ? t.call(e, n, i, this) : t(n, i, this)) break;
        }
        return this;
      },
    },
    _r = {
      remove: function (t, e) {
        if (!this.has(t)) return this;
        var i = this.get(t);
        return (
          delete this.bobs[t],
          this.removedGOs.push(i.gameObject),
          e
            ? i.destroy()
            : this.fadeBob(i, void 0, 0, function () {
                i.destroy();
              }),
          this
        );
      },
      removeAll: function () {
        var t = this.bobs;
        for (var e in t) this.remove(e);
        return this;
      },
      clear: function (t) {
        void 0 === t && (t = !0);
        var e = this.bobs;
        for (var i in e) t && e[i].destroy(), delete e[i];
        return (this.removedGOs.length = 0), this;
      },
    },
    Rr = {
      hasProperty: function (t, e) {
        return !!this.has(t) && this.get(t).hasProperty(e);
      },
      getProperty: function (t, e) {
        if (this.has(t)) return this.get(t).getProperty(e);
      },
      isNumberProperty: function (t, e) {
        return 'number' == typeof this.getProperty(t, e);
      },
      setProperty: function (t, e, i) {
        return this.has(t)
          ? (this.symbols &&
              'string' == typeof i &&
              this.isNumberProperty(t, e) &&
              (i in this.symbols ? (i = this.symbols[i]) : console.warn("Can't find symbol ".concat(i))),
            this.get(t).setProperty(e, i),
            this)
          : this;
      },
      easeProperty: function (t, e, i, n, s, r, o, a) {
        return this.has(t)
          ? (void 0 === n && (n = 1e3),
            void 0 === s && (s = 'Linear'),
            void 0 === r && (r = 0),
            void 0 === o && (o = !1),
            this.symbols &&
              'string' == typeof i &&
              this.isNumberProperty(t, e) &&
              (i in this.symbols ? (i = this.symbols[i]) : console.warn("Can't find symbol ".concat(i))),
            this.get(t).easeProperty(e, i, n, s, r, o, a),
            this)
          : this;
      },
      hasTweenTask: function (t, e) {
        return !!this.has(t) && this.get(t).tweens.hasOwnProperty(e);
      },
      getTweenTask: function (t, e) {
        if (!this.has(t)) return null;
        var i = this.get(t).tweens[e];
        return i || null;
      },
    },
    Lr = {
      hasMethod: function (t, e) {
        return !!this.has(t) && this.get(t).hasMethod(e);
      },
      call: function (t, e) {
        var i;
        if (!this.has(t)) return this;
        for (var n = arguments.length, s = new Array(n > 2 ? n - 2 : 0), r = 2; r < n; r++) s[r - 2] = arguments[r];
        return (i = this.get(t)).call.apply(i, [e].concat(s)), this;
      },
    },
    Br = {
      hasData: function (t, e) {
        return !!this.has(t) && this.get(t).hasData(e);
      },
      getData: function (t, e) {
        if (this.has(t)) return this.get(t).getData(e);
      },
      setData: function (t, e, i) {
        return this.has(t) ? (this.get(t).setData(e, i), this) : this;
      },
    },
    Dr = function (t) {
      return void 0 !== t.displayWidth ? t.displayWidth : t.width;
    },
    Ir = function (t) {
      return void 0 !== t.displayHeight ? t.displayHeight : t.height;
    },
    jr = Phaser.Geom.Rectangle,
    Ar = Phaser.Math.Vector2,
    zr = Phaser.Math.RotateAround,
    Fr = function (t, e) {
      if ((void 0 === e ? (e = new jr()) : !0 === e && (void 0 === Vr && (Vr = new jr()), (e = Vr)), t.getBounds))
        return t.getBounds(e);
      var i, n, s, r, o, a, h, l;
      if (t.parentContainer) {
        var u = t.parentContainer.getBoundsTransformMatrix();
        Wr(t, e),
          u.transformPoint(e.x, e.y, e),
          (i = e.x),
          (n = e.y),
          Yr(t, e),
          u.transformPoint(e.x, e.y, e),
          (s = e.x),
          (r = e.y),
          Xr(t, e),
          u.transformPoint(e.x, e.y, e),
          (o = e.x),
          (a = e.y),
          Gr(t, e),
          u.transformPoint(e.x, e.y, e),
          (h = e.x),
          (l = e.y);
      } else
        Wr(t, e),
          (i = e.x),
          (n = e.y),
          Yr(t, e),
          (s = e.x),
          (r = e.y),
          Xr(t, e),
          (o = e.x),
          (a = e.y),
          Gr(t, e),
          (h = e.x),
          (l = e.y);
      return (
        (e.x = Math.min(i, s, o, h)),
        (e.y = Math.min(n, r, a, l)),
        (e.width = Math.max(i, s, o, h) - e.x),
        (e.height = Math.max(n, r, a, l) - e.y),
        e
      );
    },
    Vr = void 0,
    Wr = function (t, e, i) {
      return (
        void 0 === e ? (e = new Ar()) : !0 === e && (void 0 === Hr && (Hr = new Ar()), (e = Hr)),
        t.getTopLeft ? t.getTopLeft(e) : ((e.x = t.x - Dr(t) * t.originX), (e.y = t.y - Ir(t) * t.originY), Ur(t, e, i))
      );
    },
    Yr = function (t, e, i) {
      return (
        void 0 === e ? (e = new Ar()) : !0 === e && (void 0 === Hr && (Hr = new Ar()), (e = Hr)),
        t.getTopRight
          ? t.getTopRight(e)
          : ((e.x = t.x - Dr(t) * t.originX + Dr(t)), (e.y = t.y - Ir(t) * t.originY), Ur(t, e, i))
      );
    },
    Xr = function (t, e, i) {
      return (
        void 0 === e ? (e = new Ar()) : !0 === e && (void 0 === Hr && (Hr = new Ar()), (e = Hr)),
        t.getBottomLeft
          ? t.getBottomLeft(e)
          : ((e.x = t.x - Dr(t) * t.originX), (e.y = t.y - Ir(t) * t.originY + Ir(t)), Ur(t, e, i))
      );
    },
    Gr = function (t, e, i) {
      return (
        void 0 === e ? (e = new Ar()) : !0 === e && (void 0 === Hr && (Hr = new Ar()), (e = Hr)),
        t.getBottomRight
          ? t.getBottomRight(e)
          : ((e.x = t.x - Dr(t) * t.originX + Dr(t)), (e.y = t.y - Ir(t) * t.originY + Ir(t)), Ur(t, e, i))
      );
    },
    Hr = void 0,
    Ur = function (t, e, i) {
      (void 0 === i && (i = !1), 0 !== t.rotation && zr(e, t.x, t.y, t.rotation), i && t.parentContainer) &&
        t.parentContainer.getBoundsTransformMatrix().transformPoint(e.x, e.y, e);
      return e;
    },
    Nr = Phaser.Utils.Objects.GetValue,
    Kr = function (t, e, i) {
      var n, s, r, o, a;
      if (
        ('number' == typeof i
          ? (n = i)
          : ((n = Nr(i, 'color')),
            (s = Nr(i, 'lineWidth')),
            (r = Nr(i, 'fillColor')),
            (o = Nr(i, 'fillAlpha', 1)),
            (a = Nr(i, 'padding', 0))),
        Array.isArray(t))
      )
        for (var h = 0, l = t.length; h < l; h++) Jr(t[h], e, n, s, r, o, a);
      else Jr(t, e, n, s, r, o, a);
    },
    Jr = function (t, e, i, n, s, r, o) {
      if (t.getBounds || (void 0 !== t.width && void 0 !== t.height)) {
        void 0 === i && (i = 16777215),
          void 0 === n && (n = 1),
          void 0 === s && (s = null),
          void 0 === r && (r = 1),
          void 0 === o && (o = 0);
        var a = Wr(t, qr[0]);
        (a.x -= o), (a.y -= o);
        var h = Yr(t, qr[1]);
        (h.x += o), (h.y -= o);
        var l = Gr(t, qr[2]);
        (l.x += o), (l.y += o);
        var u = Xr(t, qr[3]);
        (u.x -= o),
          (u.y += o),
          null !== s && e.fillStyle(s, r).fillPoints(qr, !0, !0),
          null !== i && e.lineStyle(n, i).strokePoints(qr, !0, !0);
      }
    },
    qr = [
      { x: 0, y: 0 },
      { x: 0, y: 0 },
      { x: 0, y: 0 },
      { x: 0, y: 0 },
    ],
    Zr = {
      drawGameObjectsBounds: function (t, e) {
        return (
          this.forEachGO(function (i) {
            i.drawBounds ? i.drawBounds(t, e) : Kr(i, t, e);
          }),
          this
        );
      },
    };
  Object.assign(Zr, br, Er, _r, Rr, Lr, Br);
  var $r = Phaser.Cameras.Scene2D.BaseCamera,
    Qr = Phaser.Geom.Rectangle,
    to = function (t, e, i) {
      return (
        e instanceof $r || ((i = e), (e = void 0)),
        void 0 === i ? (i = new Qr()) : !0 === i && (i = eo),
        e ? t.scale.getViewPort(e, i) : t.scale.getViewPort(i)
      );
    },
    eo = new Qr(),
    io = Phaser.Utils.Objects.GetValue,
    no = (function () {
      function t(e, i) {
        r(this, t),
          (this.scene = e),
          (this.BobClass = io(i, 'BobClass', cr)),
          this.setCreateGameObjectCallback(io(i, 'createGameObject'), io(i, 'createGameObjectScope')),
          this.setEventEmitter(io(i, 'eventEmitter', void 0));
        var n = io(i, 'fade', 500);
        'number' == typeof n
          ? (this.setGOFadeMode(), this.setGOFadeTime(n))
          : (this.setGOFadeMode(io(n, 'mode')), this.setGOFadeTime(io(n, 'time', 500)));
        var s = io(i, 'viewportCoordinate', !1);
        !1 !== s
          ? (this.setViewportCoordinateEnable(io(i, 'enable', !0)), this.setViewport(io(s, 'viewport')))
          : this.setViewportCoordinateEnable(!1);
        var o = io(i, 'effectProperties', !1);
        this.setEffectPropertiesConfig(o),
          this.setSymbols(io(i, 'symbols')),
          (this.bobs = {}),
          (this.removedGOs = []),
          (this._timeScale = 1);
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function (t) {
              this.clear(!t), (this.createGameObjectCallback = void 0), (this.viewport = void 0), (this.scene = void 0);
            },
          },
          {
            key: 'timeScale',
            get: function () {
              return this._timeScale;
            },
            set: function (t) {
              if (this._timeScale !== t) {
                this._timeScale = t;
                var e = this.bobs;
                for (var i in e) e[i].setTimeScale(t);
              }
            },
          },
          {
            key: 'setTimeScale',
            value: function (t) {
              return (this.timeScale = t), this;
            },
          },
          {
            key: 'setCreateGameObjectCallback',
            value: function (t, e) {
              return (this.createGameObjectCallback = t), (this.createGameObjectScope = e), this;
            },
          },
          {
            key: 'setViewportCoordinateEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.viewportCoordinateEnable = t), this;
            },
          },
          {
            key: 'setEffectPropertiesConfig',
            value: function (t) {
              return void 0 === t && (t = !0), (this.effectPropertiesConfig = t), this;
            },
          },
          {
            key: 'setViewport',
            value: function (t) {
              return void 0 === t && (t = to(this.scene, this.scene.cameras.main)), (this.viewport = t), this;
            },
          },
          {
            key: 'setSymbols',
            value: function (t) {
              return (this.symbols = t), this;
            },
          },
          {
            key: 'isEmpty',
            get: function () {
              return dr(this.bobs) && 0 === this.removedGOs.length;
            },
          },
        ]),
        t
      );
    })();
  Object.assign(no.prototype, hr, Zr);
  var so = function (t, e) {
      if (t.length <= 1) return t;
      var i;
      void 0 === e && (e = !1);
      var n = t[0];
      return (
        (i = n.displayList ? n.displayList : n.parentContainer ? n.parentContainer.list : n.scene.sys.displayList)
          .depthSort && (i.depthSort(), (i = i.list)),
        e
          ? t.sort(function (t, e) {
              return i.indexOf(e) - i.indexOf(t);
            })
          : t.sort(function (t, e) {
              return i.indexOf(t) - i.indexOf(e);
            }),
        t
      );
    },
    ro = Phaser.Utils.Objects.GetValue,
    oo = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n ? (n = {}) : Array.isArray(n) && (n = { layers: n }),
          n.hasOwnProperty('fade') || (n.fade = 0),
          (n.viewportCoordinate = !1),
          (s = e.call(this, t, n));
        var o = ro(n, 'layers');
        if (o) for (var a = 0, h = o.length; a < h; a++) s.add(o[a]);
        return s;
      }
      return (
        a(i, [
          {
            key: 'setCreateGameObjectCallback',
            value: function (t, e) {
              return t || (t = ao), g(u(i.prototype), 'setCreateGameObjectCallback', this).call(this, t, e), this;
            },
          },
          {
            key: 'addGO',
            value: function (t, e) {
              return g(u(i.prototype), 'addGO', this).call(this, t, e), (e.name = t), this;
            },
          },
          {
            key: 'getLayer',
            value: function (t) {
              return this.getGO(t);
            },
          },
          {
            key: 'getLayers',
            value: function (t) {
              return (
                void 0 === t && (t = []),
                this.forEachGO(function (e) {
                  t.push(e);
                }),
                so(t, !1),
                t
              );
            },
          },
          {
            key: 'addToLayer',
            value: function (t, e) {
              var i = this.getGO(t);
              if (i) return e.isRexContainerLite ? e.addToLayer(i) : i.add(e), this;
              console.warn('Can\'t get layer "'.concat(t, '"'));
            },
          },
          {
            key: 'removeFromLayer',
            value: function (t, e, i) {
              var n = this.getGO(t);
              if (n)
                return (
                  void 0 === i && (i = !0),
                  e.isRexContainerLite ? e.removeFromLayer(n, i) : (n.remove(e), i && e.addToDisplayList()),
                  this
                );
              console.warn('Can\'t get layer "'.concat(t, '"'));
            },
          },
          {
            key: 'clearLayer',
            value: function (t, e) {
              void 0 === e && (e = !0);
              var i = this.getGO(t);
              if (i) {
                if (e) for (var n = i.getAll(), s = 0, r = n.length; s < r; s++) n.destroy();
                else i.removeAll();
                return this;
              }
              console.warn('Can\'t get layer "'.concat(t, '"'));
            },
          },
        ]),
        i
      );
    })(no),
    ao = function (t, e) {
      var i = t.add.layer();
      return void 0 !== e && i.setDepth(e), i;
    },
    ho = function (t) {
      return null == t || 'object' !== n(t)
        ? null
        : G(t)
        ? t
        : t.scene && G(t.scene)
        ? t.scene
        : t.parent && t.parent.scene && G(t.parent.scene)
        ? t.parent.scene
        : null;
    },
    lo = Phaser.Utils.Objects.GetValue,
    uo = (function () {
      function t(e, i) {
        r(this, t),
          this.setParent(e),
          (this.isShutdown = !1),
          this.setEventEmitter(lo(i, 'eventEmitter', !0)),
          this.parent &&
            (this.parent === this.scene
              ? this.scene.sys.events.once('shutdown', this.onEnvDestroy, this)
              : this.parent === this.game
              ? this.game.events.once('shutdown', this.onEnvDestroy, this)
              : this.parent.once && this.parent.once('destroy', this.onParentDestroy, this));
      }
      return (
        a(t, [
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.parent &&
                  (this.parent === this.scene
                    ? this.scene.sys.events.off('shutdown', this.onEnvDestroy, this)
                    : this.parent === this.game
                    ? this.game.events.off('shutdown', this.onEnvDestroy, this)
                    : this.parent.once && this.parent.off('destroy', this.onParentDestroy, this)),
                this.destroyEventEmitter(),
                (this.parent = void 0),
                (this.scene = void 0),
                (this.game = void 0),
                (this.isShutdown = !0));
            },
          },
          {
            key: 'destroy',
            value: function (t) {
              this.shutdown(t);
            },
          },
          {
            key: 'onEnvDestroy',
            value: function () {
              this.destroy(!0);
            },
          },
          {
            key: 'onParentDestroy',
            value: function (t, e) {
              this.destroy(e);
            },
          },
          {
            key: 'setParent',
            value: function (t) {
              return (this.parent = t), (this.scene = ho(t)), (this.game = H(t)), this;
            },
          },
        ]),
        t
      );
    })();
  Object.assign(uo.prototype, hr);
  var co = Phaser.Utils.Objects.GetValue,
    fo = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, n))._isRunning = !1),
          (s.isPaused = !1),
          (s.tickingState = !1),
          s.setTickingMode(co(n, 'tickingMode', 1)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'boot',
            value: function () {
              2 !== this.tickingMode || this.tickingState || this.startTicking();
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.stop(),
                this.tickingState && this.stopTicking(),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'setTickingMode',
            value: function (t) {
              'string' == typeof t && (t = po[t]), (this.tickingMode = t);
            },
          },
          {
            key: 'startTicking',
            value: function () {
              this.tickingState = !0;
            },
          },
          {
            key: 'stopTicking',
            value: function () {
              this.tickingState = !1;
            },
          },
          {
            key: 'isRunning',
            get: function () {
              return this._isRunning;
            },
            set: function (t) {
              this._isRunning !== t &&
                ((this._isRunning = t),
                1 === this.tickingMode && t != this.tickingState && (t ? this.startTicking() : this.stopTicking()));
            },
          },
          {
            key: 'start',
            value: function () {
              return (this.isPaused = !1), (this.isRunning = !0), this;
            },
          },
          {
            key: 'pause',
            value: function () {
              return this.isRunning && ((this.isPaused = !0), (this.isRunning = !1)), this;
            },
          },
          {
            key: 'resume',
            value: function () {
              return this.isPaused && (this.isRunning = !0), this;
            },
          },
          {
            key: 'stop',
            value: function () {
              return (this.isPaused = !1), (this.isRunning = !1), this;
            },
          },
          {
            key: 'complete',
            value: function () {
              (this.isPaused = !1), (this.isRunning = !1), this.emit('complete', this.parent, this);
            },
          },
        ]),
        i
      );
    })(uo),
    po = { no: 0, lazy: 1, always: 2 },
    vo = Phaser.Utils.Objects.GetValue,
    go = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = (s = e.call(this, t, n)).scene ? 'update' : 'step';
        return (s.tickEventName = vo(n, 'tickEventName', o)), (s.isSceneTicker = !yo(s.tickEventName)), s;
      }
      return (
        a(i, [
          {
            key: 'startTicking',
            value: function () {
              g(u(i.prototype), 'startTicking', this).call(this),
                this.isSceneTicker
                  ? this.scene.sys.events.on(this.tickEventName, this.update, this)
                  : this.game.events.on(this.tickEventName, this.update, this);
            },
          },
          {
            key: 'stopTicking',
            value: function () {
              g(u(i.prototype), 'stopTicking', this).call(this),
                this.isSceneTicker && this.scene
                  ? this.scene.sys.events.off(this.tickEventName, this.update, this)
                  : this.game && this.game.events.off(this.tickEventName, this.update, this);
            },
          },
        ]),
        i
      );
    })(fo),
    yo = function (t) {
      return 'step' === t || 'poststep' === t;
    },
    ko = Phaser.Utils.Objects.GetValue,
    mo = Phaser.Math.Clamp,
    bo = (function () {
      function t(e) {
        r(this, t), this.resetFromJSON(e);
      }
      return (
        a(t, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              (this.state = ko(t, 'state', xo)),
                (this.timeScale = ko(t, 'timeScale', 1)),
                (this.delay = ko(t, 'delay', 0)),
                (this.repeat = ko(t, 'repeat', 0)),
                (this.repeatCounter = ko(t, 'repeatCounter', 0)),
                (this.repeatDelay = ko(t, 'repeatDelay', 0)),
                (this.duration = ko(t, 'duration', 0)),
                (this.nowTime = ko(t, 'nowTime', 0)),
                (this.justRestart = ko(t, 'justRestart', !1));
            },
          },
          {
            key: 'toJSON',
            value: function () {
              return {
                state: this.state,
                timeScale: this.timeScale,
                delay: this.delay,
                repeat: this.repeat,
                repeatCounter: this.repeatCounter,
                repeatDelay: this.repeatDelay,
                duration: this.duration,
                nowTime: this.nowTime,
                justRestart: this.justRestart,
              };
            },
          },
          { key: 'destroy', value: function () {} },
          {
            key: 'setTimeScale',
            value: function (t) {
              return (this.timeScale = t), this;
            },
          },
          {
            key: 'setDelay',
            value: function (t) {
              return void 0 === t && (t = 0), (this.delay = t), this;
            },
          },
          {
            key: 'setDuration',
            value: function (t) {
              return (this.duration = t), this;
            },
          },
          {
            key: 'setRepeat',
            value: function (t) {
              return (this.repeat = t), this;
            },
          },
          {
            key: 'setRepeatInfinity',
            value: function () {
              return (this.repeat = -1), this;
            },
          },
          {
            key: 'setRepeatDelay',
            value: function (t) {
              return (this.repeatDelay = t), this;
            },
          },
          {
            key: 'start',
            value: function () {
              return (
                (this.nowTime = this.delay > 0 ? -this.delay : 0),
                (this.state = this.nowTime >= 0 ? wo : Co),
                (this.repeatCounter = 0),
                this
              );
            },
          },
          {
            key: 'stop',
            value: function () {
              return (this.state = xo), this;
            },
          },
          {
            key: 'update',
            value: function (t, e) {
              this.state !== xo &&
                this.state !== Po &&
                0 !== e &&
                0 !== this.timeScale &&
                ((this.nowTime += e * this.timeScale),
                (this.justRestart = !1),
                this.nowTime >= this.duration
                  ? -1 === this.repeat || this.repeatCounter < this.repeat
                    ? (this.repeatCounter++,
                      (this.justRestart = !0),
                      (this.nowTime -= this.duration),
                      this.repeatDelay > 0 && ((this.nowTime -= this.repeatDelay), (this.state = So)))
                    : ((this.nowTime = this.duration), (this.state = Po))
                  : this.nowTime >= 0 && (this.state = wo));
            },
          },
          {
            key: 't',
            get: function () {
              var t;
              switch (this.state) {
                case xo:
                case Co:
                case So:
                  t = 0;
                  break;
                case wo:
                  t = this.nowTime / this.duration;
                  break;
                case Po:
                  t = 1;
              }
              return mo(t, 0, 1);
            },
            set: function (t) {
              (t = mo(t, -1, 1)) < 0
                ? ((this.state = Co), (this.nowTime = -this.delay * t))
                : ((this.state = wo),
                  (this.nowTime = this.duration * t),
                  1 === t && 0 !== this.repeat && this.repeatCounter++);
            },
          },
          {
            key: 'setT',
            value: function (t) {
              return (this.t = t), this;
            },
          },
          {
            key: 'isIdle',
            get: function () {
              return this.state === xo;
            },
          },
          {
            key: 'isDelay',
            get: function () {
              return this.state === Co;
            },
          },
          {
            key: 'isCountDown',
            get: function () {
              return this.state === wo;
            },
          },
          {
            key: 'isRunning',
            get: function () {
              return this.state === Co || this.state === wo;
            },
          },
          {
            key: 'isDone',
            get: function () {
              return this.state === Po;
            },
          },
          {
            key: 'isOddIteration',
            get: function () {
              return 1 == (1 & this.repeatCounter);
            },
          },
          {
            key: 'isEvenIteration',
            get: function () {
              return 0 == (1 & this.repeatCounter);
            },
          },
        ]),
        t
      );
    })(),
    xo = 0,
    Co = 1,
    wo = 2,
    So = 3,
    Po = -1,
    To = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), ((s = e.call(this, t, n)).timer = new bo()), s;
      }
      return (
        a(i, [
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (g(u(i.prototype), 'shutdown', this).call(this, t), this.timer.destroy(), (this.timer = void 0));
            },
          },
          {
            key: 'start',
            value: function () {
              return this.timer.start(), g(u(i.prototype), 'start', this).call(this), this;
            },
          },
          {
            key: 'stop',
            value: function () {
              return this.timer.stop(), g(u(i.prototype), 'stop', this).call(this), this;
            },
          },
          {
            key: 'complete',
            value: function () {
              return this.timer.stop(), g(u(i.prototype), 'complete', this).call(this), this;
            },
          },
        ]),
        i
      );
    })(go),
    Oo = Phaser.Utils.Objects.GetValue,
    Mo = Phaser.Utils.Objects.GetAdvancedValue,
    Eo = Phaser.Tweens.Builders.GetEaseFunction,
    _o = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.timer.resetFromJSON(Oo(t, 'timer')),
                this.setEnable(Oo(t, 'enable', !0)),
                this.setTarget(Oo(t, 'target', this.parent)),
                this.setDelay(Mo(t, 'delay', 0)),
                this.setDuration(Mo(t, 'duration', 1e3)),
                this.setEase(Oo(t, 'ease', 'Linear')),
                this.setRepeat(Oo(t, 'repeat', 0)),
                this
              );
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return null == t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'setTarget',
            value: function (t) {
              return void 0 === t && (t = this.parent), (this.target = t), this;
            },
          },
          {
            key: 'setDelay',
            value: function (t) {
              return (this.delay = t), this;
            },
          },
          {
            key: 'setDuration',
            value: function (t) {
              return (this.duration = t), this;
            },
          },
          {
            key: 'setRepeat',
            value: function (t) {
              return (this.repeat = t), this;
            },
          },
          {
            key: 'setRepeatDelay',
            value: function (t) {
              return (this.repeatDelay = t), this;
            },
          },
          {
            key: 'setEase',
            value: function (t) {
              return void 0 === t && (t = 'Linear'), (this.ease = t), (this.easeFn = Eo(t)), this;
            },
          },
          {
            key: 'start',
            value: function () {
              return this.timer.isRunning || g(u(i.prototype), 'start', this).call(this), this;
            },
          },
          {
            key: 'restart',
            value: function () {
              return this.timer.stop(), this.start.apply(this, arguments), this;
            },
          },
          {
            key: 'stop',
            value: function (t) {
              return (
                void 0 === t && (t = !1),
                g(u(i.prototype), 'stop', this).call(this),
                t && (this.timer.setT(1), this.updateGameObject(this.target, this.timer), this.complete()),
                this
              );
            },
          },
          {
            key: 'update',
            value: function (t, e) {
              if (!this.isRunning || !this.enable || !this.parent.active) return this;
              var i = this.target,
                n = this.timer;
              return (
                n.update(t, e),
                n.isDelay || this.updateGameObject(i, n),
                this.emit('update', i, this),
                n.isDone && this.complete(),
                this
              );
            },
          },
          { key: 'updateGameObject', value: function (t, e) {} },
        ]),
        i
      );
    })(To),
    Ro = Phaser.Sound.BaseSound,
    Lo = function (t) {
      return t instanceof Ro;
    },
    Bo = Phaser.Utils.Objects.GetValue,
    Do = Phaser.Utils.Objects.GetAdvancedValue,
    Io = Phaser.Math.Linear,
    jo = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        var o;
        return (
          r(this, i),
          Lo(t) && ((s = n), (n = t), (t = void 0)),
          (n.active = !0),
          (n.scene = t),
          (n.game = n.manager.game),
          ((o = e.call(this, n, s)).volume = {}),
          o.resetFromJSON(s),
          o
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setMode(Bo(t, 'mode', 0)),
                this.setEnable(Bo(t, 'enable', !0)),
                this.setVolumeRange(Do(t, 'volume.start', this.parent.volume), Do(t, 'volume.end', 0)),
                this
              );
            },
          },
          {
            key: 'setMode',
            value: function (t) {
              return 'string' == typeof t && (t = Ao[t]), (this.mode = t), this;
            },
          },
          {
            key: 'setVolumeRange',
            value: function (t, e) {
              return (this.volume.start = t), (this.volume.end = e), this;
            },
          },
          {
            key: 'start',
            value: function () {
              return (
                this.timer.isRunning ||
                  (this.parent.setVolume(this.volume.start),
                  this.timer.setDelay(this.delay).setDuration(this.duration),
                  g(u(i.prototype), 'start', this).call(this)),
                this
              );
            },
          },
          {
            key: 'updateGameObject',
            value: function (t, e) {
              t.volume = Io(this.volume.start, this.volume.end, e.t);
            },
          },
          {
            key: 'complete',
            value: function () {
              switch ((g(u(i.prototype), 'complete', this).call(this), this.mode)) {
                case 1:
                  this.parent.stop();
                  break;
                case 2:
                  this.parent.stop(), this.parent.destroy();
              }
              return this;
            },
          },
        ]),
        i
      );
    })(_o),
    Ao = { stop: 1, destroy: 2 },
    zo = function (t, e, i, n, s) {
      Lo(t) && ((s = n), (n = i), (i = e), (e = t), (t = void 0)), void 0 === n && (n = 1), void 0 === s && (s = 0);
      var r,
        o = { mode: 0, volume: { start: s, end: n }, duration: i };
      return (
        'string' == typeof e && (e = t.sys.sound.add(e)),
        e.hasOwnProperty('_fade') ? (r = e._fade).stop().resetFromJSON(o) : ((r = new jo(t, e, o)), (e._fade = r)),
        r.start(),
        e.isPlaying || e.setVolume(s).play(),
        e
      );
    },
    Fo = function (t, e, i, n) {
      Lo(t) && ((n = i), (i = e), (e = t), (t = void 0)), void 0 === n && (n = !0);
      var s,
        r = { mode: n ? 2 : 1, volume: { start: e.volume, end: 0 }, duration: i };
      return (
        e.hasOwnProperty('_fade') ? (s = e._fade).stop().resetFromJSON(r) : ((s = new jo(t, e, r)), (e._fade = s)),
        s.start(),
        e.isPlaying || e.play(),
        e
      );
    },
    Vo = Phaser.Utils.Objects.GetValue,
    Wo = {
      setBackgroundMusicLoop: function (t) {
        return void 0 === t && (t = !0), (this.backgroundMusicLoop = t), this;
      },
      setBackgroundMusicFadeTime: function (t) {
        return (this.backgroundMusicFadeTime = t), this;
      },
      getBackgroundMusic: function () {
        return this.backgroundMusic;
      },
      setCurrentBackgroundMusic: function (t) {
        return (
          (this.backgroundMusic = t),
          t &&
            (t
              .once(
                'complete',
                function () {
                  this.backgroundMusic === t && (this.backgroundMusic.destroy(), (this.backgroundMusic = void 0));
                },
                this
              )
              .once(
                'destroy',
                function () {
                  this.backgroundMusic === t && (this.backgroundMusic = void 0);
                },
                this
              ),
            t.isPlaying || t.play()),
          this
        );
      },
      playBackgroundMusic: function (t, e) {
        if (this.backgroundMusic && this.backgroundMusic.key === t) return this;
        this.stopBackgroundMusic();
        var i = this.sound.add(t, {
          loop: Vo(e, 'loop', this.backgroundMusicLoop),
          mute: Vo(e, 'mute', this.backgroundMusicMute),
          volume: Vo(e, 'volume', this.backgroundMusicVolume),
          detune: Vo(e, 'detune', 0),
          rate: Vo(e, 'rate', 1),
        });
        return (
          this.setCurrentBackgroundMusic(i),
          this.backgroundMusicFadeTime > 0 && this.fadeInBackgroundMusic(this.backgroundMusicFadeTime),
          this
        );
      },
      pauseBackgroundMusic: function () {
        return this.backgroundMusic && this.backgroundMusic.pause(), this;
      },
      resumeBackgroundMusic: function () {
        return this.backgroundMusic && this.backgroundMusic.resume(), this;
      },
      stopBackgroundMusic: function () {
        return (
          this.backgroundMusic &&
            (this.backgroundMusicFadeTime > 0
              ? this.fadeOutBackgroundMusic(this.backgroundMusicFadeTime, !0)
              : (this.backgroundMusic.stop(), this.backgroundMusic.destroy(), (this.backgroundMusic = void 0))),
          this
        );
      },
      fadeInBackgroundMusic: function (t) {
        return this.backgroundMusic && zo(this.backgroundMusic, t, this.backgroundMusicVolume, 0), this;
      },
      fadeOutBackgroundMusic: function (t, e) {
        return this.backgroundMusic && Fo(this.backgroundMusic, t, e), this;
      },
      crossFadeBackgroundMusic: function (t, e) {
        var i = this.backgroundMusicFadeTime;
        return (
          (this.backgroundMusicFadeTime = 0),
          this.fadeOutBackgroundMusic(e, !0).playBackgroundMusic(t).fadeInBackgroundMusic(e),
          (this.backgroundMusicFadeTime = i),
          this
        );
      },
      setBackgroundMusicMute: function (t) {
        return void 0 === t && (t = !0), (this.backgroundMusicMute = t), this;
      },
      setBackgroundMusicVolume: function (t) {
        return (this.backgroundMusicVolume = t), this;
      },
      setBackgroundMusicRate: function (t) {
        return this.backgroundMusic && this.backgroundMusic.setRate(t), this;
      },
      setBackgroundMusicDetune: function (t) {
        return this.backgroundMusic && this.backgroundMusic.setDetune(t), this;
      },
    },
    Yo = Phaser.Utils.Objects.GetValue,
    Xo = {
      setBackgroundMusic2Loop: function (t) {
        return void 0 === t && (t = !0), (this.backgroundMusic2Loop = t), this;
      },
      setBackgroundMusic2FadeTime: function (t) {
        return (this.backgroundMusic2FadeTime = t), this;
      },
      getBackgroundMusic2: function () {
        return this.backgroundMusic2;
      },
      setCurrentBackgroundMusic2: function (t) {
        return (
          (this.backgroundMusic2 = t),
          t &&
            (t
              .once(
                'complete',
                function () {
                  this.backgroundMusic2 === t && (this.backgroundMusic2.destroy(), (this.backgroundMusic2 = void 0));
                },
                this
              )
              .once(
                'destroy',
                function () {
                  this.backgroundMusic2 === t && (this.backgroundMusic2 = void 0);
                },
                this
              ),
            t.isPlaying || t.play()),
          this
        );
      },
      playBackgroundMusic2: function (t, e) {
        if (this.backgroundMusic2 && this.backgroundMusic2.key === t) return this;
        this.stopBackgroundMusic2();
        var i = this.sound.add(t, {
          loop: Yo(e, 'loop', this.backgroundMusicLoop),
          mute: Yo(e, 'mute', this.backgroundMusic2Mute),
          volume: Yo(e, 'volume', this.backgroundMusic2Volume),
          detune: Yo(e, 'detune', 0),
          rate: Yo(e, 'rate', 1),
        });
        return (
          this.setCurrentBackgroundMusic2(i),
          this.backgroundMusic2FadeTime > 0 && this.fadeInBackgroundMusic2(this.backgroundMusic2FadeTime),
          this
        );
      },
      pauseBackgroundMusic2: function () {
        return this.backgroundMusic2 && this.backgroundMusic2.pause(), this;
      },
      resumeBackgroundMusic2: function () {
        return this.backgroundMusic2 && this.backgroundMusic2.resume(), this;
      },
      stopBackgroundMusic2: function () {
        return (
          this.backgroundMusic2 &&
            (this.backgroundMusic2FadeTime > 0
              ? this.fadeOutBackgroundMusic2(this.backgroundMusic2FadeTime, !0)
              : (this.backgroundMusic2.stop(), this.backgroundMusic2.destroy(), (this.backgroundMusic2 = void 0))),
          this
        );
      },
      fadeInBackgroundMusic2: function (t) {
        return this.backgroundMusic2 && zo(this.backgroundMusic2, t, this.backgroundMusic2Volume, 0), this;
      },
      fadeOutBackgroundMusic2: function (t, e) {
        return this.backgroundMusic2 && Fo(this.backgroundMusic2, t, e), this;
      },
      crossFadeBackgroundMusic2: function (t, e) {
        var i = this.backgroundMusic2FadeTime;
        return (
          (this.backgroundMusic2FadeTime = 0),
          this.fadeOutBackgroundMusic2(e, !0).playBackgroundMusic2(t).fadeInBackgroundMusic2(e),
          (this.backgroundMusic2FadeTime = i),
          this
        );
      },
      setBackgroundMusic2Mute: function (t) {
        return void 0 === t && (t = !0), (this.backgroundMusic2Mute = t), this;
      },
      setBackgroundMusic2Volume: function (t) {
        return (this.backgroundMusic2Volume = t), this;
      },
      setBackgroundMusic2Rate: function (t) {
        return this.backgroundMusic2 && this.backgroundMusic2.setRate(t), this;
      },
      setBackgroundMusic2Detune: function (t) {
        return this.backgroundMusic2 && this.backgroundMusic2.setDetune(t), this;
      },
    },
    Go = Phaser.Utils.Array.Remove,
    Ho = Phaser.Utils.Objects.GetValue,
    Uo = {
      getSoundEffects: function () {
        return this.soundEffects;
      },
      getLastSoundEffect: function () {
        return this.soundEffects[this.soundEffects.length - 1];
      },
      playSoundEffect: function (t, e) {
        var i = this.sound.add(t, {
          mute: Ho(e, 'mute', this.soundEffectsMute),
          volume: Ho(e, 'volume', this.soundEffectsVolume),
          detune: Ho(e, 'detune', 0),
          rate: Ho(e, 'rate', 1),
        });
        return (
          this.soundEffects.push(i),
          i
            .once(
              'complete',
              function () {
                i.destroy(), this.sound && Go(this.soundEffects, i);
              },
              this
            )
            .once(
              'destroy',
              function () {
                this.sound && Go(this.soundEffects, i);
              },
              this
            )
            .play(),
          this
        );
      },
      stopAllSoundEffects: function () {
        for (var t = this.soundEffects.length - 1; t >= 0; t--) {
          var e = this.soundEffects[t];
          e.stop(), e.destroy();
        }
        return this;
      },
      fadeInSoundEffect: function (t) {
        var e = this.getLastSoundEffect();
        return e && zo(e, t, this.soundEffectsVolume, 0), this;
      },
      fadeOutSoundEffect: function (t, e) {
        var i = this.getLastSoundEffect();
        return i && Fo(i, t, e), this;
      },
      fadeOutAllSoundEffects: function (t, e) {
        for (var i = this.soundEffects.length - 1; i >= 0; i--) Fo(this.soundEffects[i], t, e);
        return this;
      },
      setSoundEffectMute: function (t, e) {
        if ((void 0 === t && (t = !0), void 0 === e && (e = !1), e)) {
          var i = this.getLastSoundEffect();
          i && i.setMute(t);
        } else this.soundEffectsMute = t;
        return this;
      },
      setSoundEffectVolume: function (t, e) {
        if ((void 0 === e && (e = !1), e)) {
          var i = this.getLastSoundEffect();
          i && i.setVolume(t);
        } else this.soundEffectsVolume = t;
        return this;
      },
      setSoundEffectDetune: function (t, e) {
        var i;
        void 0 === e && (e = !1);
        for (var n = 0, s = (i = e ? [this.getLastSoundEffect()] : this.soundEffects).length; n < s; n++)
          i[n].setDetune(t);
        return this;
      },
      setSoundEffectRate: function (t, e) {
        var i;
        void 0 === e && (e = !1);
        for (var n = 0, s = (i = e ? [this.getLastSoundEffect()] : this.soundEffects).length; n < s; n++)
          i[n].setRate(t);
        return this;
      },
    },
    No = Phaser.Utils.Array.Remove,
    Ko = Phaser.Utils.Objects.GetValue,
    Jo = {
      getSoundEffects2: function () {
        return this.soundEffects2;
      },
      getLastSoundEffect2: function () {
        return this.soundEffects2[this.soundEffects2.length - 1];
      },
      playSoundEffect2: function (t, e) {
        var i = this.sound.add(t, {
          mute: Ko(e, 'mute', this.soundEffects2Mute),
          volume: Ko(e, 'volume', this.soundEffects2Volume),
          detune: Ko(e, 'detune', 0),
          rate: Ko(e, 'rate', 1),
        });
        return (
          this.soundEffects2.push(i),
          i
            .once(
              'complete',
              function () {
                i.destroy(), this.sound && No(this.soundEffects2, i);
              },
              this
            )
            .once(
              'destroy',
              function () {
                this.sound && No(this.soundEffects2, i);
              },
              this
            )
            .play(),
          this
        );
      },
      stopAllSoundEffects2: function () {
        for (var t = this.soundEffects.length - 1; t >= 0; t--) {
          var e = this.soundEffects[t];
          e.stop(), e.destroy();
        }
        return this;
      },
      fadeInSoundEffect2: function (t) {
        var e = this.getLastSoundEffect2();
        return e && zo(e, t, this.soundEffects2Volume, 0), this;
      },
      fadeOutSoundEffect2: function (t, e) {
        var i = this.getLastSoundEffect2();
        return i && Fo(i, t, e), this;
      },
      fadeOutAllSoundEffects2: function (t, e) {
        for (var i = this.soundEffects2.length - 1; i >= 0; i--) Fo(this.soundEffects2[i], t, e);
        return this;
      },
      setSoundEffect2Mute: function (t, e) {
        if ((void 0 === t && (t = !0), void 0 === e && (e = !1), e)) {
          var i = this.getLastSoundEffect2();
          i && i.setMute(t);
        } else this.soundEffects2Mute = t;
        return this;
      },
      setSoundEffect2Volume: function (t, e) {
        if ((void 0 === e && (e = !1), e)) {
          var i = this.getLastSoundEffect2();
          i && i.setVolume(t);
        } else this.soundEffects2Volume = t;
        return this;
      },
      setSoundEffect2Detune: function (t, e) {
        var i;
        void 0 === e && (e = !1);
        for (var n = 0, s = (i = e ? [this.getLastSoundEffect2()] : this.soundEffects2).length; n < s; n++)
          i[n].setDetune(t);
        return this;
      },
      setSoundEffect2Rate: function (t, e) {
        var i;
        void 0 === e && (e = !1);
        for (var n = 0, s = (i = e ? [this.getLastSoundEffect2()] : this.soundEffects2).length; n < s; n++)
          i[n].setRate(t);
        return this;
      },
    },
    qo = {};
  Object.assign(qo, Wo, Xo, Uo, Jo);
  var Zo = Phaser.Utils.Objects.GetValue,
    $o = (function () {
      function t(e, i) {
        r(this, t),
          (this.sound = (function (t) {
            return G(t) ? t.sys.sound : t.sound;
          })(e)),
          (this.backgroundMusic = void 0),
          (this._backgroundMusicVolume = Zo(i, 'bgm.volume', 1)),
          (this._backgroundMusicMute = Zo(i, 'bgm.mute', !1)),
          this.setBackgroundMusicLoop(Zo(i, 'bgm.loop', !0)),
          this.setBackgroundMusicFadeTime(Zo(i, 'bgm.fade', 500)),
          (this.backgroundMusic2 = void 0),
          (this._backgroundMusic2Volume = Zo(i, 'bgm2.volume', 1)),
          (this._backgroundMusic2Mute = Zo(i, 'bgm2.mute', !1)),
          this.setBackgroundMusic2Loop(Zo(i, 'bgm2.loop', !0)),
          this.setBackgroundMusic2FadeTime(Zo(i, 'bgm2.fade', 500)),
          (this.soundEffects = []),
          (this._soundEffectsVolume = Zo(i, 'soundEffect.volume', 1)),
          (this.soundEffects2 = []),
          (this._soundEffects2Volume = Zo(i, 'soundEffect2.volume', 1));
        var n = Zo(i, 'bgm.initial', void 0);
        n && this.setCurrentBackgroundMusic(n);
        var s = Zo(i, 'bgm2.initial', void 0);
        s && this.setCurrentBackgroundMusic2(s);
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              if (
                (this.backgroundMusic && this.backgroundMusic.destroy(),
                (this.backgroundMusic = void 0),
                this.backgroundMusic2 && this.backgroundMusic2.destroy(),
                (this.backgroundMusic2 = void 0),
                this.soundEffects.length)
              )
                for (var t = this.soundEffects.length - 1; t >= 0; t--) this.soundEffects[t].destroy();
              if (((this.soundEffects.length = 0), this.soundEffects2.length))
                for (t = this.soundEffects2.length - 1; t >= 0; t--) this.soundEffects2[t].destroy();
              return (this.soundEffects2.length = 0), (this.sound = void 0), this;
            },
          },
          {
            key: 'backgroundMusicMute',
            get: function () {
              return this._backgroundMusicMute;
            },
            set: function (t) {
              (this._backgroundMusicMute = t), this.backgroundMusic && this.backgroundMusic.setMute(mute);
            },
          },
          {
            key: 'backgroundMusicVolume',
            get: function () {
              return this._backgroundMusicVolume;
            },
            set: function (t) {
              (this._backgroundMusicVolume = t), this.backgroundMusic && this.backgroundMusic.setVolume(t);
            },
          },
          {
            key: 'backgroundMusic2Mute',
            get: function () {
              return this._backgroundMusic2Mute;
            },
            set: function (t) {
              (this._backgroundMusic2Mute = t), this.backgroundMusic2 && this.backgroundMusic2.setMute(mute);
            },
          },
          {
            key: 'backgroundMusic2Volume',
            get: function () {
              return this._backgroundMusic2Volume;
            },
            set: function (t) {
              (this._backgroundMusic2Volume = t), this.backgroundMusic2 && this.backgroundMusic2.setVolume(t);
            },
          },
          {
            key: 'soundEffectsMute',
            get: function () {
              return this._soundEffectsMute;
            },
            set: function (t) {
              this._soundEffectsMute = t;
              for (var e = this.soundEffects, i = 0, n = e.length; i < n; i++) e[i].setMute(t);
            },
          },
          {
            key: 'soundEffectsVolume',
            get: function () {
              return this._soundEffectsVolume;
            },
            set: function (t) {
              this._soundEffectsVolume = t;
              for (var e = this.soundEffects, i = 0, n = e.length; i < n; i++) e[i].setVolume(t);
            },
          },
          {
            key: 'soundEffects2Mute',
            get: function () {
              return this._soundEffects2Mute;
            },
            set: function (t) {
              this._soundEffects2Mute = t;
              for (var e = this.soundEffects, i = 0, n = soundEffects2.length; i < n; i++) e[i].setMute(t);
            },
          },
          {
            key: 'soundEffects2Volume',
            get: function () {
              return this._soundEffects2Volume;
            },
            set: function (t) {
              this._soundEffects2Volume = t;
              for (var e = this.soundEffects2, i = 0, n = e.length; i < n; i++) e[i].setVolume(t);
            },
          },
        ]),
        t
      );
    })();
  Object.assign($o.prototype, qo);
  var Qo = Phaser.Utils.Objects.GetValue,
    ta = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'startTicking',
            value: function () {
              g(u(i.prototype), 'startTicking', this).call(this), this.scene.sys.events.on('update', this.update, this);
            },
          },
          {
            key: 'stopTicking',
            value: function () {
              g(u(i.prototype), 'stopTicking', this).call(this),
                this.scene && this.scene.sys.events.off('update', this.update, this);
            },
          },
          {
            key: 'update',
            value: function (t, e) {
              return this.isRunning && 0 !== this.timeScale ? (this.tick(e), this) : this;
            },
          },
        ]),
        i
      );
    })(
      (function (t) {
        l(i, t);
        var e = p(i);
        function i(t, n) {
          var s;
          return r(this, i), (s = e.call(this, t, n)).resetFromJSON(n), s.boot(), s;
        }
        return (
          a(i, [
            {
              key: 'resetFromJSON',
              value: function (t) {
                return (
                  (this.isRunning = Qo(t, 'isRunning', !1)),
                  (this.timeScale = Qo(t, 'timeScale', 1)),
                  (this.now = Qo(t, 'now', 0)),
                  this
                );
              },
            },
            {
              key: 'toJSON',
              value: function () {
                return {
                  isRunning: this.isRunning,
                  timeScale: this.timeScale,
                  now: this.now,
                  tickingMode: this.tickingMode,
                };
              },
            },
            {
              key: 'start',
              value: function (t) {
                return (
                  void 0 === t && (t = 0),
                  (this.delta = 0),
                  (this.now = t),
                  g(u(i.prototype), 'start', this).call(this),
                  this
                );
              },
            },
            {
              key: 'seek',
              value: function (t) {
                return (this.now = t), this;
              },
            },
            {
              key: 'setTimeScale',
              value: function (t) {
                return (this.timeScale = t), this;
              },
            },
            {
              key: 'tick',
              value: function (t) {
                return (
                  (t *= this.timeScale),
                  (this.now += t),
                  (this.delta = t),
                  this.emit('update', this.now, this.delta),
                  this
                );
              },
            },
          ]),
          i
        );
      })(fo)
    ),
    ea = function (t, e) {
      return void 0 === e && (e = 0.5), t <= e ? (t /= e) : (t = 1 - (t - e) / (1 - e)), t;
    },
    ia = Phaser.Math.Clamp,
    na = (function () {
      function t(e, i) {
        r(this, t), this.setTimeline(e).reset(i);
      }
      return (
        a(t, [
          {
            key: 'setTimeline',
            value: function (t) {
              return (this.timeline = t), this;
            },
          },
          {
            key: 'setName',
            value: function (t) {
              return (this.name = t), this;
            },
          },
          {
            key: 'setCallbacks',
            value: function (t, e, i, n) {
              return (this.target = t), (this.onStart = e), (this.onProgress = i), (this.onComplete = n), this;
            },
          },
          {
            key: 'setDuration',
            value: function (t, e) {
              return (
                void 0 === e && (e = !1), (this.duration = t), (this.remainder = t), (this.t = 0), (this.yoyo = e), this
              );
            },
          },
          {
            key: 'setPaused',
            value: function (t) {
              return (this.isPaused = t), this;
            },
          },
          {
            key: 'pause',
            value: function () {
              return (this.isPaused = !0), this;
            },
          },
          {
            key: 'resume',
            value: function () {
              return (this.isPaused = !1), this;
            },
          },
          {
            key: 'setRemoved',
            value: function (t) {
              return (this.removed = t), this;
            },
          },
          {
            key: 'remove',
            value: function () {
              return (this.removed = !0), this;
            },
          },
          {
            key: 'seek',
            value: function (t) {
              return (this.remainder = this.duration * (1 - t)), this;
            },
          },
          {
            key: 'reset',
            value: function (t) {
              return (
                this.setName(t.name)
                  .setDuration(t.duration, t.yoyo)
                  .setCallbacks(t.target, t.onStart, t.onProgress, t.onComplete)
                  .setPaused(!1)
                  .setRemoved(!1),
                this
              );
            },
          },
          {
            key: 'onFree',
            value: function () {
              this.setTimeline().setCallbacks();
            },
          },
          {
            key: 'getProgress',
            value: function () {
              var t = 1 - this.remainder / this.duration;
              return (t = ia(t, 0, 1)), this.yoyo && (t = ea(t)), t;
            },
          },
          {
            key: 'setProgress',
            value: function (t) {
              (t = ia(t, 0, 1)), (this.remainder = this.duration * (1 - t));
            },
          },
          {
            key: 'runCallback',
            value: function (t) {
              t && t(this.target, this.t, this);
            },
          },
          {
            key: 'update',
            value: function (t, e) {
              if (this.removed) return !0;
              if (this.isPaused) return !1;
              (this.remainder -= e), (this.t = this.getProgress()), this.runCallback(this.onProgress);
              var i = this.remainder <= 0;
              return i && this.runCallback(this.onComplete), i;
            },
          },
        ]),
        t
      );
    })(),
    sa = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'allocate',
            value: function () {
              return this.pop();
            },
          },
          {
            key: 'free',
            value: function (t) {
              t.onFree(), this.push(t);
            },
          },
          {
            key: 'freeMultiple',
            value: function (t) {
              for (var e = 0, i = t.length; e < i; e++) this.free(t[e]);
              return this;
            },
          },
        ]),
        i
      );
    })(ot),
    ra = Phaser.Utils.Objects.GetValue,
    oa = new sa(),
    aa = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i), ((s = e.call(this, t, n)).addedTimers = []), (s.timers = []), (s.timerPool = ra(n, 'pool', oa)), s
        );
      }
      return (
        a(i, [
          {
            key: 'shutdown',
            value: function () {
              this.isShutdown ||
                (this.timerPool.freeMultiple(this.addedTimers).freeMultiple(this.timers),
                (this.timerPool = void 0),
                (this.addedTimers = void 0),
                (this.timers = void 0),
                g(u(i.prototype), 'shutdown', this).call(this));
            },
          },
          {
            key: 'addTimer',
            value: function (t) {
              var e = this.timerPool.allocate();
              return (
                e ? e.setTimeline(this).reset(t) : (e = new na(this, t)),
                this.addedTimers.push(e),
                e.runCallback(e.onStart),
                this.isRunning || this.start(),
                e
              );
            },
          },
          {
            key: 'delayCall',
            value: function (t, e, i, n) {
              return this.addTimer({
                duration: t,
                onComplete: function (t, s, r) {
                  void 0 === i && (i = []), i.push(r), e.apply(n, i);
                },
              });
            },
          },
          {
            key: 'delayEvent',
            value: function (t, e) {
              this.removeDelayEvent(e);
              var i = this.delayCall(
                t,
                function () {
                  this.removeDelayEvent(e), this.emit(e);
                },
                [],
                this
              );
              return (
                this.once('_remove.'.concat(e), function () {
                  i.remove(), (i = void 0);
                }),
                this
              );
            },
          },
          {
            key: 'removeDelayEvent',
            value: function (t) {
              return this.emit('_remove.'.concat(t)), this;
            },
          },
          {
            key: 'getTimers',
            value: function (t) {
              for (var e = [], i = [this.addedTimers, this.timers], n = 0, s = i.length; n < s; n++)
                for (var r = i[n], o = 0, a = r.length; o < a; o++) {
                  var h = r[o];
                  h.name === t && e.push(h);
                }
              return e;
            },
          },
          {
            key: 'update',
            value: function (t, e) {
              var n;
              if ((g(u(i.prototype), 'update', this).call(this, t, e), this.isRunning)) {
                (n = this.timers).push.apply(n, x(this.addedTimers)), (this.addedTimers.length = 0);
                for (var s = [], r = 0, o = this.timers.length; r < o; r++) {
                  var a = this.timers[r];
                  a.update(this.now, this.delta) ? this.timerPool.free(a) : s.push(a);
                }
                (this.timers = s), 0 === this.timers.length && 0 === this.addedTimers.length && this.complete();
              }
            },
          },
        ]),
        i
      );
    })(ta),
    ha = (function () {
      function t(e) {
        r(this, t),
          e || (this.setEventEmitter(!0), (e = this)),
          (this.parent = e),
          (this.waitId = 0),
          (this.waitCompleteEventName = '_wait.complete'),
          (this.removeWaitEventsEventName = '_remove.wait');
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              this.removeWaitEvents(), this.clearWaitCompleteCallbacks(), (this.parent = null);
            },
          },
          {
            key: 'waitEvent',
            value: function (t, e, i) {
              var n = this.getWaitCompleteTriggerCallback(i);
              return (
                t.once(e, n, this),
                this.parent.once(this.removeWaitEventsEventName, function () {
                  t.off(e, n, this);
                }),
                this.parent
              );
            },
          },
          {
            key: 'getWaitCompleteTriggerCallback',
            value: function (t) {
              void 0 === t && (t = !0);
              var e = this.waitId,
                i = this,
                n = function () {
                  e < i.waitId || (i.waitId++, i.removeWaitEvents(), i.parent.emit(i.waitCompleteEventName));
                };
              if (t) {
                return function () {
                  !(function (t, e, i, n, s) {
                    var r = ho(t);
                    r.time.delayedCall(e, function () {
                      r.sys.events.once('preupdate', function () {
                        i.call(n, s);
                      });
                    });
                  })(i.parent, 0, n);
                };
              }
              return n;
            },
          },
          {
            key: 'removeWaitEvents',
            value: function () {
              return this.parent.emit(this.removeWaitEventsEventName), this;
            },
          },
          {
            key: 'addWaitCompleteCallback',
            value: function (t, e) {
              return this.parent.on(this.waitCompleteEventName, t, e), this;
            },
          },
          {
            key: 'clearWaitCompleteCallbacks',
            value: function () {
              return this.parent.off(this.waitCompleteEventName), this;
            },
          },
        ]),
        t
      );
    })();
  Object.assign(ha.prototype, hr);
  var la = {
      setClickTarget: function (t) {
        (this.clickTarget = t),
          t ? (G(t) ? (this.clickEE = t.input) : (this.clickEE = t.setInteractive())) : (this.clickEE = null);
      },
      waitClick: function () {
        return this.clickEE ? this.waitEvent(this.clickEE, 'pointerdown') : this.waitTime(0);
      },
      waitKeyDown: function (t) {
        var e,
          i,
          n,
          s,
          r = this.scene.input.keyboard;
        if ('string' == typeof t) {
          if (-1 === t.indexOf('|')) return this.waitEvent(r, 'keydown-'.concat(t.toUpperCase()));
          for (
            var o = 0,
              a = ((e = t),
              (n = '(?<!\\\\)\\'.concat((i = '|'))),
              (s = '\\'.concat(i)),
              e.split(new RegExp(n, 'g')).map(function (t) {
                return t.replace(s, i);
              })).length;
            o < a;
            o++
          )
            this.waitEvent(r, 'keydown-'.concat(t.toUpperCase()));
          return this.parent;
        }
        return this.waitEvent(r, 'keydown');
      },
    },
    ua = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t)).waitCompleteEventName = Ct(n, 'completeEventName', s.waitCompleteEventName)),
          s.setClickTarget(Ct(n, 'clickTarget', s.scene)),
          s.setCameraTarget(Ct(n, 'camera', s.scene.cameras.main)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'clickTarget',
            get: function () {
              return this.parent.clickTarget;
            },
            set: function (t) {
              this.parent.clickTarget = t;
            },
          },
          {
            key: 'cameraTarget',
            get: function () {
              return this.parent.cameraTarget;
            },
            set: function (t) {
              this.parent.cameraTarget = t;
            },
          },
          {
            key: 'destroy',
            value: function () {
              g(u(i.prototype), 'destroy', this).call(this), this.setClickTarget(), this.setCameraTarget();
            },
          },
          {
            key: 'scene',
            get: function () {
              return this.parent.managersScene;
            },
          },
        ]),
        i
      );
    })(ha),
    ca = {
      waitAny: function (t) {
        if (!t) return this.waitTime(0);
        var e = !1;
        for (var i in t)
          switch (i) {
            case 'time':
              (e = !0), this.waitTime(t.time);
              break;
            case 'click':
              (e = !0), this.waitClick(t.key);
              break;
            case 'key':
              (e = !0), this.waitKeyDown(t.key);
              break;
            case 'bgm':
              (e = !0), this.waitBackgroundMusicComplete();
              break;
            case 'bgm2':
              (e = !0), this.waitBackgroundMusic2Complete();
              break;
            case 'se':
              (e = !0), this.waitSoundEffectComplete();
              break;
            case 'se2':
              (e = !0), this.waitSoundEffect2Complete();
              break;
            case 'camera':
              (e = !0), this.waitCameraEffectComplete('camera.'.concat(t.camera.toLowerCase()));
              break;
            default:
              var n = i.split('.');
              if (2 === n.length) {
                var s = n[0],
                  r = n[1],
                  o = this.parent.getGameObjectManager(void 0, s);
                if (!o) continue;
                if ('destroy' === r) return this.waitGameObjectDestroy(void 0, s);
                if ('number' == typeof o.getProperty(s, r)) {
                  (e = !0), this.waitGameObjectTweenComplete(void 0, s, r);
                  continue;
                }
                var a = r,
                  h = a.startsWith('!');
                h && (a = a.substring(1)), o.hasData(s, r) && ((e = !0), this.waitGameObjectDataFlag(void 0, s, a, !h));
              }
          }
        return e || this.waitTime(0), this.parent;
      },
    };
  Object.assign(
    ua.prototype,
    {
      waitTime: function (t) {
        var e = this.parent.timeline;
        return (
          e.delayEvent(t, 'delay'),
          this.parent.once(this.removeWaitEventsEventName, function () {
            e.removeDelayEvent('delay');
          }),
          this.waitEvent(e, 'delay')
        );
      },
    },
    la,
    {
      waitGameObjectTweenComplete: function (t, e, i) {
        var n = this.parent.getGameObjectTweenTask(t, e, i);
        return n ? this.waitEvent(n, 'complete') : this.waitTime(0);
      },
      waitGameObjectDataFlag: function (t, e, i, n) {
        var s = this.parent.getGameObject(t, e);
        if (!s) return this.waitTime(0);
        if (s.getData(i) === n) return this.waitTime(0);
        var r = 'changedata-'.concat(i),
          o = function (t, e, i) {
            (e = !!e) === n && t.emit('_dataFlagMatch');
          };
        return (
          s.on(r, o),
          this.parent.once(this.removeWaitEventsEventName, function () {
            s.off(r, o);
          }),
          this.waitEvent(s, '_dataFlagMatch')
        );
      },
      waitGameObjectDestroy: function (t, e) {
        var i = this.parent.getGameObject(t, e);
        return i ? this.waitEvent(i, 'destroy') : this.waitTime(0);
      },
      waitGameObjectManagerEmpty: function (t) {
        if (t) {
          var e = this.parent.getGameObjectManager(t);
          return e ? this.waitEvent(e, 'empty') : this.waitTime(0);
        }
        var i = this.parent.gameObjectManagers,
          n = !1;
        for (var s in i) (n = !0), this.waitEvent(i[s], 'empty');
        return n ? this.parent : this.waitTime(0);
      },
    },
    {
      setCameraTarget: function (t) {
        return (this.cameraTarget = t), this;
      },
      waitCameraEffectComplete: function (t) {
        var e,
          i,
          n = this.cameraTarget;
        if (!n) return this.waitTime(0);
        switch (t) {
          case 'camera.fadein':
            (e = n.fadeEffect), (i = 'camerafadeincomplete');
            break;
          case 'camera.fadeout':
            (e = n.fadeEffect), (i = 'camerafadeoutcomplete');
            break;
          case 'camera.flash':
            (e = n.flashEffect), (i = 'cameraflashcomplete');
            break;
          case 'camera.shake':
            (e = n.shakeEffect), (i = 'camerashakecomplete');
            break;
          case 'camera.zoom':
            (e = n.zoomEffect), (i = 'camerazoomcomplete');
            break;
          case 'camera.rotate':
            (e = n.rotateToEffect), (i = 'camerarotatecomplete');
            break;
          case 'camera.scroll':
            (e = n.panEffect), (i = 'camerapancomplete');
        }
        return e.isRunning ? this.waitEvent(n, i) : this.waitTime(0);
      },
    },
    {
      waitSoundEffectComplete: function () {
        if (!this.parent.soundManager) return this.waitTime(0);
        var t = this.parent.soundManager.getLastSoundEffect();
        return t ? this.waitEvent(t, 'complete') : this.waitTime(0);
      },
      waitSoundEffect2Complete: function () {
        if (!this.parent.soundManager) return this.waitTime(0);
        var t = this.parent.soundManager.getLastSoundEffect2();
        return t ? this.waitEvent(t, 'complete') : this.waitTime(0);
      },
      waitBackgroundMusicComplete: function () {
        if (!this.parent.soundManager) return this.waitTime(0);
        var t = this.parent.soundManager.getBackgroundMusic();
        return t ? this.waitEvent(t, 'complete') : this.waitTime(0);
      },
      waitBackgroundMusic2Complete: function () {
        if (!this.parent.soundManager) return this.waitTime(0);
        var t = this.parent.soundManager.getBackgroundMusic2();
        return t ? this.waitEvent(t, 'complete') : this.waitTime(0);
      },
    },
    ca
  );
  var da = Phaser.Utils.Objects.GetValue,
    fa = function (t, e) {
      (this.clickTarget = void 0),
        (this.cameraTarget = void 0),
        (this.managersScene = t),
        (this.gameObjectManagers = {});
      var i = da(e, 'layers', !1);
      !1 !== i && (this.gameObjectManagers.layer = new oo(t, i));
      var n = da(e, 'sounds');
      return (
        !1 !== n && (this.soundManager = new $o(t, n)),
        (this.timeline = new aa(this)),
        (this.waitEventManager = new ua(this, e)),
        this
      );
    },
    pa = function (t) {
      for (var e in ((this.timeline.timeScale = t), this.gameObjectManagers))
        this.gameObjectManagers[e].setTimeScale(t);
      return this;
    },
    va = function () {
      return this.timeline.timeScale;
    },
    ga = function (t) {
      for (var e in (this.waitEventManager.destroy(), (this.waitEventManager = void 0), this.gameObjectManagers))
        this.gameObjectManagers[e].destroy(t), delete this.gameObjectManagers[e];
      this.soundManager && (this.soundManager.destroy(), (this.soundManager = void 0)),
        this.timeline && (this.timeline.destroy(), (this.timeline = void 0)),
        (this.clickTarget = void 0),
        (this.cameraTarget = void 0),
        (this.managersScene = void 0);
    },
    ya = {
      addGameObjectManager: function (t, e) {
        void 0 === t && (t = {}), void 0 === e && (e = no), t.createGameObjectScope || (t.createGameObjectScope = this);
        var i = new e(this.managersScene, t);
        return (this.gameObjectManagers[t.name] = i), this;
      },
      getGameObjectManager: function (t, e) {
        if (t) return (i = this.gameObjectManagers[t]);
        for (var t in this.gameObjectManagers) {
          var i;
          if ((i = this.gameObjectManagers[t]).has(e)) return i;
        }
      },
      getGameObjectManagerNames: function () {
        var t = [];
        for (var e in this.gameObjectManagers) t.push(e);
        return t;
      },
      getGameObjectManagerName: function (t) {
        for (var e in this.gameObjectManagers) if (this.gameObjectManagers[e].has(t)) return e;
      },
      hasGameObjectMananger: function (t) {
        return t in this.gameObjectManagers;
      },
    },
    ka = {
      createGameObject: function (t, e) {
        for (var i, n = arguments.length, s = new Array(n > 2 ? n - 2 : 0), r = 2; r < n; r++) s[r - 2] = arguments[r];
        return (i = this.getGameObjectManager(t, e)).add.apply(i, [e].concat(s)), this;
      },
      destroyGameObject: function (t, e) {
        var i = this.getGameObjectManager(t, e);
        return void 0 === e ? i.removeAll() : i.remove(e), this;
      },
      hasGameObject: function (t, e) {
        return !!this.getGameObjectManager(t, e);
      },
      callGameObjectMethod: function (t, e, i) {
        for (var n, s = arguments.length, r = new Array(s > 3 ? s - 3 : 0), o = 3; o < s; o++) r[o - 3] = arguments[o];
        return (n = this.getGameObjectManager(t, e)).call.apply(n, [e, i].concat(r)), this;
      },
      setGameObjectProperty: function (t, e, i, n) {
        return this.getGameObjectManager(t, e).setProperty(e, i, n), this;
      },
      easeGameObjectProperty: function (t, e, i, n, s, r, o, a) {
        return this.getGameObjectManager(t, e).easeProperty(e, i, n, s, r, o, a), this;
      },
      getGameObjectTweenTask: function (t, e, i) {
        return this.getGameObjectManager(t, e).getTweenTask(e, i);
      },
      getGameObject: function (t, e, i) {
        var n = this.getGameObjectManager(t, e);
        if ('string' == typeof e) return n.getGO(e);
        var s = e;
        for (e in (void 0 === s && (s = n.bobs), void 0 === i && (i = {}), s)) i[e] = n.getGO(e);
        return i;
      },
      addGameObject: function (t, e, i) {
        var n = this.getGameObjectManager(t, e);
        if ('string' == typeof e) n.addGO(e, i);
        else {
          var s = e;
          for (e in s) n.addGO(e, s[e]);
        }
        return this;
      },
      drawGameObjectsBounds: function (t, e, i) {
        t instanceof Phaser.GameObjects.Graphics && ((i = e), (e = t), (t = void 0)),
          void 0 === t && (t = this.getGameObjectManagerNames()),
          Array.isArray(t) || (t = [t]);
        for (var n = 0, s = t.length; n < s; n++) this.getGameObjectManager(t[n]).drawGameObjectsBounds(e, i);
        return this;
      },
    },
    ma = /^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,
    ba = /^0x[0-9A-F]+$/i,
    xa = function (t) {
      if ('string' != typeof t) return t;
      if ('' === t) t = null;
      else if (ma.test(t)) t = parseFloat(t);
      else if (ba.test(t)) t = parseInt(t, 16);
      else
        switch (t) {
          case 'false':
            t = !1;
            break;
          case 'true':
            t = !0;
            break;
          case 'null':
            t = null;
            break;
          case 'undefined':
            t = void 0;
        }
      return t;
    },
    Ca = (function () {
      function t(e) {
        r(this, t),
          this.setEventEmitter(Ct(e, 'eventEmitter', void 0)),
          this.setValueConverter(Ct(e, 'valueConvert', !0)),
          this.setLoopEnable(Ct(e, 'loop', !1)),
          this.setMultipleLinesTagEnable(Ct(e, 'multipleLinesTag', !1));
        var i = Ct(e, 'delimiters', '<>');
        this.setDelimiters(i[0], i[1]),
          this.setTranslateTagNameCallback(Ct(e, 'translateTagNameCallback')),
          (this.isRunning = !1),
          (this.isPaused = !1),
          (this.skipEventFlag = !1),
          (this.justCompleted = !1),
          (this.lastTagStart = null),
          (this.lastTagEnd = null),
          (this.lastContent = null);
      }
      return (
        a(t, [
          {
            key: 'shutdown',
            value: function () {
              this.destroyEventEmitter();
            },
          },
          {
            key: 'destroy',
            value: function () {
              this.shutdown();
            },
          },
          {
            key: 'setMultipleLinesTagEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.multipleLinesTagEnable = t), this;
            },
          },
          {
            key: 'setDelimiters',
            value: function (t, e) {
              void 0 === e && ((e = t[1]), (t = t[0])),
                (this.delimiterLeft = t),
                (this.delimiterRight = e),
                (t = en(this.delimiterLeft)),
                (e = en(this.delimiterRight));
              var i = this.multipleLinesTagEnable ? 'gs' : 'gi';
              return (this.reSplit = RegExp(''.concat(t, '(.+?)').concat(e), i)), this;
            },
          },
          {
            key: 'setTranslateTagNameCallback',
            value: function (t) {
              return (this.translateTagNameCallback = t), this;
            },
          },
          {
            key: 'setValueConverter',
            value: function (t) {
              return !0 === t ? (t = xa) : t || (t = wa), (this.valueConverter = t), this;
            },
          },
          {
            key: 'setLoopEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.loopEnable = t), this;
            },
          },
          {
            key: 'setSource',
            value: function (t) {
              return (this.source = t), this;
            },
          },
          {
            key: 'resetIndex',
            value: function (t) {
              return (
                void 0 === t && (t = 0),
                (this.progressIndex = t),
                (this.reSplit.lastIndex = t),
                (this.lastTagStart = null),
                (this.lastTagEnd = null),
                (this.lastContent = null),
                (this.justCompleted = !1),
                (this.isRunning = !1),
                this
              );
            },
          },
          {
            key: 'start',
            value: function (t) {
              return this.setSource(t).restart(), this;
            },
          },
          {
            key: 'restart',
            value: function () {
              this.resetIndex().next();
            },
          },
          {
            key: 'next',
            value: function () {
              if ((this.isPaused && this.onResume(), this.isRunning)) return this;
              if (((this.isRunning = !0), this.justCompleted)) return (this.isRunning = !1), this;
              0 === this.reSplit.lastIndex && this.onStart();
              var t = this.source,
                e = t.length;
              for (this.reSplit.lastIndex = this.progressIndex; ; ) {
                var i = this.reSplit.exec(t);
                if (!i) {
                  if (this.progressIndex < e && (this.onContent(t.substring(this.progressIndex, e)), this.isPaused)) {
                    this.progressIndex = e;
                    break;
                  }
                  return this.onComplete(), void (this.isRunning = !1);
                }
                var n = this.reSplit.lastIndex,
                  s = n - i[0].length;
                if (this.progressIndex < s && (this.onContent(t.substring(this.progressIndex, s)), this.isPaused)) {
                  this.progressIndex = s;
                  break;
                }
                if ((this.onTag(i[1]), (this.progressIndex = n), this.isPaused)) break;
              }
              return (this.isRunning = !1), this;
            },
          },
          {
            key: 'skipEvent',
            value: function () {
              return (this.skipEventFlag = !0), this;
            },
          },
          {
            key: 'pause',
            value: function () {
              return this.isPaused || this.onPause(), this;
            },
          },
          {
            key: 'pauseUntilEvent',
            value: function (t, e) {
              return (
                this.isPaused ||
                  (this.pause(),
                  t.once(
                    e,
                    function () {
                      this.next();
                    },
                    this
                  )),
                this
              );
            },
          },
          {
            key: 'onContent',
            value: function (t) {
              (this.skipEventFlag = !1), this.emit('content', t), (this.lastContent = t);
            },
          },
          { key: 'onTag', value: function (t) {} },
          {
            key: 'onStart',
            value: function () {
              (this.isRunning = !0), this.emit('start', this);
            },
          },
          {
            key: 'onComplete',
            value: function () {
              (this.isRunning = !1),
                (this.justCompleted = !0),
                this.emit('complete', this),
                this.loopEnable && this.resetIndex();
            },
          },
          {
            key: 'onPause',
            value: function () {
              (this.isPaused = !0), this.emit('pause', this);
            },
          },
          {
            key: 'onResume',
            value: function () {
              (this.isPaused = !1), this.emit('resume', this);
            },
          },
        ]),
        t
      );
    })(),
    wa = function (t) {
      return t;
    };
  Object.assign(Ca.prototype, hr);
  var Sa = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t) {
        var n;
        r(this, i),
          void 0 === t && (t = {}),
          t.hasOwnProperty('multipleLinesTag') || (t.multipleLinesTag = !1),
          (n = e.call(this, t)).setTagExpression(Ct(t, 'regex.tag', void 0)),
          n.setValueExpression(Ct(t, 'regex.value', void 0));
        var s = Ct(t, 'delimiters', '<>');
        return n.setDelimiters(s[0], s[1]), n;
      }
      return (
        a(i, [
          {
            key: 'setTagExpression',
            value: function (t) {
              return t || (t = Pa), (this.tagExpression = t), this;
            },
          },
          {
            key: 'setValueExpression',
            value: function (t) {
              return t || (t = Pa), (this.valueExpression = t), this;
            },
          },
          {
            key: 'setDelimiters',
            value: function (t, e) {
              g(u(i.prototype), 'setDelimiters', this).call(this, t, e);
              var n = '('.concat(this.tagExpression, ')(=(').concat(this.valueExpression, '))?');
              if (((this.reTag = RegExp(n, 'i')), this.tagExpression !== Pa || this.valueExpression !== Pa)) {
                var s = ''.concat(this.tagExpression, '(=').concat(this.valueExpression, ')?'),
                  r = '/'.concat(this.tagExpression);
                (t = en(this.delimiterLeft)), (e = en(this.delimiterRight));
                var o = this.multipleLinesTagEnable ? 'gs' : 'gi';
                this.reSplit = RegExp(''.concat(t, '((').concat(s, ')|(').concat(r, '))').concat(e), o);
              }
              return this;
            },
          },
          {
            key: 'onTag',
            value: function (t) {
              var e = t.match(this.reTag),
                i = e[1],
                n = '/' === i.charAt(0);
              if (
                (n && (i = i.substring(1, i.length)),
                this.translateTagNameCallback && (i = this.translateTagNameCallback(i)),
                (this.skipEventFlag = !1),
                n)
              )
                this.emit('-'.concat(i)), this.skipEventFlag || this.emit('-', i), (this.lastTagEnd = i);
              else {
                var s = (function (t, e) {
                  if (null == t) return [];
                  void 0 === e && (e = xa);
                  for (var i = t.split(','), n = 0, s = i.length; n < s; n++) i[n] = e(i[n]);
                  return i;
                })(e[3], this.valueConverter);
                this.emit.apply(this, ['+'.concat(i)].concat(x(s))),
                  this.skipEventFlag || this.emit.apply(this, ['+', i].concat(x(s))),
                  (this.lastTagStart = i);
              }
            },
          },
        ]),
        i
      );
    })(Ca),
    Pa = '[^=]+',
    Ta = function (t) {
      this.typeWriter.setTypingSpeed(t);
    },
    Oa = function (t, e) {
      Ts.call(t, 'speed', Ta, e, t);
    },
    Ma = function (t) {
      if (!this.skipSoundEffect) {
        var e = t[0],
          i = t[1];
        this.soundManager.playSoundEffect(e), i && this.soundManager.fadeInSoundEffect(i);
      }
    },
    Ea = function (t) {
      if (!this.skipSoundEffect) {
        var e = t[0],
          i = t[1];
        this.soundManager.playSoundEffect2(e), i && this.soundManager.fadeInSoundEffect2(i);
      }
    },
    _a = function (t) {
      this.soundManager.fadeInSoundEffect(t);
    },
    Ra = function (t) {
      this.soundManager.fadeInSoundEffect2(t);
    },
    La = function (t) {
      var e;
      (e = this.soundManager).fadeOutSoundEffect.apply(e, x(t));
    },
    Ba = function (t) {
      var e;
      (e = this.soundManager).fadeOutSoundEffect2.apply(e, x(t));
    },
    Da = function (t) {
      this.soundManager.setSoundEffectVolume(t, !0);
    },
    Ia = function (t) {
      this.soundManager.setSoundEffectVolume2(t, !0);
    },
    ja = function () {
      this.soundManager.setSoundEffectMute(!0);
    },
    Aa = function () {
      this.soundManager.setSoundEffect2Mute(!0);
    },
    za = function () {
      this.soundManager.setSoundEffectMute(!1);
    },
    Fa = function () {
      this.soundManager.setSoundEffect2Mute(!1);
    },
    Va = function (t) {
      var e = t[0],
        i = t[1];
      this.soundManager.playBackgroundMusic(e), i && this.soundManager.fadeInBackgroundMusic(i);
    },
    Wa = function () {
      this.soundManager.stopBackgroundMusic();
    },
    Ya = function (t) {
      var e = t[0],
        i = t[1];
      this.soundManager.playBackgroundMusic2(e), i && this.soundManager.fadeInBackgroundMusic2(i);
    },
    Xa = function () {
      this.soundManager.stopBackgroundMusic2();
    },
    Ga = function (t) {
      this.soundManager.fadeInBackgroundMusic(t);
    },
    Ha = function (t) {
      this.soundManager.fadeInBackgroundMusic2(t);
    },
    Ua = function (t) {
      var e;
      (e = this.soundManager).fadeOutBackgroundMusic.apply(e, x(t));
    },
    Na = function (t) {
      var e;
      (e = this.soundManager).fadeOutBackgroundMusic2.apply(e, x(t));
    },
    Ka = function (t) {
      var e;
      (e = this.soundManager).crossFadeBackgroundMusic.apply(e, x(t));
    },
    Ja = function (t) {
      var e;
      (e = this.soundManager).crossFadeBackgroundMusic2.apply(e, x(t));
    },
    qa = function () {
      this.soundManager.pauseBackgroundMusic();
    },
    Za = function () {
      this.soundManager.resumeBackgroundMusic();
    },
    $a = function () {
      this.soundManager.pauseBackgroundMusic2();
    },
    Qa = function () {
      this.soundManager.resumeBackgroundMusic2();
    },
    th = function (t) {
      this.soundManager.setBackgroundMusicVolume(t);
    },
    eh = function (t) {
      this.soundManager.setBackgroundMusicVolume2(t);
    },
    ih = function () {
      this.soundManager.setBackgroundMusicMute(!0);
    },
    nh = function () {
      this.soundManager.setBackgroundMusic2Mute(!0);
    },
    sh = function () {
      this.soundManager.setBackgroundMusicMute(!1);
    },
    rh = function () {
      this.soundManager.setBackgroundMusic2Mute(!1);
    },
    oh = function (t) {
      var e;
      (e = this.cameraTarget).fadeIn.apply(e, x(t));
    },
    ah = function (t) {
      var e;
      (e = this.cameraTarget).fadeOut.apply(e, x(t));
    },
    hh = function (t) {
      var e;
      (e = this.cameraTarget).shake.apply(e, x(t));
    },
    lh = function (t) {
      var e;
      (e = this.cameraTarget).flash.apply(e, x(t));
    },
    uh = function (t) {
      this.cameraTarget.setZoom(t);
    },
    ch = function (t) {
      var e;
      (e = this.cameraTarget).zoomTo.apply(e, x(t));
    },
    dh = Phaser.Math.DegToRad,
    fh = function (t) {
      this.cameraTarget.setRotation(t);
    },
    ph = function (t) {
      var e = t[0],
        i = t[1],
        n = t[2];
      this.cameraTarget.rotateTo(e, !1, i, n);
    },
    vh = function (t) {
      var e;
      (e = this.cameraTarget).setScroll.apply(e, x(t));
    },
    gh = function (t) {
      var e = t[0],
        i = t[1],
        n = t[2],
        s = t[3],
        r = this.cameraTarget,
        o = r.scrollX,
        a = r.scrollY;
      r.setScroll(e, i), (e += r.centerX), (i += r.centerY), r.setScroll(o, a), r.pan(e, i, n, s);
    },
    yh = function (t) {
      this.typeWriter.wait(t);
    },
    kh = function (t, e) {
      Ts.call(t, 'wait', yh, e, t);
    },
    mh = function (t, e) {
      var i = 'tag.'.concat(e);
      null == t ? this.emit(i) : this.emit.apply(this, [i].concat(x(t)));
    },
    bh = function (t, e, i) {
      Ts.call(t, e, mh, i, t);
    },
    xh = [
      function (t, e, i) {
        var n,
          s = 'color';
        e.on('start', function () {
          n = t.textStyle.color;
        })
          .on('+'.concat(s), function (i) {
            t.textStyle.setColor(i), e.skipEvent();
          })
          .on('-'.concat(s), function () {
            t.textStyle.setColor(n), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setColor(n);
          });
      },
      function (t, e, i) {
        var n,
          s = 'stroke';
        e.on('start', function () {
          (n = t.textStyle.stroke), t.textStyle.setStrokeStyle(null);
        })
          .on('+'.concat(s), function (i) {
            void 0 === i && (i = n), t.textStyle.setStrokeStyle(i), e.skipEvent();
          })
          .on('-'.concat(s), function () {
            t.textStyle.setStrokeStyle(null), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setStrokeStyle(n);
          });
      },
      function (t, e, i) {
        e.on('start', function () {
          t.textStyle.setBold(!1);
        })
          .on('+'.concat('b'), function () {
            t.textStyle.setBold(!0), e.skipEvent();
          })
          .on('-'.concat('b'), function () {
            t.textStyle.setBold(!1), e.skipEvent();
          });
      },
      function (t, e, i) {
        e.on('start', function () {
          t.textStyle.setItalic(!1);
        })
          .on('+'.concat('i'), function () {
            t.textStyle.setItalic(!0), e.skipEvent();
          })
          .on('-'.concat('i'), function () {
            t.textStyle.setItalic(!1), e.skipEvent();
          });
      },
      function (t, e, i) {
        var n,
          s = 'size';
        e.on('start', function () {
          n = t.textStyle.fontSize;
        })
          .on('+'.concat(s), function (i) {
            t.textStyle.setFontSize(i), e.skipEvent();
          })
          .on('-'.concat(s), function () {
            t.textStyle.setFontSize(n), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setFontSize(n);
          });
      },
      function (t, e, i) {
        var n,
          s = 'shadow';
        e.on('start', function () {
          (n = t.textStyle.shadowColor), t.textStyle.setShadowColor(null);
        })
          .on('+'.concat(s), function (i) {
            void 0 === i && (i = n), t.textStyle.setShadowColor(i), e.skipEvent();
          })
          .on('-'.concat(s), function () {
            t.textStyle.setShadowColor(null), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setShadowColor(n);
          });
      },
      function (t, e, i) {
        var n = 'align';
        e.on('+'.concat(n), function (i) {
          t.textStyle.setAlign(i), e.skipEvent();
        })
          .on('-'.concat(n), function () {
            t.textStyle.setAlign(), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setAlign();
          });
      },
      function (t, e, i) {
        var n;
        e.on('start', function () {
          (n = t.textStyle.offsetY), t.textStyle.setOffsetY(0);
        })
          .on('+'.concat('y'), function (i) {
            void 0 === i && (i = n), t.textStyle.setOffsetY(i), e.skipEvent();
          })
          .on('-'.concat('y'), function () {
            t.textStyle.setOffsetY(0), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setOffsetY(0);
          });
      },
      function (t, e, i) {
        var n;
        e.on('start', function () {
          (n = t.textStyle.offsetY), t.textStyle.setOffsetX(0);
        })
          .on('+'.concat('x'), function (i) {
            void 0 === i && (i = n), t.textStyle.setOffsetX(i), e.skipEvent();
          })
          .on('-'.concat('x'), function () {
            t.textStyle.setOffsetX(0), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setOffsetX(0);
          });
      },
      function (t, e, i) {
        var n,
          s = 'left';
        e.on('start', function () {
          (n = t.textStyle.leftSpace), t.textStyle.setLeftSpace(0);
        })
          .on('+'.concat(s), function (i) {
            void 0 === i && (i = n), t.textStyle.setLeftSpace(i), e.skipEvent();
          })
          .on('-'.concat(s), function () {
            t.textStyle.setLeftSpace(0), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setLeftSpace(0);
          });
      },
      function (t, e, i) {
        var n,
          s = 'right';
        e.on('start', function () {
          (n = t.textStyle.rightSpace), t.textStyle.setRightSpace(0);
        })
          .on('+'.concat(s), function (i) {
            void 0 === i && (i = n), t.textStyle.setRightSpace(i), e.skipEvent();
          })
          .on('-'.concat(s), function () {
            t.textStyle.setRightSpace(0), e.skipEvent();
          })
          .on('complete', function () {
            t.textStyle.setRightSpace(0);
          });
      },
      function (t, e, i) {
        e.on('+'.concat('img'), function (i) {
          var n = t.imageManager.get(i);
          xs.call(t, n.key, n.frame, {
            width: n.width,
            hieght: n.height,
            leftSpace: n.left,
            rightSpace: n.right,
            color: n.tintFill ? t.textStyle.color : void 0,
          }),
            e.skipEvent();
        }).on('-'.concat('img'), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'space';
        e.on('+'.concat(n), function (i) {
          Ss.call(t, i), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'speed';
        e.on('+'.concat(n), function (i) {
          Oa(t, i), e.skipEvent();
        }).on('-'.concat(n), function () {
          Oa(t, void 0), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'se';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Ma, [i, s], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'se2';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Ea, [i, s], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'se.fadein';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, _a, i, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'se2.fadein';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, Ra, i, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'se.fadeout';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, La, [i, (s = 'stop' === s)], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'se2.fadeout';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Ba, [i, (s = 'stop' === s)], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'se.volume';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, Da, i, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'se2.volume';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, Ia, i, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'se.mute';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, ja, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'se2.mute';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, Aa, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'se.unmute';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, za, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'se2.unmute';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, Fa, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'bgm';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Va, [i, s], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          Ts.call(t, 'bgm.stop', Wa, void 0, t), e.skipEvent();
        });
        n = 'bgm2';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Ya, [i, s], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          Ts.call(t, 'bgm2.stop', Xa, void 0, t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'bgm.fadein';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, Ga, i, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'bgm2.fadein';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, Ha, i, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'bgm.fadeout';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Ua, [i, (s = 'stop' === s)], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'bgm2.fadeout';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Na, [i, (s = 'stop' === s)], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'bgm.cross';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Ka, [i, s], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'bgm2.cross';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, Ja, [i, s], t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'bgm.pause';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, qa, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          Ts.call(t, 'bgm.resume', Za, void 0, t), e.skipEvent();
        });
        n = 'bgm2.pause';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, $a, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          Ts.call(t, 'bgm2.resume', Qa, void 0, t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'bgm.volume';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, th, i, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'bgm2.volume';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, eh, i, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'bgm.mute';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, ih, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'bgm2.mute';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, nh, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'bgm.unmute';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, sh, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
        n = 'bgm2.unmute';
        e.on('+'.concat(n), function () {
          Ts.call(t, n, rh, void 0, t), e.skipEvent();
        }).on('-'.concat(n), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'camera.fadein';
        e.on('+'.concat(n), function (i, s, r, o) {
          Ts.call(t, n, oh, [i, s, r, o], t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'camera.fadeout';
        e.on('+'.concat(n), function (i, s, r, o) {
          Ts.call(t, n, ah, [i, s, r, o], t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'camera.shake';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, hh, [i, s], t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'camera.flash';
        e.on('+'.concat(n), function (i, s, r, o) {
          Ts.call(t, n, lh, [i, s, r, o], t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'camera.zoom';
        e.on('+'.concat(n), function (i) {
          Ts.call(t, n, uh, i, t), e.skipEvent();
        }).on('+'.concat(n, '.to'), function (i, n, s) {
          Ts.call(t, 'camera.zoom.to', ch, [i, n, s], t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'camera.rotate';
        e.on('+'.concat(n), function (i) {
          (i = dh(i)), Ts.call(t, n, fh, i, t), e.skipEvent();
        }).on('+'.concat(n, '.to'), function (i, n, s) {
          (i = dh(i)), Ts.call(t, 'camera.rotate.to', ph, [i, n, s], t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'camera.scroll';
        e.on('+'.concat(n), function (i, s) {
          Ts.call(t, n, vh, [i, s], t), e.skipEvent();
        }).on('+'.concat(n, '.to'), function (i, n, s, r) {
          Ts.call(t, 'camera.scroll.to', gh, [i, n, s, r], t), e.skipEvent();
        });
      },
      function (t, e, i) {
        var n = 'wait',
          s = 'click';
        e.on('+'.concat(n), function (i) {
          kh(t, i), e.skipEvent();
        })
          .on('-'.concat(n), function () {
            e.skipEvent();
          })
          .on('+'.concat(s), function () {
            kh(t, 'click'), e.skipEvent();
          })
          .on('-'.concat(s), function () {
            e.skipEvent();
          });
      },
      function (t, e, i) {
        e.on('+'.concat('r'), function () {
          ms.call(t, '\n'), e.skipEvent();
        }).on('-'.concat('r'), function () {
          e.skipEvent();
        });
      },
      function (t, e, i) {
        for (var n = ['pagebreak', 'pb'], s = 0, r = n.length; s < r; s++) {
          var o = n[s];
          e.on('+'.concat(o), function () {
            ms.call(t, '\f'), e.skipEvent();
          }).on('-'.concat(o), function () {
            e.skipEvent();
          });
        }
      },
      function (t, e, i) {
        e.on('+'.concat('content.off'), function () {
          e.setContentOutputEnable(!1), e.skipEvent();
        });
      },
      function (t, e, i) {
        e.on('+'.concat('content.on'), function () {
          e.setContentOutputEnable(), e.skipEvent();
        });
      },
      function (t, e, i) {
        e.on('content', function (i) {
          if (e.contentOutputEnable) ms.call(t, i);
          else {
            var n = '+'.concat(e.lastTagStart);
            t.emit('parser.'.concat(n, '#content'), e, i);
          }
        });
      },
      function (t, e, i) {
        e.on('start', function () {
          t.emit('parser.start', e);
        })
          .on('+', function (i) {
            if (!e.skipEventFlag) {
              for (var n = '+'.concat(i), s = arguments.length, r = new Array(s > 1 ? s - 1 : 0), o = 1; o < s; o++)
                r[o - 1] = arguments[o];
              var a = r;
              t.emit.apply(t, ['parser.'.concat(n), e].concat(r, [a])), bh(t, n, a);
            }
          })
          .on('-', function (i) {
            if (!e.skipEventFlag) {
              var n = '-'.concat(i),
                s = [];
              t.emit('parser.'.concat(n), e, s), bh(t, n, s);
            }
          })
          .on('complete', function () {
            t.emit('parser.complete', e);
          });
      },
    ],
    Ch = Phaser.Utils.Objects.GetValue,
    wh = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          void 0 === n && (n = {}),
          n.hasOwnProperty('delimiters') || (n.delimiters = '[]'),
          (function (t, e, i) {
            for (var n = 0, s = xh.length; n < s; n++) xh[n](t, e, i);
          })(t, d((s = e.call(this, n))), n),
          s.setCommentLineStartSymbol(Ch(n, 'comment', '//')),
          s.setContentOutputEnable(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'setCommentLineStartSymbol',
            value: function (t) {
              return (this.commentLineStart = t), this;
            },
          },
          {
            key: 'setContentOutputEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.contentOutputEnable = t), this;
            },
          },
          {
            key: 'start',
            value: function (t) {
              return (
                g(u(i.prototype), 'start', this).call(
                  this,
                  (function (t, e) {
                    for (var i = t.commentLineStart, n = e.split('\n'), s = 0, r = n.length; s < r; s++) {
                      var o = n[s];
                      '' === o || ((0 === o.trim().length || (i && o.startsWith(i))) && (n[s] = ''));
                    }
                    return n.join('');
                  })(this, t)
                ),
                this
              );
            },
          },
        ]),
        i
      );
    })(Sa),
    Sh = {
      setDefaultTypingSpeed: function (t) {
        return (this.defaultSpeed = t), this;
      },
      setTypingSpeed: function (t) {
        return void 0 === t && (t = this.defaultSpeed), (this.speed = t), this;
      },
    },
    Ph = 'page.fadeout',
    Th = '_remove.play',
    Oh = [Ph, Th],
    Mh = function (t, e) {
      return new Promise(function (i, n) {
        t.once(e, function () {
          i();
        });
      });
    },
    Eh = function (t) {
      return Mh(t, 'complete');
    },
    _h = 'anim',
    Rh = function (t) {
      switch (t) {
        case 'camera.fadein':
        case 'camera.fadeout':
        case 'camera.flash':
        case 'camera.shake':
        case 'camera.zoom':
        case 'camera.rotate':
        case 'camera.scroll':
          return !0;
        default:
          return !1;
      }
    },
    Lh = function (t, e) {
      var i = e.split('.');
      return t.gameObjectManagers.hasOwnProperty(i[0]);
    },
    Bh = function (t, e, i, n) {
      var s = t.waitEventManager,
        r = e.split('.'),
        o = r[0],
        a = t.getGameObjectManager(o),
        h = 'wait.'.concat(o);
      switch (r.length) {
        case 1:
          return s.waitGameObjectManagerEmpty(o), void t.emit(h);
        case 2:
          var l = r[1];
          return s.waitGameObjectDestroy(o, l), void t.emit(h, l);
        case 3:
          l = r[1];
          var u = r[2];
          if ('number' == typeof a.getProperty(l, u))
            return s.waitGameObjectTweenComplete(o, l, u), void t.emit(h, l, u);
          var c = u,
            d = c.startsWith('!');
          return (
            d && (c = c.substring(1)),
            a.hasData(l, c) ? (s.waitGameObjectDataFlag(o, l, c, !d), void t.emit(h, l, c)) : void s.waitTime(0)
          );
      }
    },
    Dh = Phaser.Input.Keyboard.KeyCodes,
    Ih = function (t, e, i, n) {
      var s = t.waitEventManager;
      s.clearWaitCompleteCallbacks().addWaitCompleteCallback(i, n);
      for (
        var r = 0, o = (e = 'string' == typeof e && e.length > 1 && -1 !== e.indexOf('|') ? e.split('|') : [e]).length;
        r < o;
        r++
      ) {
        var a = e[r];
        if (null == a || 'wait' === a) {
          var h = t.waitEventManager.getWaitCompleteTriggerCallback();
          t.emit('wait', h);
        } else if ('number' != typeof a && isNaN(a))
          if ('click' === a) s.waitClick(), t.emit('wait.click');
          else if ('se' === a) {
            s.waitSoundEffectComplete();
            var l = t.soundManager.getLastSoundEffect();
            t.emit('wait.music', l);
          } else if ('se2' === a) {
            s.waitSoundEffect2Complete();
            l = t.soundManager.getLastSoundEffect2();
            t.emit('wait.music', l);
          } else if ('bgm' === a) {
            s.waitBackgroundMusicComplete();
            l = t.soundManager.getBackgroundMusic();
            t.emit('wait.music', l);
          } else if ('bgm2' === a) {
            s.waitBackgroundMusic2Complete();
            l = t.soundManager.getBackgroundMusic2();
            t.emit('wait.music', l);
          } else if (Dh.hasOwnProperty(a.toUpperCase())) s.waitKeyDown(a), t.emit('wait.keydown', a);
          else if (Rh(a)) s.waitCameraEffectComplete(a), t.emit('wait.camera', a);
          else if (Lh(t, a)) Bh(t, a);
          else {
            h = t.waitEventManager.getWaitCompleteTriggerCallback();
            t.emit('wait.'.concat(a), h);
          }
        else {
          var u = parseFloat(a);
          s.waitTime(u), t.emit('wait.time', u);
        }
      }
    },
    jh = {
      fadeOutPage: function () {
        if (!this.fadeOutPageCallback || !this.children) return this.emit(Ph), this;
        var t = this.children.filter(function (t) {
            return t.renderable;
          }),
          e = this.fadeOutPageCallback(t, this.fadeOutPageDuration);
        if (e)
          if (e.once)
            e.once(
              'complete',
              function () {
                this.emit(Ph);
              },
              this
            );
          else if (e.then) {
            var i = this;
            e.then(function () {
              i.emit(Ph);
            });
          } else this.emit(Ph);
        else this.emit(Ph);
        return this;
      },
      start: function (t) {
        return (
          (this.children = t),
          (this.index = 0),
          (this.isPageTyping = !0),
          this.onTypeStart && this.onTypeStart(t),
          this.typing(),
          Eh(this)
        );
      },
      typing: function t(e) {
        void 0 === e && (e = 0);
        var i,
          n = 0;
        for (this.inTypingProcessLoop = !0; this.inTypingProcessLoop; ) {
          var s = this.getNextChild();
          if (!s) {
            this.timeline.isRunning
              ? this.timeline.once(
                  'complete',
                  function () {
                    (this.isPageTyping = !1), this.emit('complete');
                  },
                  this
                )
              : ((this.isPageTyping = !1), this.emit('complete'));
            break;
          }
          if (s.renderable) {
            var r = this.animationConfig;
            if (r.duration > 0) {
              var o = this.timeline.addTimer({
                name: _h,
                target: s,
                duration: r.duration,
                yoyo: r.yoyo,
                onStart: r.onStart,
                onProgress: r.onProgress,
                onComplete: r.onComplete,
              });
              this.skipTypingAnimation && o.seek(1);
            } else r.onStart && r.onStart(s, 0);
            this.minSizeEnable && this.textPlayer.setToMinSize(), this.textPlayer.emit('typing', s);
            var a = this.nextChild;
            if (a)
              if (this.skipSpaceEnable && (i = a).type === ls && ' ' === i.text);
              else if (((n += this.speed + e), (e = 0), n > 0)) {
                this.typingTimer = this.timeline.addTimer({
                  name: 'delay',
                  target: this,
                  duration: n,
                  onComplete: function (e, i, n) {
                    (e.typingTimer = void 0), t.call(e, n.remainder);
                  },
                });
                break;
              }
          } else ys(s) && s.exec();
        }
        this.minSizeEnable && this.textPlayer.setToMinSize(), (this.inTypingProcessLoop = !1);
      },
      pause: function () {
        return this.timeline.pause(), this;
      },
      resume: function () {
        return this.timeline.resume(), this;
      },
      pauseTyping: function () {
        return (
          this.isTypingPaused ||
            (this.typingTimer
              ? (this.typingTimer.pause(), (this.isTypingPaused = !0))
              : this.inTypingProcessLoop && ((this.inTypingProcessLoop = !1), (this.isTypingPaused = !0))),
          this
        );
      },
      resumeTyping: function (t) {
        return this.isTypingPaused
          ? (void 0 === t && (t = 0),
            this.typingTimer
              ? ((this.isTypingPaused = !1), this.typingTimer.resume(), (this.typingTimer.remainder += t))
              : this.isTypingPaused && ((this.isTypingPaused = !1), this.typing(t)),
            this)
          : this;
      },
      wait: function (t) {
        return this.ignoreWait || (this.pauseTyping(), Ih(this.textPlayer, t, this.resumeTyping, this)), this;
      },
      setIgnoreWait: function (t) {
        return void 0 === t && (t = !0), (this.ignoreWait = t), this;
      },
      setSkipSpaceEnable: function (t) {
        return void 0 === t && (t = !0), (this.skipSpaceEnable = t), this;
      },
      setSkipTypingAnimation: function (t) {
        if ((void 0 === t && (t = !0), (this.skipTypingAnimation = t), t))
          for (var e = this.timeline.getTimers(_h), i = 0, n = e.length; i < n; i++) e[i].seek(1);
        return this;
      },
      setSkipSoundEffect: function (t) {
        if ((void 0 === t && (t = !0), (this.skipSoundEffect = t), t)) {
          var e = this.textPlayer._soundManager;
          e && e.fadeOutAllSoundEffects(100, !0);
        }
        return this;
      },
      skipCurrentTypingDelay: function () {
        return this.typingTimer && this.typingTimer.seek(1), this;
      },
    };
  Object.assign(jh, Sh);
  var Ah = Phaser.Utils.Objects.GetValue,
    zh = (function () {
      function t(e, i) {
        r(this, t),
          this.setEventEmitter(),
          (this.textPlayer = e),
          (this.isPageTyping = !1),
          (this.typingTimer = void 0),
          (this.pauseTypingTimer = void 0),
          (this.inTypingProcessLoop = !1),
          (this.isTypingPaused = !1),
          this.setIgnoreWait(!1),
          this.setSkipTypingAnimation(!1),
          this.setTypingStartCallback(Ah(i, 'onTypingStart', Vh)),
          this.setDefaultTypingSpeed(Ah(i, 'speed', 250)),
          this.setTypingSpeed(),
          this.setSkipSpaceEnable(Ah(i, 'skipSpace', !1)),
          this.setAnimationConfig(Ah(i, 'animation', void 0)),
          this.setMinSizeEnable(Ah(i, 'minSizeEnable', !1)),
          this.setFadeOutPageCallback(Ah(i, 'fadeOutPage'));
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              this.destroyEventEmitter(),
                (this.textPlayer = void 0),
                (this.typingTimer = void 0),
                (this.pauseTypingTimer = void 0),
                (this.onTypeStart = void 0),
                (this.animationConfig = void 0);
            },
          },
          {
            key: 'timeline',
            get: function () {
              return this.textPlayer.timeline;
            },
          },
          {
            key: 'setTypingStartCallback',
            value: function (t) {
              return (this.onTypeStart = t), this;
            },
          },
          {
            key: 'setAnimationConfig',
            value: function (t) {
              return (
                t || (t = {}),
                t.hasOwnProperty('duration') || (t.duration = 0),
                t.hasOwnProperty('onStart') || (t.onStart = Fh),
                (this.animationConfig = t),
                this
              );
            },
          },
          {
            key: 'setFadeOutPageCallback',
            value: function (t) {
              return (this.fadeOutPageCallback = t), this;
            },
          },
          {
            key: 'setMinSizeEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.minSizeEnable = t), this;
            },
          },
          {
            key: 'getNextChild',
            value: function () {
              var t = this.nextChild;
              return (this.index = Math.min(this.index + 1, this.children.length)), (this._nextChild = void 0), t;
            },
          },
          {
            key: 'nextChild',
            get: function () {
              return this._nextChild || (this._nextChild = this.children[this.index]), this._nextChild;
            },
          },
        ]),
        t
      );
    })(),
    Fh = function (t) {
      t.setVisible && t.setVisible();
    },
    Vh = function (t) {
      for (var e = 0, i = t.length; e < i; e++) {
        var n = t[e];
        n.setVisible && n.setVisible(!1);
      }
    };
  Object.assign(zh.prototype, hr, jh);
  var Wh = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'playAnimation',
            value: function (t) {
              return (this.gameObject.anims.timeScale = this.timeScale), this.gameObject.play(t), this;
            },
          },
          {
            key: 'stopAnimation',
            value: function () {
              return this.gameObject.stop(), this;
            },
          },
          {
            key: 'chainAnimation',
            value: function (t) {
              return this.gameObject.chain(t), this;
            },
          },
          {
            key: 'pauseAnimation',
            value: function () {
              return this.gameObject.anims.pause(), this;
            },
          },
          {
            key: 'setTimeScale',
            value: function (t) {
              return (
                g(u(i.prototype), 'setTimeScale', this).call(this, t),
                this.gameObject.anims && (this.gameObject.anims.timeScale = t),
                this
              );
            },
          },
        ]),
        i
      );
    })(cr),
    Yh = {};
  Object.assign(Yh, {
    playAnimation: function (t, e) {
      return this.has(t) || this.add(t), this.get(t).playAnimation(e), this;
    },
    stopAnimation: function (t) {
      return this.has(t) ? (this.get(t).stopAnimation(), this) : this;
    },
    chainAnimation: function (t, e) {
      return this.has(t) ? (this.get(t).chainAnimation(e), this) : this;
    },
    pauseAnimation: function (t) {
      return this.has(t) ? (this.get(t).pauseAnimation(), this) : this;
    },
  });
  var Xh = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        return r(this, i), void 0 === n && (n = {}), (n.BobClass = Wh), e.call(this, t, n);
      }
      return (
        a(i, [
          {
            key: 'setCreateGameObjectCallback',
            value: function (t, e) {
              return (
                t && 'sprite' !== t ? 'image' === t && (t = Hh) : (t = Gh),
                g(u(i.prototype), 'setCreateGameObjectCallback', this).call(this, t, e),
                this
              );
            },
          },
        ]),
        i
      );
    })(no),
    Gh = function (t, e, i) {
      return 'string' != typeof i && 'number' != typeof i && (i = void 0), t.add.sprite(0, 0, e, i);
    },
    Hh = function (t, e, i) {
      return 'string' != typeof i && 'number' != typeof i && (i = void 0), t.add.image(0, 0, e, i);
    };
  Object.assign(Xh.prototype, Yh);
  var Uh = function (t, e) {
      return 3 === t.length && t[0] === e && 'play' === t[2];
    },
    Nh = function (t) {
      var e,
        i,
        n,
        s = m(t, 3);
      (e = s[0]), (i = s[1]);
      var r = (n = s[2]).shift(),
        o = this.getGameObjectManager(e);
      o.playAnimation(i, r), n.length > 0 && o.chainAnimation(i, n);
    },
    Kh = function (t) {
      var e,
        i,
        n = b(t);
      (e = n[0]), (i = n.slice(1));
      var s = this.getGameObjectManager(e);
      s.stopAnimation.apply(s, x(i));
    },
    Jh = function (t) {
      var e,
        i,
        n = b(t);
      (e = n[0]), (i = n.slice(1));
      var s = this.getGameObjectManager(e);
      s.pauseAnimation.apply(s, x(i));
    },
    qh = function (t) {
      var e,
        i,
        n = b(t);
      (e = n[0]), (i = n.slice(1));
      var s = this.getGameObjectManager(e);
      s.chainAnimation.apply(s, x(i));
    },
    Zh = [
      function (t, e, i) {
        var n = i.name;
        e.on('+', function (i) {
          if (!e.skipEventFlag) {
            var s,
              r = i.split('.');
            if (Uh(r, n)) {
              s = r[1];
              for (var o = arguments.length, a = new Array(o > 1 ? o - 1 : 0), h = 1; h < o; h++)
                a[h - 1] = arguments[h];
              Ts.call(t, ''.concat(n, '.play'), Nh, [n, s, a], t), e.skipEvent();
            }
          }
        })
          .on('+', function (i) {
            if (!e.skipEventFlag) {
              var s,
                r = i.split('.');
              (function (t, e) {
                return 3 === t.length && t[0] === e && 'stop' === t[2];
              })(r, n) && ((s = r[1]), Ts.call(t, ''.concat(n, '.stop'), Kh, [n, s], t), e.skipEvent());
            }
          })
          .on('-', function (i) {
            if (!e.skipEventFlag) {
              var s,
                r = i.split('.');
              Uh(r, n) && ((s = r[1]), Ts.call(t, ''.concat(n, '.stop'), Kh, [n, s], t), e.skipEvent());
            }
          });
      },
      function (t, e, i) {
        var n = i.name;
        e.on('+', function (i) {
          if (!e.skipEventFlag) {
            var s,
              r = i.split('.');
            (function (t, e) {
              return 3 === t.length && t[0] === e && 'pause' === t[2];
            })(r, n) && ((s = r[1]), Ts.call(t, ''.concat(n, '.pause'), Jh, [n, s], t), e.skipEvent());
          }
        });
      },
      function (t, e, i) {
        var n = i.name;
        e.on('+', function (i) {
          if (!e.skipEventFlag) {
            var s,
              r = i.split('.');
            if (
              (function (t, e) {
                return 3 === t.length && t[0] === e && 'chain' === t[2];
              })(r, n)
            ) {
              s = r[1];
              var o = Array.prototype.slice.call(arguments, 1);
              Ts.call(t, ''.concat(n, '.chain'), qh, [n, s, o], t), e.skipEvent();
            }
          }
        });
      },
    ],
    $h = function (t) {
      void 0 === t && (t = {}), (t.name = 'sprite'), (t.parseCallbacks = Zh), this.addGameObjectManager(t, Xh);
    },
    Qh = function (t, e) {
      return 2 === t.length && t[0] === e;
    },
    tl = function (t) {
      var e,
        i,
        n = b(t);
      (e = n[0]), (i = n.slice(1));
      var s = this.getGameObjectManager(e);
      s.add.apply(s, x(i));
    },
    el = function (t) {
      var e,
        i,
        n = b(t);
      (e = n[0]), (i = n.slice(1));
      var s = this.getGameObjectManager(e);
      s.remove.apply(s, x(i));
    },
    il = function (t) {
      this.getGameObjectManager(t).removeAll();
    },
    nl = function (t) {
      var e,
        i,
        n,
        s,
        r = b(t);
      (e = r[0]), (i = r[1]), (n = r[2]), (s = r.slice(3));
      var o = ''.concat(e, '.').concat(n);
      if ((this.emit.apply(this, [o, i].concat(x(s))), !(this.listenerCount(o) > 0))) {
        var a = this.getGameObjectManager(e);
        a.hasMethod(i, n) ? a.call.apply(a, [i, n].concat(x(s))) : a.setProperty(i, n, s[0]);
      }
    },
    sl = {
      to: !0,
      yoyo: !0,
      from: !0,
      toLeft: !0,
      toRight: !0,
      toUp: !0,
      toDown: !0,
      yoyoLeft: !0,
      yoyoRight: !0,
      yoyoUp: !0,
      yoyoDown: !0,
      fromLeft: !0,
      fromRight: !0,
      fromUp: !0,
      fromDown: !0,
    },
    rl = function (t) {
      var e,
        i,
        n,
        s,
        r,
        o,
        a,
        h,
        l = m(t, 8);
      (e = l[0]), (i = l[1]), (n = l[2]), (s = l[3]), (r = l[4]), (o = l[5]), (a = l[6]), (h = l[7]);
      var u = this.getGameObjectManager(e),
        c = u.getProperty(i, n);
      if ('number' == typeof c) {
        h.endsWith('Left') || h.endsWith('Up')
          ? h.startsWith('to') || h.startsWith('yoyo')
            ? (s = c - s)
            : h.startsWith('from') && (u.setProperty(i, n, c - s), (s = c))
          : h.endsWith('Right') || h.endsWith('Down')
          ? h.startsWith('to') || h.startsWith('yoyo')
            ? (s = c + s)
            : h.startsWith('from') && (u.setProperty(i, n, c + s), (s = c))
          : 'from' === h && (u.setProperty(i, n, s), (s = c));
        var d = h.startsWith('yoyo');
        u.easeProperty(i, n, s, r, o, a, d);
      }
    },
    ol = [
      function (t, e, i) {
        var n = i.name;
        e.on('+', function (i) {
          if (!e.skipEventFlag) {
            var s,
              r = i.split('.');
            if (Qh(r, n)) {
              s = r[1];
              for (var o = arguments.length, a = new Array(o > 1 ? o - 1 : 0), h = 1; h < o; h++)
                a[h - 1] = arguments[h];
              Ts.call(t, ''.concat(n, '.add'), tl, [n, s].concat(a), t), e.skipEvent();
            }
          }
        }).on('-', function (i) {
          if (!e.skipEventFlag) {
            var s,
              r = i.split('.');
            Qh(r, n) && ((s = r[1]), Ts.call(t, ''.concat(n, '.remove'), el, [n, s], t), e.skipEvent());
          }
        });
      },
      function (t, e, i) {
        var n = i.name;
        e.on('-', function (i) {
          e.skipEventFlag || (i === n && (Ts.call(t, ''.concat(n, '.removeall'), il, n, t), e.skipEvent()));
        });
      },
      function (t, e, i) {
        var n = i.name;
        e.on('+', function (i) {
          if (!e.skipEventFlag) {
            var s,
              r,
              o = i.split('.');
            if (
              (function (t, e) {
                return 3 === t.length && t[0] === e;
              })(o, n)
            ) {
              (s = o[1]), (r = o[2]);
              for (var a = arguments.length, h = new Array(a > 1 ? a - 1 : 0), l = 1; l < a; l++)
                h[l - 1] = arguments[l];
              Ts.call(t, ''.concat(n, '.call'), nl, [n, s, r].concat(h), t), e.skipEvent();
            }
          }
        });
      },
      function (t, e, i) {
        var n = i.name;
        t.getGameObjectManager(n),
          e.on('+', function (i, s, r, o, a) {
            if (!e.skipEventFlag) {
              var h,
                l,
                u,
                c = i.split('.');
              (function (t, e) {
                return 4 === t.length && t[0] === e && sl[t[3]];
              })(c, n) &&
                ((h = c[1]),
                (l = c[2]),
                (u = c[3]),
                'number' == typeof o && ((a = o), (o = void 0)),
                Ts.call(t, ''.concat(n, '.ease'), rl, [n, h, l, s, r, o, a, u], t),
                e.skipEvent());
            }
          });
      },
    ],
    al = ya.addGameObjectManager,
    hl = {
      addGameObjectManager: function (t, e) {
        void 0 === t && (t = {}),
          t.name || console.warn("Parameter 'name' is required in TextPlayer.addGameObjectManager(config) method"),
          al.call(this, t, e);
        for (var i = t.parseCallbacks, n = 0, s = (i = i ? [].concat(x(i), ol) : ol).length; n < s; n++)
          i[n](this, this.parser, t);
        return this;
      },
    },
    ll = {
      play: function (t) {
        return (
          this.isPlaying ||
            (this.removeChildren(),
            this.parser.start(t),
            (this.isPlaying = !0),
            this.once(
              'complete',
              function () {
                this.isPlaying = !1;
              },
              this
            ),
            (this.lastWrapResult = void 0),
            this.typingNextPage()),
          this
        );
      },
      playPromise: function (t) {
        var e = Eh(this);
        return this.play(t), e;
      },
    },
    ul = function () {
      return !this.isPlaying || this.isPageTyping || this.typeWriter.once(Ph, cl, this).fadeOutPage(), this;
    },
    cl = function () {
      var t = this.runWrap(this.lastWrapResult);
      (this.lastWrapResult = t), this.emit('page.start');
      var e = function () {
        this.emit(Th),
          t.isLastPage
            ? this.emit('complete')
            : (this.emit('page.complete'),
              this.ignoreNextPageInput ? ul.call(this) : this.nextPageInput && this.nextPageInput(ul, this));
      };
      this.once(
        Th,
        function () {
          this.typeWriter.off('complete', e, this);
        },
        this
      ),
        this.typeWriter.once('complete', e, this).start(t.children);
    },
    dl = {
      setClickTarget: function (t) {
        return this.waitEventManager.setClickTarget(t), this;
      },
      setCameraTarget: function (t) {
        return this.waitEventManager.setCameraTarget(t), this;
      },
      setNextPageInput: function (t) {
        var e = this;
        this.nextPageInput = t
          ? 'function' == typeof t
            ? function (i, n) {
                var s = e.waitEventManager;
                s.clearWaitCompleteCallbacks().addWaitCompleteCallback(i, n);
                var r = s.getWaitCompleteTriggerCallback();
                t.call(e, r);
              }
            : function (i, n) {
                Ih(e, t, i, n);
              }
          : null;
      },
      addImage: function (t, e) {
        return this.imageManager.add(t, e), this;
      },
      typingNextPage: ul,
      wait: function (t) {
        return this.typeWriter.wait(t), this;
      },
      setIgnoreWait: function (t) {
        return this.typeWriter.setIgnoreWait(t), this;
      },
      setIgnoreNextPageInput: function (t) {
        return void 0 === t && (t = !0), (this.ignoreNextPageInput = t), this;
      },
      showPage: function () {
        if (!this.isPlaying || !this.isPageTyping) return this;
        var t = this.typeWriter.speed,
          e = this.typeWriter.ignoreWait,
          i = this.typeWriter.skipTypingAnimation,
          n = this.typeWriter.skipSoundEffect;
        return (
          this.typeWriter
            .once(
              'complete',
              function () {
                this.typeWriter.setTypingSpeed(t).setIgnoreWait(e).setSkipTypingAnimation(i).setSkipSoundEffect(n);
              },
              this
            )
            .setTypingSpeed(0)
            .skipCurrentTypingDelay()
            .setIgnoreWait(!0)
            .setSkipTypingAnimation(!0)
            .setSkipSoundEffect(!0),
          this
        );
      },
    };
  Object.assign(
    dl,
    hl,
    ll,
    {
      pause: function () {
        return this.timeline.pause(), this;
      },
      pauseTyping: function () {
        return this.typeWriter.pauseTyping(), this;
      },
    },
    {
      resume: function () {
        return this.timeline.resume(), this;
      },
      resumeTyping: function (t) {
        return this.typeWriter.resumeTyping(t), this;
      },
    },
    {
      setDefaultTypingSpeed: function (t) {
        return (this.defaultTypingSpeed = t), this;
      },
      setTypingSpeed: function (t) {
        return (this.typingSpeed = t), this;
      },
    },
    {
      getSprite: function (t) {
        return this.getGameObject('sprite', t);
      },
      addSprite: function (t, e) {
        return this.addGameObject('sprite', t, e), this;
      },
    },
    {
      setContentOutputEnable: function (t) {
        return this.parser.setContentOutputEnable(t), this;
      },
      setContentCallback: function (t, e) {
        return (this.contentCallback = t), (this.contentCallbackScope = e), this;
      },
    }
  );
  var fl = Phaser.Utils.Objects.IsPlainObject,
    pl = Phaser.Utils.Objects.GetValue,
    vl = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i), fl(n) ? (h = n) : fl(o) && (h = o), void 0 === h && (h = {});
        var u = h.text;
        delete h.text,
          ((l = e.call(this, t, n, s, o, a, h)).type = 'rexTextPlayer'),
          l.initManagers(t, h),
          (l.parser = new wh(d(l), pl(h, 'parser', void 0))),
          (l.typeWriter = new zh(d(l), pl(h, 'typing', void 0))),
          (l._imageManager = void 0);
        var c = pl(h, 'images', void 0);
        c && l.addImage(c);
        var f = pl(h, 'sprites');
        return (
          !1 !== f && null !== f && $h.call(d(l), f),
          l.setIgnoreNextPageInput(pl(h, 'ignoreNextPageInput', !1)),
          l.setNextPageInput(pl(h, 'nextPageInput', null)),
          (l.isPlaying = !1),
          u && l.play(u),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'imageManager',
            get: function () {
              return void 0 === this._imageManager && (this._imageManager = new Ri(this.scene)), this._imageManager;
            },
          },
          {
            key: 'spriteManager',
            get: function () {
              return this.getGameObjectManager('sprite');
            },
          },
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (!(function (t) {
                  for (var e = 0, i = Oh.length; e < i; e++) t.emit(Oh[e]);
                })(this),
                this.parser.destroy(),
                (this.parser = void 0),
                this.typeWriter.destroy(t),
                (this.typeWriter = void 0),
                this._imageManager && this._imageManager.destroy(t),
                (this._imageManager = void 0),
                this.destroyManagers(t),
                g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'isPageTyping',
            get: function () {
              return this.typeWriter.isPageTyping;
            },
          },
          {
            key: 'defaultTypingSpeed',
            get: function () {
              return this.typeWriter.defaultTypingSpeed;
            },
            set: function (t) {
              this.typeWriter.setDefaultTypingSpeed(t);
            },
          },
          {
            key: 'typingSpeed',
            get: function () {
              return this.typeWriter.speed;
            },
            set: function (t) {
              this.typeWriter.setTypingSpeed(t);
            },
          },
          {
            key: 'timeScale',
            get: function () {
              return this.getTimeScale();
            },
            set: function (t) {
              this.setTimeScale(t);
            },
          },
        ]),
        i
      );
    })(
      (function (t) {
        var e = (function (t) {
            l(i, t);
            var e = p(i);
            function i() {
              return r(this, i), e.apply(this, arguments);
            }
            return a(i);
          })(t),
          i = { initManagers: fa, setTimeScale: pa, getTimeScale: va, destroyManagers: ga };
        return Object.assign(e.prototype, i, ya, ka), e;
      })(ar)
    );
  Object.assign(vl.prototype, dl),
    M.register('textPlayer', function (t, e, i, n, s) {
      var r = new vl(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.TextPlayer', vl);
  var gl = { maxLength: ['maxLength', void 0], minLength: ['minLength', void 0], readOnly: ['readOnly', !1] },
    yl = { direction: ['direction', void 0] },
    kl = function t(e, i, n) {
      if ('string' == typeof n) e.hasOwnProperty(n) && (i[n] = e[n]);
      else {
        var s = n;
        if (Array.isArray(s)) for (var r = 0, o = s.length; r < o; r++) t(e, i, s[r]);
        else for (var n in s) t(e, i, n);
      }
    },
    ml = function (t, e, i, n) {
      if (e) return !(i && !i(t, e)) && !!bl(t, e) && !(n && !n(t, e));
      for (var s = t.scene.input.manager, r = s.pointersTotal, o = s.pointers, a = 0; a < r; a++)
        if (((e = o[a]), (!i || i(t, e)) && bl(t, e) && (!n || n(t, e)))) return !0;
      return !1;
    },
    bl = function (t, e) {
      for (
        var i = t.scene,
          n = i.input.cameras.getCamerasBelowPointer(e),
          s = i.input.manager,
          r = [t],
          o = 0,
          a = n.length;
        o < a;
        o++
      )
        if ((s.hitTest(e, r, n[o], xl), xl.length > 0)) return (xl.length = 0), !0;
      return (xl.length = 0), !1;
    },
    xl = [],
    Cl = void 0,
    wl = Phaser.Utils.Objects.GetValue,
    Sl = function (t, e, i) {
      var n, s;
      for (var r in (void 0 === i && (i = {}), t)) (n = t[r]), void 0 !== (s = wl(e, r, n[1])) && (i[n[0]] = s);
      return i;
    },
    Pl = function (t) {
      t.addEventListener('touchstart', Tl, !1),
        t.addEventListener('touchmove', Tl, !1),
        t.addEventListener('touchend', Tl, !1),
        t.addEventListener('mousedown', Tl, !1),
        t.addEventListener('mouseup', Tl, !1),
        t.addEventListener('mousemove', Tl, !1);
    },
    Tl = function (t) {
      t.stopPropagation();
    },
    Ol = function () {
      return this.close(), this.emit('keydown-ENTER', this.parent, this), this;
    },
    Ml = function () {
      (this.isOpened = !0),
        this.initText(),
        this.enterCloseEnable && this.scene.input.keyboard.once('keydown-ENTER', Ol, this),
        this.scene.sys.events.on('postupdate', this.updateText, this),
        this.scene.input.on('pointerdown', this.onClickOutside, this),
        this.onOpenCallback && this.onOpenCallback(this.parent, this),
        this.emit('open', this);
    },
    El = function () {
      (this.isOpened = !1),
        this.updateText(),
        this.scene.sys.events.off('postupdate', this.updateText, this),
        this.scene.input.off('pointerdown', this.onClickOutside, this),
        this.onCloseCallback && this.onCloseCallback(this.parent, this),
        (function (t) {
          if (t) {
            var e = t.parentElement;
            e && e.removeChild(t);
          }
        })(this.node),
        (this.node = void 0),
        this.emit('close', this);
    },
    _l = Phaser.Utils.Objects.GetValue,
    Rl = function (t, e) {
      var i,
        n = _l(e, 'inputType', void 0);
      void 0 === n && (n = _l(e, 'type', 'text')),
        'textarea' === n
          ? ((i = document.createElement('textarea')).style.resize = 'none')
          : ((i = document.createElement('input')).type = n);
      var s = _l(e, 'style', void 0),
        r = i.style;
      Sl(yl, s, r),
        (r.position = 'absolute'),
        (r.opacity = 0),
        (r.pointerEvents = 'none'),
        (r.zIndex = 0),
        (r.transform = 'scale(0)'),
        Sl(gl, e, i),
        Pl(i);
      var o = t.scene.sys.scale;
      return (
        (o.isFullscreen ? o.fullscreenTarget : document.body).appendChild(i),
        i.addEventListener('focus', function (e) {
          Ml.call(t);
        }),
        i.addEventListener('blur', function (e) {
          El.call(t);
        }),
        i
      );
    },
    Ll = {
      open: function () {
        return (
          this.isOpened ||
            this.readOnly ||
            ((t = this) !== Cl && (void 0 !== Cl && Cl.close(), (Cl = t)),
            this.node || (this.node = Rl(this, this.nodeConfig)),
            this.setFocus()),
          this
        );
        var t;
      },
      close: function () {
        return this.isOpened ? (this === Cl && (Cl = void 0), this.setBlur(), this) : this;
      },
    },
    Bl = Phaser.Utils.Objects.GetValue,
    Dl = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), (s = e.call(this, t));
        var o = Bl(n, 'inputType', void 0);
        void 0 === o && (o = Bl(n, 'type', 'text')), s.setEnterCloseEnable(Bl(n, 'enterClose', 'textarea' !== o));
        var a = Bl(n, 'onOpen', void 0);
        a || (a = Bl(n, 'onFocus', void 0)), (s.onOpenCallback = a);
        var h = Bl(n, 'onClose', void 0);
        return (
          h || (h = Bl(n, 'onBlur', void 0)),
          (s.onCloseCallback = h),
          (s.onUpdateCallback = Bl(n, 'onUpdate', void 0)),
          (s.isOpened = !1),
          t
            .on(
              'pointerdown',
              function () {
                this.open();
              },
              d(s)
            )
            .setInteractive(),
          (s.nodeConfig = (function (t) {
            void 0 === t && (t = {});
            var e = {};
            return kl(t, e, 'inputType'), kl(t, e, 'type'), kl(t, e, 'style'), kl(t, e, yl), kl(t, e, gl), e;
          })(n)),
          (s.node = void 0),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function () {
              this.close(), g(u(i.prototype), 'destroy', this).call(this);
            },
          },
          {
            key: 'onClickOutside',
            value: function (t) {
              ml(this.parent, t) || this.close();
            },
          },
          {
            key: 'setEnterCloseEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enterCloseEnable = t), this;
            },
          },
          { key: 'initText', value: function () {} },
          { key: 'updateText', value: function () {} },
          {
            key: 'text',
            get: function () {
              return this.node ? this.node.value : '';
            },
            set: function (t) {
              this.node && (this.node.value = t);
            },
          },
          {
            key: 'setText',
            value: function (t) {
              return (this.text = t), this;
            },
          },
          {
            key: 'maxLength',
            get: function () {
              return this.nodeConfig.maxLength;
            },
            set: function (t) {
              (this.nodeConfig.maxLength = t), this.node && (this.node.maxLength = t);
            },
          },
          {
            key: 'setMaxLength',
            value: function (t) {
              return (this.maxLength = t), this;
            },
          },
          {
            key: 'minLength',
            get: function () {
              return this.nodeConfig.minLength;
            },
            set: function (t) {
              (this.nodeConfig.minLength = t), this.node && (this.node.minLength = t);
            },
          },
          {
            key: 'setMinLength',
            value: function (t) {
              return (this.minLength = t), this;
            },
          },
          {
            key: 'placeholder',
            get: function () {
              return this.node.placeholder;
            },
            set: function (t) {
              this.node && (this.node.placeholder = t);
            },
          },
          {
            key: 'setPlaceholder',
            value: function (t) {
              return (this.placeholder = t), this;
            },
          },
          {
            key: 'selectText',
            value: function (t, e) {
              return this.node ? (void 0 === t ? this.node.select() : this.node.setSelectionRange(t, e), this) : this;
            },
          },
          {
            key: 'selectAll',
            value: function () {
              return this.selectText(), this;
            },
          },
          {
            key: 'selectionStart',
            get: function () {
              return this.node ? this.node.selectionStart : 0;
            },
          },
          {
            key: 'selectionEnd',
            get: function () {
              return this.node ? this.node.selectionEnd : 0;
            },
          },
          {
            key: 'selectedText',
            get: function () {
              if (!this.node) return '';
              var t = this.node;
              return t.value.substring(t.selectionStart, t.selectionEnd);
            },
          },
          {
            key: 'cursorPosition',
            get: function () {
              return this.node ? this.node.selectionStart : 0;
            },
            set: function (t) {
              this.node && this.node.setSelectionRange(t, t);
            },
          },
          {
            key: 'setCursorPosition',
            value: function (t) {
              return (
                void 0 === t ? (t = this.text.length) : t < 0 && (t = this.text.length + t),
                (this.cursorPosition = t),
                this
              );
            },
          },
          {
            key: 'tooltip',
            get: function () {
              return this.node ? this.node.title : '';
            },
            set: function (t) {
              if (!this.node) return this;
              this.node.title = t;
            },
          },
          {
            key: 'setTooltip',
            value: function (t) {
              return (this.tooltip = t), this;
            },
          },
          {
            key: 'setTextChangedCallback',
            value: function (t) {
              return (this.onTextChanged = t), this;
            },
          },
          {
            key: 'readOnly',
            get: function () {
              return this.nodeConfig.readOnly;
            },
            set: function (t) {
              (this.nodeConfig.readOnly = t), this.node && (this.node.readOnly = t);
            },
          },
          {
            key: 'setReadOnly',
            value: function (t) {
              return void 0 === t && (t = !0), (this.readOnly = t), this;
            },
          },
          {
            key: 'spellCheck',
            get: function () {
              return this.node ? this.node.spellcheck : '';
            },
            set: function (t) {
              this.node && (this.node.spellcheck = t);
            },
          },
          {
            key: 'setSpellCheck',
            value: function (t) {
              return (this.spellCheck = t), this;
            },
          },
          {
            key: 'fontColor',
            get: function () {
              if (this.node) return this.node.style.color;
            },
            set: function (t) {
              this.node && (this.node.style.color = t);
            },
          },
          {
            key: 'setFontColor',
            value: function (t) {
              return (this.fontColor = t), this;
            },
          },
          {
            key: 'setStyle',
            value: function (t, e) {
              return this.node ? ((this.node.style[t] = e), this) : this;
            },
          },
          {
            key: 'getStyle',
            value: function (t) {
              if (this.node) return this.node.style[t];
            },
          },
          {
            key: 'scrollToBottom',
            value: function () {
              return this.node ? ((this.node.scrollTop = this.node.scrollHeight), this) : this;
            },
          },
          {
            key: 'setEnabled',
            value: function (t) {
              return this.node ? (void 0 === t && (t = !0), (this.node.disabled = !t), this) : this;
            },
          },
          {
            key: 'setBlur',
            value: function () {
              return this.node ? (this.node.blur(), this) : this;
            },
          },
          {
            key: 'setFocus',
            value: function () {
              return this.node ? (this.node.focus(), this) : this;
            },
          },
          {
            key: 'isFocused',
            get: function () {
              return this.isOpened;
            },
          },
        ]),
        i
      );
    })(uo);
  Object.assign(Dl.prototype, Ll);
  var Il = function (t, e, i) {
      t = t.replace(' ', '');
      var n = i.previousText;
      if (t === n) return t;
      if (isNaN(t)) {
        i.emit('nan', t, i), (t = n);
        var s = i.cursorPosition - 1;
        i.setText(t), i.setCursorPosition(s);
      } else i.previousText = t;
      return t;
    },
    jl = function (t) {
      var e = t.prevSelectionStart;
      if (null !== e) {
        for (var i = t.prevSelectionEnd, n = t.parent, s = e; s < i; s++) {
          var r = n.getCharChild(s);
          r && n.emit('cursorout', r, s, n);
        }
        (t.prevSelectionStart = null), (t.prevSelectionEnd = null);
      }
    },
    Al = function (t) {
      var e = t.prevCursorPosition;
      if (null !== e) {
        var i = t.parent,
          n = i.getCharChild(e);
        n && i.emit('cursorout', n, e, i), (t.prevCursorPosition = null);
      }
    },
    zl = Phaser.Utils.Objects.GetValue,
    Fl = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          (s = e.call(this, t, n)).setSelectAllWhenFocusEnable(zl(n, 'selectAll', !1)),
          (s.cursorMoveStartIndex = null),
          (s.prevCursorPosition = null),
          (s.prevSelectionStart = null),
          (s.prevSelectionEnd = null),
          (s.firstClickAfterOpen = !1),
          t
            .on(
              'pointerdown',
              function (e, i, n, s) {
                var r = t.getNearestChild(i, n),
                  o = t.getCharIndex(r);
                (this.selectAllWhenFocus && this.firstClickAfterOpen) || this.setCursorPosition(o),
                  (this.cursorMoveStartIndex = o),
                  (this.firstClickAfterOpen = !1);
              },
              d(s)
            )
            .on(
              'pointermove',
              function (e, i, n, s) {
                if (e.isDown) {
                  var r = t.getNearestChild(i, n),
                    o = t.getCharIndex(r);
                  this.cursorMoveStartIndex < o
                    ? this.selectText(this.cursorMoveStartIndex, o + 1)
                    : this.selectText(o, this.cursorMoveStartIndex + 1);
                }
              },
              d(s)
            ),
          s
            .on(
              'open',
              function () {
                this.selectAllWhenFocus && this.selectAll(), (this.firstClickAfterOpen = !0), t.emit('open');
              },
              d(s)
            )
            .on('close', function () {
              t.emit('close');
            })
            .on('keydown-ENTER', function () {
              t.emit('keydown-ENTER');
            }),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'initText',
            value: function () {
              var t = this.parent;
              return (this.prevCursorPosition = null), this.setText(t.text), this;
            },
          },
          {
            key: 'updateText',
            value: function () {
              var t = this.parent,
                e = this.text;
              if (this.onUpdateCallback) {
                var i = this.onUpdateCallback(e, t, this);
                null != i && (e = i);
              }
              return (
                t.text !== e && t.setText(e),
                this.isOpened
                  ? this.selectionStart !== this.selectionEnd
                    ? (Al(this),
                      (function (t) {
                        var e = t.parent,
                          i = t.isOpened ? t.selectionStart : null,
                          n = t.isOpened ? t.selectionEnd : null,
                          s = t.prevSelectionStart,
                          r = t.prevSelectionEnd;
                        if (s !== i || r !== n) {
                          var o, a;
                          null === s
                            ? ((o = i), (a = n))
                            : null === i
                            ? ((o = s), (a = r))
                            : ((o = Math.min(s, i)), (a = Math.max(r, n)));
                          for (var h = o; h < a; h++) {
                            var l;
                            if ((l = null !== s && h >= s && h < r) != (null !== i && h >= i && h < n)) {
                              var u = e.getCharChild(h);
                              if (u) {
                                var c = l ? 'cursorout' : 'cursorin';
                                e.emit(c, u, h, e);
                              }
                            }
                          }
                          (t.prevSelectionStart = i), (t.prevSelectionEnd = n);
                        }
                      })(this))
                    : (jl(this),
                      (function (t) {
                        var e = t.parent,
                          i = e.text,
                          n = t.cursorPosition;
                        if (t.prevCursorPosition !== n) {
                          var s;
                          null !== t.prevCursorPosition &&
                            t.prevCursorPosition > i.length &&
                            (t.prevCursorPosition = null),
                            null !== t.prevCursorPosition &&
                              (s = e.getCharChild(t.prevCursorPosition)) &&
                              ('\n' === s.text && s.clearTextSize(), e.emit('cursorout', s, t.prevCursorPosition, e)),
                            null != n &&
                              (s = e.getCharChild(n)) &&
                              ('\n' === s.text && s.copyTextSize(e.lastInsertCursor),
                              (function (t) {
                                var e,
                                  i,
                                  n = t.parent,
                                  s = n.width,
                                  r = n.height,
                                  o = t.drawX,
                                  a = t.drawY,
                                  h = o + t.drawTLX,
                                  l = o + t.drawTRX,
                                  u = a + t.drawTLY,
                                  c = a + t.drawBLY;
                                (e = h < 0 ? 0 - h : l > s ? s - l : 0),
                                  (i = u < 0 ? 0 - u : c > r ? r - c : 0),
                                  (n._textOX += e),
                                  (n._textOY += i);
                              })(s),
                              e.emit('cursorin', s, n, e)),
                            e.emit('movecursor', n, t.prevCursorPosition, e),
                            (t.prevCursorPosition = n);
                        }
                      })(this))
                  : (jl(this), Al(this)),
                this
              );
            },
          },
          {
            key: 'setNumberInput',
            value: function () {
              return (this.onUpdateCallback = Il), this;
            },
          },
          {
            key: 'setSelectAllWhenFocusEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.selectAllWhenFocus = t), this;
            },
          },
        ]),
        i
      );
    })(Dl),
    Vl = Phaser.Utils.Objects.GetValue,
    Wl = [
      'inputType',
      'onOpen',
      'onFocus',
      'onClose',
      'onBlur',
      'onUpdate',
      'enterClose',
      'readOnly',
      'maxLength',
      'minLength',
      'selectAll',
    ],
    Yl = function (t, e) {
      if (t && 'number' != typeof t) {
        if (t.hasOwnProperty(e)) return !0;
        if (-1 !== e.indexOf('.')) {
          for (var i = e.split('.'), n = t, s = 0; s < i.length; s++) {
            if (!n.hasOwnProperty(i[s])) return !1;
            n = n[i[s]];
          }
          return !0;
        }
        return !1;
      }
      return !1;
    },
    Xl = function (t, e, i, n) {
      if ((void 0 === i && (i = '.'), void 0 === n && (n = {}), !t)) return n;
      if (e in t) return Object.assign(n, t[e]);
      for (var s in ((e += i), t)) s.startsWith(e) && (n[s.replace(e, '')] = t[s]);
      return n;
    },
    Gl = function (t, e, i) {
      if ((void 0 === i && (i = {}), Array.isArray(e))) for (var n = 0, s = e.length; n < s; n++) i[(r = e[n])] = t[r];
      else for (var r in e) i[r] = t[r];
      return i;
    },
    Hl = function (t, e) {
      for (var i in t) {
        if (!(i in e)) return !1;
        if (t[i] !== e[i]) return !1;
      }
      for (var i in e) if (!(i in t)) return !1;
      return !0;
    },
    Ul = function (t) {
      dr(t) ||
        this.setCursorStyle(t)
          .on(
            'cursorin',
            function (t) {
              var e = this.cursorStyle,
                i = Gl(t.style, e);
              Hl(e, i) || ((t.styleSave = i), t.modifyStyle(e));
            },
            this
          )
          .on(
            'cursorout',
            function (t) {
              t.styleSave && (t.modifyStyle(t.styleSave), (t.styleSave = void 0));
            },
            this
          );
    },
    Nl = function (t) {
      dr(t) ||
        this.setFocusStyle(t)
          .on(
            'open',
            function () {
              var t = this.background,
                e = this.focusStyle,
                i = Gl(t, e);
              Hl(e, i) || ((t.styleSave = i), t.modifyStyle(e));
            },
            this
          )
          .on(
            'close',
            function () {
              var t = this.background;
              t.styleSave && (t.modifyStyle(t.styleSave), (t.styleSave = void 0));
            },
            this
          );
    };
  function Kl() {}
  function Jl(t, e, i, n, s) {
    for (var r = 0, o = e.length, a = 0, h = 0; r < o; r++) {
      var l = e[r];
      if (l.removed) {
        if (((l.value = t.join(n.slice(h, h + l.count))), (h += l.count), r && e[r - 1].added)) {
          var u = e[r - 1];
          (e[r - 1] = e[r]), (e[r] = u);
        }
      } else {
        if (!l.added && s) {
          var c = i.slice(a, a + l.count);
          (c = c.map(function (t, e) {
            var i = n[h + e];
            return i.length > t.length ? i : t;
          })),
            (l.value = t.join(c));
        } else l.value = t.join(i.slice(a, a + l.count));
        (a += l.count), l.added || (h += l.count);
      }
    }
    var d = e[o - 1];
    return (
      o > 1 &&
        'string' == typeof d.value &&
        (d.added || d.removed) &&
        t.equals('', d.value) &&
        ((e[o - 2].value += d.value), e.pop()),
      e
    );
  }
  Kl.prototype = {
    diff: function (t, e) {
      var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
        n = i.callback;
      'function' == typeof i && ((n = i), (i = {})), (this.options = i);
      var s = this;
      function r(t) {
        return n
          ? (setTimeout(function () {
              n(void 0, t);
            }, 0),
            !0)
          : t;
      }
      (t = this.castInput(t)), (e = this.castInput(e)), (t = this.removeEmpty(this.tokenize(t)));
      var o = (e = this.removeEmpty(this.tokenize(e))).length,
        a = t.length,
        h = 1,
        l = o + a;
      i.maxEditLength && (l = Math.min(l, i.maxEditLength));
      var u = [{ newPos: -1, components: [] }],
        c = this.extractCommon(u[0], e, t, 0);
      if (u[0].newPos + 1 >= o && c + 1 >= a) return r([{ value: this.join(e), count: e.length }]);
      function d() {
        for (var i = -1 * h; i <= h; i += 2) {
          var n = void 0,
            l = u[i - 1],
            c = u[i + 1],
            d = (c ? c.newPos : 0) - i;
          l && (u[i - 1] = void 0);
          var f = l && l.newPos + 1 < o,
            p = c && 0 <= d && d < a;
          if (f || p) {
            if (
              (!f || (p && l.newPos < c.newPos)
                ? ((n = { newPos: (v = c).newPos, components: v.components.slice(0) }),
                  s.pushComponent(n.components, void 0, !0))
                : ((n = l).newPos++, s.pushComponent(n.components, !0, void 0)),
              (d = s.extractCommon(n, e, t, i)),
              n.newPos + 1 >= o && d + 1 >= a)
            )
              return r(Jl(s, n.components, e, t, s.useLongestToken));
            u[i] = n;
          } else u[i] = void 0;
        }
        var v;
        h++;
      }
      if (n)
        !(function t() {
          setTimeout(function () {
            if (h > l) return n();
            d() || t();
          }, 0);
        })();
      else
        for (; h <= l; ) {
          var f = d();
          if (f) return f;
        }
    },
    pushComponent: function (t, e, i) {
      var n = t[t.length - 1];
      n && n.added === e && n.removed === i
        ? (t[t.length - 1] = { count: n.count + 1, added: e, removed: i })
        : t.push({ count: 1, added: e, removed: i });
    },
    extractCommon: function (t, e, i, n) {
      for (
        var s = e.length, r = i.length, o = t.newPos, a = o - n, h = 0;
        o + 1 < s && a + 1 < r && this.equals(e[o + 1], i[a + 1]);

      )
        o++, a++, h++;
      return h && t.components.push({ count: h }), (t.newPos = o), a;
    },
    equals: function (t, e) {
      return this.options.comparator
        ? this.options.comparator(t, e)
        : t === e || (this.options.ignoreCase && t.toLowerCase() === e.toLowerCase());
    },
    removeEmpty: function (t) {
      for (var e = [], i = 0; i < t.length; i++) t[i] && e.push(t[i]);
      return e;
    },
    castInput: function (t) {
      return t;
    },
    tokenize: function (t) {
      return t.split('');
    },
    join: function (t) {
      return t.join('');
    },
  };
  var ql = new Kl();
  var Zl = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/,
    $l = /\S/,
    Ql = new Kl();
  (Ql.equals = function (t, e) {
    return (
      this.options.ignoreCase && ((t = t.toLowerCase()), (e = e.toLowerCase())),
      t === e || (this.options.ignoreWhitespace && !$l.test(t) && !$l.test(e))
    );
  }),
    (Ql.tokenize = function (t) {
      for (var e = t.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/), i = 0; i < e.length - 1; i++)
        !e[i + 1] && e[i + 2] && Zl.test(e[i]) && Zl.test(e[i + 2]) && ((e[i] += e[i + 2]), e.splice(i + 1, 2), i--);
      return e;
    });
  var tu = new Kl();
  (tu.tokenize = function (t) {
    var e = [],
      i = t.split(/(\n|\r\n)/);
    i[i.length - 1] || i.pop();
    for (var n = 0; n < i.length; n++) {
      var s = i[n];
      n % 2 && !this.options.newlineIsToken
        ? (e[e.length - 1] += s)
        : (this.options.ignoreWhitespace && (s = s.trim()), e.push(s));
    }
    return e;
  }),
    (new Kl().tokenize = function (t) {
      return t.split(/(\S.+?[.!?])(?=\s+|$)/);
    }),
    (new Kl().tokenize = function (t) {
      return t.split(/([{}:;,]|\s+)/);
    });
  var eu = Object.prototype.toString,
    iu = new Kl();
  function nu(t, e, i, s, r) {
    var o, a;
    for (e = e || [], i = i || [], s && (t = s(r, t)), o = 0; o < e.length; o += 1) if (e[o] === t) return i[o];
    if ('[object Array]' === eu.call(t)) {
      for (e.push(t), a = new Array(t.length), i.push(a), o = 0; o < t.length; o += 1) a[o] = nu(t[o], e, i, s, r);
      return e.pop(), i.pop(), a;
    }
    if ((t && t.toJSON && (t = t.toJSON()), 'object' === n(t) && null !== t)) {
      e.push(t), (a = {}), i.push(a);
      var h,
        l = [];
      for (h in t) t.hasOwnProperty(h) && l.push(h);
      for (l.sort(), o = 0; o < l.length; o += 1) a[(h = l[o])] = nu(t[h], e, i, s, h);
      e.pop(), i.pop();
    } else a = t;
    return a;
  }
  (iu.useLongestToken = !0),
    (iu.tokenize = tu.tokenize),
    (iu.castInput = function (t) {
      var e = this.options,
        i = e.undefinedReplacement,
        n = e.stringifyReplacer,
        s =
          void 0 === n
            ? function (t, e) {
                return void 0 === e ? i : e;
              }
            : n;
      return 'string' == typeof t ? t : JSON.stringify(nu(t, null, null, s), s, '  ');
    }),
    (iu.equals = function (t, e) {
      return Kl.prototype.equals.call(iu, t.replace(/,([\r\n])/g, '$1'), e.replace(/,([\r\n])/g, '$1'));
    });
  var su = new Kl();
  (su.tokenize = function (t) {
    return t.slice();
  }),
    (su.join = su.removeEmpty =
      function (t) {
        return t;
      });
  var ru = Phaser.Utils.Array.Remove,
    ou = function (t, e) {
      var i = t.text;
      if (e !== i) {
        if ((null == i && (i = ''), ru(t.children, t.lastInsertCursor), '' === e)) t.removeChildren();
        else
          for (var n = ((h = i), (l = e), ql.diff(h, l, u)), s = 0, r = 0, o = n.length; r < o; r++) {
            var a = n[r];
            a.removed
              ? t.removeText(s, a.count)
              : a.added
              ? (t.insertText(s, a.value), (s += a.count))
              : (s += a.count);
          }
        var h, l, u;
        t.children.push(t.lastInsertCursor), t.runWrap(), t.emit('textchange', e, t);
      }
    },
    au = Phaser.Utils.Objects.IsPlainObject,
    hu = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          au(n) ? (h = n) : au(o) && (h = o),
          void 0 === h && (h = {}),
          (function (t) {
            var e = !t.textArea;
            if (
              (Yl(t, 'wrap.vAlign') || $(t, 'wrap.vAlign', (i = e ? 'center' : 'top')),
              Yl(t, 'wrap.charWrap') || $(t, 'wrap.charWrap', !0),
              Yl(t, 'wrap.maxLines') || $(t, 'wrap.maxLines', (i = e ? 1 : void 0)),
              e && $(t, 'wrap.wrapWidth', 1 / 0),
              Yl(t, 'wrap.useDefaultTextHeight') || $(t, 'wrap.useDefaultTextHeight', !0),
              t.edit || (t.edit = {}),
              !Yl(t.edit, 'inputType'))
            ) {
              var i = e ? 'text' : 'textarea';
              $(t.edit, 'inputType', i);
            }
          })(h);
        var u = h.text;
        u && delete h.text;
        var c = Xl(h.background, 'focus'),
          f = Xl(h.style, 'cursor');
        ((l = e.call(this, t, n, s, o, a, h)).type = 'rexCanvasInput'),
          (l.contentWidth = void 0),
          (l.contentHeight = void 0),
          (l.lineHeight = void 0),
          (l.linesCount = void 0),
          l._text,
          (l.textEdit = (function (t, e) {
            var i = Vl(e, 'edit');
            return void 0 === i && (i = {}), kl(e, i, Wl), new Fl(t, i);
          })(d(l), h)),
          h.focusStyle && Object.assign(c, h.focusStyle),
          Nl.call(d(l), c),
          h.cursorStyle && Object.assign(f, h.cursorStyle),
          Ul.call(d(l), f);
        var p = h.onAddChar;
        p && l.on('addchar', p);
        var v = h.onCursorOut;
        v && l.on('cursorout', v);
        var g = h.onCursorIn;
        g && l.on('cursorin', g);
        var y,
          k,
          m = h.onMoveCursor;
        return (
          m && l.on('movecursor', m),
          l.setParseTextCallback(h.parseTextCallback),
          (l.lastInsertCursor = ((y = d(l)), ((k = y.createCharChild('|')).text = ''), k)),
          u || (u = ''),
          l.setText(u),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'addChild',
            value: function (t, e) {
              if ((g(u(i.prototype), 'addChild', this).call(this, t, e), Array.isArray(t)))
                for (var n = t, s = 0, r = n.length; s < r; s++) {
                  t = n[s];
                  gs(t) && this.emit('addchar', t, e + s, this);
                }
              else gs(t) && this.emit('addchar', t, e, this);
              return this;
            },
          },
          {
            key: 'text',
            get: function () {
              return this._text;
            },
            set: function (t) {
              (t = null == t ? '' : t.toString()), this._text !== t && (ou(this, t), (this._text = t));
            },
          },
          {
            key: 'setText',
            value: function (t) {
              return (this.text = t), this;
            },
          },
          {
            key: 'appendText',
            value: function (t) {
              return this.setText(this.text + t), this;
            },
          },
          {
            key: 'runWrap',
            value: function (t) {
              var e = g(u(i.prototype), 'runWrap', this).call(this, t);
              return (
                (this.contentWidth = e.maxLineWidth),
                (this.contentHeight = e.linesHeight),
                (this.lineHeight = e.lineHeight),
                (this.linesCount = e.lines.length),
                e
              );
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              return (
                (this.width === t && this.height === e) ||
                  (g(u(i.prototype), 'setSize', this).call(this, t, e), this.runWrap()),
                this
              );
            },
          },
          {
            key: 'displayText',
            get: function () {
              return this.text;
            },
            set: function (t) {
              this.text = t;
            },
          },
          {
            key: 'setDisplayText',
            value: function (t) {
              return (this.displayText = t), this;
            },
          },
          {
            key: 'inputText',
            get: function () {
              return this.textEdit.text;
            },
            set: function (t) {
              this.textEdit.text = t;
            },
          },
          {
            key: 'setInputText',
            value: function (t) {
              return (this.inputText = t), this;
            },
          },
          {
            key: 'setParseTextCallback',
            value: function (t) {
              return t || (t = lu), (this.parseTextCallback = t), this;
            },
          },
          {
            key: 'value',
            get: function () {
              return this.parseTextCallback(this.text);
            },
            set: function (t) {
              this.setText(t);
            },
          },
          {
            key: 'getValue',
            value: function () {
              return this.value;
            },
          },
          {
            key: 'setValue',
            value: function (t) {
              return (this.value = t), this;
            },
          },
          {
            key: 'readOnly',
            get: function () {
              return this.textEdit.readOnly;
            },
            set: function (t) {
              this.textEdit.readOnly = t;
            },
          },
          {
            key: 'setReadOnly',
            value: function (t) {
              return this.textEdit.setReadOnly(t), this;
            },
          },
          {
            key: 'open',
            value: function (t) {
              return t && this.textEdit.once('close', t), this.textEdit.open(), this;
            },
          },
          {
            key: 'close',
            value: function () {
              return this.textEdit.close(), this;
            },
          },
          {
            key: 'isOpened',
            get: function () {
              return this.textEdit.isOpened;
            },
          },
          {
            key: 'setFocusStyle',
            value: function (t) {
              return (this.focusStyle = t), this;
            },
          },
          {
            key: 'setCursorStyle',
            value: function (t) {
              return (this.cursorStyle = t), this;
            },
          },
          {
            key: 'setNumberInput',
            value: function () {
              return (
                this.textEdit.setNumberInput().setSelectAllWhenFocusEnable(), (this.parseTextCallback = Number), this
              );
            },
          },
          {
            key: 'maxLength',
            get: function () {
              return this.textEdit.maxLength;
            },
            set: function (t) {
              this.textEdit.maxLength = t;
            },
          },
          {
            key: 'setMaxLength',
            value: function (t) {
              return (this.maxLength = t), this;
            },
          },
          {
            key: 'minLength',
            get: function () {
              return this.textEdit.minLength;
            },
            set: function (t) {
              this.textEdit.minLength = t;
            },
          },
          {
            key: 'setMinLength',
            value: function (t) {
              return (this.minLength = t), this;
            },
          },
          {
            key: 'topTextOY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'bottomTextOY',
            get: function () {
              return -this.tableVisibleHeight;
            },
          },
          {
            key: 'leftTextOX',
            get: function () {
              return 0;
            },
          },
          {
            key: 'rightTextOX',
            get: function () {
              return -this.textVisibleWidth;
            },
          },
          {
            key: 'textVisibleHeight',
            get: function () {
              var t = this.contentHeight - this.height;
              return t < 0 && (t = 0), t;
            },
          },
          {
            key: 'textVisibleWidth',
            get: function () {
              var t = this.contentWidth - this.width;
              return t < 0 && (t = 0), t;
            },
          },
          {
            key: 't',
            get: function () {
              return this.getTextOYPercentage();
            },
            set: function (t) {
              this.setTextOYByPercentage(t).updateTexture();
            },
          },
          {
            key: 's',
            get: function () {
              return this.getTextOXPercentage();
            },
            set: function (t) {
              this.setTextOXByPercentage(t).updateTexture();
            },
          },
        ]),
        i
      );
    })(ar),
    lu = function (t) {
      return t;
    };
  Object.assign(hu.prototype, {
    setTextOYByPercentage: function (t) {
      return this.setTextOY(-this.textVisibleHeight * t), this;
    },
    getTextOYPercentage: function () {
      var t = this.textVisibleHeight;
      return 0 === t ? 0 : this._textOY / -t;
    },
    setTextOXByPercentage: function (t) {
      return this.setTextOX(-this.textVisibleWidth * t), this;
    },
    getTextOXPercentage: function () {
      var t = this.textVisibleWidth;
      return 0 === t ? 0 : this._textOX / -t;
    },
  }),
    M.register('canvasInput', function (t, e, i, n, s) {
      var r = new hu(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.CanvasInput', hu);
  var uu = function (t) {
      return H(t).loop.delta;
    },
    cu = Phaser.Utils.Objects.GetValue,
    du = Phaser.Math.Wrap,
    fu = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          void 0 === n && (n = {}),
          'number' === n.onUpdate && (n.onUpdate = Il),
          (s = e.call(this, t, n)).setCursor(cu(n, 'cursor', '|')),
          s.setCursorFlashDuration(cu(n, 'cursorFlashDuration', 1e3)),
          (s.cursorFlashTimer = 0),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'initText',
            value: function () {
              return (
                (this.cursorFlashTimer = 0),
                (this.prevCursorPosition = void 0),
                this.setText(this.parent.text),
                this.setCursorPosition(),
                this
              );
            },
          },
          {
            key: 'updateText',
            value: function () {
              var t = this.parent,
                e = this.text;
              if (this.onUpdateCallback) {
                var i = this.onUpdateCallback(e, t, this);
                null != i && (e = i);
              }
              if (this.isOpened && this.hasCursor) {
                var n = this.cursorPosition;
                (e = e.substring(0, n) + this.cursor + e.substring(n)),
                  this.prevCursorPosition !== n && (this.prevCursorPosition = n);
              }
              return t.text !== e && (t.setText(e), this.emit('textchange', e, t, this)), this;
            },
          },
          {
            key: 'setCursor',
            value: function (t) {
              return (this._cursor = t), (this.hasCursor = t && '' !== t), t;
            },
          },
          {
            key: 'setCursorFlashDuration',
            value: function (t) {
              return (this.cursorFlashDuration = t), this;
            },
          },
          {
            key: 'cursor',
            get: function () {
              if (!this._isFocused) return this._cursor;
              var t;
              t = this.cursorFlashTimer < this.cursorFlashDuration / 2 ? this._cursor : ' ';
              var e = this.cursorFlashTimer + uu(this.scene);
              return (this.cursorFlashTimer = du(e, 0, this.cursorFlashDuration)), t;
            },
          },
        ]),
        i
      );
    })(Dl);
  M.register('hiddenEdit', function (t, e) {
    return new fu(t, e);
  }),
    $(window, 'RexPlugins.UI.HiddenEdit', fu);
  var pu = Phaser.GameObjects.GetCalcMatrix,
    vu = Phaser.Renderer.Canvas.SetTransform,
    gu = {
      renderWebGL: function (t, e, i, n) {
        e.updateData(), i.addToRenderList(e);
        var s = t.pipelines.set(e.pipeline),
          r = pu(e, i, n),
          o = s.calcMatrix.copyFrom(r.calc),
          a = e._displayOriginX,
          h = e._displayOriginY,
          l = i.alpha * e.alpha;
        t.pipelines.preBatch(e);
        for (var u, c = e.geom, d = 0, f = c.length; d < f; d++) (u = c[d]).visible && u.webglRender(s, o, l, a, h);
        t.pipelines.postBatch(e);
      },
      renderCanvas: function (t, e, i, n) {
        e.updateData(), i.addToRenderList(e);
        var s = t.currentContext;
        if (vu(t, s, e, i, n)) {
          for (var r, o = e._displayOriginX, a = e._displayOriginY, h = e.geom, l = 0, u = h.length; l < u; l++)
            (r = h[l]).visible && r.canvasRender(s, o, a);
          s.restore();
        }
      },
    },
    yu = Phaser.GameObjects.Shape,
    ku = Phaser.Utils.Array.Remove,
    mu = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a) {
        var h;
        return (
          r(this, i),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 2),
          void 0 === a && (a = o),
          ((h = e.call(this, t, 'rexShapes', []))._width = -1),
          (h._height = -1),
          (h.dirty = !0),
          (h.isSizeChanged = !0),
          (h.shapes = {}),
          h.setPosition(n, s),
          h.setSize(o, a),
          h.updateDisplayOrigin(),
          h
        );
      }
      return (
        a(i, [
          {
            key: 'width',
            get: function () {
              return this._width;
            },
            set: function (t) {
              this.setSize(t, this._height);
            },
          },
          {
            key: 'height',
            get: function () {
              return this._height;
            },
            set: function (t) {
              this.setSize(this._width, t);
            },
          },
          {
            key: 'setDirty',
            value: function (t) {
              return void 0 === t && (t = !0), (this.dirty = t), this;
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              (this.isSizeChanged = this.isSizeChanged || this._width !== t || this._height !== e),
                (this.dirty = this.dirty || this.isSizeChanged),
                (this._width = t),
                (this._height = e),
                this.updateDisplayOrigin();
              var i = this.input;
              return i && !i.customHitArea && ((i.hitArea.width = t), (i.hitArea.height = e)), this;
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return this.setSize(t, e), this;
            },
          },
          {
            key: 'fillColor',
            get: function () {
              return this._fillColor;
            },
            set: function (t) {
              this.setFillStyle(t, this._fillAlpha);
            },
          },
          {
            key: 'fillAlpha',
            get: function () {
              return this._fillAlpha;
            },
            set: function (t) {
              this.setFillStyle(this._fillColor, t);
            },
          },
          {
            key: 'setFillStyle',
            value: function (t, e) {
              return (
                void 0 === e && (e = 1),
                (this.dirty = this.dirty || this.fillColor !== t || this.fillAlpha !== e),
                (this._fillColor = t),
                (this._fillAlpha = e),
                this
              );
            },
          },
          {
            key: 'lineWidth',
            get: function () {
              return this._lineWidth;
            },
            set: function (t) {
              this.setStrokeStyle(t, this._strokeColor, this._strokeAlpha);
            },
          },
          {
            key: 'strokeColor',
            get: function () {
              return this._strokeColor;
            },
            set: function (t) {
              this.setStrokeStyle(this._lineWidth, t, this._strokeAlpha);
            },
          },
          {
            key: 'strokeAlpha',
            get: function () {
              return this._strokeAlpha;
            },
            set: function (t) {
              this.setStrokeStyle(this._lineWidth, this._strokeColor, t);
            },
          },
          {
            key: 'setStrokeStyle',
            value: function (t, e, i) {
              return (
                void 0 === i && (i = 1),
                (this.dirty = this.dirty || this.lineWidth !== t || this.strokeColor !== e || this.strokeAlpha !== i),
                (this._lineWidth = t),
                (this._strokeColor = e),
                (this._strokeAlpha = i),
                this
              );
            },
          },
          { key: 'updateShapes', value: function () {} },
          {
            key: 'updateData',
            value: function () {
              if (!this.dirty) return this;
              this.updateShapes();
              for (var t = this.geom, e = 0, i = t.length; e < i; e++) {
                var n = t[e];
                n.dirty && n.updateData();
              }
              return (this.isSizeChanged = !1), (this.dirty = !1), this;
            },
          },
          {
            key: 'clear',
            value: function () {
              return (this.geom.length = 0), wt(this.shapes), this;
            },
          },
          {
            key: 'getShape',
            value: function (t) {
              return this.shapes[t];
            },
          },
          {
            key: 'getShapes',
            value: function () {
              return this.geom;
            },
          },
          {
            key: 'addShape',
            value: function (t) {
              this.geom.push(t);
              var e = t.name;
              return e && (this.shapes[e] = t), (this.dirty = !0), this;
            },
          },
          {
            key: 'deleteShape',
            value: function (t) {
              var e = this.getShape(t);
              return e && (delete this.shapes[t], ku(this.geom, e)), this;
            },
          },
        ]),
        i
      );
    })(yu);
  Object.assign(mu.prototype, gu);
  var bu = {
      setBoxFillStyle: function (t, e) {
        return (
          void 0 === e && (e = 1),
          (this.dirty = this.dirty || this.boxFillColor !== t || this.boxFillAlpha !== e),
          (this.boxFillColor = t),
          (this.boxFillAlpha = e),
          this
        );
      },
      setUncheckedBoxFillStyle: function (t, e) {
        return (
          void 0 === e && (e = 1),
          (this.dirty = this.dirty || this.uncheckedBoxFillColor !== t || this.uncheckedBoxFillAlpha !== e),
          (this.uncheckedBoxFillColor = t),
          (this.uncheckedBoxFillAlpha = e),
          this
        );
      },
      setBoxStrokeStyle: function (t, e, i) {
        return (
          void 0 === i && (i = 1),
          (this.dirty =
            this.dirty || this.boxLineWidth !== t || this.boxStrokeColor !== e || this.boxStrokeAlpha !== i),
          (this.boxLineWidth = t),
          (this.boxStrokeColor = e),
          (this.boxStrokeAlpha = i),
          this
        );
      },
      setUncheckedBoxStrokeStyle: function (t, e, i) {
        return (
          void 0 === i && (i = 1),
          (this.dirty =
            this.dirty ||
            this.uncheckedBoxLineWidth !== t ||
            this.uncheckedBoxStrokeColor !== e ||
            this.uncheckedBoxStrokeAlpha !== i),
          (this.uncheckedBoxLineWidth = t),
          (this.uncheckedBoxStrokeColor = e),
          (this.uncheckedBoxStrokeAlpha = i),
          this
        );
      },
      setCheckerStyle: function (t, e) {
        return (
          void 0 === e && (e = 1),
          (this.dirty = this.dirty || this.checkerColor !== t || this.checkAlpha !== e),
          (this.checkerColor = t),
          (this.checkAlpha = e),
          this
        );
      },
      setBoxShape: function (t) {
        return (
          void 0 === t && (t = !1),
          this.isCircleShape === t || ((this.isCircleShape = t), (this.isSizeChanged = !0), (this.dirty = !0)),
          this
        );
      },
    },
    xu = {
      fillStyle: function (t, e) {
        return (
          null == t
            ? (this.isFilled = !1)
            : (void 0 === e && (e = 1), (this.isFilled = !0), (this.fillColor = t), (this.fillAlpha = e)),
          this
        );
      },
      lineStyle: function (t, e, i) {
        return (
          null == t || null == e
            ? (this.isStroked = !1)
            : (void 0 === i && (i = 1),
              (this.isStroked = !0),
              (this.lineWidth = t),
              (this.strokeColor = e),
              (this.strokeAlpha = i)),
          this
        );
      },
    },
    Cu = (function () {
      function t() {
        r(this, t),
          (this.name = void 0),
          (this.dirty = !0),
          (this.visible = !0),
          (this.data = void 0),
          (this.isFilled = !1),
          (this.fillColor = void 0),
          (this.fillAlpha = 1),
          (this.isStroked = !1),
          (this.lineWidth = 1),
          (this.strokeColor = void 0),
          (this.strokeAlpha = 1);
      }
      return (
        a(t, [
          {
            key: 'setName',
            value: function (t) {
              return (this.name = t), this;
            },
          },
          {
            key: 'setVisible',
            value: function (t) {
              return void 0 === t && (t = !0), (this.visible = t), this;
            },
          },
          {
            key: 'reset',
            value: function () {
              return this.setVisible().fillStyle().lineStyle(), this;
            },
          },
          { key: 'webglRender', value: function (t, e, i, n, s) {} },
          { key: 'canvasRender', value: function (t, e, i) {} },
          {
            key: 'updateData',
            value: function () {
              this.dirty = !1;
            },
          },
        ]),
        t
      );
    })();
  Object.assign(Cu.prototype, xu, St);
  var wu = Phaser.Geom.Polygon.Earcut,
    Su = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        var t;
        return r(this, i), ((t = e.call(this)).pathData = []), (t.pathIndexes = []), (t.closePath = !1), t;
      }
      return (
        a(i, [
          {
            key: 'updateData',
            value: function () {
              return (this.pathIndexes = wu(this.pathData)), g(u(i.prototype), 'updateData', this).call(this), this;
            },
          },
          {
            key: 'webglRender',
            value: function (t, e, i, n, s) {
              this.isFilled && Kt(t, e, this, i, n, s), this.isStroked && qt(t, this, i, n, s);
            },
          },
          {
            key: 'canvasRender',
            value: function (t, e, i) {
              var n = this.pathData,
                s = n.length - 1,
                r = n[0] - e,
                o = n[1] - i;
              t.beginPath(), t.moveTo(r, o), this.closePath || (s -= 2);
              for (var a = 2; a < s; a += 2) {
                var h = n[a] - e,
                  l = n[a + 1] - i;
                t.lineTo(h, l);
              }
              this.closePath && t.closePath(),
                this.isFilled && ($t(t, this), t.fill()),
                this.isStroked && (Qt(t, this), t.stroke());
            },
          },
        ]),
        i
      );
    })(Cu),
    Pu = Phaser.Math.DegToRad,
    Tu = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l, u) {
        var c;
        return (
          r(this, i),
          void 0 === t && (t = 0),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 0),
          void 0 === a && (a = 0),
          void 0 === h && (h = 360),
          void 0 === l && (l = !1),
          void 0 === u && (u = !1),
          (c = e.call(this)).setCenterPosition(t, n),
          c.setRadius(s, o),
          c.setAngle(a, h, l),
          c.setPie(u),
          c.setIterations(32),
          c
        );
      }
      return (
        a(i, [
          {
            key: 'x',
            get: function () {
              return this._x;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._x !== t), (this._x = t);
            },
          },
          {
            key: 'y',
            get: function () {
              return this._y;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._y !== t), (this._y = t);
            },
          },
          {
            key: 'setCenterPosition',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.x = t), (this.y = e), this;
            },
          },
          {
            key: 'radiusX',
            get: function () {
              return this._radiusX;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._radiusX !== t), (this._radiusX = t);
            },
          },
          {
            key: 'radiusY',
            get: function () {
              return this._radiusY;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._radiusY !== t), (this._radiusY = t);
            },
          },
          {
            key: 'setRadius',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.radiusX = t), (this.radiusY = e), this;
            },
          },
          {
            key: 'startAngle',
            get: function () {
              return this._startAngle;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._startAngle !== t), (this._startAngle = t);
            },
          },
          {
            key: 'endAngle',
            get: function () {
              return this._endAngle;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._endAngle !== t), (this._endAngle = t);
            },
          },
          {
            key: 'anticlockwise',
            get: function () {
              return this._anticlockwise;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._anticlockwise !== t), (this._anticlockwise = t);
            },
          },
          {
            key: 'setAngle',
            value: function (t, e, i) {
              return (
                void 0 === i && (i = !1), (this.startAngle = t), (this.endAngle = e), (this.anticlockwise = i), this
              );
            },
          },
          {
            key: 'pie',
            get: function () {
              return this._pie;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._pie !== t), (this._pie = t);
            },
          },
          {
            key: 'setPie',
            value: function (t) {
              return void 0 === t && (t = !0), (this.pie = t), this;
            },
          },
          {
            key: 'iterations',
            get: function () {
              return this._iterations;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._iterations !== t), (this._iterations = t);
            },
          },
          {
            key: 'setIterations',
            value: function (t) {
              return (this.iterations = t), this;
            },
          },
          {
            key: 'updateData',
            value: function () {
              return (
                (this.pathData.length = 0),
                this.pie && this.pathData.push(this.x, this.y),
                Ut(
                  this.x,
                  this.y,
                  this.radiusX,
                  this.radiusY,
                  this.startAngle,
                  this.endAngle,
                  this.anticlockwise,
                  this.iterations,
                  this.pathData
                ),
                this.pie && this.pathData.push(this.x, this.y),
                this.pathData.push(this.pathData[0], this.pathData[1]),
                g(u(i.prototype), 'updateData', this).call(this),
                this
              );
            },
          },
          {
            key: 'canvasRender',
            value: function (t, e, i) {
              t.beginPath();
              var n = this.x - e,
                s = this.y - i,
                r = Pu(this.startAngle),
                o = Pu(this.endAngle);
              this.pie && (t.moveTo(n, s), t.lineTo(n + Math.cos(r) * this.radiusX, s + Math.sin(r) * this.radiusY)),
                t.ellipse(n, s, this.radiusX, this.radiusY, 0, r, o, this.anticlockwise),
                this.pie && t.lineTo(n, s),
                this.isFilled && ($t(t, this), t.fill()),
                this.isStroked && (Qt(t, this), t.stroke());
            },
          },
        ]),
        i
      );
    })(Su),
    Ou = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        return r(this, i), e.call(this, t, n, s, s, 0, 360);
      }
      return a(i);
    })(Tu),
    Mu = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t) {
        var n;
        return r(this, i), (n = e.call(this)).setCurve(t), n.setIterations(32), n;
      }
      return (
        a(i, [
          {
            key: 'curve',
            get: function () {
              return this._curve;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._curve !== t), (this._curve = t);
            },
          },
          {
            key: 'setCurve',
            value: function (t) {
              return (this.curve = t), this;
            },
          },
          {
            key: 'iterations',
            get: function () {
              return this._iterations;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._iterations !== t), (this._iterations = t);
            },
          },
          {
            key: 'setIterations',
            value: function (t) {
              return (this.iterations = t), this;
            },
          },
          {
            key: 'updateData',
            value: function () {
              this.pathData.length = 0;
              for (var t = this.curve.getPoints(this.iterations), e = 0, n = t.length; e < n; e++)
                this.pathData.push(t[e].x, t[e].y);
              return this.pathData.push(t[0].x, t[0].y), g(u(i.prototype), 'updateData', this).call(this), this;
            },
          },
        ]),
        i
      );
    })(Su),
    Eu = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o) {
        return r(this, i), e.call(this, t, n, s, o, 0, 360);
      }
      return a(i);
    })(Tu),
    _u = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o) {
        var a;
        return (
          r(this, i),
          void 0 === t && (t = 0),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 0),
          (a = e.call(this)).setP0(t, n),
          a.setP1(s, o),
          a
        );
      }
      return (
        a(i, [
          {
            key: 'x0',
            get: function () {
              return this._x0;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._x0 !== t), (this._x0 = t);
            },
          },
          {
            key: 'y0',
            get: function () {
              return this._y0;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._y0 !== t), (this._y0 = t);
            },
          },
          {
            key: 'setP0',
            value: function (t, e) {
              return (this.x0 = t), (this.y0 = e), this;
            },
          },
          {
            key: 'x1',
            get: function () {
              return this._x1;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._x1 !== t), (this._x1 = t);
            },
          },
          {
            key: 'y1',
            get: function () {
              return this._y1;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._y1 !== t), (this._y1 = t);
            },
          },
          {
            key: 'setP1',
            value: function (t, e) {
              return (this.x1 = t), (this.y1 = e), this;
            },
          },
          {
            key: 'updateData',
            value: function () {
              return (
                (this.pathData.length = 0),
                this.pathData.push(this.x0, this.y0),
                this.pathData.push(this.x1, this.y1),
                this.pathData.push(this.x0, this.y0),
                g(u(i.prototype), 'updateData', this).call(this),
                this
              );
            },
          },
        ]),
        i
      );
    })(Su),
    Ru = Phaser.Math.Interpolation.QuadraticBezier,
    Lu = Phaser.Math.Interpolation.CubicBezier,
    Bu = function (t) {
      var e = t.length;
      if (e < 2) return t;
      var i = t[e - 2],
        n = t[e - 1];
      return t.push(i), t.push(n), t;
    },
    Du = {
      clear: function () {
        return this.start(), this;
      },
      start: function () {
        return this.startAt(), this;
      },
      startAt: function (t, e) {
        return (
          this.restorePathData(),
          (this.accumulationLengths = void 0),
          (function (t, e, i) {
            (i.length = 0), null != t && i.push(t, e);
          })(t, e, this.pathData),
          (this.firstPointX = t),
          (this.firstPointY = e),
          (this.lastPointX = t),
          (this.lastPointY = e),
          this
        );
      },
      lineTo: function (t, e, i) {
        return (
          void 0 === i && (i = !1),
          i && ((t += this.lastPointX), (e += this.lastPointY)),
          Gt(t, e, this.pathData),
          (this.lastPointX = t),
          (this.lastPointY = e),
          this
        );
      },
      verticalLineTo: function (t, e) {
        return this.lineTo(t, this.lastPointY, e), this;
      },
      horizontalLineTo: function (t, e) {
        return this.lineTo(this.lastPointX, t, e), this;
      },
      ellipticalArc: function (t, e, i, n, s, r, o) {
        return (
          void 0 === o && (o = !1),
          Ut(t, e, i, n, s, r, o, this.iterations, this.pathData),
          (this.lastPointX = this.pathData[this.pathData.length - 2]),
          (this.lastPointY = this.pathData[this.pathData.length - 1]),
          this
        );
      },
      arc: function (t, e, i, n, s, r) {
        return this.ellipticalArc(t, e, i, i, n, s, r), this;
      },
      quadraticBezierTo: function (t, e, i, n) {
        return (
          (function (t, e, i, n, s, r) {
            for (var o = r.length, a = r[o - 2], h = r[o - 1], l = 1, u = s - 1; l <= u; l++) {
              var c = l / u;
              r.push(Ru(c, a, t, i), Ru(c, h, e, n));
            }
          })(t, e, i, n, this.iterations, this.pathData),
          (this.lastPointX = i),
          (this.lastPointY = n),
          (this.lastCX = t),
          (this.lastCY = e),
          this
        );
      },
      smoothQuadraticBezierTo: function (t, e) {
        var i = 2 * this.lastPointX - this.lastCX,
          n = 2 * this.lastPointY - this.lastCY;
        return this.quadraticBezierTo(i, n, t, e), this;
      },
      cubicBezierCurveTo: function (t, e, i, n, s, r) {
        return (
          (function (t, e, i, n, s, r, o, a) {
            for (var h = a.length, l = a[h - 2], u = a[h - 1], c = 1, d = o - 1; c <= d; c++) {
              var f = c / d;
              a.push(Lu(f, l, t, i, s), Lu(f, u, e, n, r));
            }
          })(t, e, i, n, s, r, this.iterations, this.pathData),
          (this.lastPointX = s),
          (this.lastPointY = r),
          (this.lastCX = i),
          (this.lastCY = n),
          this
        );
      },
      smoothCubicBezierCurveTo: function (t, e, i, n) {
        var s = 2 * this.lastPointX - this.lastCX,
          r = 2 * this.lastPointY - this.lastCY;
        return this.cubicBezierCurveTo(s, r, t, e, i, n), this;
      },
      close: function () {
        var t = this.pathData[0],
          e = this.pathData[1];
        return (t === this.lastPointX && e === this.lastPointY) || this.lineTo(t, e), (this.closePath = !0), this;
      },
      end: function () {
        return Bu(this.pathData), this;
      },
    },
    Iu = Phaser.Math.RotateAround,
    ju = function (t, e, i) {
      for (var n = 0, s = i.length - 1; n < s; n += 2) (i[n] += t), (i[n + 1] += e);
      return i;
    },
    Au = Phaser.Math.DegToRad,
    zu = Phaser.Math.RotateAround,
    Fu = {
      rotateAround: function (t, e, i) {
        if (0 === this.pathData.length) return this;
        !(function (t, e, i, n) {
          for (var s = { x: 0, y: 0 }, r = 0, o = n.length - 1; r < o; r += 2)
            (s.x = n[r]), (s.y = n[r + 1]), Iu(s, t, e, i), (n[r] = s.x), (n[r + 1] = s.y);
        })(t, e, (i = Au(i)), this.pathData);
        var n = this.pathData.length;
        if (
          ((this.lastPointX = this.pathData[n - 2]), (this.lastPointY = this.pathData[n - 1]), void 0 !== this.lastCX)
        ) {
          var s = { x: this.lastCX, y: this.lastCY };
          zu(s, t, e, i), (this.lastCX = s.x), (this.lastCY = s.y);
        }
        return this;
      },
      scale: function (t, e, i, n) {
        if (0 === this.pathData.length) return this;
        if (
          ((function (t, e, i, n, s) {
            for (var r = 0, o = s.length - 1; r < o; r += 2) {
              var a = s[r] - t,
                h = s[r + 1] - e;
              (a *= i), (h *= n), (s[r] = a + t), (s[r + 1] = h + e);
            }
          })(t, e, i, n, this.pathData),
          (this.lastPointX = this.pathData[pathDataCnt - 2]),
          (this.lastPointY = this.pathData[pathDataCnt - 1]),
          void 0 !== this.lastCX)
        ) {
          var s = this.lastCX - t,
            r = this.lastCY - e;
          (s *= i), (r *= n), (this.lastCX = s + t), (this.lastCY = r + e);
        }
        return this;
      },
      offset: function (t, e) {
        return ju(t, e, this.pathData), this;
      },
    },
    Vu = function (t, e, i, n) {
      void 0 === i && (i = 0), void 0 === n && (n = e.length), (t.length = n - i);
      for (var s = 0, r = t.length; s < r; s++) t[s] = e[s + i];
      return t;
    },
    Wu = {
      savePathData: function () {
        return (
          this.pathDataSaved ||
            ((this.pathDataSave = x(this.pathData)), (this.pathData.length = 0), (this.pathDataSaved = !0)),
          this
        );
      },
      restorePathData: function () {
        return this.pathDataSaved
          ? (Vu(this.pathData, this.pathDataSave), (this.pathDataSave = void 0), (this.pathDataSaved = !1), this)
          : this;
      },
    },
    Yu = Phaser.Math.Distance.Between,
    Xu = Phaser.Math.Wrap,
    Gu = Phaser.Math.Linear,
    Hu = function (t, e, i, n, s) {
      if ((void 0 === n && ((n = i), (i = 0)), (i = Ku(i)) !== (n = Ku(n)))) {
        var r = e[e.length - 1],
          o = r * i,
          a = r * n;
        i < n ? Uu(t, e, o, a, s) : (Uu(t, e, o, r, s), Uu(t, e, 0, a, s)), Bu(s);
      }
    },
    Uu = function (t, e, i, n, s) {
      for (var r = i > 0, o = 0, a = e.length; o < a; o++) {
        var h = 2 * o,
          l = e[o];
        if (r) {
          if (l < i) continue;
          if (l == i) r = !1;
          else {
            var u = 1 - (l - i) / (l - e[o - 1]);
            s.push(Nu(t, h - 2, h, u)), s.push(Nu(t, h - 1, h + 1, u)), (r = !1);
          }
        }
        if (!(l <= n)) {
          u = 1 - (l - n) / (l - e[o - 1]);
          s.push(Nu(t, h - 2, h, u)), s.push(Nu(t, h - 1, h + 1, u));
          break;
        }
        if ((s.push(t[h]), s.push(t[h + 1]), l === n)) break;
      }
    },
    Nu = function (t, e, i, n) {
      var s = t[e],
        r = t[i];
      return Gu(s, r, n);
    },
    Ku = function (t) {
      return 0 === t ? 0 : t % 1 == 0 ? 1 : Xu(t, 0, 1);
    },
    Ju = {
      updateAccumulationLengths: function () {
        if (null == this.accumulationLengths) this.accumulationLengths = [];
        else if (this.accumulationLengths.length === this.pathData.length / 2) return this;
        for (var t, e, i, n, s = this.accumulationLengths, r = this.pathData, o = 0, a = 0, h = r.length; a < h; a += 2)
          (i = r[a]), (n = r[a + 1]), (o += void 0 === t ? 0 : Yu(t, e, i, n)), s.push(o), (t = i), (e = n);
        return (this.totalPathLength = o), this;
      },
      setDisplayPathSegment: function (t, e) {
        return (
          this.pathDataSaved || (this.updateAccumulationLengths(), this.savePathData()),
          (this.pathData.length = 0),
          Hu(this.pathDataSave, this.accumulationLengths, t, e, this.pathData),
          this
        );
      },
      appendFromPathSegment: function (t, e, i) {
        var n;
        void 0 === e
          ? (n = this.pathData).push.apply(n, x(t.pathData))
          : (t.updateAccumulationLengths(), Hu(t.pathData, t.accumulationLengths, e, i, this.pathData));
        return (
          (this.firstPointX = this.pathData[0]),
          (this.firstPointY = this.pathData[1]),
          (this.lastPointX = this.pathData[this.pathData.length - 2]),
          (this.lastPointY = this.pathData[this.pathData.length - 1]),
          this
        );
      },
    },
    qu = Phaser.Geom.Polygon,
    Zu = (function () {
      function t(e) {
        r(this, t),
          void 0 === e && (e = []),
          (this.pathData = e),
          (this.closePath = !1),
          this.setIterations(32),
          (this.firstPointX = void 0),
          (this.firstPointY = void 0),
          (this.lastPointX = void 0),
          (this.lastPointY = void 0),
          (this.accumulationLengths = void 0);
      }
      return (
        a(t, [
          {
            key: 'setIterations',
            value: function (t) {
              return (this.iterations = t), this;
            },
          },
          {
            key: 'toPoints',
            value: function () {
              return (function (t, e) {
                void 0 === e && (e = []);
                for (var i = 0, n = t.length - 1; i < n; i += 2) e.push({ x: t[i], y: t[i + 1] });
                return e;
              })(this.pathData);
            },
          },
          {
            key: 'toPolygon',
            value: function (t) {
              return (function (t, e) {
                return void 0 === e && (e = new qu()), e.setTo(t), e;
              })(this.pathData, t);
            },
          },
        ]),
        t
      );
    })();
  Object.assign(Zu.prototype, Du, Fu, Wu, Ju, {
    draw: function (t, e, i) {
      var n = this.toPoints();
      return (
        e && t.fillPoints(n, this.closePath, this.closePath),
        i && t.strokePoints(n, this.closePath, this.closePath),
        this
      );
    },
  });
  var $u = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        var t;
        return r(this, i), ((t = e.call(this)).builder = new Zu(t.pathData)), t;
      }
      return (
        a(i, [
          {
            key: 'iterations',
            get: function () {
              return this.builder.iterations;
            },
            set: function (t) {
              (this.dirty = this.dirty || this.builder.iterations !== t), this.builder.setIterations(t);
            },
          },
          {
            key: 'setIterations',
            value: function (t) {
              return (this.iterations = t), this;
            },
          },
          {
            key: 'lastPointX',
            get: function () {
              return this.builder.lastPointX;
            },
          },
          {
            key: 'lastPointY',
            get: function () {
              return this.builder.lastPointY;
            },
          },
          {
            key: 'start',
            value: function () {
              return this.builder.start(), (this.dirty = !0), this;
            },
          },
          {
            key: 'startAt',
            value: function (t, e) {
              return this.builder.startAt(t, e), (this.dirty = !0), this;
            },
          },
          {
            key: 'lineTo',
            value: function (t, e, i) {
              return this.builder.lineTo(t, e, i), (this.dirty = !0), this;
            },
          },
          {
            key: 'verticalLineTo',
            value: function (t, e) {
              return this.builder.verticalLineTo(t, e), (this.dirty = !0), this;
            },
          },
          {
            key: 'horizontalLineTo',
            value: function (t, e) {
              return this.builder.horizontalLineTo(t, e), (this.dirty = !0), this;
            },
          },
          {
            key: 'ellipticalArc',
            value: function (t, e, i, n, s, r, o) {
              return this.builder.ellipticalArc(t, e, i, n, s, r, o), (this.dirty = !0), this;
            },
          },
          {
            key: 'arc',
            value: function (t, e, i, n, s, r) {
              return this.builder.arc(t, e, i, n, s, r), (this.dirty = !0), this;
            },
          },
          {
            key: 'quadraticBezierTo',
            value: function (t, e, i, n) {
              return this.builder.quadraticBezierTo(t, e, i, n), (this.dirty = !0), this;
            },
          },
          {
            key: 'smoothQuadraticBezierTo',
            value: function (t, e) {
              return this.builder.smoothQuadraticBezierTo(t, e), (this.dirty = !0), this;
            },
          },
          {
            key: 'cubicBezierCurveTo',
            value: function (t, e, i, n, s, r) {
              return this.builder.cubicBezierCurveTo(t, e, i, n, s, r), (this.dirty = !0), this;
            },
          },
          {
            key: 'smoothCubicBezierCurveTo',
            value: function (t, e, i, n) {
              return this.builder.smoothCubicBezierCurveTo(t, e, i, n), (this.dirty = !0), this;
            },
          },
          {
            key: 'close',
            value: function () {
              return this.builder.close(), (this.closePath = this.builder.closePath), (this.dirty = !0), this;
            },
          },
          {
            key: 'end',
            value: function () {
              return this.builder.end(), (this.dirty = !0), this;
            },
          },
          {
            key: 'rotateAround',
            value: function (t, e, i) {
              return this.builder.rotateAround(t, e, i), (this.dirty = !0), this;
            },
          },
          {
            key: 'scale',
            value: function (t, e, i, n) {
              return this.builder.scale(t, e, i, n), (this.dirty = !0), this;
            },
          },
          {
            key: 'offset',
            value: function (t, e) {
              return this.builder.offset(t, e), (this.dirty = !0), this;
            },
          },
          {
            key: 'toPolygon',
            value: function (t) {
              return this.builder.toPolygon(t);
            },
          },
          {
            key: 'appendPathFrom',
            value: function (t, e, i) {
              return this.builder.appendFromPathSegment(t.builder, e, i), this;
            },
          },
          {
            key: 'copyPathFrom',
            value: function (t, e, i) {
              return this.builder.clear().appendFromPathSegment(t.builder, e, i), this;
            },
          },
          {
            key: 'setDisplayPathSegment',
            value: function (t, e) {
              return this.builder.setDisplayPathSegment(t, e), this;
            },
          },
        ]),
        i
      );
    })(Su),
    Qu = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha,
    tc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o) {
        var a;
        return (
          r(this, i),
          void 0 === t && (t = 0),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = s),
          ((a = e.call(this)).pathData = []),
          (a.closePath = !0),
          a.setTopLeftPosition(t, n),
          a.setSize(s, o),
          a
        );
      }
      return (
        a(i, [
          {
            key: 'x',
            get: function () {
              return this._x;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._x !== t), (this._x = t);
            },
          },
          {
            key: 'y',
            get: function () {
              return this._y;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._y !== t), (this._y = t);
            },
          },
          {
            key: 'setTopLeftPosition',
            value: function (t, e) {
              return (this.x = t), (this.y = e), this;
            },
          },
          {
            key: 'width',
            get: function () {
              return this._width;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._width !== t), (this._width = t);
            },
          },
          {
            key: 'height',
            get: function () {
              return this._height;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._height !== t), (this._height = t);
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              return (this.width = t), (this.height = e), this;
            },
          },
          {
            key: 'centerX',
            get: function () {
              return this.x + this.width / 2;
            },
            set: function (t) {
              this.x = t - this.width / 2;
            },
          },
          {
            key: 'centerY',
            get: function () {
              return this.y + this.height / 2;
            },
            set: function (t) {
              this.y = t - this.height / 2;
            },
          },
          {
            key: 'setCenterPosition',
            value: function (t, e) {
              return (this.centerX = t), (this.centerY = e), this;
            },
          },
          {
            key: 'updateData',
            value: function () {
              this.pathData.length = 0;
              var t = this.x,
                e = t + this.width,
                n = this.y,
                s = n + this.height;
              return (
                this.pathData.push(t, n),
                this.pathData.push(e, n),
                this.pathData.push(e, s),
                this.pathData.push(t, s),
                this.pathData.push(t, n),
                g(u(i.prototype), 'updateData', this).call(this),
                this
              );
            },
          },
          {
            key: 'webglRender',
            value: function (t, e, i, n, s) {
              if (this.isFilled) {
                var r = t.fillTint,
                  o = Qu(this.fillColor, this.fillAlpha * i);
                (r.TL = o),
                  (r.TR = o),
                  (r.BL = o),
                  (r.BR = o),
                  t.batchFillRect(-n + this.x, -s + this.y, this.width, this.height);
              }
              this.isStroked && qt(t, this, i, n, s);
            },
          },
          {
            key: 'canvasRender',
            value: function (t, e, i) {
              this.isFilled && ($t(t, this), t.fillRect(-e, -i, this.width, this.height)),
                this.isStroked && (Qt(t, this), t.beginPath(), t.rect(-e, -i, this.width, this.height), t.stroke());
            },
          },
        ]),
        i
      );
    })(Cu),
    ec = Phaser.Utils.Objects.GetValue,
    ic = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          void 0 === t && (t = 0),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = s),
          void 0 === a && (a = 0),
          void 0 === h && (h = 6),
          (l = e.call(this)).setTopLeftPosition(t, n),
          l.setSize(s, o),
          l.setRadius(a),
          l.setIterations(h),
          (l.closePath = !0),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'x',
            get: function () {
              return this._x;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._x !== t), (this._x = t);
            },
          },
          {
            key: 'y',
            get: function () {
              return this._y;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._y !== t), (this._y = t);
            },
          },
          {
            key: 'setTopLeftPosition',
            value: function (t, e) {
              return (this.x = t), (this.y = e), this;
            },
          },
          {
            key: 'width',
            get: function () {
              return this._width;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._width !== t), (this._width = t);
            },
          },
          {
            key: 'height',
            get: function () {
              return this._height;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._height !== t), (this._height = t);
            },
          },
          {
            key: 'setSize',
            value: function (t, e) {
              return (this.width = t), (this.height = e), this;
            },
          },
          {
            key: 'centerX',
            get: function () {
              return this.x + this.width / 2;
            },
            set: function (t) {
              this.x = t - this.width / 2;
            },
          },
          {
            key: 'centerY',
            get: function () {
              return this.y + this.height / 2;
            },
            set: function (t) {
              this.y = t - this.height / 2;
            },
          },
          {
            key: 'setCenterPosition',
            value: function (t, e) {
              return (this.centerX = t), (this.centerY = e), this;
            },
          },
          {
            key: 'radiusTL',
            get: function () {
              return this._radiusTL;
            },
            set: function (t) {
              var e = t > 0;
              (this.dirty = this.dirty || this._radiusTL !== t || this._convexTL !== e),
                (this._convexTL = e),
                (this._radiusTL = Math.abs(t));
            },
          },
          {
            key: 'radiusTR',
            get: function () {
              return this._radiusTR;
            },
            set: function (t) {
              var e = t > 0;
              (this.dirty = this.dirty || this._radiusTR !== t || this._convexTR !== e),
                (this._convexTR = e),
                (this._radiusTR = Math.abs(t));
            },
          },
          {
            key: 'radiusBL',
            get: function () {
              return this._radiusBL;
            },
            set: function (t) {
              var e = t > 0;
              (this.dirty = this.dirty || this._radiusBL !== t || this._convexBL !== e),
                (this._convexBL = e),
                (this._radiusBL = Math.abs(t));
            },
          },
          {
            key: 'radiusBR',
            get: function () {
              return this._radiusBR;
            },
            set: function (t) {
              var e = t > 0;
              (this.dirty = this.dirty || this._radiusBR !== t || this._convexBR !== e),
                (this._convexBR = e),
                (this._radiusBR = Math.abs(t));
            },
          },
          {
            key: 'radius',
            get: function () {
              return Math.max(this.radiusTL, this.radiusTR, this.radiusBL, this.radiusBR);
            },
            set: function (t) {
              'number' == typeof t
                ? ((this.radiusTL = t), (this.radiusTR = t), (this.radiusBL = t), (this.radiusBR = t))
                : ((this.radiusTL = ec(t, 'tl', 0)),
                  (this.radiusTR = ec(t, 'tr', 0)),
                  (this.radiusBL = ec(t, 'bl', 0)),
                  (this.radiusBR = ec(t, 'br', 0)));
            },
          },
          {
            key: 'setRadius',
            value: function (t) {
              return void 0 === t && (t = 0), (this.radius = t), this;
            },
          },
          {
            key: 'iterations',
            get: function () {
              return this._iterations;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._iterations !== t), (this._iterations = t);
            },
          },
          {
            key: 'setIterations',
            value: function (t) {
              return (this.iterations = t), this;
            },
          },
          {
            key: 'updateData',
            value: function () {
              var t = this.pathData;
              t.length = 0;
              var e,
                n = this.width,
                s = this.height,
                r = this.iterations + 1;
              (e = this.radiusTL) > 0
                ? this._convexTL
                  ? Ut(e, e, e, e, 180, 270, !1, r, t)
                  : Ut(0, 0, e, e, 90, 0, !0, r, t)
                : Gt(0, 0, t);
              (e = this.radiusTR) > 0
                ? this._convexTR
                  ? Ut(n - e, e, e, e, 270, 360, !1, r, t)
                  : Ut(n, 0, e, e, 180, 90, !0, r, t)
                : Gt(n, 0, t);
              (e = this.radiusBR) > 0
                ? this._convexBR
                  ? Ut(n - e, s - e, e, e, 0, 90, !1, r, t)
                  : Ut(n, s, e, e, 270, 180, !0, r, t)
                : Gt(n, s, t);
              (e = this.radiusBL) > 0
                ? this._convexBL
                  ? Ut(e, s - e, e, e, 90, 180, !1, r, t)
                  : Ut(0, s, e, e, 360, 270, !0, r, t)
                : Gt(0, s, t);
              return t.push(t[0], t[1]), ju(this.x, this.y, t), g(u(i.prototype), 'updateData', this).call(this), this;
            },
          },
        ]),
        i
      );
    })(Su),
    nc = Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha,
    sc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          void 0 === t && (t = 0),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 0),
          void 0 === a && (a = 0),
          void 0 === h && (h = 0),
          ((l = e.call(this)).pathData = []),
          (l.closePath = !0),
          l.setP0(t, n),
          l.setP1(s, o),
          l.setP2(a, h),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'x0',
            get: function () {
              return this._x0;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._x0 !== t), (this._x0 = t);
            },
          },
          {
            key: 'y0',
            get: function () {
              return this._y0;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._y0 !== t), (this._y0 = t);
            },
          },
          {
            key: 'setP0',
            value: function (t, e) {
              return (this.x0 = t), (this.y0 = e), this;
            },
          },
          {
            key: 'x1',
            get: function () {
              return this._x1;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._x1 !== t), (this._x1 = t);
            },
          },
          {
            key: 'y1',
            get: function () {
              return this._y1;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._y1 !== t), (this._y1 = t);
            },
          },
          {
            key: 'setP1',
            value: function (t, e) {
              return (this.x1 = t), (this.y1 = e), this;
            },
          },
          {
            key: 'x2',
            get: function () {
              return this._x2;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._x2 !== t), (this._x2 = t);
            },
          },
          {
            key: 'y2',
            get: function () {
              return this._y2;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._y2 !== t), (this._y2 = t);
            },
          },
          {
            key: 'setP2',
            value: function (t, e) {
              return (this.dirty = this.dirty || this.x2 !== t || this.y2 !== e), (this.x2 = t), (this.y2 = e), this;
            },
          },
          {
            key: 'updateData',
            value: function () {
              return (
                (this.pathData.length = 0),
                this.pathData.push(this.x0, this.y0),
                this.pathData.push(this.x1, this.y1),
                this.pathData.push(this.x2, this.y2),
                this.pathData.push(this.x0, this.y0),
                g(u(i.prototype), 'updateData', this).call(this),
                this
              );
            },
          },
          {
            key: 'webglRender',
            value: function (t, e, i, n, s) {
              if (this.isFilled) {
                var r = nc(this.fillColor, this.fillAlpha * i),
                  o = this.x0 - n,
                  a = this.y0 - s,
                  h = this.x1 - n,
                  l = this.y1 - s,
                  u = this.x2 - n,
                  c = this.y2 - s,
                  d = e.getX(o, a),
                  f = e.getY(o, a),
                  p = e.getX(h, l),
                  v = e.getY(h, l),
                  g = e.getX(u, c),
                  y = e.getY(u, c);
                t.batchTri(d, f, p, v, g, y, r, r, r);
              }
              this.isStroked && qt(t, this, i, n, s);
            },
          },
          {
            key: 'canvasRender',
            value: function (t, e, i) {
              var n = this.x1 - e,
                s = this.y1 - i,
                r = this.x2 - e,
                o = this.y2 - i,
                a = this.x3 - e,
                h = this.y3 - i;
              t.beginPath(),
                t.moveTo(n, s),
                t.lineTo(r, o),
                t.lineTo(a, h),
                t.closePath(),
                this.isFilled && ($t(t, this), t.fill()),
                this.isStroked && (Qt(t, this), t.stroke());
            },
          },
        ]),
        i
      );
    })(Cu),
    rc = {
      buildShapes: function () {
        this.addShape(new ic().setName('box')).addShape(new $u().setName('checker'));
      },
      updateShapes: function () {
        var t = this.width / 2,
          e = this.height / 2,
          i = Math.min(t, e),
          n = 2 * i,
          s = t - i,
          r = e - i,
          o = this.boxLineWidth,
          a = Math.max(n / 10, 2),
          h = this.getShape('box'),
          l = this.getShape('checker');
        if (this.isSizeChanged) {
          var u = (n * (1 - this.boxSize)) / 2,
            c = o / 2,
            d = n * this.boxSize - o;
          h.setTopLeftPosition(s + c + u, r + c + u).setSize(d, d),
            this.isCircleShape ? h.setRadius(d / 2) : h.setRadius(0);
          u = (n * (1 - this.checkerSize)) / 2;
          var f = (n * this.checkerSize) / 4,
            p = 1 * f,
            v = 2 * f,
            g = 3 * f;
          l.startAt(p, v)
            .lineTo(v, g)
            .lineTo(g, p)
            .offset(s + u, r + u)
            .end();
        }
        this.checked
          ? (h.fillStyle(this.boxFillColor, this.boxFillAlpha).lineStyle(o, this.boxStrokeColor, this.boxStrokeAlpha),
            l.lineStyle(a, this.checkerColor))
          : (h
              .fillStyle(this.uncheckedBoxFillColor, this.uncheckedBoxFillAlpha)
              .lineStyle(o, this.uncheckedBoxStrokeColor, this.uncheckedBoxStrokeAlpha),
            l.lineStyle()),
          this.checked && l.setDisplayPathSegment(this.checkerAnimProgress);
      },
    },
    oc = Phaser.Utils.Objects.GetValue,
    ac = Phaser.Math.Linear,
    hc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, n)).resetFromJSON(), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'start',
            value: function (t) {
              if (this.timer.isRunning) return this;
              var e = this.target;
              this.propertyKey = oc(t, 'key', 'value');
              var n = e[this.propertyKey];
              return (
                (this.fromValue = oc(t, 'from', n)),
                (this.toValue = oc(t, 'to', n)),
                this.setEase(oc(t, 'ease', this.ease)),
                this.setDuration(oc(t, 'duration', this.duration)),
                this.setRepeat(oc(t, 'repeat', 0)),
                this.setDelay(oc(t, 'delay', 0)),
                this.setRepeatDelay(oc(t, 'repeatDelay', 0)),
                this.timer
                  .setDuration(this.duration)
                  .setRepeat(this.repeat)
                  .setDelay(this.delay)
                  .setRepeatDelay(this.repeatDelay),
                (e[this.propertyKey] = this.fromValue),
                g(u(i.prototype), 'start', this).call(this),
                this
              );
            },
          },
          {
            key: 'updateGameObject',
            value: function (t, e) {
              var i = e.t;
              (i = this.easeFn(i)), (t[this.propertyKey] = ac(this.fromValue, this.toValue, i));
            },
          },
        ]),
        i
      );
    })(_o),
    lc = {
      setCheckerAnimationDuration: function (t) {
        return void 0 === t && (t = 0), (this.checkerAnimDuration = t), this;
      },
      playCheckerAnimation: function () {
        return (
          void 0 === this.checkerAnimProgressTask &&
            (this.checkerAnimProgressTask = new hc(this, { eventEmitter: null })),
          this.checkerAnimProgressTask.restart({
            key: 'checkerAnimProgress',
            from: 0,
            to: 1,
            duration: this.checkerAnimDuration,
          }),
          this
        );
      },
      stopCheckerAnimation: function () {
        return void 0 === this.checkerAnimProgressTask || this.checkerAnimProgressTask.stop(), this;
      },
    },
    uc = {};
  Object.assign(
    uc,
    bu,
    {
      setBoxSize: function (t) {
        return (this.dirty = this.dirty || this.boxSize !== t), (this.boxSize = t), this;
      },
      setCheckerSize: function (t) {
        return (this.dirty = this.dirty || this.checkerSize !== t), (this.checkerSize = t), this;
      },
    },
    rc,
    lc
  );
  var cc = Phaser.Utils.Objects.GetValue,
    dc = Phaser.Utils.Objects.IsPlainObject,
    fc = 23730,
    pc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u;
        r(this, i),
          dc(n)
            ? ((n = cc((l = n), 'x', 0)),
              (s = cc(l, 'y', 0)),
              (o = cc(l, 'width', 2)),
              (a = cc(l, 'height', 2)),
              (h = cc(l, 'color', fc)))
            : dc(h) && (h = cc((l = h), 'color', fc)),
          ((u = e.call(this, t, n, s, o, a)).type = 'rexCheckbox'),
          void 0 === h && (h = fc),
          u.setBoxShape(cc(l, 'circleBox', !1)),
          u.setBoxFillStyle(h, cc(l, 'boxFillAlpha', 1)),
          u.setUncheckedBoxFillStyle(cc(l, 'uncheckedColor', null), cc(l, 'uncheckedBoxFillAlpha', 1)),
          u.setBoxStrokeStyle(cc(l, 'boxLineWidth', 4), cc(l, 'boxStrokeColor', h), cc(l, 'boxStrokeAlpha', 1)),
          u.setUncheckedBoxStrokeStyle(
            u.boxLineWidth,
            cc(l, 'uncheckedBoxStrokeColor', u.boxStrokeColor),
            cc(l, 'uncheckedBoxStrokeAlpha', u.boxStrokeAlpha)
          ),
          u.setCheckerStyle(cc(l, 'checkerColor', 16777215), cc(l, 'checkerAlpha', 1)),
          u.setBoxSize(cc(l, 'boxSize', 1)),
          u.setCheckerSize(cc(l, 'checkerSize', 1)),
          u.setCheckerAnimationDuration(cc(l, 'animationDuration', 150)),
          u.buildShapes();
        var c = cc(l, 'checked');
        return void 0 === c && (c = cc(l, 'value', !1)), u.setValue(c), u;
      }
      return (
        a(i, [
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              (t = !!t),
                this._value !== t &&
                  ((this.dirty = !0),
                  (this._value = t),
                  t ? this.playCheckerAnimation() : this.stopCheckerAnimation(),
                  this.emit('valuechange', t));
            },
          },
          {
            key: 'setValue',
            value: function (t) {
              return (this.value = t), this;
            },
          },
          {
            key: 'toggleValue',
            value: function () {
              return this.setValue(!this.value), this;
            },
          },
          {
            key: 'checked',
            get: function () {
              return this.value;
            },
            set: function (t) {
              this.value = t;
            },
          },
          {
            key: 'setChecked',
            value: function (t) {
              return void 0 === t && (t = !0), this.setValue(t), this;
            },
          },
          {
            key: 'toggleChecked',
            value: function () {
              return this.toggleValue(), this;
            },
          },
          {
            key: 'checkerAnimProgress',
            get: function () {
              return this._checkerAnimProgress;
            },
            set: function (t) {
              this._checkerAnimProgress !== t && ((this._checkerAnimProgress = t), (this.dirty = !0));
            },
          },
        ]),
        i
      );
    })(mu);
  Object.assign(pc.prototype, uc);
  var vc = Phaser.Utils.Objects.GetValue,
    gc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, n))._enable = void 0),
          t.setInteractive(vc(n, 'inputConfig', void 0)),
          s.resetFromJSON(n),
          s.boot(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                (this.pointer = void 0),
                (this.lastClickTime = void 0),
                this.setEnable(vc(t, 'enable', !0)),
                this.setMode(vc(t, 'mode', 1)),
                this.setClickInterval(vc(t, 'clickInterval', 100)),
                this.setDragThreshold(vc(t, 'threshold', void 0)),
                this
              );
            },
          },
          {
            key: 'boot',
            value: function () {
              var t = this.parent;
              t.on('pointerdown', this.onPress, this),
                t.on('pointerup', this.onRelease, this),
                t.on('pointerout', this.onPointOut, this),
                t.on('pointermove', this.onMove, this),
                t.on('pointerover', this.onOver, this),
                t.on('pointerout', this.onOut, this);
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown || ((this.pointer = null), g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'enable',
            get: function () {
              return this._enable;
            },
            set: function (t) {
              if (this._enable !== t) {
                t || this.cancel(), (this._enable = t);
                var e = t ? 'enable' : 'disable';
                this.emit(e, this, this.parent);
              }
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'setMode',
            value: function (t) {
              return 'string' == typeof t && (t = yc[t]), (this.mode = t), this;
            },
          },
          {
            key: 'setClickInterval',
            value: function (t) {
              return (this.clickInterval = t), this;
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
          {
            key: 'onPress',
            value: function (t, e, i, n) {
              void 0 === this.pointer &&
                ((this.pointer = t),
                this.emit('down', this, this.parent, t, n),
                0 === this.mode && this.click(t.downTime, t, n));
            },
          },
          {
            key: 'onRelease',
            value: function (t, e, i, n) {
              this.pointer === t &&
                (this.emit('up', this, this.parent, t, n),
                1 === this.mode && this.click(t.upTime, t, n),
                (this.pointer = void 0));
            },
          },
          {
            key: 'onPointOut',
            value: function (t, e) {
              this.pointer === t && this.cancel();
            },
          },
          {
            key: 'onMove',
            value: function (t, e, i, n) {
              this.pointer === t &&
                void 0 !== this.dragThreshold &&
                1 === this.mode &&
                t.getDistance() >= this.dragThreshold &&
                this.cancel();
            },
          },
          {
            key: 'click',
            value: function (t, e, i) {
              if (!this.enable) return this;
              if (void 0 === t) return this.emit('click', this, this.parent, e, i), this;
              this.pointer = void 0;
              var n = this.lastClickTime;
              return (
                (void 0 !== n && t - n <= this.clickInterval) ||
                  ((this.lastClickTime = t), this.emit('click', this, this.parent, e, i)),
                this
              );
            },
          },
          {
            key: 'cancel',
            value: function () {
              return (this.pointer = void 0), this;
            },
          },
          {
            key: 'onOver',
            value: function (t, e, i, n) {
              return this.enable ? (this.emit('over', this, this.parent, t, n), this) : this;
            },
          },
          {
            key: 'onOut',
            value: function (t, e) {
              return this.enable ? (this.emit('out', this, this.parent, t, e), this) : this;
            },
          },
        ]),
        i
      );
    })(uo),
    yc = { press: 0, pointerdown: 0, release: 1, pointerup: 1 },
    kc = Phaser.Utils.Objects.GetValue,
    mc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u;
        return (
          r(this, i),
          ((u = e.call(this, t, n, s, o, a, h, l))._click = new gc(d(u), kc(l, 'click'))),
          u._click.on(
            'click',
            function () {
              this.toggleValue();
            },
            d(u)
          ),
          u.setReadOnly(kc(l, 'readOnly', !1)),
          u
        );
      }
      return (
        a(i, [
          {
            key: 'readOnly',
            get: function () {
              return !this._click.enable;
            },
            set: function (t) {
              this._click.enable = !t;
            },
          },
          {
            key: 'setReadOnly',
            value: function (t) {
              return void 0 === t && (t = !0), (this.readOnly = t), this;
            },
          },
        ]),
        i
      );
    })(pc);
  M.register('checkbox', function (t, e, i, n, s, r) {
    var o = new mc(this.scene, t, e, i, n, s, r);
    return this.scene.add.existing(o), o;
  }),
    $(window, 'RexPlugins.UI.Checkbox', mc);
  var bc = {
      setTrackFillStyle: function (t, e) {
        return (
          void 0 === e && (e = 1),
          (this.dirty = this.dirty || this.trackFillColor !== t || this.trackFillAlpha !== e),
          (this.trackFillColor = t),
          (this.trackFillAlpha = e),
          this
        );
      },
      setFalseValueTrackFillStyle: function (t, e) {
        return (
          void 0 === e && (e = 1),
          (this.dirty = this.dirty || this.falseValueTrackColor !== t || this.uncheckedTrackFillAlpha !== e),
          (this.falseValueTrackColor = t),
          (this.falseValueTrackFillAlpha = e),
          this
        );
      },
      setThumbStyle: function (t, e) {
        return (
          void 0 === e && (e = 1),
          (this.dirty = this.dirty || this.thumbColor !== t || this.checkAlpha !== e),
          (this.thumbColor = t),
          (this.thumbAlpha = e),
          this
        );
      },
    },
    xc = {
      setTrackSize: function (t, e) {
        return (
          (this.dirty = this.dirty || this.trackWidth !== t || this.trackHeight !== e),
          (this.trackWidth = t),
          (this.trackHeight = e),
          this
        );
      },
      setTrackRadius: function (t) {
        return (this.dirty = this.dirty || this.trackRadius !== t), (this.trackRadius = t), this;
      },
      setThumbSize: function (t, e) {
        return (
          void 0 === e && (e = t),
          (this.dirty = this.dirty || this.thumbWidth !== t || this.thumbHeight !== e),
          (this.thumbWidth = t),
          (this.thumbHeight = e),
          this
        );
      },
      setThumbRadius: function (t) {
        return (this.dirty = this.dirty || this.thumbRadius !== t), (this.thumbRadius = t), this;
      },
    },
    Cc = {
      setThumbPosition: function (t, e) {
        return void 0 === e && (e = 1 - t), (this.thumbLeftX = t), (this.thumbRightX = e), this;
      },
      setRTL: function (t) {
        return void 0 === t && (t = !0), (this.rtl = t), this;
      },
    },
    wc = function (t, e, i) {
      return (e - t) * i + t;
    },
    Sc = Phaser.Math.Linear,
    Pc = {
      buildShapes: function () {
        this.addShape(new ic().setName('track')).addShape(new ic().setName('thumb'));
      },
      updateShapes: function () {
        var t = this.width,
          e = this.height,
          i = this.value ? this.toggleAnimProgress : 1 - this.toggleAnimProgress,
          n = this.getShape('track');
        if (this.isSizeChanged) {
          var s = t * this.trackWidth,
            r = e * this.trackHeight,
            o = (t - s) / 2,
            a = (e - r) / 2,
            h = e * this.trackRadius;
          n.setTopLeftPosition(o, a).setSize(s, r).setRadius(h);
        }
        var l,
          u,
          c,
          d =
            ((l = this.falseValueTrackColor),
            (u = this.trackFillColor),
            (c = i),
            ((255 & wc(xr(l), xr(u), c)) << 16) | ((255 & wc(Cr(l), Cr(u), c)) << 8) | (255 & wc(wr(l), wr(u), c))),
          f = Sc(this.falseValueTrackFillAlpha, this.trackFillAlpha, i);
        n.fillStyle(d, f);
        var p = this.getShape('thumb');
        if (this.isSizeChanged) {
          var v = t * this.thumbWidth,
            g = e * this.thumbHeight,
            y = e * this.thumbRadius;
          p.setSize(v, g).setRadius(y);
        }
        var k = Sc(this.thumbLeftX, this.thumbRightX, i) * t;
        this.rtl && (k = t - k);
        var m = e / 2;
        p.setCenterPosition(k, m), p.fillStyle(this.thumbColor, this.thumbAlpha);
      },
    },
    Tc = {
      setToggleAnimationDuration: function (t) {
        return void 0 === t && (t = 0), (this.toggleAnimDuration = t), this;
      },
      playToggleAnimation: function () {
        return (
          void 0 === this.toggleAnimProgressTask &&
            (this.toggleAnimProgressTask = new hc(this, { eventEmitter: null })),
          this.toggleAnimProgressTask.restart({
            key: 'toggleAnimProgress',
            from: 0,
            to: 1,
            duration: this.toggleAnimDuration,
          }),
          this
        );
      },
      stopToggleAnimation: function () {
        return void 0 === this.toggleAnimProgressTask || this.toggleAnimProgressTask.stop(), this;
      },
    },
    Oc = {};
  Object.assign(Oc, bc, xc, Cc, Pc, Tc);
  var Mc = Phaser.Utils.Objects.GetValue,
    Ec = Phaser.Utils.Objects.IsPlainObject,
    _c = 23730,
    Rc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u;
        r(this, i),
          Ec(n)
            ? ((n = Mc((l = n), 'x', 0)),
              (s = Mc(l, 'y', 0)),
              (o = Mc(l, 'width', 2)),
              (a = Mc(l, 'height', 2)),
              (h = Mc(l, 'color', _c)))
            : Ec(h) && (h = Mc((l = h), 'color', _c)),
          ((u = e.call(this, t, n, s, o, a)).type = 'rexToggleSwitch'),
          void 0 === h && (h = _c),
          u.setTrackFillStyle(h, Mc(l, 'trackFillAlpha', 1)),
          u.setFalseValueTrackFillStyle(
            Mc(
              l,
              'falseValueTrackColor',
              (function (t) {
                var e = 0.3 * xr(t) + 0.59 * Cr(t) + 0.11 * wr(t);
                return ((255 & e) << 16) | ((255 & e) << 8) | (255 & e);
              })(h)
            ),
            Mc(l, 'falseValueTrackFillAlpha', 1)
          ),
          u.setThumbStyle(Mc(l, 'thumbColor', 16777215), Mc(l, 'thumbAlpha', 1)),
          u.setTrackSize(Mc(l, 'trackWidth', 0.9), Mc(l, 'trackHeight', 0.5)),
          u.setTrackRadius(Mc(l, 'trackRadius', 0.5 * u.trackHeight));
        var c = Mc(l, 'thumbHeight', void 0),
          d = Mc(l, 'thumbWidth', c);
        return (
          void 0 === d && (d = 0.9 * u.trackHeight),
          u.setThumbSize(d, c),
          u.setThumbRadius(Mc(l, 'thumbRadius', 0.5 * u.thumbHeight)),
          u.setThumbPosition(Mc(l, 'thumbLeft', 0.3), Mc(l, 'thumbRight', void 0)),
          u.setRTL(Mc(l, 'rtl', !1)),
          u.setToggleAnimationDuration(Mc(l, 'animationDuration', 150)),
          u.buildShapes(),
          u.setValue(Mc(l, 'value', !1), 0),
          u
        );
      }
      return (
        a(i, [
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              (t = !!t),
                this._value !== t &&
                  ((this.dirty = !0), (this._value = t), this.playToggleAnimation(), this.emit('valuechange', t));
            },
          },
          {
            key: 'setValue',
            value: function (t, e) {
              void 0 === e && (e = this.toggleAnimDuration);
              var i = this.toggleAnimDuration;
              return (this.toggleAnimDuration = e), (this.value = t), (this.toggleAnimDuration = i), this;
            },
          },
          {
            key: 'toggleValue',
            value: function (t) {
              return this.setValue(!this.value, t), this;
            },
          },
          {
            key: 'toggleAnimProgress',
            get: function () {
              return this._toggleAnimProgress;
            },
            set: function (t) {
              this._toggleAnimProgress !== t && ((this._toggleAnimProgress = t), (this.dirty = !0));
            },
          },
        ]),
        i
      );
    })(mu);
  Object.assign(Rc.prototype, Oc);
  var Lc = Phaser.Utils.Objects.GetValue,
    Bc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u;
        return (
          r(this, i),
          ((u = e.call(this, t, n, s, o, a, h, l))._click = new gc(d(u), Lc(l, 'click'))),
          u._click.on(
            'click',
            function () {
              this.toggleValue();
            },
            d(u)
          ),
          u.setReadOnly(Lc(l, 'readOnly', !1)),
          u
        );
      }
      return (
        a(i, [
          {
            key: 'readOnly',
            get: function () {
              return !this._click.enable;
            },
            set: function (t) {
              this._click.enable = !t;
            },
          },
          {
            key: 'setReadOnly',
            value: function (t) {
              return void 0 === t && (t = !0), (this.readOnly = t), this;
            },
          },
        ]),
        i
      );
    })(Rc);
  M.register('toggleSwitch', function (t, e, i, n, s, r) {
    var o = new Bc(this.scene, t, e, i, n, s, r);
    return this.scene.add.existing(o), o;
  }),
    $(window, 'RexPlugins.UI.ToggleSwitch', Bc);
  var Dc = {
      loadFromURL: function (t, e) {
        var i = this,
          n = new Image();
        return (
          (n.onload = function () {
            i.width !== n.width || i.height !== n.height ? i.resize(n.width, n.height) : i.clear(),
              i.context.drawImage(n, 0, 0),
              i.updateTexture(),
              e && e(),
              (n.onload = null),
              (n.src = ''),
              n.remove();
          }),
          (n.src = t),
          this
        );
      },
      loadFromURLPromise: function (t) {
        var e = this;
        return new Promise(function (i, n) {
          e.loadFromURL(t, i);
        });
      },
      loadFromFile: function (t, e) {
        var i = URL.createObjectURL(t);
        return (
          this.loadFromURL(i, function () {
            URL.revokeObjectURL(i), e && e();
          }),
          this
        );
      },
      loadFromFilePromise: function (t) {
        var e = this;
        return new Promise(function (i, n) {
          e.loadFromFile(t, i);
        });
      },
    },
    Ic = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return a(i);
    })(ge);
  Object.assign(Ic.prototype, Dc),
    M.register('canvas', function (t, e, i, n) {
      var s = new Ic(this.scene, t, e, i, n);
      return this.scene.add.existing(s), s;
    }),
    $(window, 'RexPlugins.UI.Canvas', Ic);
  var jc = Phaser.Utils.Objects.GetValue,
    Ac = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return r(this, i), ((l = e.call(this, t, n, s)).type = 'rexCircleMaskImage'), l.setTexture(o, a, h), l;
      }
      return (
        a(i, [
          {
            key: 'setTexture',
            value: function (t, e, i) {
              'object' === n(e) && ((i = e), (e = void 0)), 'string' == typeof i && (i = { maskType: i });
              var s = jc(i, 'maskType', 0),
                r = jc(i, 'backgroundColor', void 0),
                o = jc(i, 'strokeColor', void 0),
                a = jc(i, 'strokeWidth', null != o ? 10 : 0);
              if (
                (void 0 === s ? (s = 0) : 'string' == typeof s && (s = zc[s]),
                (this._textureKey = t),
                (this._frameName = e),
                null === s)
              )
                return this.loadTexture(t, e), (this.dirty = !0), this;
              var h = this.scene.sys.textures.getFrame(t, e);
              if (!h) return this;
              h.cutWidth !== this.width || h.cutHeight !== this.height
                ? this.setCanvasSize(h.cutWidth, h.cutHeight)
                : this.clear();
              var l = this.canvas,
                u = this.context,
                c = l.width,
                d = l.height;
              null != r && ((u.fillStyle = r), u.fillRect(0, 0, c, d)), u.save(), u.beginPath();
              var f = a / 2;
              switch (s) {
                case 1:
                  var p = (k = Math.floor(c / 2)) - f,
                    v = (m = Math.floor(d / 2)) - f;
                  u.ellipse(k, m, p, v, 0, 0, 2 * Math.PI);
                  break;
                case 2:
                  var g = jc(i, 'radius', 0),
                    y = jc(i, 'iteration', void 0);
                  xe(u, f, f, c - a, d - a, g, y);
                  break;
                default:
                  var k = Math.floor(c / 2),
                    m = Math.floor(d / 2),
                    b = Math.min(k, m) - f;
                  u.arc(k, m, b, 0, 2 * Math.PI);
              }
              return (
                null != o && ((u.strokeStyle = o), (u.lineWidth = a), u.stroke()),
                u.clip(),
                this.loadTexture(t, e),
                u.restore(),
                (this.dirty = !0),
                this
              );
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return this.setDisplaySize(t, e), this;
            },
          },
        ]),
        i
      );
    })(ge),
    zc = { circle: 0, ellipse: 1, roundRectangle: 2 };
  M.register('circleMaskImage', function (t, e, i, n, s) {
    var r = new Ac(this.scene, t, e, i, n, s);
    return this.scene.add.existing(r), r;
  }),
    $(window, 'RexPlugins.UI.CircleMaskImage', Ac);
  var Fc = Phaser.Utils.Objects.GetValue,
    Vc = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          ((l = e.call(this, t, n, s)).type = 'rexAlphaMaskImage'),
          (l.maskFrame = null),
          l.setTexture(o, a, h),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'setTexture',
            value: function (t, e, i) {
              'object' === n(e) && ((i = e), (e = void 0)), 'string' == typeof i && (i = { mask: { key: i } });
              var s = Fc(i, 'mask.key'),
                r = Fc(i, 'mask.frame'),
                o = Fc(i, 'mask.invertAlpha', !1),
                a = Fc(i, 'mask.scale'),
                h = Fc(i, 'backgroundColor');
              if (s) {
                (this._maskKey = s), (this._maskFrame = r), (this._maskScale = a);
                var l = s ? this.scene.sys.textures.get(s) : null;
                this.maskFrame = l ? l.get(r) : null;
              }
              (this._textureKey = t), (this._frameName = e);
              var u = this.maskFrame;
              if (null === u) return this.loadTexture(t, e), (this.dirty = !0), this;
              var c = null != h;
              this.loadTexture(t, e);
              var d,
                f,
                p = this.canvas,
                v = this.context,
                g = p.width,
                y = p.height;
              v.save(),
                (v.globalCompositeOperation = o ? 'destination-out' : 'destination-in'),
                null != this._maskScale
                  ? ((d = u.cutWidth * this._maskScale), (f = u.cutHeight * this._maskScale))
                  : ((d = g), (f = y));
              var k = (g - d) / 2,
                m = (y - f) / 2;
              return (
                this.drawFrame(this._maskKey, this._maskFrame, k, m, d, f),
                v.restore(),
                c &&
                  (v.save(),
                  (v.globalCompositeOperation = 'destination-over'),
                  (v.fillStyle = h),
                  v.fillRect(0, 0, g, y),
                  v.restore()),
                (this.dirty = !0),
                this
              );
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return this.setDisplaySize(t, e), this;
            },
          },
        ]),
        i
      );
    })(ge);
  M.register('alphaMaskImage', function (t, e, i, n, s) {
    var r = new Vc(this.scene, t, e, i, n, s);
    return this.scene.add.existing(r), r;
  }),
    $(window, 'RexPlugins.UI.AlphaMaskImage', Vc);
  var Wc = Phaser.Math.Linear,
    Yc = Phaser.Math.Percent,
    Xc = {
      setValue: function (t, e, i) {
        return null == t || (void 0 !== e && (t = Yc(t, e, i)), (this.value = t)), this;
      },
      addValue: function (t, e, i) {
        return void 0 !== e && (t = Yc(t, e, i)), (this.value += t), this;
      },
      getValue: function (t, e) {
        var i = this.value;
        return void 0 !== t && (i = Wc(t, e, i)), i;
      },
    },
    Gc = Phaser.Math.Percent,
    Hc = {
      setEaseValuePropName: function (t) {
        return (this.easeValuePropName = t), this;
      },
      setEaseValueDuration: function (t) {
        return (this.easeValueDuration = t), this;
      },
      setEaseValueFunction: function (t) {
        return (this.easeFunction = t), this;
      },
      stopEaseValue: function () {
        return this.easeValueTask && this.easeValueTask.stop(), this;
      },
      easeValueTo: function (t, e, i) {
        return (
          null == t ||
            (void 0 !== e && (t = Gc(t, e, i)),
            void 0 === this.easeValueTask && (this.easeValueTask = new hc(this, { eventEmitter: null })),
            this.easeValueTask.restart({
              key: this.easeValuePropName,
              to: t,
              duration: this.easeValueDuration,
              ease: this.easeFunction,
            })),
          this
        );
      },
      easeValueRepeat: function (t, e, i, n) {
        return (
          void 0 === i && (i = -1),
          void 0 === n && (n = 0),
          void 0 === this.easeValueTask && (this.easeValueTask = new hc(this, { eventEmitter: null })),
          this.easeValueTask.restart({
            key: this.easeValuePropName,
            from: t,
            to: e,
            duration: this.easeValueDuration,
            ease: this.easeFunction,
            repeat: i,
            repeatDelay: n,
          }),
          this
        );
      },
    },
    Uc = Phaser.Utils.Objects.GetValue,
    Nc = Phaser.Math.Clamp;
  function Kc(t) {
    var e = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'bootProgressBase',
            value: function (t) {
              this.eventEmitter = Uc(t, 'eventEmitter', this);
              var e = Uc(t, 'valuechangeCallback', null);
              if (null !== e) {
                var i = Uc(t, 'valuechangeCallbackScope', void 0);
                this.eventEmitter.on('valuechange', e, i);
              }
              return (
                this.setEaseValuePropName('value')
                  .setEaseValueDuration(Uc(t, 'easeValue.duration', 0))
                  .setEaseValueFunction(Uc(t, 'easeValue.ease', 'Linear')),
                this
              );
            },
          },
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              t = Nc(t, 0, 1);
              var e = this._value,
                i = e != t;
              (this.dirty = this.dirty || i),
                (this._value = t),
                i && this.eventEmitter.emit('valuechange', this._value, e, this.eventEmitter);
            },
          },
        ]),
        i
      );
    })(t);
    return Object.assign(e.prototype, Xc, Hc), e;
  }
  var Jc = Phaser.Math.RadToDeg,
    qc = Phaser.Math.DegToRad,
    Zc = function (t, e, i, n, s, r, o, a) {
      var h = 360 === Math.abs(o - r),
        l = qc(r),
        u = qc(o),
        c = Math.cos(l),
        d = Math.sin(l),
        f = Math.cos(u),
        p = Math.sin(u);
      return (
        t.startAt(e + c * n, i + d * n),
        t.arc(e, i, n, r, o, a),
        (h && 0 === s) || (t.lineTo(e + f * s, i + p * s), s > 0 && t.arc(e, i, s, o, r, !a)),
        t.close(),
        t
      );
    },
    $c = {
      buildShapes: function () {
        this.addShape(new $u().setName('track')).addShape(new $u().setName('bar')).addShape(new Ou().setName('center'));
      },
      updateShapes: function () {
        var t = this.radius,
          e = this.thickness * this.radius,
          i = this.radius,
          n = i - e,
          s = this.getShape('track');
        null != this.trackColor && this.thickness > 0
          ? (s.fillStyle(this.trackColor), Zc(s, t, t, i, n, 0, 360, !1))
          : s.reset();
        var r = this.getShape('bar');
        if (null != this.barColor && this.thickness > 0) {
          var o, a, h;
          if (1 === this.value) (o = !1), (a = 0), (h = 360);
          else (o = this.anticlockwise), (a = Jc(this.startAngle)), (h = 360 * (o ? 1 - this.value : this.value) + a);
          r.fillStyle(this.barColor), Zc(r, t, t, i, n, a, h, !1);
        } else r.reset();
        var l = this.getShape('center');
        this.centerColor && n > 0 ? l.setCenterPosition(t, t).setRadius(n).fillStyle(this.centerColor) : l.reset();
      },
    },
    Qc = Phaser.Utils.Objects.GetValue,
    td = Phaser.Utils.Objects.IsPlainObject,
    ed = Phaser.Math.Clamp,
    id = Phaser.Math.DegToRad(270),
    nd = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u;
        r(this, i),
          td(n) &&
            ((n = Qc((l = n), 'x', 0)),
            (s = Qc(l, 'y', 0)),
            (o = Qc(l, 'radius', 1)),
            (a = Qc(l, 'barColor', void 0)),
            (h = Qc(l, 'value', 0))),
          void 0 === o && (o = 1);
        var c = 2 * o;
        return (
          ((u = e.call(this, t, n, s, c, c)).type = 'rexCircularProgress'),
          u.bootProgressBase(l),
          u.setRadius(o),
          u.setTrackColor(Qc(l, 'trackColor', void 0)),
          u.setBarColor(a),
          u.setCenterColor(Qc(l, 'centerColor', void 0)),
          u.setThickness(Qc(l, 'thickness', 0.2)),
          u.setStartAngle(Qc(l, 'startAngle', id)),
          u.setAnticlockwise(Qc(l, 'anticlockwise', !1)),
          u.buildShapes(),
          u.setValue(h),
          u
        );
      }
      return (
        a(i, [
          {
            key: 'resize',
            value: function (t, e) {
              return (
                (t = Math.floor(Math.min(t, e))) === this.width ||
                  (g(u(i.prototype), 'resize', this).call(this, t, t), this.setRadius(t / 2)),
                this
              );
            },
          },
          {
            key: 'radius',
            get: function () {
              return this._radius;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._radius != t), (this._radius = t);
              var e = 2 * t;
              this.resize(e, e);
            },
          },
          {
            key: 'setRadius',
            value: function (t) {
              return (this.radius = t), this;
            },
          },
          {
            key: 'trackColor',
            get: function () {
              return this._trackColor;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._trackColor != t), (this._trackColor = t);
            },
          },
          {
            key: 'setTrackColor',
            value: function (t) {
              return (this.trackColor = t), this;
            },
          },
          {
            key: 'barColor',
            get: function () {
              return this._barColor;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._barColor != t), (this._barColor = t);
            },
          },
          {
            key: 'setBarColor',
            value: function (t) {
              return (this.barColor = t), this;
            },
          },
          {
            key: 'startAngle',
            get: function () {
              return this._startAngle;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._startAngle != t), (this._startAngle = t);
            },
          },
          {
            key: 'setStartAngle',
            value: function (t) {
              return (this.startAngle = t), this;
            },
          },
          {
            key: 'anticlockwise',
            get: function () {
              return this._anticlockwise;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._anticlockwise != t), (this._anticlockwise = t);
            },
          },
          {
            key: 'setAnticlockwise',
            value: function (t) {
              return void 0 === t && (t = !0), (this.anticlockwise = t), this;
            },
          },
          {
            key: 'thickness',
            get: function () {
              return this._thickness;
            },
            set: function (t) {
              (t = ed(t, 0, 1)), (this.dirty = this.dirty || this._thickness != t), (this._thickness = t);
            },
          },
          {
            key: 'setThickness',
            value: function (t) {
              return (this.thickness = t), this;
            },
          },
          {
            key: 'centerColor',
            get: function () {
              return this._centerColor;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._centerColor != t), (this._centerColor = t);
            },
          },
          {
            key: 'setCenterColor',
            value: function (t) {
              return (this.centerColor = t), this;
            },
          },
        ]),
        i
      );
    })(Kc(mu));
  Object.assign(nd.prototype, $c),
    M.register('circularProgress', function (t, e, i, n, s, r) {
      var o = new nd(this.scene, t, e, i, n, s, r);
      return this.scene.add.existing(o), o;
    }),
    $(window, 'RexPlugins.UI.CircularProgress', nd);
  var sd = function (t, e, i, n, s, r, o, a, h, l, u, c) {
      void 0 === l && (l = 0),
        void 0 === u && (u = 2 * Math.PI),
        void 0 === c && (c = !1),
        e.beginPath(),
        e.ellipse(i, n, s, r, 0, l, u, c),
        null != o && ((e.fillStyle = o), e.fill()),
        null != a && ((e.strokeStyle = a), (e.lineWidth = h), e.stroke());
    },
    rd = Phaser.Math.PI2,
    od = function () {
      var t,
        e = this.radius,
        i = this.thickness * this.radius,
        n = this.radius - i / 2,
        s = this.radius - i,
        r = (this.canvas, this.context),
        o = this.anticlockwise,
        a = this.startAngle,
        h = this.endAngle,
        l = this._deltaAngle;
      if (
        (this.trackColor && i > 0 && (r.save(), sd(0, r, e, e, n, n, void 0, this.trackColor, i, a, h, o), r.restore()),
        this.barColor && n > 0)
      ) {
        var u, c;
        if (((u = o ? (a - l * this.value + rd) % rd : (a + l * this.value) % rd), r.save(), this.barColor2)) {
          var d = e + n * Math.cos(a),
            f = e + n * Math.sin(a),
            p = e + n * Math.cos(u),
            v = e + n * Math.sin(u),
            g = r.createLinearGradient(d, f, p, v);
          g.addColorStop(0, this.barColor2), g.addColorStop(1, this.barColor), (c = g);
        } else c = this.barColor;
        sd(0, r, e, e, n, n, void 0, c, i, a, u, o), r.restore();
      }
      this.centerColor &&
        s > 0 &&
        (this.centerColor2
          ? ((t = this.context.createRadialGradient(e, e, 0, e, e, s)).addColorStop(0, this.centerColor),
            t.addColorStop(1, this.centerColor2))
          : (t = this.centerColor),
        r.save(),
        sd(0, r, e, e, s, s, t),
        r.restore());
      this.textFormatCallback &&
        (this.textColor || this.textStrokeColor) &&
        (r.save(),
        (function (t, e, i, n, s, r, o, a, h, l, u) {
          void 0 === h && null != a && (h = 2),
            void 0 === l && (l = 'start'),
            void 0 === u && (u = 'alphabetic'),
            (e.font = r),
            (e.textAlign = l),
            (e.textBaseline = u),
            (e.fillStyle = o),
            (e.strokeStyle = a),
            (e.lineWidth = h),
            (e.lineCap = 'round'),
            (e.lineJoin = 'round'),
            null != a && 'none' !== a && h > 0 && e.strokeText(s, i, n),
            null != o && 'none' !== o && e.fillText(s, i, n);
        })(
          0,
          r,
          e,
          e,
          this.getFormatText(),
          this.textFont,
          this.textColor,
          this.textStrokeColor,
          this.textStrokeThickness,
          'center',
          'middle'
        ),
        r.restore());
    },
    ad = Phaser.Utils.Objects.GetValue,
    hd = Phaser.Utils.Objects.IsPlainObject,
    ld = Phaser.Math.Angle.Normalize,
    ud = Phaser.Math.Clamp,
    cd = Phaser.Math.DegToRad(270),
    dd = Phaser.Math.PI2,
    fd = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u;
        r(this, i),
          hd(n) &&
            ((n = ad((l = n), 'x', 0)),
            (s = ad(l, 'y', 0)),
            (o = ad(l, 'radius', 1)),
            (a = ad(l, 'barColor', void 0)),
            (h = ad(l, 'value', 0)));
        var c = 2 * o;
        ((u = e.call(this, t, n, s, c, c)).type = 'rexCircularProgressCanvas'),
          u.bootProgressBase(l),
          u.setRadius(o),
          u.setTrackColor(ad(l, 'trackColor', void 0)),
          u.setBarColor(a),
          u.setBarColor2(ad(l, 'barColor2', void 0)),
          u.setCenterColor(ad(l, 'centerColor', void 0)),
          u.setThickness(ad(l, 'thickness', 0.2)),
          u.setStartAngle(ad(l, 'startAngle', cd)),
          u.setEndAngle(ad(l, 'endAngle', u.startAngle + dd)),
          u.setAnticlockwise(ad(l, 'anticlockwise', !1)),
          u.setTextColor(ad(l, 'textColor', void 0)),
          u.setTextStrokeColor(ad(l, 'textStrokeColor', void 0), ad(l, 'textStrokeThickness', void 0));
        var d = ad(l, 'textFont', void 0);
        return (
          d
            ? u.setTextFont(d)
            : u.setTextFont(ad(l, 'textSize', '16px'), ad(l, 'textFamily', 'Courier'), ad(l, 'textStyle', '')),
          u.setTextFormatCallback(ad(l, 'textFormatCallback', void 0), ad(l, 'textFormatCallbackScope', void 0)),
          u.setValue(h),
          u
        );
      }
      return (
        a(i, [
          {
            key: 'resize',
            value: function (t, e) {
              return (
                (t = Math.floor(Math.min(t, e))) === this.width ||
                  (g(u(i.prototype), 'resize', this).call(this, t, t), this.setRadius(t / 2)),
                this
              );
            },
          },
          {
            key: 'radius',
            get: function () {
              return this._radius;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._radius != t), (this._radius = t);
              var e = 2 * t;
              this.resize(e, e);
            },
          },
          {
            key: 'setRadius',
            value: function (t) {
              return (this.radius = t), this;
            },
          },
          {
            key: 'trackColor',
            get: function () {
              return this._trackColor;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._trackColor != t),
                (this._trackColor = t);
            },
          },
          {
            key: 'setTrackColor',
            value: function (t) {
              return (this.trackColor = t), this;
            },
          },
          {
            key: 'barColor',
            get: function () {
              return this._barColor;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._barColor != t),
                (this._barColor = t);
            },
          },
          {
            key: 'setBarColor',
            value: function (t) {
              return (this.barColor = t), this;
            },
          },
          {
            key: 'barColor2',
            get: function () {
              return this._barColor2;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._barColor2 != t),
                (this._barColor2 = t);
            },
          },
          {
            key: 'setBarColor2',
            value: function (t) {
              return (this.barColor2 = t), this;
            },
          },
          {
            key: 'startAngle',
            get: function () {
              return this._startAngle;
            },
            set: function (t) {
              (t = ld(t)),
                (this.dirty = this.dirty || this._startAngle != t),
                (this._startAngle = t),
                (this._deltaAngle = pd(this._startAngle, this._endAngle, this._anticlockwise));
            },
          },
          {
            key: 'setStartAngle',
            value: function (t) {
              return (this.startAngle = t), this;
            },
          },
          {
            key: 'endAngle',
            get: function () {
              return this._endAngle;
            },
            set: function (t) {
              (t = ld(t)),
                (this.dirty = this.dirty || this._endAngle != t),
                (this._endAngle = t),
                (this._deltaAngle = pd(this._startAngle, this._endAngle, this._anticlockwise));
            },
          },
          {
            key: 'setEndAngle',
            value: function (t) {
              return (this.endAngle = t), this;
            },
          },
          {
            key: 'anticlockwise',
            get: function () {
              return this._anticlockwise;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._anticlockwise != t),
                (this._anticlockwise = t),
                (this._deltaAngle = pd(this._startAngle, this._endAngle, this._anticlockwise));
            },
          },
          {
            key: 'setAnticlockwise',
            value: function (t) {
              return void 0 === t && (t = !0), (this.anticlockwise = t), this;
            },
          },
          {
            key: 'thickness',
            get: function () {
              return this._thickness;
            },
            set: function (t) {
              (t = ud(t, 0, 1)), (this.dirty = this.dirty || this._thickness != t), (this._thickness = t);
            },
          },
          {
            key: 'setThickness',
            value: function (t) {
              return (this.thickness = t), this;
            },
          },
          {
            key: 'centerColor',
            get: function () {
              return this._centerColor;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._centerColor != t),
                (this._centerColor = t);
            },
          },
          {
            key: 'centerColor2',
            get: function () {
              return this._centerColor2;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._centerColor2 != t),
                (this._centerColor2 = t);
            },
          },
          {
            key: 'setCenterColor',
            value: function (t, e) {
              return (this.centerColor = t), (this.centerColor2 = e), this;
            },
          },
          {
            key: 'textColor',
            get: function () {
              return this._textColor;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._textColor != t),
                (this._textColor = t);
            },
          },
          {
            key: 'setTextColor',
            value: function (t) {
              return (this.textColor = t), this;
            },
          },
          {
            key: 'textStrokeColor',
            get: function () {
              return this._textStrokeColor;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._textStrokeColor != t),
                (this._textStrokeColor = t);
            },
          },
          {
            key: 'textStrokeThickness',
            get: function () {
              return this._textStrokeThickness;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._textStrokeThickness != t), (this._textStrokeThickness = t);
            },
          },
          {
            key: 'setTextStrokeColor',
            value: function (t, e) {
              return void 0 === e && (e = 2), (this.textStrokeColor = t), (this.textStrokeThickness = e), this;
            },
          },
          {
            key: 'textFont',
            get: function () {
              return this._textFont;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._textFont != t), (this._textFont = t);
            },
          },
          {
            key: 'setTextFont',
            value: function (t, e, i) {
              var n;
              return (n = void 0 === e ? t : i + ' ' + t + ' ' + e), (this.textFont = n), this;
            },
          },
          {
            key: 'setTextFormatCallback',
            value: function (t, e) {
              return (this.textFormatCallback = t), (this.textFormatCallbackScope = e), this;
            },
          },
          {
            key: 'updateTexture',
            value: function () {
              return this.clear(), od.call(this), g(u(i.prototype), 'updateTexture', this).call(this), this;
            },
          },
          {
            key: 'getFormatText',
            value: function (t) {
              return (
                void 0 === t && (t = this.value),
                this.textFormatCallbackScope
                  ? this.textFormatCallback(t)
                  : this.textFormatCallback.call(this.textFormatCallbackScope, t)
              );
            },
          },
        ]),
        i
      );
    })(Kc(ge)),
    pd = function (t, e, i) {
      return i ? (t <= e ? dd + t - e : t - e) : t >= e ? dd + e - t : e - t;
    };
  M.register('circularProgressCanvas', function (t, e, i, n, s, r) {
    var o = new fd(this.scene, t, e, i, n, s, r);
    return this.scene.add.existing(o), o;
  }),
    $(window, 'RexPlugins.UI.CircularProgressCanvas', fd);
  var vd = function (t, e, i, n, s, r) {
      var o = (e + n) / 2;
      return (
        r >= 0
          ? t
              .startAt(o + r, i)
              .lineTo(n + r, i)
              .lineTo(n, s)
              .lineTo(e, s)
              .lineTo(e + r, i)
              .lineTo(o + r, i)
          : t
              .startAt(o, i)
              .lineTo(n, i)
              .lineTo(n - r, s)
              .lineTo(e - r, s)
              .lineTo(e, i)
              .lineTo(o, i),
        t
      );
    },
    gd = Phaser.Utils.Objects.GetValue,
    yd = Phaser.Utils.Objects.IsPlainObject,
    kd = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l, u) {
        var c;
        return (
          r(this, i),
          yd(n)
            ? ((n = gd((u = n), 'x', 0)),
              (s = gd(u, 'y', 0)),
              (o = gd(u, 'width', 2)),
              (a = gd(u, 'height', 2)),
              (h = gd(u, 'barColor', void 0)),
              (l = gd(u, 'value', 0)))
            : yd(o)
            ? ((o = gd((u = o), 'width', 2)),
              (a = gd(u, 'height', 2)),
              (h = gd(u, 'barColor', void 0)),
              (l = gd(u, 'value', 0)))
            : yd(h) && ((h = gd((u = h), 'barColor', void 0)), (l = gd(u, 'value', 0))),
          ((c = e.call(this, t, n, s, o, a, u)).type = 'rexLineProgress'),
          c.bootProgressBase(u),
          c
            .addShape(new $u().setName('trackFill'))
            .addShape(new $u().setName('bar'))
            .addShape(new $u().setName('trackStroke')),
          c.setTrackColor(gd(u, 'trackColor', void 0)),
          c.setBarColor(h),
          c.setTrackStroke(gd(u, 'trackStrokeThickness', 2), gd(u, 'trackStrokeColor', void 0)),
          c.setSkewX(gd(u, 'skewX', 0)),
          c.setRTL(gd(u, 'rtl', !1)),
          c.setValue(l),
          c
        );
      }
      return (
        a(i, [
          {
            key: 'trackColor',
            get: function () {
              return this._trackColor;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._trackColor != t), (this._trackColor = t);
            },
          },
          {
            key: 'setTrackColor',
            value: function (t) {
              return (this.trackColor = t), this;
            },
          },
          {
            key: 'trackStrokeColor',
            get: function () {
              return this._trackStrokeColor;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._trackStrokeColor != t), (this._trackStrokeColor = t);
            },
          },
          {
            key: 'trackStrokeThickness',
            get: function () {
              return this._trackStrokeThickness;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._trackStrokeThickness != t), (this._trackStrokeThickness = t);
            },
          },
          {
            key: 'setTrackStroke',
            value: function (t, e) {
              return (this.trackStrokeThickness = t), (this.trackStrokeColor = e), this;
            },
          },
          {
            key: 'barColor',
            get: function () {
              return this._barColor;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._barColor != t), (this._barColor = t);
            },
          },
          {
            key: 'setBarColor',
            value: function (t) {
              return (this.barColor = t), this;
            },
          },
          {
            key: 'skewX',
            get: function () {
              return this._skewX;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._skewX != t), (this._skewX = t);
            },
          },
          {
            key: 'setSkewX',
            value: function (t) {
              return (this.skewX = t), this;
            },
          },
          {
            key: 'rtl',
            get: function () {
              return this._rtl;
            },
            set: function (t) {
              (t = !!t), (this.dirty = this.dirty || this._rtl != t), (this._rtl = t);
            },
          },
          {
            key: 'setRTL',
            value: function (t) {
              return void 0 === t && (t = !0), (this.rtl = t), this;
            },
          },
        ]),
        i
      );
    })(Kc(mu)),
    md = {
      updateShapes: function () {
        var t = this.skewX,
          e = this.width - Math.abs(t),
          i = this.height,
          n = this.getShape('trackFill');
        n.fillStyle(this.trackColor), n.isFilled && vd(n, 0, 0, e, i, t).close();
        var s,
          r,
          o = this.getShape('bar');
        (o.fillStyle(this.barColor), o.isFilled) &&
          (this.rtl ? ((s = e * (1 - this.value)), (r = e)) : ((s = 0), (r = e * this.value)),
          vd(o, s, 0, r, i, t).close());
        var a = this.getShape('trackStroke');
        a.lineStyle(this.trackStrokeThickness, this.trackStrokeColor), a.isStroked && vd(a, 0, 0, e, i, t).end();
      },
    };
  Object.assign(kd.prototype, md),
    M.register('lineProgress', function (t, e, i, n, s, r, o) {
      var a = new kd(this.scene, t, e, i, n, s, r, o);
      return this.scene.add.existing(a), a;
    }),
    $(window, 'RexPlugins.UI.LineProgress', kd);
  var bd = function (t, e, i, n, s, r, o) {
      void 0 === o && (o = 'round'),
        (function (t, e) {
          t.save(), t.beginPath();
          var i = e[0];
          t.moveTo(i.x, i.y);
          for (var n = 1, s = e.length; n < s; n++) (i = e[n]), t.lineTo(i.x, i.y);
          t.closePath(), t.restore();
        })(e, i),
        (e.lineJoin = o),
        null != n && ((e.fillStyle = n), e.fill()),
        null != s && ((e.strokeStyle = s), (e.lineWidth = r), e.stroke());
    },
    xd = function () {
      var t,
        e,
        i = this.skewX,
        n = this.width - Math.abs(i),
        s = this.height,
        r = (this.canvas, this.context);
      if (
        ((this.trackColor || this.trackStrokeColor) && Cd(0, 0, n, s, i, this.trackPoints),
        this.barColor &&
          (this.rtl ? ((t = n * (1 - this.value)), (e = n)) : ((t = 0), (e = n * this.value)),
          Cd(t, 0, e, s, i, this.barPoints)),
        this.trackColor && (r.save(), bd(0, r, this.trackPoints, this.trackColor), r.restore()),
        this.barColor)
      ) {
        var o;
        if ((r.save(), this.barColor2)) {
          var a;
          if (this.isHorizontalGradient) {
            var h = s / 2;
            a = r.createLinearGradient(t, h, e, h);
          } else {
            var l = n / 2;
            a = r.createLinearGradient(l, 0, l, s);
          }
          a.addColorStop(0, this.rtl ? this.barColor : this.barColor2),
            a.addColorStop(1, this.rtl ? this.barColor2 : this.barColor),
            (o = a);
        } else o = this.barColor;
        bd(0, r, this.barPoints, o), r.restore();
      }
      this.trackStrokeColor &&
        this.trackStrokeThickness > 0 &&
        (r.save(), bd(0, r, this.trackPoints, void 0, this.trackStrokeColor, this.trackStrokeThickness), r.restore());
    },
    Cd = function (t, e, i, n, s, r) {
      void 0 === r && (r = []), (r.length = 4);
      for (var o = 0; o < 4; o++) r[o] || (r[o] = {});
      var a;
      return (
        s >= 0
          ? (((a = r[0]).x = t + s),
            (a.y = e),
            ((a = r[1]).x = i + s),
            (a.y = e),
            ((a = r[2]).x = i),
            (a.y = n),
            ((a = r[3]).x = t),
            (a.y = n))
          : (((a = r[0]).x = t),
            (a.y = e),
            ((a = r[1]).x = i),
            (a.y = e),
            ((a = r[2]).x = i - s),
            (a.y = n),
            ((a = r[3]).x = t - s),
            (a.y = n)),
        r
      );
    },
    wd = Phaser.Utils.Objects.GetValue,
    Sd = Phaser.Utils.Objects.IsPlainObject,
    Pd = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l, u) {
        var c;
        return (
          r(this, i),
          Sd(n)
            ? ((n = wd((u = n), 'x', 0)),
              (s = wd(u, 'y', 0)),
              (o = wd(u, 'width', 2)),
              (a = wd(u, 'height', 2)),
              (h = wd(u, 'barColor', void 0)),
              (l = wd(u, 'value', 0)))
            : Sd(o)
            ? ((o = wd((u = o), 'width', 2)),
              (a = wd(u, 'height', 2)),
              (h = wd(u, 'barColor', void 0)),
              (l = wd(u, 'value', 0)))
            : Sd(h) && ((h = wd((u = h), 'barColor', void 0)), (l = wd(u, 'value', 0))),
          ((c = e.call(this, t, n, s, o, a)).type = 'rexLineProgressCanvas'),
          (c.trackPoints = []),
          (c.barPoints = []),
          c.bootProgressBase(u),
          c.setTrackColor(wd(u, 'trackColor', void 0)),
          c.setBarColor(h, wd(u, 'barColor2', void 0), wd(u, 'isHorizontalGradient', void 0)),
          c.setTrackStroke(wd(u, 'trackStrokeThickness', 2), wd(u, 'trackStrokeColor', void 0)),
          c.setSkewX(wd(u, 'skewX', 0)),
          c.setRTL(wd(u, 'rtl', !1)),
          c.setValue(l),
          c
        );
      }
      return (
        a(i, [
          {
            key: 'trackColor',
            get: function () {
              return this._trackColor;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._trackColor != t),
                (this._trackColor = t);
            },
          },
          {
            key: 'setTrackColor',
            value: function (t) {
              return (this.trackColor = t), this;
            },
          },
          {
            key: 'trackStrokeColor',
            get: function () {
              return this._trackStrokeColor;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._trackStrokeColor != t),
                (this._trackStrokeColor = t);
            },
          },
          {
            key: 'trackStrokeThickness',
            get: function () {
              return this._trackStrokeThickness;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._trackStrokeThickness != t), (this._trackStrokeThickness = t);
            },
          },
          {
            key: 'setTrackStroke',
            value: function (t, e) {
              return (this.trackStrokeThickness = t), (this.trackStrokeColor = e), this;
            },
          },
          {
            key: 'barColor',
            get: function () {
              return this._barColor;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._barColor != t),
                (this._barColor = t);
            },
          },
          {
            key: 'barColor2',
            get: function () {
              return this._barColor2;
            },
            set: function (t) {
              (t = me(t, this.canvas, this.context)),
                (this.dirty = this.dirty || this._barColor2 != t),
                (this._barColor2 = t);
            },
          },
          {
            key: 'isHorizontalGradient',
            get: function () {
              return this._isHorizontalGradient;
            },
            set: function (t) {
              (this.dirty |= this._isHorizontalGradient != t), (this._isHorizontalGradient = t);
            },
          },
          {
            key: 'setBarColor',
            value: function (t, e, i) {
              return (
                void 0 === i && (i = !0),
                (this.barColor = t),
                (this.barColor2 = e),
                (this.isHorizontalGradient = i),
                this
              );
            },
          },
          {
            key: 'skewX',
            get: function () {
              return this._skewX;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._skewX != t), (this._skewX = t);
            },
          },
          {
            key: 'setSkewX',
            value: function (t) {
              return (this.skewX = t), this;
            },
          },
          {
            key: 'rtl',
            get: function () {
              return this._rtl;
            },
            set: function (t) {
              (t = !!t), (this.dirty = this.dirty || this._rtl != t), (this._rtl = t);
            },
          },
          {
            key: 'setRTL',
            value: function (t) {
              return void 0 === t && (t = !0), (this.rtl = t), this;
            },
          },
          {
            key: 'updateTexture',
            value: function () {
              return this.clear(), xd.call(this), g(u(i.prototype), 'updateTexture', this).call(this), this;
            },
          },
        ]),
        i
      );
    })(Kc(ge));
  M.register('circularProgressCanvas', function (t, e, i, n, s, r, o) {
    var a = new Pd(this.scene, t, e, i, n, s, r, o);
    return this.scene.add.existing(a), a;
  }),
    $(window, 'RexPlugins.UI.LineProgressCanvas', Pd),
    Phaser.Math.Wrap;
  var Td = Phaser.Math.Linear,
    Od = function () {
      var t,
        e,
        i,
        n,
        s,
        r,
        o = this.getShape('triangle'),
        a = this.padding,
        h = this.width - a.right,
        l = 0 + a.left,
        u = this.height - a.bottom,
        c = 0 + a.top,
        d = (l + h) / 2,
        f = (c + u) / 2,
        p = {
          0: { a: { x: l, y: c }, b: { x: h, y: f }, c: { x: l, y: u } },
          1: { a: { x: l, y: c }, b: { x: d, y: u }, c: { x: h, y: c } },
          2: { a: { x: h, y: c }, b: { x: l, y: f }, c: { x: h, y: u } },
          3: { a: { x: l, y: u }, b: { x: d, y: c }, c: { x: h, y: u } },
        };
      if (void 0 === this.previousDirection) {
        var v = p[this.direction],
          g = v.a,
          y = v.b,
          k = v.c;
        (t = g.x), (e = g.y), (i = y.x), (n = y.y), (s = k.x), (r = k.y);
      } else {
        var m = p[this.previousDirection],
          b = p[this.direction],
          x = this.easeDirectionProgress;
        (t = Td(m.a.x, b.a.x, x)),
          (e = Td(m.a.y, b.a.y, x)),
          (i = Td(m.b.x, b.b.x, x)),
          (n = Td(m.b.y, b.b.y, x)),
          (s = Td(m.c.x, b.c.x, x)),
          (r = Td(m.c.y, b.c.y, x));
      }
      o.startAt(t, e).lineTo(i, n).lineTo(s, r), this.arrowOnly ? o.end() : o.close();
    },
    Md = (0, Phaser.Math.DegToRad)(120),
    Ed = function (t) {
      t = this.getShape('triangle');
      var e = this.width / 2,
        i = this.height / 2,
        n = Math.min(e, i) * this.radius,
        s = this.verticeRotation;
      t
        .startAt(e + n * Math.cos(s + Md), i + n * Math.sin(s + Md))
        .lineTo(e + n * Math.cos(s), i + n * Math.sin(s))
        .lineTo(e + n * Math.cos(s - Md), i + n * Math.sin(s - Md)),
        this.arrowOnly ? t.end() : t.close();
    },
    _d = {
      buildShapes: function () {
        this.addShape(new $u().setName('triangle'));
      },
      updateShapes: function () {
        var t = this.getShape('triangle');
        this.arrowOnly
          ? t.fillStyle().lineStyle(this.lineWidth, this.strokeColor, this.strokeAlpha)
          : t.fillStyle(this.fillColor, this.fillAlpha).lineStyle(this.lineWidth, this.strokeColor, this.strokeAlpha),
          0 === this.shapeMode ? Od.call(this) : Ed.call(this);
      },
    },
    Rd = {
      setEaseDuration: function (t) {
        return void 0 === t && (t = 0), (this.easeDuration = t), this;
      },
      playEaseDirectionation: function () {
        return (
          void 0 === this.easeDirectionProgressTask &&
            (this.easeDirectionProgressTask = new hc(this, { eventEmitter: null })),
          this.easeDirectionProgressTask.restart({
            key: 'easeDirectionProgress',
            from: 0,
            to: 1,
            duration: this.easeDuration,
          }),
          this
        );
      },
      stopEaseDirection: function () {
        return void 0 === this.easeDirectionProgressTask || this.easeDirectionProgressTask.stop(), this;
      },
    },
    Ld = Phaser.Utils.Objects.GetValue,
    Bd = Phaser.Utils.Objects.IsPlainObject,
    Dd = Phaser.Math.DegToRad,
    Id = Phaser.Math.RadToDeg,
    jd = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u, c, d, f, p, v, g, y, k;
        if ((r(this, i), Bd(n))) {
          var m = n;
          (n = m.x),
            (s = m.y),
            (o = m.width),
            (a = m.height),
            (h = m.color),
            (l = m.alpha),
            (c = m.strokeColor),
            (d = m.strokeAlpha),
            (f = m.strokeWidth),
            (p = m.arrowOnly),
            (v = m.direction),
            (g = m.easeDuration),
            (y = m.padding),
            (k = m.radius);
        }
        return (
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 1),
          void 0 === a && (a = o),
          void 0 === p && (p = !1),
          void 0 === v && (v = 0),
          void 0 === g && (g = 0),
          void 0 === y && (y = 0),
          void 0 === k && (k = void 0),
          ((u = e.call(this, t, n, s, o, a)).type = 'rexTriangle'),
          u.setFillStyle(h, l),
          void 0 !== c && void 0 === f && (f = 2),
          u.setStrokeStyle(f, c, d),
          u.setArrowOnly(p),
          u.setDirection(v, g),
          u.setPadding(y),
          u.setRadius(k),
          u.buildShapes(),
          u
        );
      }
      return (
        a(i, [
          {
            key: 'arrowOnly',
            get: function () {
              return this._arrowOnly;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._arrowOnly != t), (this._arrowOnly = t);
            },
          },
          {
            key: 'setArrowOnly',
            value: function (t) {
              return void 0 === t && (t = !0), (this.arrowOnly = t), this;
            },
          },
          {
            key: 'direction',
            get: function () {
              return this._direction;
            },
            set: function (t) {
              (t = zd(t)),
                this._direction !== t &&
                  (this.easeDuration > 0 && void 0 !== this._direction
                    ? (this.previousDirection = this._direction)
                    : (this.previousDirection = void 0),
                  (this._direction = t),
                  (this.verticeAngle = 90 * t),
                  (this.dirty = !0),
                  void 0 !== this.previousDirection ? this.playEaseDirectionation() : this.stopEaseDirection());
            },
          },
          {
            key: 'setDirection',
            value: function (t, e) {
              return void 0 !== e && this.setEaseDuration(e), (this.direction = t), this;
            },
          },
          {
            key: 'toggleDirection',
            value: function (t) {
              return this.setDirection(this.direction + 2, t), this;
            },
          },
          {
            key: 'easeDirectionProgress',
            get: function () {
              return this._easeDirectionProgress;
            },
            set: function (t) {
              this._easeDirectionProgress !== t && ((this._easeDirectionProgress = t), (this.dirty = !0));
            },
          },
          {
            key: 'setPadding',
            value: function (t, e, i, s) {
              if ('object' === n(t)) {
                var r = t,
                  o = Ld(r, 'x', null);
                null !== o ? ((t = o), (i = o)) : ((t = Ld(r, 'left', 0)), (i = Ld(r, 'right', t)));
                var a = Ld(r, 'y', null);
                null !== a ? ((e = a), (s = a)) : ((e = Ld(r, 'top', 0)), (s = Ld(r, 'bottom', e)));
              } else void 0 === t && (t = 0), void 0 === e && (e = t), void 0 === i && (i = t), void 0 === s && (s = e);
              return (
                void 0 === this.padding && (this.padding = {}),
                (this.dirty =
                  this.dirty ||
                  this.padding.left != t ||
                  this.padding.top != e ||
                  this.padding.right != i ||
                  this.padding.bottom != s),
                (this.padding.left = t),
                (this.padding.top = e),
                (this.padding.right = i),
                (this.padding.bottom = s),
                this.setRadius(),
                this
              );
            },
          },
          {
            key: 'radius',
            get: function () {
              return this._radius;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._radius != t), (this._radius = t);
            },
          },
          {
            key: 'setRadius',
            value: function (t) {
              return (this.radius = t), (this.shapeMode = null == t ? 0 : 1), this;
            },
          },
          {
            key: 'verticeRotation',
            get: function () {
              return this._verticeRotation;
            },
            set: function (t) {
              (this.dirty = this.dirty || this._verticeRotation != t), (this._verticeRotation = t);
            },
          },
          {
            key: 'setVerticeRotation',
            value: function (t) {
              return (this.verticeRotation = t), this;
            },
          },
          {
            key: 'verticeAngle',
            get: function () {
              return Id(this.verticeRotation);
            },
            set: function (t) {
              this.verticeRotation = Dd(t);
            },
          },
          {
            key: 'setVerticeAngle',
            value: function (t) {
              return (this.verticeAngle = t), this;
            },
          },
        ]),
        i
      );
    })(mu),
    Ad = { right: 0, down: 1, left: 2, up: 3 },
    zd = function (t) {
      return 'string' == typeof t && (t = Ad[t]), (t %= 4);
    };
  Object.assign(jd.prototype, _d, Rd),
    M.register('triangle', function (t, e, i, n, s, r) {
      var o = new jd(this.scene, t, e, i, n, s, r);
      return this.scene.add.existing(o), o;
    }),
    $(window, 'RexPlugins.UI.Triangle', jd),
    ct();
  var Fd = Phaser.GameObjects.Zone,
    Vd = Phaser.Utils.Array.Add,
    Wd = Phaser.Utils.Array.Remove,
    Yd = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a) {
        var h;
        return (
          r(this, i),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 1),
          void 0 === a && (a = 1),
          ((h = e.call(this, t, n, s, o, a)).children = []),
          h
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              if (this.scene && !this.ignoreDestroy) {
                if (t)
                  for (var e, n = this.children.length - 1; n >= 0; n--)
                    (e = this.children[n]).parentContainer || e.displayList || e.destroy(t);
                this.clear(!t), g(u(i.prototype), 'destroy', this).call(this, t);
              }
            },
          },
          {
            key: 'contains',
            value: function (t) {
              return -1 !== this.children.indexOf(t);
            },
          },
          {
            key: 'add',
            value: function (t) {
              var e = this;
              return (
                Vd(
                  this.children,
                  t,
                  0,
                  function (t) {
                    t.once('destroy', e.onChildDestroy, e);
                  },
                  this
                ),
                this
              );
            },
          },
          {
            key: 'remove',
            value: function (t, e) {
              var i = this;
              return (
                Wd(this.children, t, function (t) {
                  t.off('destroy', i.onChildDestroy, i), e && t.destroy();
                }),
                this
              );
            },
          },
          {
            key: 'onChildDestroy',
            value: function (t, e) {
              this.remove(t, !1);
            },
          },
          {
            key: 'clear',
            value: function (t) {
              for (var e, i = 0, n = this.children.length; i < n; i++)
                (e = this.children[i]).off('destroy', this.onChildDestroy, this), t && e.destroy();
              return (this.children.length = 0), this;
            },
          },
        ]),
        i
      );
    })(Fd),
    Xd = Phaser.GameObjects.Components;
  Phaser.Class.mixin(Yd, [Xd.Alpha, Xd.Flip]);
  var Gd,
    Hd = function t(e, i) {
      var n;
      if (void 0 === i) e.hasOwnProperty('rexContainer') && (n = e.rexContainer.parent);
      else for (n = t(e); n && n.name !== i; ) n = t(n);
      return n;
    },
    Ud = function (t) {
      for (var e = Hd(t); e; ) (t = e), (e = Hd(e));
      return t;
    },
    Nd = Phaser.Math.DegToRad,
    Kd = Phaser.Math.RadToDeg,
    Jd = function (t) {
      if (!t.hasOwnProperty('rexContainer')) {
        var e = {
          parent: null,
          self: null,
          layer: null,
          x: 0,
          y: 0,
          syncPosition: !0,
          rotation: 0,
          syncRotation: !0,
          scaleX: 0,
          scaleY: 0,
          syncScale: !0,
          alpha: 0,
          syncAlpha: !0,
          visible: !0,
          active: !0,
        };
        Object.defineProperty(e, 'angle', {
          get: function () {
            return Kd(this.rotation);
          },
          set: function (t) {
            this.rotation = Nd(t);
          },
        }),
          Object.defineProperty(e, 'displayWidth', {
            get: function () {
              return t.width * this.scaleX;
            },
            set: function (e) {
              this.scaleX = e / t.width;
            },
          }),
          Object.defineProperty(e, 'displayHeight', {
            get: function () {
              return t.height * this.scaleY;
            },
            set: function (e) {
              this.scaleY = e / t.height;
            },
          }),
          (t.rexContainer = e);
      }
      return t.rexContainer;
    },
    qd = {
      setParent: function (t, e) {
        void 0 === e && (e = this);
        var i = Jd(t);
        return e ? ((i.parent = e), (i.self = t)) : ((i.parent = null), (i.self = null)), this;
      },
      getParent: function (t, e) {
        return 'string' == typeof t && ((e = t), (t = void 0)), void 0 === t && (t = this), Hd(t, e);
      },
      getTopmostParent: function (t) {
        return void 0 === t && (t = this), Ud(t);
      },
    },
    Zd = Phaser.Utils.Objects.GetValue,
    $d = Yd.prototype.add,
    Qd = function (t, e) {
      this.setParent(t);
      var i = Jd(t);
      return (
        ef(i, e),
        this.resetChildState(t)
          .updateChildVisible(t)
          .updateChildActive(t)
          .updateChildScrollFactor(t)
          .updateChildMask(t),
        $d.call(this, t),
        this.addToParentContainer(t),
        this.addToRenderLayer(t),
        this
      );
    },
    tf = function (t, e) {
      this.setParent(t);
      var i = Jd(t);
      return (
        ef(i, e),
        (i.x = t.x),
        (i.y = t.y),
        (i.rotation = t.rotation),
        (i.scaleX = t.scaleX),
        (i.scaleY = t.scaleY),
        (i.alpha = t.alpha),
        (i.visible = t.visible),
        (i.active = t.active),
        this.updateChildPosition(t)
          .updateChildAlpha(t)
          .updateChildVisible(t)
          .updateChildActive(t)
          .updateChildScrollFactor(t)
          .updateChildMask(t),
        $d.call(this, t),
        this.addToRenderLayer(t),
        this
      );
    },
    ef = function (t, e) {
      void 0 === e && (e = !0),
        'boolean' == typeof e
          ? ((t.syncPosition = e), (t.syncRotation = e), (t.syncScale = e), (t.syncAlpha = e), (t.syncScrollFactor = e))
          : ((t.syncPosition = Zd(e, 'syncPosition', !0)),
            (t.syncRotation = Zd(e, 'syncRotation', !0)),
            (t.syncScale = Zd(e, 'syncScale', !0)),
            (t.syncAlpha = Zd(e, 'syncAlpha', !0)),
            (t.syncScrollFactor = Zd(e, 'syncScrollFactor', !0)));
    },
    nf = {
      add: function (t) {
        return Array.isArray(t) ? this.addMultiple(t) : Qd.call(this, t), this;
      },
      pin: function (t, e) {
        return Array.isArray(t) ? this.addMultiple(t, e) : Qd.call(this, t, e), this;
      },
      addMultiple: function (t) {
        for (var e = 0, i = t.length; e < i; e++) Qd.call(this, t[e]);
        return this;
      },
      addLocal: function (t) {
        return Array.isArray(t) ? this.addMultiple(t) : tf.call(this, t), this;
      },
      pinLocal: function (t, e) {
        return Array.isArray(t) ? this.addMultiple(t, e) : tf.call(this, t, e), this;
      },
      addLocalMultiple: function (t) {
        for (var e = 0, i = t.length; e < i; e++) tf.call(this, t[e]);
        return this;
      },
    },
    sf = Yd.prototype.remove,
    rf = Yd.prototype.clear,
    of = {
      remove: function (t, e) {
        return (
          Hd(t) !== this || (this.setParent(t, null), e || this.removeFromRenderLayer(t), sf.call(this, t, e)), this
        );
      },
      unpin: function (t, e) {
        return (
          Hd(t) !== this || (this.setParent(t, null), e || this.removeFromRenderLayer(t), sf.call(this, t, e)), this
        );
      },
      clear: function (t) {
        for (var e = this.children, i = 0, n = e.length; i < n; i++) {
          var s = e[i];
          this.setParent(s, null), t || this.removeFromRenderLayer(s);
        }
        return rf.call(this, t), this;
      },
    },
    af = {
      getLocalState: function (t) {
        return Jd(t);
      },
      resetChildState: function (t) {
        return (
          this.resetChildPositionState(t).resetChildVisibleState(t).resetChildAlphaState(t).resetChildActiveState(t),
          this
        );
      },
      resetChildrenState: function (t) {
        for (var e = 0, i = t.length; e < i; e++) this.resetChildState(t[e]);
        return this;
      },
      syncProperties: function () {
        return this.syncPosition().syncVisible().syncAlpha().syncActive().syncScrollFactor().syncMask(), this;
      },
    },
    hf = Phaser.Math.RotateAround,
    lf = {
      worldToLocal: function (t) {
        return (
          (t.x -= this.x), (t.y -= this.y), hf(t, 0, 0, -this.rotation), (t.x /= this.scaleX), (t.y /= this.scaleY), t
        );
      },
      localToWorld: function (t) {
        return (
          (t.x *= this.scaleX), (t.y *= this.scaleY), hf(t, 0, 0, this.rotation), (t.x += this.x), (t.y += this.y), t
        );
      },
    },
    uf = function (t, e) {
      return t === e ? 1 : t / e;
    },
    cf = {
      updateChildPosition: function (t) {
        t.isRexContainerLite && (t.syncChildrenEnable = !1);
        var e = Jd(t),
          i = e.parent;
        return (
          e.syncPosition && ((t.x = e.x), (t.y = e.y), i.localToWorld(t)),
          e.syncRotation && (t.rotation = e.rotation + i.rotation),
          e.syncScale && ((t.scaleX = e.scaleX * i.scaleX), (t.scaleY = e.scaleY * i.scaleY)),
          t.isRexContainerLite && ((t.syncChildrenEnable = !0), t.syncPosition()),
          this
        );
      },
      syncPosition: function () {
        return this.syncChildrenEnable && this.children.forEach(this.updateChildPosition, this), this;
      },
      resetChildPositionState: function (t) {
        var e = Jd(t),
          i = e.parent;
        return (
          (e.x = t.x),
          (e.y = t.y),
          i.worldToLocal(e),
          (e.scaleX = uf(t.scaleX, i.scaleX)),
          (e.scaleY = uf(t.scaleY, i.scaleY)),
          (e.rotation = t.rotation - i.rotation),
          this
        );
      },
      setChildPosition: function (t, e, i) {
        return (t.x = e), (t.y = i), this.resetChildPositionState(t), this;
      },
      setChildLocalPosition: function (t, e, i) {
        var n = Jd(t);
        return (n.x = e), (n.y = i), this.updateChildPosition(t), this;
      },
      resetLocalPositionState: function () {
        var t = Jd(this).parent;
        return t && t.resetChildPositionState(this), this;
      },
    },
    df = Phaser.Math.DegToRad,
    ff = {
      updateChildRotation: function (t) {
        var e = Jd(t),
          i = e.parent;
        return e.syncRotation && (t.rotation = i.rotation + e.rotation), this;
      },
      syncRotation: function () {
        return this.syncChildrenEnable && this.children.forEach(this.updateChildRotation, this), this;
      },
      resetChildRotationState: function (t) {
        var e = Jd(t),
          i = e.parent;
        return (e.rotation = t.rotation - i.rotation), this;
      },
      setChildRotation: function (t, e) {
        return (t.rotation = e), this.resetChildRotationState(t), this;
      },
      setChildAngle: function (t, e) {
        return (t.angle = e), this.resetChildRotationState(t), this;
      },
      setChildLocalRotation: function (t, e) {
        return (Jd(t).rotation = e), this.updateChildRotation(t), this;
      },
      setChildLocalAngle: function (t, e) {
        return (Jd(t).rotation = df(e)), this.updateChildRotation(t), this;
      },
      resetLocalRotationState: function () {
        var t = Jd(this).parent;
        return t && t.resetChildRotationState(this), this;
      },
    },
    pf = {
      updateChildScale: function (t) {
        var e = Jd(t),
          i = e.parent;
        return e.syncScale && ((t.scaleX = i.scaleX * e.scaleX), (t.scaleY = i.scaleY * e.scaleY)), this;
      },
      syncScale: function () {
        return this.syncChildrenEnable && this.children.forEach(this.updateChildScale, this), this;
      },
      resetChildScaleState: function (t) {
        var e = Jd(t),
          i = e.parent;
        return (e.scaleX = uf(t.scaleX, i.scaleX)), (e.scaleY = uf(t.scaleY, i.scaleY)), this;
      },
      setChildScale: function (t, e, i) {
        return void 0 === i && (i = e), (t.scaleX = e), (t.scaleY = i), this.resetChildScaleState(t), this;
      },
      setChildLocalScale: function (t, e, i) {
        void 0 === i && (i = e);
        var n = Jd(t);
        return (n.scaleX = e), (n.scaleY = i), this.updateChildScale(t), this;
      },
      setChildDisplaySize: function (t, e, i) {
        return t.setDisplaySize(e, i), this.resetChildScaleState(t), this;
      },
      resetLocalScaleState: function () {
        var t = Jd(this).parent;
        return t && t.resetChildScaleState(this), this;
      },
    },
    vf = {
      updateChildVisible: function (t) {
        var e = Jd(t),
          i = e.parent,
          n = !e.hasOwnProperty('maskVisible') || e.maskVisible;
        return (t.visible = i.visible && e.visible && n), this;
      },
      syncVisible: function () {
        return this.syncChildrenEnable && this.children.forEach(this.updateChildVisible, this), this;
      },
      resetChildVisibleState: function (t) {
        var e = Jd(t);
        return e.hasOwnProperty('maskVisible') && delete e.maskVisible, (e.visible = t.visible), this;
      },
      setChildVisible: function (t, e) {
        return this.setChildLocalVisible(t, e), this;
      },
      setChildLocalVisible: function (t, e) {
        return void 0 === e && (e = !0), (Jd(t).visible = e), this.updateChildVisible(t), this;
      },
      setChildMaskVisible: function (t, e) {
        return void 0 === e && (e = !0), (Jd(t).maskVisible = e), this.updateChildVisible(t), this;
      },
      resetLocalVisibleState: function () {
        var t = Jd(this).parent;
        return t && t.resetChildVisibleState(this), this;
      },
    },
    gf = {
      updateChildAlpha: function (t) {
        var e = Jd(t),
          i = e.parent;
        return e.syncAlpha && (t.alpha = i.alpha * e.alpha), this;
      },
      syncAlpha: function () {
        return this.syncChildrenEnable && this.children.forEach(this.updateChildAlpha, this), this;
      },
      resetChildAlphaState: function (t) {
        var e = Jd(t),
          i = e.parent;
        return (e.alpha = uf(t.alpha, i.alpha)), this;
      },
      setChildAlpha: function (t, e) {
        return (t.alpha = e), this.resetChildAlphaState(t), this;
      },
      setChildLocalAlpha: function (t, e) {
        return (Jd(t).alpha = e), this.updateChildAlpha(t), this;
      },
      resetLocalAlphaState: function () {
        var t = Jd(this).parent;
        return t && t.resetChildAlphaState(this), this;
      },
    },
    yf = {
      updateChildActive: function (t) {
        var e = Jd(t),
          i = e.parent;
        return (t.active = i.active && e.active), this;
      },
      syncActive: function () {
        return this.syncChildrenEnable && this.children.forEach(this.updateChildActive, this), this;
      },
      resetChildActiveState: function (t) {
        return (Jd(t).active = t.active), this;
      },
      setChildActive: function (t, e) {
        return (t.active = e), this.resetChildActiveState(t), this;
      },
      setChildLocalActive: function (t, e) {
        return void 0 === e && (e = !0), (Jd(t).active = e), this.updateChildActive(t), this;
      },
      resetLocalActiveState: function () {
        var t = Jd(this).parent;
        return t && t.resetChildActiveState(this), this;
      },
    },
    kf = {
      updateChildScrollFactor: function (t) {
        var e = Jd(t),
          i = e.parent;
        return e.syncScrollFactor && ((t.scrollFactorX = i.scrollFactorX), (t.scrollFactorY = i.scrollFactorY)), this;
      },
      syncScrollFactor: function () {
        return this.syncChildrenEnable && this.children.forEach(this.updateChildScrollFactor, this), this;
      },
    },
    mf = {
      updateChildMask: function (t) {
        return (
          null == this.mask ||
            ((this.mask.hasOwnProperty('geometryMask') ? this.mask.geometryMask : this.mask.bitmapMask) !== t &&
              (t.mask = this.mask)),
          this
        );
      },
      syncMask: function () {
        return this.syncChildrenEnable && this.children.forEach(this.updateChildMask, this), this;
      },
      setMask: function (t) {
        return (this.mask = t), this;
      },
      clearMask: function (t) {
        void 0 === t && (t = !1);
        var e = this;
        return (
          (this._mask = null),
          this.setChildMaskVisible(this),
          this.children.forEach(function (t) {
            t.clearMask && t.clearMask(!1), t.hasOwnProperty('isRexContainerLite') || e.setChildMaskVisible(t);
          }),
          t && this.mask && this.mask.destroy(),
          this
        );
      },
    },
    bf = {
      setDepth: function (t, e) {
        if (((this.depth = t), !e && this.children))
          for (var i = this.getAllChildren(), n = 0, s = i.length; n < s; n++) i[n].depth = t;
        return this;
      },
      swapDepth: function (t) {
        var e = this.depth,
          i = t.depth;
        return this.setDepth(i), t.setDepth(e), this;
      },
      incDepth: function (t) {
        if (((this.depth += t), this.children))
          for (var e = this.getAllChildren(), i = 0, n = e.length; i < n; i++) e[i].depth += t;
        return this;
      },
      bringToTop: function () {
        var t = this.displayList,
          e = this.getAllChildren([this]);
        so(e, !1);
        for (var i = 0, n = e.length; i < n; i++) {
          var s = e[i];
          t.exists(s) && t.bringToTop(s);
        }
        return this;
      },
      moveDepthBelow: function (t) {
        var e = this.displayList;
        if (t.displayList !== e) return this;
        var i = this.getAllChildren([this]);
        so(i, !1);
        for (var n = 0, s = i.length; n < s; n++) {
          var r = i[n];
          if (e.exists(r)) {
            e.moveBelow(t, r);
            break;
          }
        }
        return this;
      },
      moveDepthAbove: function (t) {
        var e = this.displayList;
        if (t.displayList !== e) return this;
        var i = this.getAllChildren([this]);
        so(i, !0);
        for (var n = 0, s = i.length; n < s; n++) {
          var r = i[n];
          if (e.exists(r)) {
            e.moveAbove(t, r);
            break;
          }
        }
        return this;
      },
      bringChildToTop: function (t) {
        var e = this.getAllChildren([this]);
        so(e, !0);
        var i = e[0];
        return i === t || i.displayList !== t.displayList || i.displayList.moveAbove(t, i), this;
      },
      sendChildToBack: function (t) {
        var e = this.getAllChildren([this]);
        so(e, !1);
        var i = e[0];
        return i === t || i.displayList !== t.displayList || i.displayList.moveBelow(t, i), this;
      },
    },
    xf = function t(e, i) {
      if (!i(e) && e.isRexContainerLite) for (var n = e.children, s = 0, r = n.length; s < r; s++) t(n[s], i);
    },
    Cf = function (t, e) {
      for (var i = [t]; i.length > 0; ) {
        var n = i.shift();
        !e(n) && n.isRexContainerLite && i.push.apply(i, x(n.children));
      }
    },
    wf = Phaser.Utils.Array,
    Sf = {
      getChildren: function (t) {
        if (t) for (var e = 0, i = this.children.length; e < i; e++) t.push(this.children[e]);
        else t = this.children;
        return t;
      },
      getAllChildren: function (t) {
        void 0 === t && (t = []);
        var e = this;
        return (
          Cf(e, function (i) {
            i !== e && t.push(i);
          }),
          t
        );
      },
      getAllVisibleChildren: function (t) {
        void 0 === t && (t = []);
        var e = this;
        return (
          Cf(e, function (i) {
            if (i !== e) return !i.visible || void t.push(i);
          }),
          t
        );
      },
      bfs: function (t, e) {
        return void 0 === e && (e = this), Cf(e, t), this;
      },
      dfs: function (t, e) {
        return void 0 === e && (e = this), xf(e, t), this;
      },
      contains: function (t) {
        var e = Hd(t);
        return !!e && (e === this || this.contains(e));
      },
      getByName: function (t, e) {
        if (e) {
          for (var i, n, s = [this]; s.length; )
            for (var r = 0, o = (i = s.shift()).children.length; r < o; r++) {
              if ((n = i.children[r]).name === t) return n;
              n.isRexContainerLite && s.push(n);
            }
          return null;
        }
        return wf.GetFirst(this.children, 'name', t);
      },
      getRandom: function (t, e) {
        return wf.GetRandom(this.children, t, e);
      },
      getFirst: function (t, e, i, n) {
        return wf.GetFirstElement(this.children, t, e, i, n);
      },
      getAll: function (t, e, i, n) {
        return wf.GetAll(this.children, t, e, i, n);
      },
      count: function (t, e, i, n) {
        return wf.CountAllMatching(this.children, t, e, i, n);
      },
      swap: function (t, e) {
        return wf.Swap(this.children, t, e), this;
      },
      setAll: function (t, e, i, n) {
        return wf.SetAll(this.children, t, e, i, n), this;
      },
    },
    Pf = function (t) {
      for (var e = [], i = 0, n = t.length; i < n; i++) {
        var s = t[i];
        s.hasOwnProperty('rexContainer') && e.push(s.rexContainer);
      }
      return e;
    },
    Tf = function (t, e, i) {
      if (i.parent) {
        var n = i.parent,
          s = i.self;
        switch (e) {
          case 'x':
          case 'y':
            n.updateChildPosition(s);
            break;
          case 'angle':
          case 'rotation':
            n.updateChildRotation(s);
            break;
          case 'scaleX':
          case 'scaleY':
          case 'displayWidth':
          case 'displayHeight':
            n.updateChildScale(s);
            break;
          case 'alpha':
            n.updateChildAlpha(s);
            break;
          default:
            n.updateChildPosition(s), n.updateChildRotation(s), n.updateChildScale(s), n.updateChildAlpha(s);
        }
      } else t.remove();
    },
    Of = {
      tweenChild: function (t) {
        var e = t.targets;
        Array.isArray(e) || (e = [e]);
        var i =
          this.scene ||
          (function (t) {
            for (var e = 0, i = t.length; e < i; e++) {
              var n = t[e].scene;
              if (n) return n;
            }
            return null;
          })(e);
        if (i) {
          t.targets = Pf(e);
          var n = i.tweens.add(t);
          return n.on('update', Tf), n;
        }
      },
      tweenSelf: function (t) {
        return (t.targets = [this]), this.tweenChild(t);
      },
      createTweenChildConfig: function (t) {
        var e = t.targets;
        e && (Array.isArray(e) || (e = [e]), (t.targets = Pf(e)));
        var i = t.onUpdate;
        return (
          (t.onUpdate = function (t, e) {
            i && i(t, e), Tf(t, void 0, e);
          }),
          t
        );
      },
      tween: function (t) {
        var e = this.scene;
        return t.targets || (t.targets = this), e.tweens.add(t);
      },
    },
    Mf = Phaser.GameObjects.Container,
    Ef = Phaser.GameObjects.Layer,
    _f = function (t) {
      return t instanceof Ef;
    },
    Rf = function (t) {
      var e = t.getAllChildren([t]);
      return (e = e.filter(function (t) {
        return !!t.displayList || !!t.parentContainer;
      }));
    },
    Lf = function (t) {
      var e = Rf(this);
      so(e), t.add(e);
    },
    Bf = function (t, e, i) {
      if (this.scene) {
        var n = Rf(this);
        so(n, e),
          t.remove(n),
          i &&
            n.forEach(function (t) {
              t.addToDisplayList();
            });
      }
    },
    Df = {
      addToContainer: function (t) {
        return (function (t) {
          return t instanceof Mf;
        })(t)
          ? ((this._setParentContainerFlag = !0), Lf.call(this, t), (this._setParentContainerFlag = !1), this)
          : this;
      },
      addToLayer: function (t) {
        return _f(t) ? (Lf.call(this, t), this) : this;
      },
      removeFromContainer: function () {
        return this.parentContainer
          ? ((this._setParentContainerFlag = !0),
            Bf.call(this, this.parentContainer, !0, !1),
            (this._setParentContainerFlag = !1),
            this)
          : this;
      },
      removeFromLayer: function (t) {
        return void 0 === t && (t = !0), _f(this.displayList) ? (Bf.call(this, this.displayList, !1, t), this) : this;
      },
      getParentContainer: function () {
        if (this.parentContainer) return this.parentContainer;
        for (var t = this.getParent(); t; ) {
          var e = t.parentContainer;
          if (e) return e;
          t = t.getParent();
        }
        return null;
      },
      addToParentContainer: function (t) {
        if (!t.displayList) return this;
        var e = this.getParentContainer();
        return e ? (t.isRexContainerLite ? t.addToContainer(e) : e.add(t), this) : this;
      },
    },
    If = {
      hasLayer: function () {
        return !!this.privateRenderLayer;
      },
      enableLayer: function () {
        if (this.hasLayer()) return this;
        var t = this.scene.add.layer();
        return this.moveDepthBelow(t), this.addToLayer(t), (this.privateRenderLayer = t), this;
      },
      getLayer: function () {
        return this.hasLayer() || this.enableLayer(), this.privateRenderLayer;
      },
      getRenderLayer: function () {
        if (this.hasLayer()) return this.privateRenderLayer;
        for (var t = this.getParent(); t; ) {
          var e = t.privateRenderLayer;
          if (e) return e;
          t = t.getParent();
        }
        return null;
      },
      addToRenderLayer: function (t) {
        if (!t.displayList) return this;
        var e = this.getRenderLayer();
        return e ? (t.isRexContainerLite ? t.addToLayer(e) : e.add(t), (Jd(t).layer = e), this) : this;
      },
      removeFromRenderLayer: function (t) {
        var e = Jd(t),
          i = e.layer;
        return i ? (t.isRexContainerLite ? t.removeFromLayer(!0) : i.remove(t), (e.layer = null), this) : this;
      },
    },
    jf = Phaser.Geom.Rectangle,
    Af = Phaser.Geom.Rectangle.Union,
    zf = Phaser.GameObjects.GameObject,
    Ff = function (t) {
      return t instanceof zf;
    },
    Vf = Phaser.Utils.Objects.GetValue,
    Wf = Phaser.Textures.DynamicTexture,
    Yf = Phaser.Utils.String.UUID,
    Xf = function (t) {
      if (t) {
        var e,
          i,
          n = t.gameObjects,
          s = t.renderTexture,
          r = Vf(t, 'x', void 0),
          o = Vf(t, 'y', void 0),
          a = Vf(t, 'width', void 0),
          h = Vf(t, 'height', void 0),
          l = Vf(t, 'originX', 0),
          u = Vf(t, 'originY', 0),
          c = Vf(t, 'padding', 0);
        if (void 0 === a || void 0 === h || void 0 === r || void 0 === o) {
          var d = (function (t, e) {
            var i;
            void 0 === e ? (e = new jf()) : !0 === e && (void 0 === Gd && (Gd = new jf()), (e = Gd)),
              e.setTo(0, 0, 0, 0);
            for (var n = !0, s = 0, r = t.length; s < r; s++)
              if ((i = t[s]).getBounds) {
                var o = Fr(i, !0);
                n ? (e.setTo(o.x, o.y, o.width, o.height), (n = !1)) : Af(o, e, e);
              }
            return e;
          })(n, !0);
          void 0 !== r && void 0 !== o
            ? ((a = 2 * Math.max(r - d.left, d.right - r)),
              (h = 2 * Math.max(o - d.top, d.bottom - o)),
              (l = 0.5),
              (u = 0.5))
            : ((r = d.x), (o = d.y), (a = d.width), (h = d.height), (l = 0), (u = 0)),
            (e = d.x),
            (i = d.y);
        } else (e = r + (0 - l) * a), (i = o + (0 - u) * h);
        (e -= c), (i -= c), (a += 2 * c), (h += 2 * c);
        var f = n[0].scene;
        p && !s && (s = new Wf(f.sys.textures, Yf(), a, h)),
          s || (s = f.add.renderTexture(0, 0, a, h)),
          s.setPosition && s.setPosition(r, o),
          (s.width === a && s.height === h) || s.setSize(a, h),
          s.setOrigin && s.setOrigin(l, u),
          s.camera.setScroll(e, i),
          (n = so(Qe(n))),
          s.draw(n);
        var p = t.saveTexture;
        if (p)
          if (Ff(s)) s.saveTexture(p);
          else {
            var v = s,
              g = v.manager;
            g.exists(v.key)
              ? g.renameTexture(v.key, key)
              : ((v.key = key), (g.list[key] = v), g.emit('addtexture', key, v), g.emit('addtexture-'.concat(key), v));
          }
        return s;
      }
    },
    Gf = {
      snapshot: function (t) {
        var e = this.scaleX,
          i = this.scaleY,
          n = 1 === e && 1 === i;
        n || this.setScale(1),
          void 0 === t && (t = {}),
          (t.gameObjects = this.getAllVisibleChildren()),
          (t.x = this.x),
          (t.y = this.y),
          (t.originX = this.originX),
          (t.originY = this.originY);
        var s = Xf(t),
          r = !!s.scene;
        return n || (this.setScale(e, i), r && s.setScale(e, i)), r ? s : this;
      },
    },
    Hf = Phaser.Utils.Objects.GetValue,
    Uf = Phaser.Math.RotateAround,
    Nf = {
      changeOrigin: function (t, e) {
        (this.syncChildrenEnable = !1),
          (function (t, e, i) {
            void 0 === i && (i = e);
            var n = { x: (e - t.originX) * t.displayWidth, y: (i - t.originY) * t.displayHeight };
            Uf(n, 0, 0, t.rotation), (t.originX = e), (t.originY = i), (t.x = t.x + n.x), (t.y = t.y + n.y);
          })(this, t, e),
          (this.syncChildrenEnable = !0);
        for (var i = this.getAllChildren(), n = 0, s = i.length; n < s; n++) this.resetChildPositionState(i[n]);
        return this;
      },
      drawBounds: function (t, e) {
        var i = Hf(e, 'drawContainer', !0),
          n = Hf(e, 'children');
        return (
          void 0 === n && (n = this.getAllVisibleChildren([this])),
          i ||
            (n = n.filter(function (t) {
              return !t.isRexContainerLite;
            })),
          Kr(n, t, e),
          this
        );
      },
    };
  Object.assign(Nf, qd, nf, of, af, lf, cf, ff, pf, vf, gf, yf, kf, mf, bf, Sf, Of, Df, If, Gf);
  var Kf = (function (t) {
    l(i, t);
    var e = p(i);
    function i(t, n, s, o, a, h) {
      var l;
      return (
        r(this, i),
        Array.isArray(o) && ((h = o), (o = void 0), (a = void 0)),
        ((l = e.call(this, t, n, s, o, a)).type = 'rexContainerLite'),
        (l.isRexContainerLite = !0),
        (l.syncChildrenEnable = !0),
        (l._active = !0),
        (l._mask = null),
        (l._scrollFactorX = 1),
        (l._scrollFactorY = 1),
        (l.privateRenderLayer = void 0),
        h && l.add(h),
        l
      );
    }
    return (
      a(
        i,
        [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                ((this.syncChildrenEnable = !1),
                g(u(i.prototype), 'destroy', this).call(this, t),
                this.privateRenderLayer &&
                  ((this.privateRenderLayer.list.length = 0), this.privateRenderLayer.destroy()));
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return this.setSize(t, e), this;
            },
          },
          {
            key: 'x',
            get: function () {
              return this._x;
            },
            set: function (t) {
              this._x !== t && ((this._x = t), this.syncPosition());
            },
          },
          {
            key: 'y',
            get: function () {
              return this._y;
            },
            set: function (t) {
              this._y !== t && ((this._y = t), this.syncPosition());
            },
          },
          {
            key: 'rotation',
            get: function () {
              return g(u(i.prototype), 'rotation', this);
            },
            set: function (t) {
              this.rotation !== t && (k(u(i.prototype), 'rotation', t, this, !0), this.syncPosition());
            },
          },
          {
            key: 'scaleX',
            get: function () {
              return g(u(i.prototype), 'scaleX', this);
            },
            set: function (t) {
              this.scaleX !== t && (k(u(i.prototype), 'scaleX', t, this, !0), this.syncPosition());
            },
          },
          {
            key: 'scaleY',
            get: function () {
              return g(u(i.prototype), 'scaleY', this);
            },
            set: function (t) {
              this.scaleY !== t && (k(u(i.prototype), 'scaleY', t, this, !0), this.syncPosition());
            },
          },
          {
            key: 'scale',
            get: function () {
              return g(u(i.prototype), 'scale', this);
            },
            set: function (t) {
              this.scale !== t && (k(u(i.prototype), 'scale', t, this, !0), this.syncPosition());
            },
          },
          {
            key: 'visible',
            get: function () {
              return g(u(i.prototype), 'visible', this);
            },
            set: function (t) {
              g(u(i.prototype), 'visible', this) !== t &&
                (k(u(i.prototype), 'visible', t, this, !0), this.syncVisible());
            },
          },
          {
            key: 'alpha',
            get: function () {
              return g(u(i.prototype), 'alpha', this);
            },
            set: function (t) {
              g(u(i.prototype), 'alpha', this) !== t && (k(u(i.prototype), 'alpha', t, this, !0), this.syncAlpha());
            },
          },
          {
            key: 'active',
            get: function () {
              return this._active;
            },
            set: function (t) {
              this._active !== t && ((this._active = t), this.syncActive());
            },
          },
          {
            key: 'mask',
            get: function () {
              return this._mask;
            },
            set: function (t) {
              this._mask !== t && ((this._mask = t), this.syncMask());
            },
          },
          {
            key: 'scrollFactorX',
            get: function () {
              return this._scrollFactorX;
            },
            set: function (t) {
              this._scrollFactorX !== t && ((this._scrollFactorX = t), this.syncScrollFactor());
            },
          },
          {
            key: 'scrollFactorY',
            get: function () {
              return this._scrollFactorY;
            },
            set: function (t) {
              this._scrollFactorY !== t && ((this._scrollFactorY = t), this.syncScrollFactor());
            },
          },
          {
            key: 'list',
            get: function () {
              return this.children;
            },
          },
          {
            key: 'parentContainer',
            get: function () {
              return this._parentContainer;
            },
            set: function (t) {
              this._parentContainer || t
                ? this.setParentContainerFlag
                  ? (this._parentContainer = t)
                  : this._parentContainer && !t
                  ? (this.removeFromContainer(), (this._parentContainer = t))
                  : t
                  ? ((this._parentContainer = t), this.addToContainer(t))
                  : (this._parentContainer = t)
                : (this._parentContainer = t);
            },
          },
          {
            key: 'setParentContainerFlag',
            get: function () {
              if (this._setParentContainerFlag) return !0;
              var t = Hd(this);
              return !!t && t.setParentContainerFlag;
            },
          },
        ],
        [
          {
            key: 'GetParent',
            value: function (t) {
              return Hd(t);
            },
          },
        ]
      ),
      i
    );
  })(Yd);
  Object.assign(Kf.prototype, Nf);
  var Jf = function (t) {
    return t.hasOwnProperty('rexSizer') || (t.rexSizer = {}), t.rexSizer;
  };
  var qf = Phaser.Display.Align,
    Zf = {
      center: qf.CENTER,
      left: qf.LEFT_CENTER,
      right: qf.RIGHT_CENTER,
      top: qf.TOP_CENTER,
      bottom: qf.BOTTOM_CENTER,
      'left-top': qf.TOP_LEFT,
      'top-left': qf.TOP_LEFT,
      'left-center': qf.LEFT_CENTER,
      'center-left': qf.LEFT_CENTER,
      'left-bottom': qf.BOTTOM_LEFT,
      'bottom-left': qf.BOTTOM_LEFT,
      'center-top': qf.TOP_CENTER,
      'top-center': qf.TOP_CENTER,
      'center-center': qf.CENTER,
      'center-bottom': qf.BOTTOM_CENTER,
      'bottom-center': qf.BOTTOM_CENTER,
      'right-top': qf.TOP_RIGHT,
      'top-right': qf.TOP_RIGHT,
      'right-center': qf.RIGHT_CENTER,
      'center-right': qf.RIGHT_CENTER,
      'right-bottom': qf.BOTTOM_RIGHT,
      'bottom-right': qf.BOTTOM_RIGHT,
    },
    $f = new Phaser.GameObjects.Zone({ sys: { queueDepthSort: j, events: { once: j } } }, 0, 0, 1, 1);
  $f.setOrigin(0);
  var Qf = 0,
    tp = 1,
    ep = 2,
    ip = 4,
    np = 6,
    sp = 8,
    rp = 10,
    op = 12,
    ap = function (t) {
      var e = Ir(t);
      return t.y + e - e * t.originY;
    },
    hp = function (t) {
      var e = Dr(t);
      return t.x - e * t.originX + 0.5 * e;
    },
    lp = function (t, e) {
      var i = Ir(t);
      return (t.y = e - i + i * t.originY), t;
    },
    up = function (t, e) {
      var i = Dr(t),
        n = i * t.originX;
      return (t.x = e + n - 0.5 * i), t;
    },
    cp = function (t) {
      var e = Dr(t);
      return t.x - e * t.originX;
    },
    dp = function (t, e) {
      var i = Dr(t);
      return (t.x = e + i * t.originX), t;
    },
    fp = function (t) {
      var e = Dr(t);
      return t.x + e - e * t.originX;
    },
    pp = function (t, e) {
      var i = Dr(t);
      return (t.x = e - i + i * t.originX), t;
    },
    vp = function (t, e) {
      var i = Ir(t),
        n = i * t.originY;
      return (t.y = e + n - 0.5 * i), t;
    },
    gp = function (t) {
      var e = Ir(t);
      return t.y - e * t.originY + 0.5 * e;
    },
    yp = function (t) {
      var e = Ir(t);
      return t.y - e * t.originY;
    },
    kp = function (t, e) {
      var i = Ir(t);
      return (t.y = e + i * t.originY), t;
    },
    mp = [];
  (mp[11] = function (t, e, i, n) {
    return void 0 === i && (i = 0), void 0 === n && (n = 0), up(t, hp(e) + i), lp(t, ap(e) + n), t;
  }),
    (mp[rp] = function (t, e, i, n) {
      return void 0 === i && (i = 0), void 0 === n && (n = 0), dp(t, cp(e) - i), lp(t, ap(e) + n), t;
    }),
    (mp[op] = function (t, e, i, n) {
      return void 0 === i && (i = 0), void 0 === n && (n = 0), pp(t, fp(e) + i), lp(t, ap(e) + n), t;
    }),
    (mp[np] = function (t, e, i, n) {
      return (
        void 0 === i && (i = 0),
        void 0 === n && (n = 0),
        (function (t, e, i) {
          up(t, e), vp(t, i);
        })(t, hp(e) + i, gp(e) + n),
        t
      );
    }),
    (mp[ip] = function (t, e, i, n) {
      return void 0 === i && (i = 0), void 0 === n && (n = 0), dp(t, cp(e) - i), vp(t, gp(e) + n), t;
    }),
    (mp[sp] = function (t, e, i, n) {
      return void 0 === i && (i = 0), void 0 === n && (n = 0), pp(t, fp(e) + i), vp(t, gp(e) + n), t;
    }),
    (mp[tp] = function (t, e, i, n) {
      return void 0 === i && (i = 0), void 0 === n && (n = 0), up(t, hp(e) + i), kp(t, yp(e) - n), t;
    }),
    (mp[Qf] = function (t, e, i, n) {
      return void 0 === i && (i = 0), void 0 === n && (n = 0), dp(t, cp(e) - i), kp(t, yp(e) - n), t;
    }),
    (mp[ep] = function (t, e, i, n) {
      return void 0 === i && (i = 0), void 0 === n && (n = 0), pp(t, fp(e) + i), kp(t, yp(e) - n), t;
    });
  var bp = function (t, e, i, n, s) {
      return mp[i](t, e, n, s);
    },
    xp = function (t, e, i, n, s, r) {
      $f.setPosition(e, i).setSize(n, s), bp(t, $f, r);
    },
    Cp = Phaser.Utils.Objects.GetValue,
    wp = Phaser.GameObjects.Group,
    Sp = function (t, e, i) {
      return t.add.text(0, 0, '');
    },
    Pp = void 0,
    Tp = Phaser.Utils.Objects.GetValue,
    Op = function (t, e) {
      return (
        void 0 === t && (t = 0),
        void 0 === e && (e = {}),
        'number' == typeof t
          ? ((e.left = t), (e.right = t), (e.top = t), (e.bottom = t))
          : ((e.left = Tp(t, 'left', 0)),
            (e.right = Tp(t, 'right', 0)),
            (e.top = Tp(t, 'top', 0)),
            (e.bottom = Tp(t, 'bottom', 0))),
        e
      );
    },
    Mp = Kf.prototype.add,
    Ep = function (t) {
      return (
        Mp.call(this, t), this.sizerEventsEnable && (t.emit('sizer.add', t, this), this.emit('add', t, this)), this
      );
    },
    _p = {
      addBackground: function (t, e, i) {
        return (
          void 0 === this.backgroundChildren && (this.backgroundChildren = []),
          'string' == typeof e && ((i = e), (e = void 0)),
          void 0 === e && (e = 0),
          Ep.call(this, t),
          this.backgroundChildren.push(t),
          (this.getSizerConfig(t).padding = Op(e)),
          void 0 !== i && this.addChildrenMap(i, t),
          this
        );
      },
      isBackground: function (t) {
        return void 0 !== this.backgroundChildren && -1 !== this.backgroundChildren.indexOf(t);
      },
    },
    Rp = function t(e, i) {
      var n = null;
      if (void 0 === i)
        e.hasOwnProperty('rexContainer') && ((n = e.rexContainer.parent) ? n.isRexSizer || (n = t(n)) : (n = null));
      else for (n = t(e); n && n.name !== i; ) n = t(n);
      return n;
    },
    Lp = {
      getParentSizer: function (t, e) {
        return 'string' == typeof t && ((e = t), (t = void 0)), void 0 === t && (t = this), Rp(t, e);
      },
      getTopmostSizer: function (t) {
        return (
          void 0 === t && (t = this),
          (function (t) {
            for (var e = Rp(t); e; ) (t = e), (e = Rp(e));
            return t;
          })(t)
        );
      },
      hasParentSizer: function (t, e) {
        void 0 === e && (e = this);
        for (var i = Rp(e); i; ) {
          if (i === t) return !0;
          i = Rp(i);
        }
        return !1;
      },
      hasChild: function (t, e) {
        return void 0 === e && (e = this), this.hasParentSizer(e, t);
      },
    },
    Bp = Phaser.Utils.Array.Remove,
    Dp = Kf.prototype.remove,
    Ip = Lp.getParentSizer,
    jp = function (t, e) {
      for (var i = Ip(t); i; ) i.removeChildCallback && i.removeChildCallback(t, e), (i = Ip(i));
      return (
        this.isBackground(t) && Bp(this.backgroundChildren, t),
        Dp.call(this, t, e),
        !e && this.sizerEventsEnable && (t.emit('sizer.remove', t, this), this.emit('remove', t, this)),
        this
      );
    },
    Ap = Phaser.Utils.Array.Remove,
    zp = Lp.getParentSizer,
    Fp = {
      removeFromParentSizer: function () {
        var t = zp(gameObject);
        return t && t.remove(this), this;
      },
      removeBackground: function (t, e) {
        return (
          void 0 === this.backgroundChildren ||
            this.getParentSizer(t) !== this ||
            (Ap(this.backgroundChildren, t), jp.call(this, t, e)),
          this
        );
      },
      removeAllBackgrounds: function (t) {
        if (void 0 === this.backgroundChildren) return this;
        for (var e = this.backgroundChildren.length - 1; e >= 0; e--) this.remove(this.backgroundChildren[e], t);
        return this;
      },
    },
    Vp = function (t, e) {
      if ('string' == typeof t) this.childrenMap[t] = e;
      else {
        var i = t;
        for (t in i) this.childrenMap[t] = i[t];
      }
      return this;
    },
    Wp = /(\S+)\[(\d+)\]/i,
    Yp = {
      getInnerPadding: function (t) {
        return Rn(this.space, t);
      },
      setInnerPadding: function (t, e) {
        return Ln(this.space, t, e), this;
      },
      getOuterPadding: function (t) {
        return Rn(this.getSizerConfig(this).padding, t);
      },
      setOuterPadding: function (t, e) {
        return Ln(this.getSizerConfig(this).padding, t, e), this;
      },
      getChildOuterPadding: function (t, e) {
        return 'string' == typeof t && (t = this.getElement(t)), Rn(this.getSizerConfig(t).padding, e);
      },
      setChildOuterPadding: function (t, e, i) {
        return 'string' == typeof t && (t = this.getElement(t)), Ln(this.getSizerConfig(t).padding, e, i), this;
      },
    },
    Xp = function (t) {
      var e = this.childrenWidth,
        i = void 0 !== this.minWidth ? this.minWidth : 0;
      return (
        void 0 === t
          ? ((t = Math.max(i, e)),
            this.layoutWarnEnable &&
              i > 0 &&
              e > i &&
              console.warn(
                'Layout width warn: '
                  .concat(this.constructor.name, "'s minWidth (")
                  .concat(i, ') < childrenWidth (')
                  .concat(e, ')')
              ))
          : this.layoutWarnEnable &&
            (i > t || e > t) &&
            console.warn(
              'Layout width warn: '
                .concat(this.constructor.name, "'s minWidth (")
                .concat(i, ') or childrenWidth (')
                .concat(e, ' > targetWidth ')
                .concat(t, ')')
            ),
        t
      );
    },
    Gp = function (t) {
      var e = this.childrenHeight,
        i = void 0 !== this.minHeight ? this.minHeight : 0;
      return (
        void 0 === t
          ? ((t = Math.max(i, e)),
            this.layoutWarnEnable &&
              i > 0 &&
              e > i &&
              console.warn(
                'Layout height warn: '
                  .concat(this.constructor.name, "'s minHeight (")
                  .concat(i, ') < childrenHeight (')
                  .concat(e, ')')
              ))
          : this.layoutWarnEnable &&
            (i > t || e > t) &&
            console.warn(
              'Layout height warn: '
                .concat(this.constructor.name, "'s minHeight (")
                .concat(i, ') or childrenHeight (')
                .concat(e, ') > targetHeight (')
                .concat(t, ')')
            ),
        t
      );
    },
    Hp = {
      getShownChildren: function (t) {
        void 0 === t && (t = []);
        for (var e, i = this.children, n = 0, s = i.length; n < s; n++)
          ((e = i[n]).rexSizer && e.rexSizer.hidden) || t.push(e);
        return t;
      },
      getAllShownChildren: function (t) {
        void 0 === t && (t = []);
        for (var e = [this]; e.length > 0; ) {
          var i = e.shift();
          (i.rexSizer && i.rexSizer.hidden) ||
            (i !== this && t.push(i), i.isRexContainerLite && e.push.apply(e, x(i.children)));
        }
        return t;
      },
    },
    Up = function () {
      (this._childrenWidth = void 0), (this._childrenHeight = void 0);
      for (var t, e = this.getChildrenSizers(), i = 0, n = e.length; i < n; i++)
        (t = e[i]).ignoreLayout || t.preLayout();
    },
    Np = function (t) {
      var e, i;
      for (var n in this.sizerChildren)
        !(e = this.sizerChildren[n]) ||
          (e.isRexSizer && e.ignoreLayout) ||
          !e.runWidthWrap ||
          ((i = this.getExpandedChildWidth(e, t)), e.isRexSizer && (i = e.resolveWidth(i)), e.runWidthWrap(i));
      return this;
    },
    Kp = function (t, e, i) {
      !t ||
        (void 0 === e && void 0 === i) ||
        (qp(t)
          ? (void 0 === e && (e = t.width), void 0 === i && (i = t.height), t.resize ? t.resize(e, i) : t.setSize(e, i))
          : (void 0 !== e && (t.displayWidth = e), void 0 !== i && (t.displayHeight = i)));
    },
    Jp = [
      Phaser.GameObjects.Image,
      Phaser.GameObjects.Sprite,
      Phaser.GameObjects.Mesh,
      Phaser.GameObjects.Shader,
      Phaser.GameObjects.Video,
    ],
    qp = function (t) {
      if (t.resize) return !0;
      if (!t.setSize) return !1;
      for (var e = 0, i = Jp.length; e < i; e++) {
        var n = Jp[e];
        if (n && t instanceof n) return !1;
      }
      return !0;
    },
    Zp = function (t, e, i, n) {
      Kp(i, t, e);
    },
    $p = Phaser.Utils.Objects.GetValue,
    Qp = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), ((s = e.call(this, t, { eventEmitter: !1 })).viewport = void 0), s.resetFromJSON(n), s;
      }
      return (
        a(i, [
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.autoAnchor(!1),
                (this.viewport = void 0),
                (this.onUpdateViewportCallback = void 0),
                (this.onUpdateViewportCallbackScope = void 0),
                (this.onResizeCallback = void 0),
                (this.onResizeCallbackScope = void 0),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'resetFromJSON',
            value: function (t) {
              var e, i, n, s, r, o, a, h;
              void 0 === t && (t = {}),
                void 0 !== t.x
                  ? ((e = null), (i = t.x))
                  : void 0 !== t.left
                  ? ((e = 0), (i = t.left))
                  : void 0 !== t.right
                  ? ((e = 1), (i = t.right))
                  : void 0 !== t.centerX && ((e = 0.5), (i = t.centerX)),
                void 0 !== t.y
                  ? ((n = null), (s = t.y))
                  : void 0 !== t.top
                  ? ((n = 0), (s = t.top))
                  : void 0 !== t.bottom
                  ? ((n = 1), (s = t.bottom))
                  : void 0 !== t.centerY && ((n = 0.5), (s = t.centerY)),
                void 0 !== i &&
                  ((i = i.replace('left', '0%').replace('right', '100%').replace('center', '50%').split('%')),
                  (r = parseFloat(i[0]) / 100),
                  (o = '' === i[1] ? 0 : parseFloat(i[1]))),
                void 0 !== s &&
                  ((s = s.replace('top', '0%').replace('bottom', '100%').replace('center', '50%').split('%')),
                  (a = parseFloat(s[0]) / 100),
                  (h = '' === s[1] ? 0 : parseFloat(s[1])));
              var l,
                u,
                c = t.width;
              void 0 !== c &&
                ((c = c.split('%')), (l = parseFloat(c[0]) / 100), (u = '' === c[1] ? 0 : parseFloat(c[1])));
              var d,
                f,
                p = t.height;
              void 0 !== p &&
                ((p = p.split('%')), (d = parseFloat(p[0]) / 100), (f = '' === p[1] ? 0 : parseFloat(p[1]))),
                this.setAlign(e, n),
                this.setPercentage(r, a),
                this.setOffset(o, h),
                this.setSizePercentage(l, d),
                this.setSizePadding(u, f);
              var v = $p(t, 'onResizeCallback', Zp),
                g = $p(t, 'onResizeCallbackScope');
              this.setResizeCallback(v, g);
              var y = $p(t, 'onUpdateViewportCallback'),
                k = $p(t, 'onUpdateViewportCallbackScope');
              return this.setUpdateViewportCallback(y, k), this.autoAnchor(t.enable), this;
            },
          },
          {
            key: 'autoAnchor',
            value: function (t) {
              return (
                void 0 === t && (t = !0),
                (t = !!t),
                this.autoAnchorEnable === t ||
                  (t
                    ? (this.scene.sys.scale.on('resize', this.anchor, this), this.anchor())
                    : this.scene.sys.scale.off('resize', this.anchor, this),
                  (this.autoAnchorEnable = t)),
                this
              );
            },
          },
          {
            key: 'setAlign',
            value: function (t, e) {
              return (this.alignX = t), (this.alignY = e), this;
            },
          },
          {
            key: 'setPercentage',
            value: function (t, e) {
              return (this.percentageX = t), (this.percentageY = e), this;
            },
          },
          {
            key: 'setOffset',
            value: function (t, e) {
              return (this.offsetX = t), (this.offsetY = e), this;
            },
          },
          {
            key: 'setSizePercentage',
            value: function (t, e) {
              return (this.percentageWidth = t), (this.percentageHeight = e), this;
            },
          },
          {
            key: 'setSizePadding',
            value: function (t, e) {
              return (this.paddingWidth = t), (this.paddingHeight = e), this;
            },
          },
          {
            key: 'setResizeCallback',
            value: function (t, e) {
              return (this.onResizeCallback = t), (this.onResizeCallbackScope = e), this;
            },
          },
          {
            key: 'setUpdateViewportCallback',
            value: function (t, e) {
              return (this.onUpdateViewportCallback = t), (this.onUpdateViewportCallbackScope = e), this;
            },
          },
          {
            key: 'anchor',
            value: function () {
              return this.updateViewport(), this.updateSize(), this.updatePosition(), this;
            },
          },
          {
            key: 'updateSize',
            value: function () {
              var t = this.onResizeCallback,
                e = this.onResizeCallbackScope,
                i = this.anchorWidth,
                n = this.anchorHeight;
              if ((void 0 !== i || void 0 !== n) && t) {
                var s = this.parent;
                void 0 === i && (i = s.width),
                  void 0 === n && (n = s.height),
                  e ? t.call(e, i, n, s, this) : t(i, n, s, this);
              }
            },
          },
          {
            key: 'updatePosition',
            value: function () {
              var t = this.parent;
              return (
                null === this.alignX
                  ? (t.x = this.anchorX)
                  : void 0 !== this.alignX && (t.x = this.anchorX + t.displayWidth * (t.originX - this.alignX)),
                null === this.alignY
                  ? (t.y = this.anchorY)
                  : void 0 !== this.alignY && (t.y = this.anchorY + t.displayHeight * (t.originY - this.alignY)),
                this
              );
            },
          },
          {
            key: 'anchorX',
            get: function () {
              return this.viewport.x + this.viewport.width * this.percentageX + this.offsetX;
            },
          },
          {
            key: 'anchorY',
            get: function () {
              return this.viewport.y + this.viewport.height * this.percentageY + this.offsetY;
            },
          },
          {
            key: 'anchorWidth',
            get: function () {
              if (void 0 !== this.percentageWidth)
                return this.viewport.width * this.percentageWidth + this.paddingWidth;
            },
          },
          {
            key: 'anchorHeight',
            get: function () {
              if (void 0 !== this.percentageHeight)
                return this.viewport.height * this.percentageHeight + this.paddingHeight;
            },
          },
          {
            key: 'updateViewport',
            value: function () {
              var t = this.parent.scene.cameras.main;
              this.viewport = to(this.scene, t, this.viewport);
              var e = this.viewport,
                i = this.onUpdateViewportCallback,
                n = this.onUpdateViewportCallbackScope;
              i && (n ? i.call(n, e, this.parent, this) : i(e, this.parent, this));
            },
          },
        ]),
        i
      );
    })(uo),
    tv = Phaser.Utils.Objects.GetValue,
    ev = Phaser.Utils.Objects.GetAdvancedValue,
    iv = Phaser.Math.Linear,
    nv = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i), ((s = e.call(this, t, n)).scaleStart = {}), (s.scaleEnd = {}), s.resetFromJSON(n), s.boot(), s
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setMode(tv(t, 'mode', 0)),
                this.setScaleRange(ev(t, 'start', void 0), ev(t, 'end', 0)),
                this
              );
            },
          },
          {
            key: 'setMode',
            value: function (t) {
              return 'string' == typeof t && (t = sv[t]), (this.mode = t), this;
            },
          },
          {
            key: 'setScaleRange',
            value: function (t, e) {
              return (
                'number' == typeof t
                  ? ((this.startX = t), (this.startY = t))
                  : ((this.startX = ev(t, 'x', this.parent.scaleX)), (this.startY = ev(t, 'y', this.parent.scaleY))),
                'number' == typeof e
                  ? ((this.endX = e), (this.endY = e))
                  : ((this.endX = ev(e, 'x', void 0)), (this.endY = ev(e, 'y', void 0))),
                (this.hasScaleX = void 0 !== this.startX && void 0 !== this.endX),
                (this.hasScaleY = void 0 !== this.startY && void 0 !== this.endY),
                this
              );
            },
          },
          {
            key: 'start',
            value: function () {
              if (this.timer.isRunning) return this;
              var t = this.parent;
              this.hasScaleX && (t.scaleX = this.startX), this.hasScaleY && (t.scaleY = this.startY);
              var e = this.repeat;
              return (
                2 === this.mode && -1 !== e && (e = 2 * (e + 1) - 1),
                this.timer.setDelay(this.delay).setDuration(this.duration).setRepeat(e),
                g(u(i.prototype), 'start', this).call(this),
                this
              );
            },
          },
          {
            key: 'updateGameObject',
            value: function (t, e) {
              var i = e.t;
              e.isOddIteration && (i = 1 - i),
                (i = this.easeFn(i)),
                this.hasScaleX && (t.scaleX = iv(this.startX, this.endX, i)),
                this.hasScaleY && (t.scaleY = iv(this.startY, this.endY, i));
            },
          },
          {
            key: 'complete',
            value: function () {
              return g(u(i.prototype), 'complete', this).call(this), 1 === this.mode && this.parent.destroy(), this;
            },
          },
        ]),
        i
      );
    })(_o),
    sv = { stop: 0, destroy: 1, yoyo: 2 },
    rv = function (t, e, i, n, s) {
      var r, o;
      switch ((void 0 === n && (n = 'Cubic'), i)) {
        case 0:
        case 'x':
          (r = { x: 0 }), (o = { x: t.scaleX });
          break;
        case 1:
        case 'y':
          (r = { y: 0 }), (o = { y: t.scaleY });
          break;
        default:
          (r = 0), (o = t.scale);
      }
      var a = { mode: 0, start: r, end: o, duration: e, ease: n };
      return void 0 === s ? (s = new nv(t, a)) : s.resetFromJSON(a), s.restart(), s;
    },
    ov = function (t, e, i, n, s, r) {
      void 0 === n && (n = 'Linear'), s instanceof nv && ((r = s), (s = void 0)), void 0 === s && (s = !0);
      var o = {};
      switch (((o.mode = s ? 1 : 0), i)) {
        case 0:
        case 'x':
          o.end = { x: 0 };
          break;
        case 1:
        case 'y':
          o.end = { y: 0 };
          break;
        default:
          o.end = 0;
      }
      return (o.duration = e), (o.ease = n), void 0 === r ? (r = new nv(t, o)) : r.resetFromJSON(o), r.restart(), r;
    },
    av = Phaser.Utils.Objects.IsPlainObject,
    hv = function (t, e) {
      (e.completeEventName = void 0),
        e.on('complete', function () {
          e.completeEventName && (t.emit(e.completeEventName, t), (e.completeEventName = void 0));
        }),
        e.on('update', function () {
          var e = Lp.getParentSizer(t);
          e && e.resetChildPositionState(t);
        });
    },
    lv = {
      popUp: function (t, e, i) {
        if (av(t)) {
          var n = t;
          (t = n.duration), (e = n.orientation), (i = n.ease);
        }
        var s = void 0 === this._scaleBehavior;
        return (
          (this._scaleBehavior = rv(this, t, e, i, this._scaleBehavior)),
          s && hv(this, this._scaleBehavior),
          (this._scaleBehavior.completeEventName = 'popup.complete'),
          this
        );
      },
      popUpPromise: function (t, e, i) {
        return this.popUp(t, e, i), Eh(this._scaleBehavior);
      },
      scaleDownDestroy: function (t, e, i, n) {
        if (av(t)) {
          var s = t;
          (t = s.duration), (e = s.orientation), (i = s.ease), (n = s.destroy);
        }
        var r = void 0 === this._scaleBehavior;
        return (
          (this._scaleBehavior = ov(this, t, e, i, n, this._scaleBehavior)),
          r && hv(this, this._scaleBehavior),
          (this._scaleBehavior.completeEventName = 'scaledown.complete'),
          this
        );
      },
      scaleDownDestroyPromise: function (t, e, i, n) {
        return this.scaleDownDestroy(t, e, i, n), Eh(this._scaleBehavior);
      },
      scaleDown: function (t, e, i) {
        return this.scaleDownDestroy(t, e, i, !1), this;
      },
      scaleDownPromise: function (t, e, i) {
        return this.scaleDown(t, e, i), Eh(this._scaleBehavior);
      },
      scaleYoyo: function (t, e, i, n, s) {
        if (av(t)) {
          var r = t;
          (t = r.duration), (e = r.peakValue), (i = r.repeat), (n = r.orientation), (s = r.ease);
        }
        var o = void 0 === this._scaleBehavior;
        return (
          (this._scaleBehavior = (function (t, e, i, n, s, r, o) {
            var a, h;
            switch ((void 0 === i && (i = 1.2), void 0 === n && (n = 0), void 0 === r && (r = 'Cubic'), s)) {
              case 0:
              case 'x':
                (a = { x: t.scaleX }), (h = { x: i });
                break;
              case 1:
              case 'y':
                (a = { y: t.scaleX }), (h = { y: i });
                break;
              default:
                (a = t.scaleX), (h = i);
            }
            var l = { mode: 2, start: a, end: h, duration: e / 2, ease: r, repeat: n };
            return void 0 === o ? (o = new nv(t, l)) : o.resetFromJSON(l), o.restart(), o;
          })(this, t, e, i, n, s, this._scaleBehavior)),
          o && hv(this, this._scaleBehavior),
          (this._scaleBehavior.completeEventName = 'scaleyoyo.complete'),
          this
        );
      },
      scaleYoyoPromise: function (t, e, i, n, s) {
        return this.scaleYoyo(t, e, i, n, s), Eh(this._scaleBehavior);
      },
    },
    uv = Phaser.Utils.Objects.GetValue,
    cv = Phaser.Utils.Objects.GetAdvancedValue,
    dv = Phaser.Math.Linear,
    fv = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, n)).resetFromJSON(n), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setMode(uv(t, 'mode', 0)),
                this.setAlphaRange(cv(t, 'start', this.parent.alpha), cv(t, 'end', 0)),
                this
              );
            },
          },
          {
            key: 'setMode',
            value: function (t) {
              return 'string' == typeof t && (t = pv[t]), (this.mode = t), this;
            },
          },
          {
            key: 'setAlphaRange',
            value: function (t, e) {
              return (this.alphaStart = t), (this.alphaEnd = e), this;
            },
          },
          {
            key: 'start',
            value: function () {
              return (
                this.timer.isRunning ||
                  (this.parent.setAlpha(this.alphaStart),
                  this.timer
                    .setDelay(this.delay)
                    .setDuration(this.duration)
                    .setRepeat(2 === this.mode ? -1 : 0),
                  g(u(i.prototype), 'start', this).call(this)),
                this
              );
            },
          },
          {
            key: 'updateGameObject',
            value: function (t, e) {
              var i = e.t;
              e.isOddIteration && (i = 1 - i), (t.alpha = dv(this.alphaStart, this.alphaEnd, i));
            },
          },
          {
            key: 'complete',
            value: function () {
              return g(u(i.prototype), 'complete', this).call(this), 1 === this.mode && this.parent.destroy(), this;
            },
          },
        ]),
        i
      );
    })(_o),
    pv = { stop: 0, destroy: 1, yoyo: 2 },
    vv = Phaser.Utils.Objects.IsPlainObject,
    gv = function (t, e, i, n) {
      var s, r;
      vv(i) ? ((s = i.start), (r = i.end)) : (r = i), void 0 === s && (s = 0), void 0 === r && (r = 1);
      var o = { mode: 0, start: s, end: r, duration: e };
      return void 0 === n ? (n = new fv(t, o)) : n.resetFromJSON(o), n.restart(), n;
    },
    yv = function (t, e, i, n) {
      i instanceof fv && ((n = i), (i = void 0)), void 0 === i && (i = !0);
      var s = { mode: i ? 1 : 0, end: 0, duration: e };
      return void 0 === n ? (n = new fv(t, s)) : n.resetFromJSON(s), n.restart(), n;
    },
    kv = Phaser.Utils.Objects.IsPlainObject,
    mv = function (t, e) {
      (e.completeEventName = void 0),
        e.on('complete', function () {
          e.completeEventName && (t.emit(e.completeEventName, t), (e.completeEventName = void 0));
        }),
        e.on('update', function () {
          var e = Lp.getParentSizer(t);
          e && e.resetChildAlphaState(t);
        });
    },
    bv = {
      fadeIn: function (t, e) {
        if (kv(t)) {
          var i = t;
          (t = i.duration), (e = i.alpha);
        }
        var n = void 0 === this._fade;
        return (
          (this._fade = gv(this, t, e, this._fade)),
          n && mv(this, this._fade),
          (this._fade.completeEventName = 'fadein.complete'),
          this
        );
      },
      fadeInPromise: function (t, e) {
        return this.fadeIn(t, e), Eh(this._fade);
      },
      fadeOutDestroy: function (t, e) {
        if (kv(t)) {
          var i = t;
          (t = i.duration), (e = i.destroy);
        }
        var n = void 0 === this._fade;
        return (
          (this._fade = yv(this, t, e, this._fade)),
          n && mv(this, this._fade),
          (this._fade.completeEventName = 'fadeout.complete'),
          this
        );
      },
      fadeOutDestroyPromise: function (t, e) {
        return this.fadeOutDestroy(t, e), Eh(this._fade);
      },
      fadeOut: function (t) {
        return this.fadeOutDestroy(t, !1), this;
      },
      fadeOutPromise: function (t) {
        return this.fadeOut(t), Eh(this._fade);
      },
    },
    xv = Phaser.Utils.Objects.GetValue,
    Cv = Phaser.Utils.Objects.GetAdvancedValue,
    wv = Phaser.Math.Linear,
    Sv = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, n)).resetFromJSON(n), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              if (
                (g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setMode(xv(t, 'mode', 0)),
                t && (t.hasOwnProperty('x') || t.hasOwnProperty('y')))
              ) {
                var e = Cv(t, 'x', void 0),
                  n = Cv(t, 'y', void 0);
                this.setTargetPosition(e, n);
              } else this.setTargetPosition(t);
              return this;
            },
          },
          {
            key: 'setMode',
            value: function (t) {
              return 'string' == typeof t && (t = Pv[t]), (this.mode = t), this;
            },
          },
          {
            key: 'setTargetPosition',
            value: function (t, e) {
              if ('number' == typeof t || 'number' == typeof e)
                (this.startX = this.parent.x), (this.startY = this.parent.y), (this.endX = t), (this.endY = e);
              else {
                var i = t;
                (this.startX = Cv(i, 'startX', void 0)),
                  (this.startY = Cv(i, 'startY', void 0)),
                  (this.endX = Cv(i, 'endX', void 0)),
                  (this.endY = Cv(i, 'endY', void 0));
              }
              return (
                (this.hasMoveX = void 0 !== this.startX && void 0 !== this.endX),
                (this.hasMoveY = void 0 !== this.startY && void 0 !== this.endY),
                this
              );
            },
          },
          {
            key: 'start',
            value: function () {
              if (this.timer.isRunning) return this;
              var t = this.parent;
              return (
                this.hasMoveX && (t.x = this.startX),
                this.hasMoveY && (t.y = this.startY),
                this.timer
                  .setDelay(this.delay)
                  .setDuration(this.duration)
                  .setRepeat(2 === this.mode ? -1 : 0),
                g(u(i.prototype), 'start', this).call(this),
                this
              );
            },
          },
          {
            key: 'updateGameObject',
            value: function (t, e) {
              var i = e.t;
              e.isOddIteration && (i = 1 - i),
                (i = this.easeFn(i)),
                this.hasMoveX && (t.x = wv(this.startX, this.endX, i)),
                this.hasMoveY && (t.y = wv(this.startY, this.endY, i));
            },
          },
          {
            key: 'complete',
            value: function () {
              return g(u(i.prototype), 'complete', this).call(this), 1 === this.mode && this.parent.destroy(), this;
            },
          },
        ]),
        i
      );
    })(_o),
    Pv = { stop: 0, destroy: 1, yoyo: 2 },
    Tv = function (t, e) {
      if ('number' == typeof t) return t;
      var i = t[0],
        n = parseFloat(t.substr(2));
      switch (i) {
        case '+':
          return e + n;
        case '-':
          return e - n;
        case '*':
          return e * n;
        case '/':
          return e / n;
      }
    },
    Ov = function (t, e, i, n, s, r, o) {
      r instanceof Sv && ((o = r), (r = void 0)), void 0 === r && (r = !1);
      var a = {};
      return (
        (a.mode = r ? 1 : 0),
        void 0 !== i && ((a.startX = t.x), (a.endX = Tv(i, t.x))),
        void 0 !== n && ((a.startY = t.y), (a.endY = Tv(n, t.y))),
        (a.duration = e),
        (a.ease = void 0 === s ? 'Linear' : s),
        void 0 === o ? (o = new Sv(t, a)) : o.resetFromJSON(a),
        o.restart(),
        o
      );
    },
    Mv = function (t, e, i, n, s, r, o) {
      r instanceof Sv && ((o = r), (r = void 0)), void 0 === r && (r = !1);
      var a = {};
      return (
        (a.mode = r ? 1 : 0),
        void 0 !== i && ((a.startX = Tv(i, t.x)), (a.endX = t.x)),
        void 0 !== n && ((a.startY = Tv(n, t.y)), (a.endY = t.y)),
        (a.duration = e),
        (a.ease = void 0 === s ? 'Linear' : s),
        void 0 === o ? (o = new Sv(t, a)) : o.resetFromJSON(a),
        o.restart(),
        o
      );
    },
    Ev = Phaser.Utils.Objects.IsPlainObject,
    _v = Phaser.Math.Distance.Between,
    Rv = function (t, e) {
      (e.completeEventName = void 0),
        e.on('complete', function () {
          e.completeEventName && (t.emit(e.completeEventName, t), (e.completeEventName = void 0));
        }),
        e.on('update', function () {
          var e = Lp.getParentSizer(t);
          e && e.resetChildPositionState(t);
        });
    },
    Lv = {
      moveFrom: function (t, e, i, n, s) {
        if (Ev(t)) {
          var r = t;
          (e = r.x),
            (i = r.y),
            (t = r.hasOwnProperty('speed') ? (1e3 * _v(e, i, this.x, this.y)) / r.speed : r.duration),
            (n = r.ease);
        }
        var o = void 0 === this._easeMove;
        return (
          (this._easeMove = Mv(this, t, e, i, n, s, this._easeMove)),
          o && Rv(this, this._easeMove),
          (this._easeMove.completeEventName = 'movefrom.complete'),
          this
        );
      },
      moveFromPromise: function (t, e, i, n, s) {
        return this.moveFrom(t, e, i, n, s), Eh(this._easeMove);
      },
      moveFromDestroy: function (t, e, i, n) {
        return this.moveFrom(t, e, i, n, !0), this;
      },
      moveFromDestroyPromise: function (t, e, i, n) {
        return this.moveFromDestroy(t, e, i, n), Eh(this._easeMove);
      },
      moveTo: function (t, e, i, n, s) {
        if (Ev(t)) {
          var r = t;
          (e = r.x),
            (i = r.y),
            (t = r.hasOwnProperty('speed') ? (1e3 * _v(e, i, this.x, this.y)) / r.speed : r.duration),
            (n = r.ease);
        }
        var o = void 0 === this._easeMove;
        return (
          (this._easeMove = Ov(this, t, e, i, n, s, this._easeMove)),
          o && Rv(this, this._easeMove),
          (this._easeMove.completeEventName = 'moveto.complete'),
          this
        );
      },
      moveToPromise: function (t, e, i, n, s) {
        return this.moveTo(t, e, i, n, s), Eh(this._easeMove);
      },
      moveToDestroy: function (t, e, i, n) {
        return this.moveTo(t, e, i, n, !0), this;
      },
      moveToDestroyPromise: function (t, e, i, n) {
        return this.moveToDestroy(t, e, i, n, !0), Eh(this._easeMove);
      },
      moveStop: function (t) {
        return this._easeMove ? (this._easeMove.stop(t), this) : this;
      },
    },
    Bv = Phaser.Utils.Objects.GetValue,
    Dv = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), ((s = e.call(this, t, n)).timer = new bo()), s.resetFromJSON(n), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.timer.resetFromJSON(Bv(t, 'timer')),
                this.setEnable(Bv(t, 'enable', !0)),
                this.setMode(Bv(t, 'mode', 1)),
                (this.isRunning = Bv(t, 'isRunning', !1)),
                this.setMagnitudeMode(Bv(t, 'magnitudeMode', 1)),
                this.setAxisMode(Bv(t, 'axis', 0)),
                this.setDuration(Bv(t, 'duration', 500)),
                this.setMagnitude(Bv(t, 'magnitude', 10)),
                (this.ox = Bv(t, 'ox', void 0)),
                (this.oy = Bv(t, 'oy', void 0)),
                this
              );
            },
          },
          {
            key: 'toJSON',
            value: function () {
              return {
                timer: this.timer.toJSON(),
                enable: this.enable,
                mode: this.mode,
                isRunning: this.isRunning,
                magnitudeMode: magnitudeMode,
                duration: this.duration,
                magnitude: this.magnitude,
                ox: this.ox,
                oy: this.oy,
              };
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (g(u(i.prototype), 'shutdown', this).call(this, t), this.timer.destroy(), (this.timer = void 0));
            },
          },
          {
            key: 'startTicking',
            value: function () {
              g(u(i.prototype), 'startTicking', this).call(this),
                0 === this.mode
                  ? (this.scene.game.events.on('poststep', this.update, this),
                    this.scene.game.events.on('prestep', this.backToOrigin, this))
                  : this.scene.sys.events.on('preupdate', this.update, this);
            },
          },
          {
            key: 'stopTicking',
            value: function () {
              g(u(i.prototype), 'stopTicking', this).call(this),
                this.scene &&
                  (0 === this.mode
                    ? (this.scene.game.events.off('poststep', this.update, this),
                      this.scene.game.events.off('prestep', this.backToOrigin, this))
                    : this.scene.sys.events.off('preupdate', this.update, this));
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return null == t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'setMode',
            value: function (t) {
              return 'string' == typeof t && (t = Iv[t]), (this.mode = t), this;
            },
          },
          {
            key: 'setMagnitudeMode',
            value: function (t) {
              return 'string' == typeof t && (t = Av[t]), (this.magnitudeMode = t), this;
            },
          },
          {
            key: 'setAxisMode',
            value: function (t) {
              return 'string' == typeof t && (t = jv[t]), (this.axisMode = t), this;
            },
          },
          {
            key: 'setDuration',
            value: function (t) {
              return (this.duration = t), this;
            },
          },
          {
            key: 'setMagnitude',
            value: function (t) {
              return (this.magnitude = t), this;
            },
          },
          {
            key: 'start',
            value: function (t, e) {
              if ('number' != typeof t) {
                var n = t;
                (e = Bv(n, 'magnitude', void 0)), (t = Bv(n, 'duration', void 0));
              }
              return (
                void 0 !== e && this.setMagnitude(e),
                void 0 !== t && this.setDuration(t),
                this.timer.setDuration(this.duration).start(),
                g(u(i.prototype), 'start', this).call(this),
                this
              );
            },
          },
          {
            key: 'shake',
            value: function (t, e) {
              return this.start(t, e), this;
            },
          },
          {
            key: 'update',
            value: function (t, e) {
              if (!this.isRunning || !this.enable) return this;
              var i = this.parent;
              if (!i.active) return this;
              if ((this.timer.update(t, e), this.timer.isDone)) this.backToOrigin(), this.complete();
              else {
                void 0 === this.ox && ((this.ox = i.x), (this.oy = i.y));
                var n = this.magnitude;
                1 === this.magnitudeMode && (n *= 1 - this.timer.t);
                var s = Math.random() * Math.PI * 2,
                  r = this.ox + Math.cos(s) * n,
                  o = this.oy + Math.sin(s) * n;
                switch (this.axisMode) {
                  case 1:
                    i.x = r;
                    break;
                  case 2:
                    i.y = o;
                    break;
                  default:
                    (i.x = r), (i.y = o);
                }
              }
              return this;
            },
          },
          {
            key: 'backToOrigin',
            value: function () {
              if (!this.isRunning || !this.enable) return this;
              if (void 0 === this.ox) return this;
              var t = this.parent;
              switch (this.axisMode) {
                case 1:
                  t.x = this.ox;
                  break;
                case 2:
                  t.y = this.oy;
                  break;
                default:
                  (t.x = this.ox), (t.y = this.oy);
              }
              return (this.ox = void 0), (this.oy = void 0), this;
            },
          },
        ]),
        i
      );
    })(fo),
    Iv = { effect: 0, behavior: 1 },
    jv = { both: 0, 'h&v': 0, 'x&y': 0, horizontal: 1, h: 1, x: 1, vertical: 2, v: 2, y: 2 },
    Av = { constant: 0, decay: 1 },
    zv = Phaser.Utils.Objects.IsPlainObject,
    Fv = {
      shake: function (t, e, i) {
        if (zv(t)) {
          var n = t;
          (t = n.duration), (e = n.magnitude), (i = n.magnitudeMode);
        }
        return (
          void 0 === this._shake &&
            ((this._shake = new Dv(this, { mode: 0, magnitudeMode: 1 })),
            (function (t, e) {
              e.on('complete', function () {
                t.emit('shake.complete', t);
              });
            })(this, this._shake)),
          void 0 !== t && this._shake.setDuration(t),
          void 0 !== e && this._shake.setMagnitude(e),
          void 0 !== i && this._shake.setMagnitudeMode(i),
          this._shake.shake(),
          this
        );
      },
      shakePromise: function (t, e) {
        return this.shake(t, e), Eh(this._shake);
      },
    },
    Vv = Phaser.Utils.Objects.IsPlainObject,
    Wv = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, n)).parent.setDataEnabled(), (s.easeTasks = {}), s;
      }
      return (
        a(i, [
          {
            key: 'complete',
            value: function (t) {
              this.emit('complete-'.concat(t), this.parent, this), this.emit('complete', t, this.parent, this);
            },
          },
          {
            key: 'getEaseTask',
            value: function (t) {
              var e = this.easeTasks[t];
              return (
                void 0 === e &&
                  ((e = new hc(this.parent)),
                  (this.easeTasks[t] = e),
                  e.setTarget(this.parent.data.values).on(
                    'complete',
                    function () {
                      this.complete(t);
                    },
                    this
                  )),
                e
              );
            },
          },
          {
            key: 'easeTo',
            value: function (t, e, i, n) {
              if (Vv(t)) {
                var s = t;
                (t = s.key), (e = s.value), (i = s.duration), (n = s.ease);
                var r = s.speed;
                void 0 === i && void 0 !== r && (i = (Math.abs(e - this.parent.data.values[t]) / r) * 1e3);
              }
              return (
                void 0 === i && (i = 1e3),
                void 0 === n && (n = 'Linear'),
                this.getEaseTask(t).restart({ key: t, to: e, duration: i, ease: n }),
                this
              );
            },
          },
          {
            key: 'easeFrom',
            value: function (t, e, i, n) {
              if (Vv(t)) {
                var s = t;
                (t = s.key), (e = s.value), (i = s.duration), (n = s.ease);
                var r = s.speed;
                void 0 === i && void 0 !== r && (i = (Math.abs(e - this.parent.data.values[t]) / r) * 1e3);
              }
              return (
                void 0 === i && (i = 1e3),
                void 0 === n && (n = 'Linear'),
                this.getEaseTask(t).restart({ key: t, from: e, duration: i, ease: n }),
                this
              );
            },
          },
          {
            key: 'stopEase',
            value: function (t, e) {
              void 0 === e && (e = !0);
              var i = this.easeTasks[t];
              return i && i.stop(e), this;
            },
          },
          {
            key: 'stopAll',
            value: function (t) {
              for (var e in (void 0 === t && (t = !0), this.easeTasks)) this.stopEase(e, t);
              return this;
            },
          },
        ]),
        i
      );
    })(uo),
    Yv = {
      easeDataTo: function (t, e, i, n) {
        return (
          this._easeData ||
            ((this._easeData = new Wv(this)),
            (function (t, e) {
              e.on('complete', function (e) {
                t.emit('easedata.'.concat(e, '.complete'), t), t.emit('easedata.complete', e, t);
              });
            })(this, this._easeData)),
          this._easeData.easeTo(t, e, i, n),
          this
        );
      },
      easeDataToPromise: function (t, e, i, n) {
        return this.easeDataTo(t, e, i, n), Mh(this._easeData, 'complete-'.concat(t));
      },
      stopEaseData: function (t, e) {
        return this._easeData ? (this._easeData.stopEase(t, e), this) : this;
      },
      stopAllEaseData: function (t) {
        return this._easeData ? (this._easeData.stopAll(t), this) : this;
      },
    },
    Xv = function (t) {
      Uv(t, !1);
    },
    Gv = function (t) {
      Uv(t, !0);
    },
    Hv = function (t) {
      return !!t && !Jf(t).hidden;
    },
    Uv = function (t, e) {
      if (t) {
        Jf(t).hidden = e;
        var i = Hd(t);
        i ? i.setChildVisible(t, !e) : t.setVisible(!e);
      }
    },
    Nv = {
      show: function (t) {
        return void 0 === t && (t = this), Xv(t), this;
      },
      hide: function (t) {
        return void 0 === t && (t = this), Gv(t), this;
      },
      isShow: function (t) {
        return void 0 === t && (t = this), Hv(t);
      },
    };
  function Kv(t) {
    return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, 'default') ? t.default : t;
  }
  var Jv = { exports: {} };
  !(function (t) {
    var e = Object.prototype.hasOwnProperty,
      i = '~';
    function n() {}
    function s(t, e, i) {
      (this.fn = t), (this.context = e), (this.once = i || !1);
    }
    function r(t, e, n, r, o) {
      if ('function' != typeof n) throw new TypeError('The listener must be a function');
      var a = new s(n, r || t, o),
        h = i ? i + e : e;
      return (
        t._events[h]
          ? t._events[h].fn
            ? (t._events[h] = [t._events[h], a])
            : t._events[h].push(a)
          : ((t._events[h] = a), t._eventsCount++),
        t
      );
    }
    function o(t, e) {
      0 == --t._eventsCount ? (t._events = new n()) : delete t._events[e];
    }
    function a() {
      (this._events = new n()), (this._eventsCount = 0);
    }
    Object.create && ((n.prototype = Object.create(null)), new n().__proto__ || (i = !1)),
      (a.prototype.eventNames = function () {
        var t,
          n,
          s = [];
        if (0 === this._eventsCount) return s;
        for (n in (t = this._events)) e.call(t, n) && s.push(i ? n.slice(1) : n);
        return Object.getOwnPropertySymbols ? s.concat(Object.getOwnPropertySymbols(t)) : s;
      }),
      (a.prototype.listeners = function (t) {
        var e = i ? i + t : t,
          n = this._events[e];
        if (!n) return [];
        if (n.fn) return [n.fn];
        for (var s = 0, r = n.length, o = new Array(r); s < r; s++) o[s] = n[s].fn;
        return o;
      }),
      (a.prototype.listenerCount = function (t) {
        var e = i ? i + t : t,
          n = this._events[e];
        return n ? (n.fn ? 1 : n.length) : 0;
      }),
      (a.prototype.emit = function (t, e, n, s, r, o) {
        var a = i ? i + t : t;
        if (!this._events[a]) return !1;
        var h,
          l,
          u = this._events[a],
          c = arguments.length;
        if (u.fn) {
          switch ((u.once && this.removeListener(t, u.fn, void 0, !0), c)) {
            case 1:
              return u.fn.call(u.context), !0;
            case 2:
              return u.fn.call(u.context, e), !0;
            case 3:
              return u.fn.call(u.context, e, n), !0;
            case 4:
              return u.fn.call(u.context, e, n, s), !0;
            case 5:
              return u.fn.call(u.context, e, n, s, r), !0;
            case 6:
              return u.fn.call(u.context, e, n, s, r, o), !0;
          }
          for (l = 1, h = new Array(c - 1); l < c; l++) h[l - 1] = arguments[l];
          u.fn.apply(u.context, h);
        } else {
          var d,
            f = u.length;
          for (l = 0; l < f; l++)
            switch ((u[l].once && this.removeListener(t, u[l].fn, void 0, !0), c)) {
              case 1:
                u[l].fn.call(u[l].context);
                break;
              case 2:
                u[l].fn.call(u[l].context, e);
                break;
              case 3:
                u[l].fn.call(u[l].context, e, n);
                break;
              case 4:
                u[l].fn.call(u[l].context, e, n, s);
                break;
              default:
                if (!h) for (d = 1, h = new Array(c - 1); d < c; d++) h[d - 1] = arguments[d];
                u[l].fn.apply(u[l].context, h);
            }
        }
        return !0;
      }),
      (a.prototype.on = function (t, e, i) {
        return r(this, t, e, i, !1);
      }),
      (a.prototype.once = function (t, e, i) {
        return r(this, t, e, i, !0);
      }),
      (a.prototype.removeListener = function (t, e, n, s) {
        var r = i ? i + t : t;
        if (!this._events[r]) return this;
        if (!e) return o(this, r), this;
        var a = this._events[r];
        if (a.fn) a.fn !== e || (s && !a.once) || (n && a.context !== n) || o(this, r);
        else {
          for (var h = 0, l = [], u = a.length; h < u; h++)
            (a[h].fn !== e || (s && !a[h].once) || (n && a[h].context !== n)) && l.push(a[h]);
          l.length ? (this._events[r] = 1 === l.length ? l[0] : l) : o(this, r);
        }
        return this;
      }),
      (a.prototype.removeAllListeners = function (t) {
        var e;
        return (
          t
            ? ((e = i ? i + t : t), this._events[e] && o(this, e))
            : ((this._events = new n()), (this._eventsCount = 0)),
          this
        );
      }),
      (a.prototype.off = a.prototype.removeListener),
      (a.prototype.addListener = a.prototype.on),
      (a.prefixed = i),
      (a.EventEmitter = a),
      (t.exports = a);
  })(Jv);
  var qv = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'shutdown',
            value: function () {
              this.removeAllListeners();
            },
          },
          {
            key: 'destroy',
            value: function () {
              this.removeAllListeners();
            },
          },
        ]),
        i
      );
    })(Kv(Jv.exports)),
    Zv = {
      setEventEmitter: function (t, e) {
        return (
          void 0 === e && (e = qv),
          (this._privateEE = !0 === t || void 0 === t),
          (this._eventEmitter = this._privateEE ? new e() : t),
          this
        );
      },
      destroyEventEmitter: function () {
        return this._eventEmitter && this._privateEE && this._eventEmitter.shutdown(), this;
      },
      getEventEmitter: function () {
        return this._eventEmitter;
      },
      on: function () {
        return this._eventEmitter && this._eventEmitter.on.apply(this._eventEmitter, arguments), this;
      },
      once: function () {
        return this._eventEmitter && this._eventEmitter.once.apply(this._eventEmitter, arguments), this;
      },
      off: function () {
        return this._eventEmitter && this._eventEmitter.off.apply(this._eventEmitter, arguments), this;
      },
      emit: function (t) {
        return this._eventEmitter && t && this._eventEmitter.emit.apply(this._eventEmitter, arguments), this;
      },
      addListener: function () {
        return this._eventEmitter && this._eventEmitter.addListener.apply(this._eventEmitter, arguments), this;
      },
      removeListener: function () {
        return this._eventEmitter && this._eventEmitter.removeListener.apply(this._eventEmitter, arguments), this;
      },
      removeAllListeners: function () {
        return this._eventEmitter && this._eventEmitter.removeAllListeners.apply(this._eventEmitter, arguments), this;
      },
      listenerCount: function () {
        return this._eventEmitter ? this._eventEmitter.listenerCount.apply(this._eventEmitter, arguments) : 0;
      },
      listeners: function () {
        return this._eventEmitter ? this._eventEmitter.listeners.apply(this._eventEmitter, arguments) : [];
      },
      eventNames: function () {
        return this._eventEmitter ? this._eventEmitter.eventNames.apply(this._eventEmitter, arguments) : [];
      },
    },
    $v = ['next', 'exit', 'enter'],
    Qv = (function () {
      function t(e) {
        r(this, t);
        var i = Ct(e, 'states', void 0);
        i && this.addStates(i);
        var n = Ct(e, 'extend', void 0);
        if (n) for (var s in n) (this.hasOwnProperty(s) && void 0 !== this[s]) || (this[s] = n[s]);
        var o = Ct(e, 'eventEmitter', void 0),
          a = Ct(e, 'EventEmitterClass', void 0);
        this.setEventEmitter(o, a), (this._stateLock = !1), this.resetFromJSON(e);
      }
      return (
        a(t, [
          {
            key: 'shutdown',
            value: function () {
              this.destroyEventEmitter();
            },
          },
          {
            key: 'destroy',
            value: function () {
              this.shutdown();
            },
          },
          {
            key: 'resetFromJSON',
            value: function (t) {
              this.setEnable(Ct(t, 'enable', !0)), this.start(Ct(t, 'start', void 0));
              var e = Ct(t, 'init', void 0);
              return e && e.call(this), this;
            },
          },
          {
            key: 'toJSON',
            value: function () {
              return { curState: this.state, prevState: this.prevState, enable: this.enable, start: this._start };
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'state',
            get: function () {
              return this._state;
            },
            set: function (t) {
              if (this.enable && !this._stateLock && this._state !== t) {
                if (
                  ((this._prevState = this._state),
                  (this._state = t),
                  (this._stateLock = !0),
                  this.emit('statechange', this),
                  null != this._prevState)
                ) {
                  var e = 'exit_' + this._prevState,
                    i = this[e];
                  i && i.call(this), this.emit(e, this);
                }
                if (((this._stateLock = !1), null != this._state)) {
                  var n = 'enter_' + this._state,
                    s = this[n];
                  s && s.call(this), this.emit(n, this);
                }
              }
            },
          },
          {
            key: 'prevState',
            get: function () {
              return this._prevState;
            },
          },
          {
            key: 'start',
            value: function (t) {
              return (this._start = t), (this._prevState = void 0), (this._state = t), this;
            },
          },
          {
            key: 'goto',
            value: function (t) {
              return null != t && (this.state = t), this;
            },
          },
          {
            key: 'next',
            value: function () {
              var t,
                e = this['next_' + this.state];
              return e && (t = 'string' == typeof e ? e : e.call(this)), this.goto(t), this;
            },
          },
          {
            key: 'stateProperties',
            get: function () {
              return $v;
            },
          },
          {
            key: 'addState',
            value: function (t, e) {
              'string' != typeof t && (t = (e = t).name);
              for (var i = this.stateProperties, n = 0, s = i.length; n < s; n++) {
                var r = i[n],
                  o = e[r];
                o && (this[''.concat(r, '_').concat(t)] = o);
              }
              return this;
            },
          },
          {
            key: 'addStates',
            value: function (t) {
              if (Array.isArray(t)) for (var e = 0, i = t.length; e < i; e++) this.addState(t[e]);
              else for (var n in t) this.addState(n, t[n]);
              return this;
            },
          },
          {
            key: 'runMethod',
            value: function (t, e, i, n, s, r) {
              var o = this[t + '_' + this.state];
              if (o) {
                var a = arguments.length;
                switch (a) {
                  case 1:
                    return o.call(this);
                  case 2:
                    return o.call(this, e);
                  case 3:
                    return o.call(this, e, i);
                  case 4:
                    return o.call(this, e, i, n);
                  case 5:
                    return o.call(this, e, i, n, s);
                  case 6:
                    return o.call(this, e, i, n, s, r);
                }
                for (var h = new Array(a - 1), l = 1; l < a; l++) h[l - 1] = arguments[l];
                return o.apply(this, h);
              }
            },
          },
        ]),
        t
      );
    })();
  Object.assign(Qv.prototype, Zv);
  var tg = function (t, e, i, n, s) {
      void 0 === s && (s = !1);
      var r = t._events[e];
      if (!r) return !1;
      for (var o = 0, a = r.length; o < a; o++) {
        var h = r[o];
        if (h.fn === i && h.context === n && h.once === s) return !0;
      }
      return !1;
    },
    eg = ['next', 'exit', 'enter', 'update', 'preupdate', 'postupdate'],
    ig = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'shutdown',
            value: function () {
              this.stopUpdate(),
                this.stopPreUpdate(),
                this.stopPostUpdate(),
                (this._scene = void 0),
                g(u(i.prototype), 'shutdown', this).call(this);
            },
          },
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t), (this._scene = Ct(t, 'scene', void 0)), this
              );
            },
          },
          {
            key: 'stateProperties',
            get: function () {
              return eg;
            },
          },
          {
            key: 'update',
            value: function (t, e) {
              this.runMethod('update', t, e);
            },
          },
          {
            key: 'preupdate',
            value: function (t, e) {
              this.runMethod('preupdate', t, e);
            },
          },
          {
            key: 'postupdate',
            value: function (t, e) {
              this.runMethod('postupdate', t, e);
            },
          },
          {
            key: 'startUpdate',
            value: function (t) {
              t || (t = this._scene);
              var e = t.sys.events;
              return tg(e, 'update', this.update, this) || ((this._scene = t), e.on('update', this.update, this)), this;
            },
          },
          {
            key: 'stopUpdate',
            value: function () {
              return this._scene ? (this._scene.sys.events.off('update', this.update, this), this) : this;
            },
          },
          {
            key: 'startPreUpdate',
            value: function (t) {
              t || (t = this._scene);
              var e = t.sys.events;
              return (
                tg(e, 'preupdate', this.preupdate, this) ||
                  ((this._scene = t), e.on('preupdate', this.preupdate, this)),
                this
              );
            },
          },
          {
            key: 'stopPreUpdate',
            value: function () {
              return this._scene ? (this._scene.sys.events.off('preupdate', this.preupdate, this), this) : this;
            },
          },
          {
            key: 'startPostUpdate',
            value: function (t) {
              t || (t = this._scene);
              var e = t.sys.events;
              return (
                tg(e, 'postupdate', this.postupdate, this) ||
                  ((this._scene = t), e.on('postupdate', this.postupdate, this)),
                this
              );
            },
          },
          {
            key: 'stopPostUpdate',
            value: function () {
              return this._scene ? (this._scene.sys.events.off('postupdate', this.postupdate, this), this) : this;
            },
          },
        ]),
        i
      );
    })(Qv),
    ng = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, n)).parent = t);
        var o = n.initState || 'IDLE';
        return s.start(o), s;
      }
      return (
        a(i, [
          {
            key: 'init',
            value: function () {
              this.start('IDLE');
            },
          },
          {
            key: 'next_IDLE',
            value: function () {
              return 'TRANS_OPNE';
            },
          },
          {
            key: 'next_TRANS_OPNE',
            value: function () {
              return 'OPEN';
            },
          },
          {
            key: 'enter_TRANS_OPNE',
            value: function () {
              var t = this.parent;
              if (t.transitInTime > 0) {
                var e = t.runTransitionInCallback();
                t.delayCall(e, this.next, this);
              } else this.next();
            },
          },
          {
            key: 'exit_TRANS_OPNE',
            value: function () {
              this.parent.removeDelayCall();
            },
          },
          {
            key: 'next_OPEN',
            value: function () {
              return 'TRANS_CLOSE';
            },
          },
          {
            key: 'enter_OPEN',
            value: function () {
              this.parent.onOpen();
            },
          },
          {
            key: 'exit_OPEN',
            value: function () {
              this.parent.removeDelayCall();
            },
          },
          {
            key: 'next_TRANS_CLOSE',
            value: function () {
              return 'CLOSE';
            },
          },
          {
            key: 'enter_TRANS_CLOSE',
            value: function () {
              var t = this.parent;
              if (t.transitOutTime > 0) {
                var e = t.runTransitionOutCallback();
                t.delayCall(e, this.next, this);
              } else this.next();
            },
          },
          {
            key: 'exit_TRANS_CLOSE',
            value: function () {
              this.parent.removeDelayCall();
            },
          },
          {
            key: 'next_CLOSE',
            value: function () {
              return 'TRANS_OPNE';
            },
          },
          {
            key: 'enter_CLOSE',
            value: function () {
              this.parent.onClose();
            },
          },
          { key: 'exit_CLOSE', value: function () {} },
          {
            key: 'canOpen',
            value: function () {
              return 'IDLE' === this.state || 'CLOSE' === this.state;
            },
          },
          {
            key: 'canClose',
            value: function () {
              return 'IDLE' === this.state || 'OPEN' === this.state;
            },
          },
        ]),
        i
      );
    })(ig),
    sg = {
      delayCall: function (t, e, i) {
        return (
          (this.delayCallTimer = (function (t, e, i, n, s) {
            var r = ho(t);
            return r.time.delayedCall(e, function () {
              r.game.events.once('poststep', function () {
                i.call(n, s);
              });
            });
          })(this, t, e, i)),
          this
        );
      },
      removeDelayCall: function () {
        return this.delayCallTimer && (this.delayCallTimer.remove(!1), (this.delayCallTimer = void 0)), this;
      },
    },
    rg = {
      setTransitInTime: function (t) {
        return (this.transitInTime = t), this;
      },
      setTransitOutTime: function (t) {
        return (this.transitOutTime = t), this;
      },
      setTransitInCallback: function (t) {
        return t || (t = j), (this.transitInCallback = t), this;
      },
      setTransitOutCallback: function (t) {
        return t || (t = j), (this.transitOutCallback = t), this;
      },
    },
    og = {
      runTransitionInCallback: function () {
        return this.transitInCallback(this.parent, this.transitInTime), this.transitInTime;
      },
      onOpen: function () {},
      requestOpen: function (t, e) {
        if (!this._state.canOpen()) return this;
        this.openEventData = arguments.length > 0 ? t : this.parent;
        var i = this.transitInTime;
        return void 0 !== e && (this.transitInTime = e), this._state.goto('TRANS_OPNE'), (this.transitInTime = i), this;
      },
    },
    ag = {
      runTransitionOutCallback: function () {
        return this.transitOutCallback(this.parent, this.transitOutTime), this.transitOutTime;
      },
      onClose: function () {
        this.oneShotMode && this.parent.destroy();
      },
      requestClose: function (t, e) {
        if (!this._state.canClose) return this;
        this.closeEventData = arguments.length > 0 ? t : this.parent;
        var i = this.transitOutTime;
        return (
          void 0 !== e && (this.transitOutTime = e), this._state.goto('TRANS_CLOSE'), (this.transitOutTime = i), this
        );
      },
    },
    hg = {};
  Object.assign(hg, sg, rg, og, ag);
  var lg = Phaser.Utils.Objects.GetValue,
    ug = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          (s = e.call(this, t, n)).setTransitInTime(lg(n, 'duration.in', 200)),
          s.setTransitOutTime(lg(n, 'duration.out', 200)),
          s.setTransitInCallback(lg(n, 'transitIn')),
          s.setTransitOutCallback(lg(n, 'transitOut')),
          (s.oneShotMode = lg(n, 'destroy', !1)),
          (s.delayCallTimer = void 0),
          (s._state = new ng(d(s), { eventEmitter: !1, initState: lg(n, 'initState', 'IDLE') })),
          (s.openEventData = void 0),
          (s.closeEventData = void 0),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'state',
            get: function () {
              return this._state.state;
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                ((this.transitInCallback = void 0),
                (this.transitOutCallback = void 0),
                (this.openEventData = void 0),
                (this.closeEventData = void 0),
                this.removeDelayCall(),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
        ]),
        i
      );
    })(uo);
  Object.assign(ug.prototype, hg);
  var cg = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        var o;
        return r(this, i), (o = e.call(this, t, 0, 0, 2, 2, n, 1)).setAlpha(s), o.setScrollFactor(0), o.boot(), o;
      }
      return (
        a(i, [
          {
            key: 'boot',
            value: function () {
              this.scene.sys.events.on('prerender', this.resize, this);
            },
          },
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.scene.sys.events.off('prerender', this.resize, this),
                g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'tint',
            get: function () {
              return this.fillColor;
            },
            set: function (t) {
              this.setFillStyle(t, this.fillAlpha);
            },
          },
          {
            key: 'resize',
            value: function () {
              var t = this.scene,
                e = t.sys.scale.gameSize,
                i = t.sys.cameras.main,
                n = e.width,
                s = e.height,
                r = 1 / i.zoom,
                o = n / 2,
                a = s / 2,
                h = n * r,
                l = s * r;
              (this.x === o && this.y === a) || this.setPosition(o, a),
                (this.width === h && this.height === l) || this.setSize(h, l).setOrigin(0.5);
            },
          },
        ]),
        i
      );
    })(Phaser.GameObjects.Rectangle),
    dg = Phaser.Utils.Objects.GetValue,
    fg = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, { eventEmitter: !1 })).resetFromJSON(n), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.setHitAreaMode(dg(t, 'hitAreaMode', 0)),
                this.setEnable(dg(t, 'enable', !0)),
                this.setStopMode(dg(t, 'stopAllLevels', !0)),
                this
              );
            },
          },
          {
            key: 'boot',
            value: function () {
              this.parent
                .on(
                  'pointerdown',
                  function (t, e, i, n) {
                    this.stopAllLevels && n.stopPropagation();
                  },
                  this
                )
                .on(
                  'pointerup',
                  function (t, e, i, n) {
                    this.stopAllLevels && n.stopPropagation();
                  },
                  this
                )
                .on(
                  'pointermove',
                  function (t, e, i, n) {
                    this.stopAllLevels && n.stopPropagation();
                  },
                  this
                )
                .on(
                  'pointerover',
                  function (t, e, i, n) {
                    this.stopAllLevels && n.stopPropagation();
                  },
                  this
                )
                .on(
                  'pointerout',
                  function (t, e) {
                    this.stopAllLevels && e.stopPropagation();
                  },
                  this
                );
            },
          },
          {
            key: 'setHitAreaMode',
            value: function (t) {
              'string' == typeof t && (t = pg[t]);
              var e = this.parent;
              return (
                e.input && e.removeInteractive(),
                0 === t
                  ? e.setInteractive()
                  : e.setInteractive({
                      hitArea: {},
                      hitAreaCallback: function () {
                        return !0;
                      },
                    }),
                this
              );
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return (
                void 0 === t && (t = !0),
                t ? this.parent.setInteractive() : this.parent.disableInteractive(),
                (this.enable = t),
                this
              );
            },
          },
          {
            key: 'setStopMode',
            value: function (t) {
              return void 0 === t && (t = !0), (this.stopAllLevels = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
        ]),
        i
      );
    })(uo),
    pg = { default: 0, fullWindow: 1 },
    vg = Phaser.Utils.Objects.GetValue,
    gg = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = vg(n, 'color', 0),
          a = vg(n, 'alpha', 0.8);
        return ((s = e.call(this, t, o, a)).touchEventStop = new fg(d(s), { hitAreaMode: 1 })), s;
      }
      return a(i);
    })(cg),
    yg = function (t, e) {
      void 0 !== t._modalScaleSave
        ? ((t.scaleX = t._modalScaleSave), (t.scaleY = t._modalScaleSave))
        : (t._modalScaleSave = t.scaleX),
        rv(t, e);
    },
    kg = function (t, e) {
      ov(t, e, void 0, void 0, !1);
    },
    mg = function (t, e) {
      void 0 !== t._modalAlphaSave ? (t.alpha = t._modalAlphaSave) : (t._modalAlphaSave = t.alpha), gv(t, e);
    },
    bg = function (t, e) {
      yv(t, e, !1);
    },
    xg = function (t, e) {
      void 0 !== t._modalAlphaSave ? (t.alpha = t._modalAlphaSave) : (t._modalAlphaSave = t.alpha), gv(t, e, t.alpha);
    },
    Cg = function (t, e) {
      yv(t, e, !1);
    },
    wg = function (t, e, i, n, s) {
      return !!t && !(n && !n(t, e, i)) && !!Fr(t, !0).contains(e, i) && !(s && !s(t, e, i));
    },
    Sg = Phaser.Utils.Objects.GetValue,
    Pg = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          null == n.transitIn && (n.transitIn = Tg.popUp),
          null == n.transitOut && (n.transitOut = Tg.scaleDown),
          (n.destroy = Sg(n, 'destroy', !0)),
          (s = e.call(this, t, n));
        var o = Sg(n, 'cover');
        (s.cover =
          !1 !== o
            ? (function (t, e) {
                var i = t.scene,
                  n = new gg(i, e);
                return (
                  i.add.existing(n),
                  t.isRexContainerLite
                    ? (t.pin(n, {
                        syncPosition: !1,
                        syncRotation: !1,
                        syncScale: !1,
                        syncAlpha: !1,
                        syncScrollFactor: !1,
                      }),
                      t.moveDepthBelow(n))
                    : i.children.moveBelow(n, t),
                  n
                );
              })(t, o)
            : void 0),
          s.cover &&
            (s.setCoverTransitInCallback(Sg(o, 'transitIn', xg)),
            s.setCoverTransitOutCallback(Sg(o, 'transitOut', Cg)));
        var a = Sg(n, 'touchOutsideClose', !1),
          h = Sg(n, 'duration.hold', -1),
          l = Sg(n, 'timeOutClose', h >= 0),
          u = Sg(n, 'anyTouchClose', !1);
        return (
          Sg(n, 'manualClose', !1) && ((a = !1), (u = !1), (l = !1)),
          u && (a = !1),
          l ? s.setDisplayTime(h) : s.setDisplayTime(-1),
          u ? s.once('open', s.anyTouchClose, d(s)) : a && s.once('open', s.touchOutsideClose, d(s)),
          Sg(n, 'openOnStart', !0) && s.delayCall(0, s.requestOpen, d(s)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.cover || this.scene.input.off('pointerup', this.touchCloseCallback, this),
                this.cover && !t && (this.cover.destroy(), (this.cover = void 0)),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'touchOutsideClose',
            value: function () {
              return (
                this.cover
                  ? this.cover.on('pointerup', this.touchCloseCallback, this)
                  : this.scene.input.on('pointerup', this.touchCloseCallback, this),
                (this.clickOutsideTest = !0),
                this
              );
            },
          },
          {
            key: 'anyTouchClose',
            value: function () {
              return (
                this.cover
                  ? this.cover.once('pointerup', this.touchCloseCallback, this)
                  : this.scene.input.once('pointerup', this.touchCloseCallback, this),
                this
              );
            },
          },
          {
            key: 'touchCloseCallback',
            value: function (t) {
              (this.clickOutsideTest && wg(this.parent, t.worldX, t.worldY)) || this.requestClose();
            },
          },
          {
            key: 'runTransitionInCallback',
            value: function () {
              var t = g(u(i.prototype), 'runTransitionInCallback', this).call(this),
                e = this.cover;
              return e && this.coverTransitInCallback && this.coverTransitInCallback(e, t), t;
            },
          },
          {
            key: 'runTransitionOutCallback',
            value: function () {
              var t = g(u(i.prototype), 'runTransitionOutCallback', this).call(this),
                e = this.cover;
              return e && this.coverTransitOutCallback && this.coverTransitOutCallback(e, t), t;
            },
          },
          {
            key: 'onOpen',
            value: function () {
              var t = this.displayTime;
              t >= 0 && this.delayCall(t, this.requestClose, this),
                this.emit('open', this.parent, this),
                g(u(i.prototype), 'onOpen', this).call(this);
            },
          },
          {
            key: 'onClose',
            value: function () {
              this.emit('close', this.closeEventData), g(u(i.prototype), 'onClose', this).call(this);
            },
          },
          {
            key: 'setDisplayTime',
            value: function (t) {
              return (this.displayTime = t), this;
            },
          },
          {
            key: 'setTransitInCallback',
            value: function (t) {
              switch (('string' == typeof t && (t = Tg[t]), t)) {
                case Tg.popUp:
                  t = yg;
                  break;
                case Tg.fadeIn:
                  t = mg;
              }
              return g(u(i.prototype), 'setTransitInCallback', this).call(this, t), this;
            },
          },
          {
            key: 'setTransitOutCallback',
            value: function (t) {
              switch (('string' == typeof t && (t = Tg[t]), t)) {
                case Tg.scaleDown:
                  t = kg;
                  break;
                case Tg.fadeOut:
                  t = bg;
              }
              return g(u(i.prototype), 'setTransitOutCallback', this).call(this, t), this;
            },
          },
          {
            key: 'setCoverTransitInCallback',
            value: function (t) {
              return (this.coverTransitInCallback = t), this;
            },
          },
          {
            key: 'setCoverTransitOutCallback',
            value: function (t) {
              return (this.coverTransitOutCallback = t), this;
            },
          },
        ]),
        i
      );
    })(ug),
    Tg = { popUp: 0, fadeIn: 1, scaleDown: 0, fadeOut: 1 },
    Og = function (t, e) {
      var i = new Pg(t, e);
      return (
        i.on('open', function () {
          t.emit('modal.open', i);
        }),
        i.on('close', function (e) {
          t.emit('modal.close', e, i);
        }),
        t.on('modal.requestClose', i.requestClose, i),
        i
      );
    },
    Mg = function (t, e) {
      t.emit('modal.requestClose', e);
    },
    Eg = function (t) {
      return t && 'function' == typeof t;
    },
    _g = {
      modal: function (t, e) {
        return (
          Eg(t) && ((e = t), (t = void 0)),
          void 0 === this._modalBehavior &&
            (this.onCreateModalBehavior && this.onCreateModalBehavior(this, t), (this._modalBehavior = Og(this, t))),
          e && this._modalBehavior.once('close', e),
          this._modalBehavior.requestOpen(),
          this
        );
      },
      modalPromise: function (t) {
        var e = this;
        return new Promise(function (i, n) {
          e.modal(t, i);
        });
      },
      modalClose: function (t) {
        return Mg(this, t), this;
      },
    },
    Rg = function (t, e, i, n) {
      if (e) return wg(t, e.worldX, e.worldY, i, n);
      for (var s = t.scene.input.manager, r = s.pointersTotal, o = s.pointers, a = 0; a < r; a++)
        if (((e = o[a]), wg(t, e.worldX, e.worldY, i, n))) return !0;
      return !1;
    },
    Lg = function (t) {
      return '[object Array]' === Object.prototype.toString.call(t);
    },
    Bg = function (t, e, i, n, s) {
      return wg(t, e, i, Ig(n), jg(s));
    },
    Dg = function (t) {
      return !(t.rexSizer && t.rexSizer.hidden);
    },
    Ig = function (t) {
      return t
        ? function (e, i, n) {
            return !!Dg(e) && (t(e, i, n), !0);
          }
        : Dg;
    },
    jg = function (t) {
      return t;
    },
    Ag = {},
    zg = function (t) {
      this.sizerEventsEnable &&
        (!(function (t, e) {
          void 0 === e ? (e = {}) : !0 === e && (e = Ag),
            (e.x = t.x),
            (e.y = t.y),
            (e.scaleX = t.scaleX),
            (e.scaleY = t.scaleY),
            (e.width = t.width),
            (e.height = t.height),
            (e.displayWidth = t.displayWidth),
            (e.displayHeight = t.displayHeight);
        })(t, this.getChildPrevState(t)),
        this.layoutedChildren.push(t));
    },
    Fg = function (t, e, i, n, s, r, o, a) {
      xp(t, e, i, n, s, r),
        void 0 !== o && (t.x += o),
        void 0 !== a && (t.y += a),
        this.resetChildPositionState(t),
        this.sizerEventsEnable && t.emit('sizer.postlayout', t, this);
    },
    Vg = Phaser.Display.Align.CENTER,
    Wg = Phaser.Utils.Objects.IsPlainObject,
    Yg = {
      onClick: function (t, e, i, n) {
        return t
          ? ('function' == typeof t && ((n = i), (i = e), (e = t), (t = this)),
            void 0 === t._click && (t._click = new gc(t, n)),
            t._click.on('click', e, i),
            this)
          : this;
      },
      offClick: function (t, e, i) {
        return (
          'function' == typeof t && ((i = e), (e = t), (t = this)),
          void 0 === t._click || t._click.off('click', e, i),
          this
        );
      },
      enableClick: function (t, e) {
        return t && 'object' !== n(t) && ((e = t), (t = this)), void 0 === t._click || t._click.setEnable(e), this;
      },
      disableClick: function (t) {
        return t && 'object' !== n(t) && (t = this), void 0 === t._click || t._click.setEnable(!1), this;
      },
    },
    Xg = Phaser.Utils.Objects.GetValue,
    Gg = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n))._enable = void 0);
        var o = Xg(n, 'inputConfig', void 0);
        return o && t.setInteractive(o), s.resetFromJSON(n), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                (this.pointer = void 0),
                (this.lastClickTime = void 0),
                this.setEnable(Xg(t, 'enable', !0)),
                this.setMode(Xg(t, 'mode', 1)),
                this.setClickInterval(Xg(t, 'clickInterval', 100)),
                this.setDragThreshold(Xg(t, 'threshold', void 0)),
                this
              );
            },
          },
          {
            key: 'boot',
            value: function () {
              var t = this.parent.scene;
              t.input.on('pointerdown', this.onPress, this),
                t.input.on('pointerup', this.onRelease, this),
                t.input.on('pointermove', this.onMove, this);
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              if (!this.isShutdown) {
                var e = this.parent.scene;
                e.input.off('pointerdown', this.onPress, this),
                  e.input.off('pointerup', this.onRelease, this),
                  e.input.off('pointermove', this.onMove, this),
                  (this.pointer = null),
                  g(u(i.prototype), 'shutdown', this).call(this, t);
              }
            },
          },
          {
            key: 'enable',
            get: function () {
              return this._enable;
            },
            set: function (t) {
              if (this._enable !== t) {
                t || this.cancel(), (this._enable = t);
                var e = t ? 'enable' : 'disable';
                this.emit(e, this, this.parent);
              }
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'setMode',
            value: function (t) {
              return 'string' == typeof t && (t = Hg[t]), (this.mode = t), this;
            },
          },
          {
            key: 'setClickInterval',
            value: function (t) {
              return (this.clickInterval = t), this;
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
          {
            key: 'isPointerInside',
            value: function (t) {
              var e = this.parent;
              return (e.input ? ml : Rg)(e, t);
            },
          },
          {
            key: 'onPress',
            value: function (t) {
              this.parent.willRender(t.camera) &&
                void 0 === this.pointer &&
                ((this.pointer = t), 0 === this.mode && (this.isPointerInside(t) || this.click(t.downTime, t)));
            },
          },
          {
            key: 'onRelease',
            value: function (t) {
              this.parent.willRender(t.camera) &&
                this.pointer === t &&
                (1 === this.mode && (this.isPointerInside(t) || this.click(t.upTime, t)), (this.pointer = void 0));
            },
          },
          {
            key: 'onMove',
            value: function (t, e, i, n) {
              this.pointer === t &&
                void 0 !== this.dragThreshold &&
                1 === this.mode &&
                (t.getDistance() >= this.dragThreshold || this.isPointerInside(t)) &&
                this.cancel();
            },
          },
          {
            key: 'click',
            value: function (t, e) {
              if (!this.enable) return this;
              if (void 0 === t) return this.emit('clickoutside', this, this.parent, e), this;
              this.pointer = void 0;
              var i = this.lastClickTime;
              return (
                (void 0 !== i && t - i <= this.clickInterval) ||
                  ((this.lastClickTime = t), this.emit('clickoutside', this, this.parent, e)),
                this
              );
            },
          },
          {
            key: 'cancel',
            value: function () {
              return (this.pointer = void 0), this;
            },
          },
        ]),
        i
      );
    })(uo),
    Hg = { press: 0, pointerdown: 0, release: 1, pointerup: 1 },
    Ug = {
      onClickOutside: function (t, e, i, n) {
        return t
          ? ('function' == typeof t && ((n = i), (i = e), (e = t), (t = this)),
            void 0 === t._clickOutside && (t._clickOutside = new Gg(t, n)),
            t._clickOutside.on('clickoutside', e, i),
            this)
          : this;
      },
      offClickOutside: function (t, e, i) {
        return (
          'function' == typeof t && ((i = e), (e = t), (t = this)),
          void 0 === t._clickOutside || t._clickOutside.off('clickoutside', e, i),
          this
        );
      },
      enableClickOutside: function (t, e) {
        return (
          t && 'object' !== n(t) && ((e = t), (t = this)),
          void 0 === t._clickOutside || t._clickOutside.setEnable(e),
          this
        );
      },
      disableClickOutside: function (t) {
        return t && 'object' !== n(t) && (t = this), void 0 === t._clickOutside || t._clickOutside.setEnable(!1), this;
      },
    },
    Ng = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        var t;
        return r(this, i), (t = e.call(this, { eventEmitter: !1 })).goto('IDLE'), t;
      }
      return (
        a(i, [
          {
            key: 'setCooldownTime',
            value: function (t) {
              return (this.cooldownTime = t), (this.cooldownMode = void 0 !== t), this;
            },
          },
          {
            key: 'request',
            value: function () {
              return this.runMethod('request');
            },
          },
          {
            key: 'update_IDLE',
            value: function () {
              this.compensationTime = 0;
            },
          },
          {
            key: 'request_IDLE',
            value: function () {
              return this.next(), !0;
            },
          },
          {
            key: 'next_IDLE',
            value: function () {
              if (this.cooldownMode) return 'COOLDOWN';
            },
          },
          {
            key: 'enter_COOLDOWN',
            value: function () {
              this.remainderTime = this.cooldownTime + this.compensationTime;
            },
          },
          {
            key: 'update_COOLDOWN',
            value: function (t, e) {
              (this.remainderTime -= e),
                this.remainderTime < 0 &&
                  ((this.compensationTime = this.cooldownTime > e ? -this.remainderTime : 0), this.goto('IDLE'));
            },
          },
          {
            key: 'request_COOLDOWN',
            value: function () {
              return !1;
            },
          },
        ]),
        i
      );
    })(ig),
    Kg = Phaser.Utils.Objects.GetValue,
    Jg = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, n))._enable = void 0),
          (s.cooldown = new Ng()),
          s.parent.setInteractive(Kg(n, 'inputConfig', void 0)),
          s.resetFromJSON(n),
          s.boot(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                (this.pointer = void 0),
                (this.prevIsInTouch = !1),
                (this.isInTouching = !1),
                this.setEnable(Kg(t, 'enable', !0)),
                this.setCooldown(Kg(t, 'cooldown', void 0)),
                this
              );
            },
          },
          {
            key: 'boot',
            value: function () {
              var t = this.parent;
              t.on('pointerdown', this.onPointIn, this),
                t.on('pointerover', this.onPointIn, this),
                t.on('pointerup', this.onPointOut, this),
                t.on('pointerout', this.onPointOut, this),
                this.scene.sys.events.on('preupdate', this.preupdate, this);
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.scene.sys.events.off('preupdate', this.preupdate, this),
                (this.pointer = void 0),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'enable',
            get: function () {
              return this._enable;
            },
            set: function (t) {
              if (this._enable !== t)
                return (
                  t || ((this.prevIsInTouch = !1), (this.isInTouching = !1), (this.pointer = void 0)),
                  (this._enable = t),
                  this
                );
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'cooldownTime',
            get: function () {
              return this.cooldown.cooldownTime;
            },
            set: function (t) {
              this.cooldown.setCooldownTime(t);
            },
          },
          {
            key: 'setCooldown',
            value: function (t) {
              return (this.cooldownTime = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'onPointIn',
            value: function (t, e, i) {
              this.enable && t.isDown && void 0 === this.pointer && ((this.pointer = t), (this.isInTouching = !0));
            },
          },
          {
            key: 'onPointOut',
            value: function (t) {
              this.enable && this.pointer === t && ((this.pointer = void 0), (this.isInTouching = !1));
            },
          },
          {
            key: 'preupdate',
            value: function (t, e) {
              this.cooldown.update(t, e),
                !this.prevIsInTouch && this.isInTouching && this.emit('touchstart', this, this.parent),
                this.isInTouching && this.cooldown.request() && this.emit('intouch', this, this.parent, this.pointer),
                this.prevIsInTouch && !this.isInTouching && this.emit('touchend', this, this.parent),
                (this.prevIsInTouch = this.isInTouching);
            },
          },
        ]),
        i
      );
    })(uo),
    qg = {
      isPointerInBounds: function (t) {
        return void 0 === t ? (t = this) : 'string' == typeof t && (t = this.getElement(t)), !!t && Rg(t);
      },
      onTouching: function (t, e, i, n) {
        return t
          ? ('function' == typeof t && ((n = i), (i = e), (e = t), (t = this)),
            void 0 === t._inTouching && (t._inTouching = new Jg(t, n)),
            t._inTouching.on('intouch', e, i),
            this)
          : this;
      },
      offTouching: function (t, e, i) {
        return (
          'function' == typeof t && ((i = e), (e = t), (t = this)),
          void 0 === t._inTouching || t._inTouching.off('intouch', e, i),
          this
        );
      },
      onTouchingEnd: function (t, e, i, n) {
        return t
          ? ('function' == typeof t && ((n = i), (i = e), (e = t), (t = this)),
            void 0 === t._inTouching && (t._inTouching = new Jg(t, n)),
            t._inTouching.on('touchend', e, i),
            this)
          : this;
      },
      offTouchingEnd: function (t, e, i) {
        return (
          'function' == typeof t && ((i = e), (e = t), (t = this)),
          void 0 === t._inTouching || t._inTouching.off('touchend', e, i),
          this
        );
      },
      enableTouching: function (t, e) {
        return (
          t && 'object' !== n(t) && ((e = t), (t = this)), void 0 === t._inTouching || t._inTouching.setEnable(e), this
        );
      },
      disableTouching: function (t) {
        return t && 'object' !== n(t) && (t = this), void 0 === t._inTouching || t._inTouching.setEnable(!1), this;
      },
    },
    Zg = function (t, e, i) {
      for (var n, s = 0, r = t.length; s < r; s++) if (((n = t[s]), Bg(n, e, i))) return n.pointToChild(e, i);
      return null;
    },
    $g = function (t, e, i, n, s, r, o) {
      var a;
      (a = void 0 === s ? n : Zg(i, n, s)) && t.emit(e, a, r, o);
    },
    Qg = Phaser.Utils.Objects.GetValue,
    ty = function (t) {
      var e = Qg(t, 'down', void 0);
      !1 !== e && (!0 === e && (e = void 0), this.on('pointerdown', ey, this));
    },
    ey = function (t, e, i, n) {
      var s = this._childrenInteractive;
      $g(s.eventEmitter, ''.concat(s.eventNamePrefix, 'down'), s.targetSizers, t.worldX, t.worldY, t, n);
    },
    iy = Phaser.Utils.Objects.GetValue,
    ny = function (t) {
      var e = iy(t, 'up', void 0);
      !1 !== e && (!0 === e && (e = void 0), this.on('pointerup', sy, this));
    },
    sy = function (t, e, i, n) {
      var s = this._childrenInteractive;
      $g(s.eventEmitter, ''.concat(s.eventNamePrefix, 'up'), s.targetSizers, t.worldX, t.worldY, t, n);
    },
    ry = Phaser.Utils.Objects.GetValue,
    oy = function (t) {
      var e = ry(t, 'over', void 0);
      !1 !== e &&
        (!0 === e && (e = void 0),
        this.on('pointermove', ay, this).on('pointerover', ay, this).on('pointerout', hy, this));
    },
    ay = function (t, e, i, n) {
      var s = this._childrenInteractive,
        r = Zg(s.targetSizers, t.worldX, t.worldY),
        o = s.lastOverChild;
      (r && o && r === o) ||
        ((s.lastOverChild = r),
        $g(s.eventEmitter, ''.concat(s.eventNamePrefix, 'out'), s.targetSizers, o, void 0, t, n),
        $g(s.eventEmitter, ''.concat(s.eventNamePrefix, 'over'), s.targetSizers, r, void 0, t, n));
    },
    hy = function (t, e) {
      var i = this._childrenInteractive,
        n = i.lastOverChild;
      (i.lastOverChild = null),
        $g(i.eventEmitter, ''.concat(i.eventNamePrefix, 'out'), i.targetSizers, n, void 0, t, e);
    },
    ly = Phaser.Utils.Objects.GetValue,
    uy = function (t) {
      var e = ly(t, 'click', void 0);
      if (!1 !== e) {
        !0 === e && (e = void 0), void 0 === e && (e = {}), e.hasOwnProperty('threshold') || (e.threshold = 10);
        var i = this._childrenInteractive;
        (this._click = new gc(this, e)),
          this._click.on(
            'click',
            function (t, e, n, s) {
              $g(i.eventEmitter, ''.concat(i.eventNamePrefix, 'click'), i.targetSizers, n.worldX, n.worldY, n, s);
            },
            this
          );
      }
    },
    cy = Phaser.Utils.Objects.GetValue,
    dy = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = ho(t);
        return (
          o === t && (t = void 0),
          ((s = e.call(this, o, n)).gameObject = t),
          t && t.setInteractive(cy(n, 'inputConfig', void 0)),
          (s._enable = void 0),
          s.resetFromJSON(n),
          s.boot(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.setEnable(cy(t, 'enable', !0)),
                this.setDetectBounds(),
                void 0 === this.gameObject ? this.setDetectBounds(cy(t, 'bounds', void 0)) : this.setDetectBounds(),
                (this.tracerState = fy),
                (this.pointer = void 0),
                (this.lastPointer = void 0),
                (this.movedState = !1),
                (this.isTouchingAnyObject = !1),
                this
              );
            },
          },
          {
            key: 'boot',
            value: function () {
              g(u(i.prototype), 'boot', this).call(this),
                this.gameObject
                  ? this.gameObject.on('pointerdown', this.onPointerDown, this)
                  : this.scene.input.on('pointerdown', this.onPointerDown, this),
                this.scene.input.on('pointerup', this.onPointerUp, this),
                this.scene.input.on('gameout', this.dragCancel, this),
                this.scene.input.on('pointermove', this.onPointerMove, this),
                this.scene.sys.events.once('shutdown', this.destroy, this);
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.scene &&
                (this.gameObject || this.scene.input.off('pointerdown', this.onPointerDown, this),
                this.scene.input.off('pointerup', this.onPointerUp, this),
                this.scene.input.off('gameout', this.dragCancel, this),
                this.scene.input.off('pointermove', this.onPointerMove, this),
                this.scene.sys.events.off('shutdown', this.destroy, this),
                (this.gameObject = void 0),
                (this.bounds = void 0),
                (this.pointer = void 0),
                (this.lastPointer = void 0),
                (this.movedState = !1),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'enable',
            get: function () {
              return this._enable;
            },
            set: function (t) {
              if (this._enable !== t) return t || this.dragCancel(), (this._enable = t), this;
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'setDetectBounds',
            value: function (t) {
              return (this.bounds = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'onPointerDown',
            value: function (t, e) {
              this.enable &&
                void 0 === this.pointer &&
                (!this.bounds || this.bounds.contains(t.x, t.y)) &&
                this.pointer !== t &&
                ((this.pointer = t),
                (this.lastPointer = t),
                (this.movedState = !1),
                (this.tracerState = py),
                void 0 === this.gameObject && (this.isTouchingAnyObject = e.length > 0),
                this.onDragStart());
            },
          },
          {
            key: 'onPointerUp',
            value: function (t) {
              this.enable &&
                (!this.bounds || this.bounds.contains(t.x, t.y)) &&
                this.pointer === t &&
                ((this.pointer = void 0), (this.movedState = !1), (this.tracerState = fy), this.onDragEnd());
            },
          },
          {
            key: 'onPointerMove',
            value: function (t) {
              if (this.enable && t.isDown) {
                var e = !this.bounds || this.bounds.contains(t.x, t.y),
                  i = this.pointer === t;
                (!i && e) ||
                  (i && !e
                    ? this.onPointerUp(t)
                    : (this.movedState || (this.movedState = t.x !== t.downX || t.y !== t.downY),
                      this.movedState && this.onDrag()));
              }
            },
          },
          {
            key: 'dragCancel',
            value: function () {
              return (
                this.tracerState === py && this.onDragEnd(), (this.pointer = void 0), (this.tracerState = fy), this
              );
            },
          },
          {
            key: 'onDragStart',
            value: function () {
              this.emit('dragstart', this);
            },
          },
          {
            key: 'onDragEnd',
            value: function () {
              this.emit('dragend', this);
            },
          },
          {
            key: 'onDrag',
            value: function () {
              this.emit('drag', this);
            },
          },
          { key: 'preUpdate', value: function (t, e) {} },
          { key: 'postUpdate', value: function (t, e) {} },
          {
            key: 'startTicking',
            value: function () {
              g(u(i.prototype), 'startTicking', this).call(this),
                this.scene.sys.events.on('preupdate', this.preUpdate, this),
                this.scene.sys.events.on('postupdate', this.postUpdate, this);
            },
          },
          {
            key: 'stopTicking',
            value: function () {
              g(u(i.prototype), 'stopTicking', this).call(this),
                this.scene &&
                  (this.scene.sys.events.off('preupdate', this.preUpdate, this),
                  this.scene.sys.events.off('postupdate', this.postUpdate, this));
            },
          },
          {
            key: 'setRecongizedStateObject',
            value: function (t) {
              return (this.recongizedState = t), this;
            },
          },
          {
            key: 'state',
            get: function () {
              return this.recongizedState.state;
            },
            set: function (t) {
              this.recongizedState.state = t;
            },
          },
          {
            key: 'cancel',
            value: function () {
              return (this.state = vy), this;
            },
          },
        ]),
        i
      );
    })(fo),
    fy = 0,
    py = 1,
    vy = 'IDLE',
    gy = Phaser.Utils.Objects.GetValue,
    yy = Phaser.Math.Distance.Between,
    ky = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = d((s = e.call(this, t, n))),
          a = {
            states: {
              IDLE: {
                enter: function () {
                  o.stop(), (o.tapsCount = 0), (o.x = 0), (o.y = 0), (o.worldX = 0), (o.worldY = 0);
                },
                exit: function () {
                  var t = o.lastPointer;
                  (o.x = t.x), (o.y = t.y), (o.worldX = t.worldX), (o.worldY = t.worldY);
                },
              },
              BEGIN: {
                enter: function () {
                  o.start(), (o.tapsCount = 0), o.emit('tappingstart', o, o.gameObject, o.lastPointer);
                },
              },
              RECOGNIZED: {
                enter: function () {
                  o.start(),
                    o.emit('tap', o, o.gameObject, o.lastPointer),
                    o.emit(''.concat(o.tapsCount, 'tap'), o, o.gameObject, o.lastPointer);
                },
              },
            },
            init: function () {
              this.state = my;
            },
            eventEmitter: !1,
          };
        return s.setRecongizedStateObject(new ig(a)), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setHoldTime(gy(t, 'time', 250)),
                this.setTapInterval(gy(t, 'tapInterval', 200)),
                this.setDragThreshold(gy(t, 'threshold', 9)),
                this.setTapOffset(gy(t, 'tapOffset', 10));
              var e = gy(t, 'taps', void 0);
              return (
                void 0 !== e
                  ? this.setTaps(e)
                  : (this.setMaxTaps(gy(t, 'maxTaps', void 0)), this.setMinTaps(gy(t, 'minTaps', void 0))),
                this
              );
            },
          },
          {
            key: 'onDragStart',
            value: function () {
              switch (this.state) {
                case my:
                  this.state = by;
                  break;
                case by:
                  var t = this.lastPointer;
                  yy(t.upX, t.upY, t.x, t.y) > this.tapOffset && ((this.state = xy), (this.state = by));
                  break;
                case xy:
                  this.state = by;
              }
            },
          },
          {
            key: 'onDragEnd',
            value: function () {
              this.state === by &&
                (this.tapsCount++,
                this.emit('tapping', this, this.gameObject, this.lastPointer),
                void 0 !== this.maxTaps && this.tapsCount === this.maxTaps && (this.state = xy));
            },
          },
          {
            key: 'onDrag',
            value: function () {
              this.state !== my && this.pointer.getDistance() > this.dragThreshold && (this.state = my);
            },
          },
          {
            key: 'preUpdate',
            value: function (t, e) {
              if (this.isRunning && this.enable && this.state === by) {
                var i = this.lastPointer;
                if (i.isDown) t - i.downTime > this.holdTime && (this.state = my);
                else
                  t - i.upTime > this.tapInterval &&
                    (void 0 === this.minTaps || this.tapsCount >= this.minTaps ? (this.state = xy) : (this.state = my));
              }
            },
          },
          {
            key: 'postUpdate',
            value: function (t, e) {
              this.isRunning && this.enable && this.state === xy && (this.state = my);
            },
          },
          {
            key: 'isTapped',
            get: function () {
              return this.state === xy;
            },
          },
          {
            key: 'setHoldTime',
            value: function (t) {
              return (this.holdTime = t), this;
            },
          },
          {
            key: 'setTapInterval',
            value: function (t) {
              return (this.tapInterval = t), this;
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
          {
            key: 'setTapOffset',
            value: function (t) {
              return (this.tapOffset = t), this;
            },
          },
          {
            key: 'setMaxTaps',
            value: function (t) {
              return (this.maxTaps = t), this;
            },
          },
          {
            key: 'setMinTaps',
            value: function (t) {
              return (this.minTaps = t), this;
            },
          },
          {
            key: 'setTaps',
            value: function (t, e) {
              return void 0 === e && (e = t), this.setMinTaps(t).setMaxTaps(e), this;
            },
          },
        ]),
        i
      );
    })(dy),
    my = 'IDLE',
    by = 'BEGIN',
    xy = 'RECOGNIZED',
    Cy = Phaser.Utils.Objects.GetValue,
    wy = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = d((s = e.call(this, t, n))),
          a = {
            states: {
              IDLE: {
                enter: function () {
                  (o.x = 0), (o.y = 0), (o.worldX = 0), (o.worldY = 0);
                },
                exit: function () {
                  var t = o.lastPointer;
                  (o.x = t.x), (o.y = t.y), (o.worldX = t.worldX), (o.worldY = t.worldY);
                },
              },
              BEGIN: {
                enter: function () {
                  o.start();
                },
                exit: function () {
                  o.stop();
                },
              },
              RECOGNIZED: {
                enter: function () {
                  o.emit('pressstart', o, o.gameObject, o.lastPointer);
                },
                exit: function () {
                  o.emit('pressend', o, o.gameObject, o.lastPointer);
                },
              },
            },
            init: function () {
              this.state = Sy;
            },
            eventEmitter: !1,
          };
        return s.setRecongizedStateObject(new ig(a)), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setDragThreshold(Cy(t, 'threshold', 9)),
                this.setHoldTime(Cy(t, 'time', 251)),
                this
              );
            },
          },
          {
            key: 'onDragStart',
            value: function () {
              (this.state = Py), 0 === this.holdTime && (this.state = Ty);
            },
          },
          {
            key: 'onDragEnd',
            value: function () {
              this.state = Sy;
            },
          },
          {
            key: 'onDrag',
            value: function () {
              this.state !== Sy && this.pointer.getDistance() > this.dragThreshold && (this.state = Sy);
            },
          },
          {
            key: 'preUpdate',
            value: function (t, e) {
              this.isRunning &&
                this.enable &&
                this.state === Py &&
                t - this.pointer.downTime >= this.holdTime &&
                (this.state = Ty);
            },
          },
          {
            key: 'isPressed',
            get: function () {
              return this.state === Ty;
            },
          },
          {
            key: 'setHoldTime',
            value: function (t) {
              return (this.holdTime = t), this;
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
        ]),
        i
      );
    })(dy),
    Sy = 'IDLE',
    Py = 'BEGIN',
    Ty = 'RECOGNIZED',
    Oy = Phaser.Utils.Objects.GetValue,
    My = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = d((s = e.call(this, t, n))),
          a = {
            states: {
              IDLE: {},
              BEGIN: {
                enter: function () {
                  var t = o.pointer;
                  (o.startX = t.x), (o.startY = t.y), (o.startWorldX = t.worldX), (o.startWorldY = t.worldY);
                },
              },
              RECOGNIZED: {
                enter: function () {
                  o.emit('panstart', o, o.gameObject, o.lastPointer);
                },
                exit: function () {
                  var t = o.lastPointer;
                  (o.endX = t.x),
                    (o.endY = t.y),
                    (o.endWorldX = t.worldX),
                    (o.endWorldY = t.worldY),
                    o.emit('panend', o, o.gameObject, o.lastPointer);
                },
              },
            },
            init: function () {
              this.state = Ey;
            },
            eventEmitter: !1,
          };
        return s.setRecongizedStateObject(new ig(a)), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setDragThreshold(Oy(t, 'threshold', 10)),
                this
              );
            },
          },
          {
            key: 'onDragStart',
            value: function () {
              (this.state = _y), 0 === this.dragThreshold && (this.state = Ry);
            },
          },
          {
            key: 'onDragEnd',
            value: function () {
              this.state = Ey;
            },
          },
          {
            key: 'onDrag',
            value: function () {
              switch (this.state) {
                case _y:
                  this.pointer.getDistance() >= this.dragThreshold && (this.state = Ry);
                  break;
                case Ry:
                  var t = this.pointer.position,
                    e = this.pointer.prevPosition;
                  (this.dx = t.x - e.x), (this.dy = t.y - e.y);
                  var i = this.pointer;
                  (this.x = i.x),
                    (this.y = i.y),
                    (this.worldX = i.worldX),
                    (this.worldY = i.worldY),
                    this.emit('pan', this, this.gameObject, this.lastPointer);
              }
            },
          },
          {
            key: 'isPanned',
            get: function () {
              return this.state === Ry;
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
        ]),
        i
      );
    })(dy),
    Ey = 'IDLE',
    _y = 'BEGIN',
    Ry = 'RECOGNIZED',
    Ly = Phaser.Math.Distance.Between,
    By = Phaser.Math.Angle.Between,
    Dy = {
      getDt: function () {
        return uu(this.scene);
      },
      getVelocity: function () {
        var t = this.pointer.position,
          e = this.pointer.prevPosition;
        return Ly(e.x, e.y, t.x, t.y) / (0.001 * this.getDt());
      },
      getVelocityX: function () {
        var t = this.pointer.position,
          e = this.pointer.prevPosition;
        return Math.abs(t.x - e.x) / (0.001 * this.getDt());
      },
      getVelocityY: function () {
        var t = this.pointer.position,
          e = this.pointer.prevPosition;
        return Math.abs(t.y - e.y) / (0.001 * this.getDt());
      },
      getVelocityAngle: function () {
        var t = this.pointer.position,
          e = this.pointer.prevPosition;
        return By(e.x, e.y, t.x, t.y);
      },
    },
    Iy = { 'up&down': 0, 'left&right': 1, '4dir': 2, '8dir': 3 },
    jy = {},
    Ay = Phaser.Utils.Objects.GetValue,
    zy = Phaser.Math.RadToDeg,
    Fy = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = d((s = e.call(this, t, n))),
          a = {
            states: {
              IDLE: {
                enter: function () {
                  (o.x = 0), (o.y = 0), (o.worldX = 0), (o.worldY = 0);
                },
                exit: function () {
                  var t = o.lastPointer;
                  (o.x = t.x), (o.y = t.y), (o.worldX = t.worldX), (o.worldY = t.worldY);
                },
              },
              BEGIN: {
                enter: function () {
                  o.validDrag = !1;
                },
              },
              RECOGNIZED: {
                enter: function () {
                  o.start(), o.updateDirectionStates(), o.emit('swipe', o, o.gameObject, o.lastPointer);
                },
                exit: function () {
                  o.stop(), o.clearDirectionStates();
                },
              },
            },
            init: function () {
              this.state = Vy;
            },
            eventEmitter: !1,
          };
        return s.setRecongizedStateObject(new ig(a)), s.clearDirectionStates(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setDragThreshold(Ay(t, 'threshold', 10)),
                this.setVelocityThreshold(Ay(t, 'velocityThreshold', 1e3)),
                this.setDirectionMode(Ay(t, 'dir', '8dir')),
                this
              );
            },
          },
          {
            key: 'onDragStart',
            value: function () {
              this.state = Wy;
            },
          },
          {
            key: 'onDragEnd',
            value: function () {
              this.state = Vy;
            },
          },
          {
            key: 'onDrag',
            value: function () {
              this.state === Wy &&
                (this.validDrag ||
                  (this.validDrag = 0 === this.dragThreshold || this.pointer.getDistance() >= this.dragThreshold),
                this.validDrag && this.dragVelocity > this.velocityThreshold && (this.state = Yy));
            },
          },
          {
            key: 'postUpdate',
            value: function (t, e) {
              this.isRunning && this.enable && this.state === Yy && (this.state = Vy);
            },
          },
          {
            key: 'isSwiped',
            get: function () {
              return this.state === Yy;
            },
          },
          {
            key: 'dragVelocity',
            get: function () {
              var t;
              switch (this.dirMode) {
                case 0:
                  t = this.getVelocityY();
                  break;
                case 1:
                  t = this.getVelocityX();
                  break;
                default:
                  t = this.getVelocity();
              }
              return t;
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
          {
            key: 'setVelocityThreshold',
            value: function (t) {
              return (this.velocityThreshold = t), this;
            },
          },
          {
            key: 'setDirectionMode',
            value: function (t) {
              return 'string' == typeof t && (t = Iy[t]), (this.dirMode = t), this;
            },
          },
          {
            key: 'updateDirectionStates',
            value: function () {
              return (
                (function (t, e, i) {
                  switch (
                    (void 0 === i ? (i = {}) : !0 === i && (i = jy),
                    (i.left = !1),
                    (i.right = !1),
                    (i.up = !1),
                    (i.down = !1),
                    (t = (t + 360) % 360),
                    e)
                  ) {
                    case 0:
                      t < 180 ? (i.down = !0) : (i.up = !0);
                      break;
                    case 1:
                      t > 90 && t <= 270 ? (i.left = !0) : (i.right = !0);
                      break;
                    case 2:
                      t > 45 && t <= 135
                        ? (i.down = !0)
                        : t > 135 && t <= 225
                        ? (i.left = !0)
                        : t > 225 && t <= 315
                        ? (i.up = !0)
                        : (i.right = !0);
                      break;
                    case 3:
                      t > 22.5 && t <= 67.5
                        ? ((i.down = !0), (i.right = !0))
                        : t > 67.5 && t <= 112.5
                        ? (i.down = !0)
                        : t > 112.5 && t <= 157.5
                        ? ((i.down = !0), (i.left = !0))
                        : t > 157.5 && t <= 202.5
                        ? (i.left = !0)
                        : t > 202.5 && t <= 247.5
                        ? ((i.left = !0), (i.up = !0))
                        : t > 247.5 && t <= 292.5
                        ? (i.up = !0)
                        : t > 292.5 && t <= 337.5
                        ? ((i.up = !0), (i.right = !0))
                        : (i.right = !0);
                  }
                })(zy(this.getVelocityAngle()), this.dirMode, this),
                this
              );
            },
          },
          {
            key: 'clearDirectionStates',
            value: function () {
              return (this.left = !1), (this.right = !1), (this.up = !1), (this.down = !1), this;
            },
          },
        ]),
        i
      );
    })(dy);
  Object.assign(Fy.prototype, Dy);
  var Vy = 'IDLE',
    Wy = 'BEGIN',
    Yy = 'RECOGNIZED',
    Xy = Phaser.Utils.Objects.GetValue,
    Gy = Phaser.Utils.Array.SpliceOne,
    Hy = Phaser.Math.Distance.Between,
    Uy = Phaser.Math.Angle.Between,
    Ny = (function () {
      function t(e, i) {
        r(this, t);
        var n = ho(e);
        n === e && (e = void 0);
        var s = n.input.manager.pointersTotal - 1;
        s < 2 && n.input.addPointer(2 - s),
          (this.scene = n),
          (this.gameObject = e),
          e && e.setInteractive(Xy(i, 'inputConfig', void 0)),
          this.setEventEmitter(Xy(i, 'eventEmitter', void 0)),
          (this._enable = void 0),
          (this.pointers = []),
          (this.movedState = {}),
          this.resetFromJSON(i),
          this.boot();
      }
      return (
        a(t, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.setEnable(Xy(t, 'enable', !0)),
                (this.bounds = Xy(t, 'bounds', void 0)),
                (this.tracerState = Jy),
                (this.pointers.length = 0),
                wt(this.movedState),
                this
              );
            },
          },
          {
            key: 'boot',
            value: function () {
              this.gameObject
                ? this.gameObject.on('pointerdown', this.onPointerDown, this)
                : this.scene.input.on('pointerdown', this.onPointerDown, this),
                this.scene.input.on('pointerup', this.onPointerUp, this),
                this.scene.input.on('gameout', this.dragCancel, this),
                this.scene.input.on('pointermove', this.onPointerMove, this),
                this.scene.sys.events.once('shutdown', this.destroy, this);
            },
          },
          {
            key: 'shutdown',
            value: function () {
              this.scene &&
                (this.destroyEventEmitter(),
                (this.pointers.length = 0),
                wt(this.movedState),
                this.gameObject || this.scene.input.off('pointerdown', this.onPointerDown, this),
                this.scene.input.off('pointerup', this.onPointerUp, this),
                this.scene.input.off('gameout', this.dragCancel, this),
                this.scene.input.off('pointermove', this.onPointerMove, this),
                this.scene.sys.events.off('shutdown', this.destroy, this),
                (this.scene = void 0),
                (this.gameObject = void 0));
            },
          },
          {
            key: 'destroy',
            value: function () {
              this.shutdown();
            },
          },
          {
            key: 'enable',
            get: function () {
              return this._enable;
            },
            set: function (t) {
              if (this._enable !== t) return t || this.dragCancel(), (this._enable = t), this;
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'onPointerDown',
            value: function (t) {
              if (
                this.enable &&
                2 !== this.pointers.length &&
                (!this.bounds || this.bounds.contains(t.x, t.y)) &&
                -1 === this.pointers.indexOf(t)
              )
                switch (((this.movedState[t.id] = !1), this.pointers.push(t), this.tracerState)) {
                  case Jy:
                    (this.tracerState = qy), this.onDrag1Start();
                    break;
                  case qy:
                    (this.tracerState = Zy), this.onDrag2Start();
                }
            },
          },
          {
            key: 'onPointerUp',
            value: function (t) {
              if (this.enable && (!this.bounds || this.bounds.contains(t.x, t.y))) {
                var e = this.pointers.indexOf(t);
                if (-1 !== e)
                  switch ((delete this.movedState[t.id], Gy(this.pointers, e), this.tracerState)) {
                    case qy:
                      (this.tracerState = Jy), this.onDrag1End();
                      break;
                    case Zy:
                      (this.tracerState = qy), this.onDrag2End(), this.onDrag1Start();
                  }
              }
            },
          },
          {
            key: 'onPointerMove',
            value: function (t) {
              if (this.enable && t.isDown) {
                var e = !this.bounds || this.bounds.contains(t.x, t.y),
                  i = -1 !== this.pointers.indexOf(t);
                if (!i && e);
                else if (i && !e) this.onPointerUp(t);
                else if (
                  (this.movedState[t.id] || (this.movedState[t.id] = t.x !== t.downX || t.y !== t.downY),
                  this.movedState[t.id])
                )
                  switch (this.tracerState) {
                    case qy:
                      this.onDrag1();
                      break;
                    case Zy:
                      this.onDrag2();
                  }
              }
            },
          },
          {
            key: 'dragCancel',
            value: function () {
              return (
                this.tracerState === Zy && this.onDrag2End(),
                (this.pointers.length = 0),
                wt(this.movedState),
                (this.tracerState = Jy),
                this
              );
            },
          },
          {
            key: 'onDrag1Start',
            value: function () {
              this.emit('drag1start', this);
            },
          },
          {
            key: 'onDrag1End',
            value: function () {
              this.emit('drag1end', this);
            },
          },
          {
            key: 'onDrag1',
            value: function () {
              this.emit('drag1', this);
            },
          },
          {
            key: 'onDrag2Start',
            value: function () {
              this.emit('drag2start', this);
            },
          },
          {
            key: 'onDrag2End',
            value: function () {
              this.emit('drag2end', this);
            },
          },
          {
            key: 'onDrag2',
            value: function () {
              this.emit('drag2', this);
            },
          },
          {
            key: 'distanceBetween',
            get: function () {
              if (this.tracerState !== Zy) return 0;
              var t = this.pointers[0],
                e = this.pointers[1];
              return Hy(t.x, t.y, e.x, e.y);
            },
          },
          {
            key: 'angleBetween',
            get: function () {
              if (this.tracerState !== Zy) return 0;
              var t = this.pointers[0],
                e = this.pointers[1];
              return Uy(t.x, t.y, e.x, e.y);
            },
          },
          {
            key: 'drag1Vector',
            get: function () {
              var t = this.pointers[0];
              if (t && this.movedState[t.id]) {
                var e = t.position,
                  i = t.prevPosition;
                (Ky.x = e.x - i.x), (Ky.y = e.y - i.y);
              } else (Ky.x = 0), (Ky.y = 0);
              return Ky;
            },
          },
          {
            key: 'centerX',
            get: function () {
              if (this.tracerState !== Zy) return 0;
              var t = this.pointers[0].position,
                e = this.pointers[1].position;
              return (t.x + e.x) / 2;
            },
          },
          {
            key: 'centerY',
            get: function () {
              if (this.tracerState !== Zy) return 0;
              var t = this.pointers[0].position,
                e = this.pointers[1].position;
              return (t.y + e.y) / 2;
            },
          },
          {
            key: 'prevCenterX',
            get: function () {
              if (this.tracerState !== Zy) return 0;
              var t = this.movedState[this.pointers[0].id] ? this.pointers[0].prevPosition : this.pointers[0].position,
                e = this.movedState[this.pointers[1].id] ? this.pointers[1].prevPosition : this.pointers[1].position;
              return (t.x + e.x) / 2;
            },
          },
          {
            key: 'prevCenterY',
            get: function () {
              if (this.tracerState !== Zy) return 0;
              var t = this.movedState[this.pointers[0].id] ? this.pointers[0].prevPosition : this.pointers[0].position,
                e = this.movedState[this.pointers[1].id] ? this.pointers[1].prevPosition : this.pointers[1].position;
              return (t.y + e.y) / 2;
            },
          },
          {
            key: 'movementCenterX',
            get: function () {
              return this.centerX - this.prevCenterX;
            },
          },
          {
            key: 'movementCenterY',
            get: function () {
              return this.centerY - this.prevCenterY;
            },
          },
          {
            key: 'setRecongizedStateObject',
            value: function (t) {
              return (this.recongizedState = t), this;
            },
          },
          {
            key: 'state',
            get: function () {
              return this.recongizedState.state;
            },
            set: function (t) {
              this.recongizedState.state = t;
            },
          },
          {
            key: 'cancel',
            value: function () {
              return (this.state = $y), this;
            },
          },
        ]),
        t
      );
    })();
  Object.assign(Ny.prototype, hr);
  var Ky = {},
    Jy = 0,
    qy = 1,
    Zy = 2,
    $y = 'IDLE',
    Qy = Phaser.Utils.Objects.GetValue,
    tk = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = d((s = e.call(this, t, n))),
          a = {
            states: {
              IDLE: {
                enter: function () {
                  (o.prevDistance = void 0), (o.scaleFactor = 1);
                },
              },
              BEGIN: {},
              RECOGNIZED: {
                enter: function () {
                  o.emit('pinchstart', o);
                },
                exit: function () {
                  o.emit('pinchend', o);
                },
              },
            },
            init: function () {
              this.state = ek;
            },
            eventEmitter: !1,
          };
        return s.setRecongizedStateObject(new ig(a)), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setDragThreshold(Qy(t, 'threshold', 0)),
                this
              );
            },
          },
          {
            key: 'onDrag2Start',
            value: function () {
              (this.scaleFactor = 1),
                (this.prevDistance = this.distanceBetween),
                (this.state = ik),
                0 === this.dragThreshold && (this.state = nk);
            },
          },
          {
            key: 'onDrag2End',
            value: function () {
              this.state = ek;
            },
          },
          {
            key: 'onDrag2',
            value: function () {
              switch (this.state) {
                case ik:
                  if (
                    this.pointers[0].getDistance() >= this.dragThreshold &&
                    this.pointers[1].getDistance() >= this.dragThreshold
                  ) {
                    var t = this.distanceBetween;
                    (this.scaleFactor = t / this.prevDistance), (this.prevDistance = t), (this.state = nk);
                  }
                  break;
                case nk:
                  t = this.distanceBetween;
                  (this.scaleFactor = t / this.prevDistance), this.emit('pinch', this), (this.prevDistance = t);
              }
            },
          },
          {
            key: 'isPinched',
            get: function () {
              return this.state === nk;
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
        ]),
        i
      );
    })(Ny),
    ek = 'IDLE',
    ik = 'BEGIN',
    nk = 'RECOGNIZED',
    sk = Phaser.Math.RotateAround,
    rk = function (t, e, i, n) {
      return sk(t, e, i, n), (t.rotation += n), t;
    },
    ok = {},
    ak = Phaser.Utils.Objects.GetValue,
    hk = Phaser.Math.Angle.WrapDegrees,
    lk = Phaser.Math.Angle.ShortestBetween,
    uk = Phaser.Math.RadToDeg,
    ck = Phaser.Math.DegToRad,
    dk = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = d((s = e.call(this, t, n))),
          a = {
            states: {
              IDLE: {
                enter: function () {
                  (o.prevAngle = void 0), (o.angle = 0);
                },
              },
              BEGIN: {},
              RECOGNIZED: {
                enter: function () {
                  o.emit('rotatestart', o);
                },
                exit: function () {
                  o.emit('rotateend', o);
                },
              },
            },
            init: function () {
              this.state = pk;
            },
            eventEmitter: !1,
          };
        return s.setRecongizedStateObject(new ig(a)), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setDragThreshold(ak(t, 'threshold', 0)),
                this
              );
            },
          },
          {
            key: 'onDrag2Start',
            value: function () {
              (this.prevAngle = hk(uk(this.angleBetween))),
                (this.state = vk),
                0 === this.dragThreshold && (this.state = gk);
            },
          },
          {
            key: 'onDrag2End',
            value: function () {
              this.state = pk;
            },
          },
          {
            key: 'onDrag2',
            value: function () {
              switch (this.state) {
                case vk:
                  if (
                    this.pointers[0].getDistance() >= this.dragThreshold &&
                    this.pointers[1].getDistance() >= this.dragThreshold
                  ) {
                    var t = hk(uk(this.angleBetween));
                    (this.angle = lk(this.prevAngle, t)), (this.prevAngle = t), (this.state = gk);
                  }
                  break;
                case gk:
                  t = hk(uk(this.angleBetween));
                  (this.angle = lk(this.prevAngle, t)), (this.prevAngle = t), this.emit('rotate', this);
              }
            },
          },
          {
            key: 'isRotated',
            get: function () {
              return this.state === gk;
            },
          },
          {
            key: 'rotation',
            get: function () {
              return ck(this.angle);
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
        ]),
        i
      );
    })(Ny),
    fk = {
      spinObject: function (t, e) {
        if (!this.isRotation) return this;
        void 0 === e && (e = this.pointers[0].camera);
        var i = this.movementCenterX,
          n = this.movementCenterY,
          s = (function (t, e, i, n) {
            return void 0 === n ? (n = {}) : !0 === n && (n = ok), i.getWorldPoint(t, e, n), n;
          })(this.centerX, this.centerY, e, !0),
          r = s.x,
          o = s.y,
          a = this.rotation;
        if (Array.isArray(t))
          for (var h = t, l = 0, u = h.length; l < u; l++) ((t = h[l]).x += i), (t.y += n), rk(t, r, o, a);
        else (t.x += i), (t.y += n), rk(t, r, o, a);
        return this;
      },
    };
  Object.assign(dk.prototype, fk);
  var pk = 'IDLE',
    vk = 'BEGIN',
    gk = 'RECOGNIZED',
    yk = Phaser.Utils.Objects.GetValue,
    kk = function (t) {
      var e = yk(t, 'tap', void 0);
      if (!1 !== e) {
        !0 === e && (e = void 0);
        var i = this._childrenInteractive;
        (this._tap = new ky(this, e)),
          this._tap.on(
            'tap',
            function (t, e, n) {
              $g(
                i.eventEmitter,
                ''.concat(i.eventNamePrefix).concat(t.tapsCount, 'tap'),
                i.targetSizers,
                t.worldX,
                t.worldY,
                n
              );
            },
            this
          );
      }
    },
    mk = Phaser.Utils.Objects.GetValue,
    bk = function (t) {
      var e = mk(t, 'press', void 0);
      if (!1 !== e) {
        !0 === e && (e = void 0);
        var i = this._childrenInteractive;
        (this._press = new wy(this, e)),
          this._press
            .on(
              'pressstart',
              function (t, e, n) {
                $g(i.eventEmitter, ''.concat(i.eventNamePrefix, 'pressstart'), i.targetSizers, t.worldX, t.worldY, n);
              },
              this
            )
            .on(
              'pressend',
              function (t, e, n) {
                $g(i.eventEmitter, ''.concat(i.eventNamePrefix, 'pressend'), i.targetSizers, t.worldX, t.worldY, n);
              },
              this
            );
      }
    },
    xk = Phaser.Utils.Objects.GetValue,
    Ck = function (t) {
      var e = xk(t, 'swipe', void 0);
      if (!1 !== e) {
        !0 === e && (e = void 0), void 0 === e && (e = {}), e.hasOwnProperty('dir') || (e.dir = '4dir');
        var i = this._childrenInteractive;
        (this._swipe = new Fy(this, e)),
          this._swipe.on(
            'swipe',
            function (t, e, n) {
              var s = t.left ? 'left' : t.right ? 'right' : t.up ? 'up' : 'down';
              $g(
                i.eventEmitter,
                ''.concat(i.eventNamePrefix, 'swipe').concat(s),
                i.targetSizers,
                t.worldX,
                t.worldY,
                n
              );
            },
            this
          );
      }
    },
    wk = Phaser.Utils.Objects.GetValue,
    Sk = function (t, e) {
      return (
        t.setInteractive(),
        wk(e, 'dropZone', !1) && (t.input.dropZone = !0),
        (t._childrenInteractive = {
          targetSizers: wk(e, 'targets', [t]),
          eventEmitter: wk(e, 'eventEmitter', t),
          eventNamePrefix: wk(e, 'inputEventPrefix', 'child.'),
        }),
        ty.call(t, e),
        ny.call(t, e),
        oy.call(t, e),
        uy.call(t, e),
        kk.call(t, e),
        bk.call(t, e),
        Ck.call(t, e),
        t
      );
    },
    Pk = {
      getSizerConfig: function (t) {
        return void 0 === t && (t = this), Jf(t);
      },
      getChildPrevState: function (t) {
        var e = Jf(t);
        return e.hasOwnProperty('prevState') || (e.prevState = {}), e.prevState;
      },
      pushIntoBounds: function (t) {
        return (
          void 0 === t && (t = to(this.scene)),
          (this.left = Math.max(this.left, t.left)),
          (this.right = Math.min(this.right, t.right)),
          (this.top = Math.max(this.top, t.top)),
          (this.bottom = Math.min(this.bottom, t.bottom)),
          this
        );
      },
      drawBounds: function (t, e) {
        var i,
          n,
          s,
          r,
          o,
          a = t.scene;
        if ('number' == typeof e) i = e;
        else {
          (i = Cp(e, 'color')), (n = Cp(e, 'lineWidth'));
          var h = Cp(e, 'name', !1);
          h &&
            ((s = Cp(h, 'createTextCallback', Sp)),
            (r = Cp(h, 'createTextCallbackScope', void 0)),
            'string' == typeof (o = Cp(h, 'align', 'left-top')) && (o = Zf[o]));
        }
        if ((void 0 === i && (i = 16777215), void 0 === n && (n = 1), s && !t.children)) {
          (t.children = new wp(a)),
            t.once('destroy', function (t, e) {
              t.children.destroy(!e), (t.children = void 0);
            });
          var l = t.clear.bind(t);
          t.clear = function () {
            l(), t.children.clear(!1, !0);
          };
        }
        for (var u, c, d = this.getAllShownChildren([this]), f = 0, p = d.length; f < p; f++)
          ((u = d[f]).getBounds || (void 0 !== u.width && void 0 !== u.height)) &&
            ((Pp = Fr(u, Pp)),
            null != i && t.lineStyle(n, i).strokeRectShape(Pp),
            u.name &&
              s &&
              (c = r ? s.call(r, a) : s(a)) &&
              (c.setText(u.name), t.children.add(c), xp(c, Pp.x, Pp.y, Pp.width, Pp.height, o)));
        return this;
      },
      resolveWidth: Xp,
      resolveChildrenWidth: function (t) {
        var e, i;
        for (var n in this.sizerChildren)
          (e = this.sizerChildren[n]) &&
            e.isRexSizer &&
            !e.ignoreLayout &&
            ((i = this.getExpandedChildWidth(e, t)), (i = e.resolveWidth(i)), e.resolveChildrenWidth(i));
      },
      resolveHeight: Gp,
      postResolveSize: function (t, e) {},
      getChildWidth: function (t) {
        return t.isRexSizer ? Math.max(t.minWidth, t.childrenWidth) : void 0 !== t.minWidth ? t.minWidth : Dr(t);
      },
      getChildHeight: function (t) {
        return t.isRexSizer ? Math.max(t.minHeight, t.childrenHeight) : void 0 !== t.minHeight ? t.minHeight : Ir(t);
      },
      getExpandedChildWidth: function (t, e) {
        return e;
      },
      getExpandedChildHeight: function (t, e) {
        return e;
      },
      getChildrenWidth: function () {
        return 0;
      },
      getChildrenHeight: function () {
        return 0;
      },
      addChildrenMap: Vp,
      addElement: Vp,
      removeChildrenMap: function (t) {
        if ('object' === n(t)) {
          var e = t;
          for (var t in this.childrenMap) if (this.childrenMap[t] === e) return delete this.childrenMap[t], this;
        }
        return delete this.childrenMap[t], this;
      },
      getElement: function (t, e) {
        if (('string' == typeof t && (t = t.split('.')), 0 !== t.length)) {
          var i = t.shift(),
            n = null;
          if ('#' === i.charAt(0)) (i = i.substring(1)), (n = this.getByName(i, e));
          else if (-1 === i.indexOf('[')) this.childrenMap && (n = this.childrenMap[i]);
          else {
            var s = i.match(Wp);
            if (null != s && this.childrenMap) {
              var r = this.childrenMap[s[1]];
              r && (n = r[s[2]]);
            }
          }
          return 0 === t.length ? n : n && n.childrenMap ? n.getElement(t) : null;
        }
      },
      getChildIndex: function (t) {
        if (Array.isArray(this.sizerChildren)) {
          var e = this.sizerChildren.indexOf(t);
          return -1 === e && (e = null), e;
        }
        if (this.getParentSizer(t) !== this) return null;
        for (var i in this.sizerChildren) if (this.sizerChildre[i] === t) return i;
        return null;
      },
      getAllChildrenSizers: function (t) {
        void 0 === t && (t = []);
        for (var e = t.length, i = this.getChildrenSizers(t), n = t.length, s = e; s < n; s++)
          i[s].getAllChildrenSizers(t);
        return t;
      },
      getChildrenSizers: function (t) {
        return void 0 === t && (t = []), t;
      },
      preLayout: Up,
      layout: function () {
        var t = this.scaleX,
          e = this.scaleY,
          i = 1 === t && 1 === e;
        return (
          i || this.setScale(1), this.runLayout(), this.postLayout(), this._postLayout(), i || this.setScale(t, e), this
        );
      },
      runLayout: function (t, e, i) {
        if (this.ignoreLayout) return this;
        var n = !t;
        return (
          n && this.preLayout(),
          (e = this.resolveWidth(e)),
          n && (this.resolveChildrenWidth(e), this.runWidthWrap(e)),
          (i = this.resolveHeight(i)),
          this.postResolveSize(e, i),
          this.resize(e, i),
          this.sizerEventsEnable && void 0 === this.layoutedChildren && (this.layoutedChildren = []),
          this.layoutChildren(),
          this.layoutBackgrounds(),
          this.sizerEventsEnable &&
            (this.emit('postlayout', this.layoutedChildren, this), (this.layoutedChildren.length = 0)),
          this
        );
      },
      layoutChildren: function () {},
      runWidthWrap: Np,
      layoutBackgrounds: function () {
        if (void 0 !== this.backgroundChildren)
          for (
            var t,
              e,
              i,
              n,
              s,
              r,
              o,
              a = this.backgroundChildren,
              h = this.left,
              l = this.top,
              u = this.width,
              c = this.height,
              d = 0,
              f = a.length;
            d < f;
            d++
          )
            (e = (t = a[d]).rexSizer).hidden ||
              ((i = e.padding),
              zg.call(this, t),
              (n = h + i.left),
              (s = l + i.top),
              (r = u - i.left - i.right),
              (o = c - i.top - i.bottom),
              Kp(t, r, o),
              Fg.call(this, t, n, s, r, o, Vg));
      },
      postLayout: function (t, e, i) {
        return this;
      },
      _postLayout: function (t, e, i) {
        return this._anchor && this._anchor.updatePosition(), this;
      },
      setAnchor: function (t) {
        void 0 === t && (t = {});
        var e = t.hasOwnProperty('width'),
          i = t.hasOwnProperty('height'),
          n = t.hasOwnProperty('onResizeCallback');
        return (
          (!e && !i) ||
            n ||
            (t.onResizeCallback = function (t, n, s) {
              e && s.setMinWidth(t), i && s.setMinHeight(n), s.layout();
            }),
          void 0 === this._anchor ? (this._anchor = new Qp(this, t)) : this._anchor.resetFromJSON(t),
          this
        );
      },
      isInTouching: function (t, e) {
        return (
          (Ff(t) || 'string' == typeof t) && ((e = t), (t = void 0)),
          void 0 === e ? (e = this) : 'string' == typeof e && (e = this.getElement(e)),
          Rg(e, t)
        );
      },
      pointToChild: function (t, e, i, n, s) {
        if (
          (Eg(i) || ((s = i), (i = void 0), (n = void 0)),
          void 0 === s && (s = this.sizerChildren ? this.sizerChildren : this.children),
          Lg(s))
        ) {
          for (var r, o = 0, a = s.length; o < a; o++) if (((r = s[o]), Bg(r, t, e, i, n))) return r;
        } else for (var h in s) if (((r = s[h]), Bg(r, t, e, i, n))) return r;
        return null;
      },
      setDraggable: function (t, e, i) {
        if (Wg(t)) {
          var s = t;
          (t = s.sensor), (i = s.target), (e = s.draggable);
        } else 'boolean' != typeof e && ((i = e), (e = void 0));
        var r = n(t);
        if ('string' === r) {
          var o = t;
          if (!(t = this.getElement(o))) return console.error("Can get element '".concat(o, "'")), this;
        } else (void 0 !== t && 'object' == r) || ((e = t), (t = this));
        return (
          void 0 === e && (e = !0),
          t.input && t.input._rexUIDragSizer
            ? (t.input.draggable = e)
            : e &&
              (t.setInteractive(),
              t.scene.input.setDraggable(t),
              t
                .on(
                  'drag',
                  function (e, n, s) {
                    var r = void 0 === i ? this.getTopmostSizer() : i;
                    (r.x += n - t.x), (r.y += s - t.y), r.emit('sizer.drag', e, n, s);
                  },
                  this
                )
                .on(
                  'dragstart',
                  function (t, e, n) {
                    (void 0 === i ? this.getTopmostSizer() : i).emit('sizer.dragstart', t, e, n);
                  },
                  this
                )
                .on(
                  'dragend',
                  function (t, e, n, s) {
                    (void 0 === i ? this.getTopmostSizer() : i).emit('sizer.dragend', t, e, n, s);
                  },
                  this
                )
                .on('drop', function (t, e) {
                  (void 0 === i ? this.getTopmostSizer() : i).emit('sizer.drop', t, e);
                }),
              (t.input._rexUIDragSizer = !0)),
          this
        );
      },
      setChildrenInteractive: function (t) {
        return Sk(this, t), this;
      },
      broadcastEvent: function () {
        for (var t = this.getAllChildren([this]), e = 0, i = t.length; e < i; e++) {
          var n = t[e];
          n.emit.apply(n, arguments);
        }
        return this;
      },
    };
  Object.assign(Pk, Yp, _p, Fp, Lp, lv, bv, Lv, Fv, Yv, Yg, Ug, qg, Nv, _g, Hp);
  var Tk = Phaser.Utils.Objects.GetValue,
    Ok = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          ((l = e.call(this, t, n, s, 1, 1)).isRexSizer = !0),
          l.setMinSize(o, a),
          l.setName(Tk(h, 'name', '')),
          (l.rexSizer = {}),
          (l.space = {}),
          (l.backgroundChildren = void 0),
          (l.sizerChildren = void 0),
          (l.childrenMap = {}),
          (l.layoutedChildren = void 0),
          l.enableLayoutWarn();
        var u = Tk(h, 'anchor', void 0);
        u && l.setAnchor(u), l.setInnerPadding(Tk(h, 'space', 0));
        var c = Tk(h, 'draggable', !1);
        return (
          c && l.setDraggable(c),
          l.setSizerEventsEnable(Tk(h, 'sizerEvents', !1)),
          l.setDirty(!0),
          Tk(h, 'enableLayer', !1) && l.enableLayer(),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              if (this.scene && !this.ignoreDestroy) {
                if (t)
                  for (var e = this.getAllChildrenSizers([this]), n = 0, s = e.length; n < s; n++)
                    e[n].sizerEventsEnable = !1;
                g(u(i.prototype), 'destroy', this).call(this, t),
                  wt(this.backgroundChildren),
                  wt(this.sizerChildren),
                  (this.childrenMap = void 0),
                  (this.space = void 0),
                  (this.rexSizer = void 0),
                  (this.layoutedChildren = void 0);
              }
            },
          },
          {
            key: 'setMinSize',
            value: function (t, e) {
              return this.setMinWidth(t).setMinHeight(e), this;
            },
          },
          {
            key: 'setMinWidth',
            value: function (t) {
              return null == t && (t = 0), (this.minWidth = t), this;
            },
          },
          {
            key: 'setMinHeight',
            value: function (t) {
              return null == t && (t = 0), (this.minHeight = t), this;
            },
          },
          {
            key: 'setDirty',
            value: function (t) {
              return void 0 === t && (t = !0), (this.dirty = t), this;
            },
          },
          {
            key: 'setSizerEventsEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.sizerEventsEnable = t), this;
            },
          },
          {
            key: 'enableLayoutWarn',
            value: function (t) {
              return void 0 === t && (t = !0), (this.layoutWarnEnable = t), this;
            },
          },
          {
            key: 'ignoreLayout',
            get: function () {
              return this.rexSizer.hidden || !this.dirty;
            },
          },
          {
            key: 'childrenWidth',
            get: function () {
              return (
                void 0 === this._childrenWidth && (this._childrenWidth = this.getChildrenWidth()), this._childrenWidth
              );
            },
          },
          {
            key: 'childrenHeight',
            get: function () {
              return (
                void 0 === this._childrenHeight && (this._childrenHeight = this.getChildrenHeight()),
                this._childrenHeight
              );
            },
          },
          {
            key: 'left',
            get: function () {
              return this.x - Dr(this) * this.originX;
            },
            set: function (t) {
              this.x += t - this.left;
            },
          },
          {
            key: 'alignLeft',
            value: function (t) {
              return (this.left = t), this;
            },
          },
          {
            key: 'right',
            get: function () {
              return this.left + Dr(this);
            },
            set: function (t) {
              this.x += t - this.right;
            },
          },
          {
            key: 'alignRight',
            value: function (t) {
              return (this.right = t), this;
            },
          },
          {
            key: 'centerX',
            get: function () {
              return this.left + Dr(this) / 2;
            },
            set: function (t) {
              this.x += t - this.centerX;
            },
          },
          {
            key: 'alignCenterX',
            value: function (t) {
              return (this.centerX = t), this;
            },
          },
          {
            key: 'top',
            get: function () {
              return this.y - Ir(this) * this.originY;
            },
            set: function (t) {
              this.y += t - this.top;
            },
          },
          {
            key: 'alignTop',
            value: function (t) {
              return (this.top = t), this;
            },
          },
          {
            key: 'bottom',
            get: function () {
              return this.top + Ir(this);
            },
            set: function (t) {
              this.y += t - this.bottom;
            },
          },
          {
            key: 'alignBottom',
            value: function (t) {
              return (this.bottom = t), this;
            },
          },
          {
            key: 'centerY',
            get: function () {
              return this.top + Ir(this) / 2;
            },
            set: function (t) {
              this.y += t - this.centerY;
            },
          },
          {
            key: 'alignCenterY',
            value: function (t) {
              return (this.centerY = t), this;
            },
          },
          {
            key: 'innerLeft',
            get: function () {
              return this.left + this.space.left * this.scaleX;
            },
          },
          {
            key: 'innerRight',
            get: function () {
              return this.right - this.space.right * this.scaleX;
            },
          },
          {
            key: 'innerTop',
            get: function () {
              return this.top + this.space.top * this.scaleY;
            },
          },
          {
            key: 'innerBottom',
            get: function () {
              return this.bottom - this.space.bottom * this.scaleY;
            },
          },
          {
            key: 'innerWidth',
            get: function () {
              return (this.width - this.space.left - this.space.right) * this.scaleX;
            },
          },
          {
            key: 'innerHeight',
            get: function () {
              return (this.height - this.space.top - this.space.bottom) * this.scaleY;
            },
          },
          {
            key: 'minInnerWidth',
            get: function () {
              var t = (this.minWidth - this.space.left - this.space.right) * this.scaleX;
              return Math.max(t, 0);
            },
          },
          {
            key: 'minInnerHeight',
            get: function () {
              var t = (this.minHeight - this.space.top - this.space.bottom) * this.scaleY;
              return Math.max(t, 0);
            },
          },
        ]),
        i
      );
    })(Kf);
  Object.assign(Ok.prototype, Pk);
  var Mk = function (t, e) {
      t.width < t.childrenWidth &&
        console.warn('Layout width error: Parent='.concat(e.constructor.name, ', Child=').concat(t.constructor.name)),
        t.height < t.childrenHeight &&
          console.warn(
            'Layout height error: Parent='.concat(e.constructor.name, ', Child=').concat(t.constructor.name)
          );
    },
    Ek = Phaser.Utils.Objects.IsPlainObject,
    _k = Phaser.Utils.Objects.GetValue,
    Rk = Phaser.Display.Align.CENTER,
    Lk = Phaser.Utils.String.UUID,
    Bk = {
      add: function (t, e, i, n, s, r, o, a, h) {
        (Ep.call(this, t), Ek(e)) &&
          ((e = _k((l = e), 'key', void 0)),
          (i = _k(l, 'align', Rk)),
          (a = _k(l, 'offsetX', 0)),
          (h = _k(l, 'offsetY', 0)),
          (n = _k(l, 'padding', 0)),
          (s = _k(l, 'expand', !0)),
          t.isRexSizer || ((r = _k(l, 'minWidth', t._minWidth)), (o = _k(l, 'minHeight', t._minHeighted))));
        var l,
          u = void 0 !== e;
        return (
          u || (e = Lk()),
          'string' == typeof i && (i = Zf[i]),
          void 0 === i && (i = Rk),
          void 0 === a && (a = 0),
          void 0 === h && (h = 0),
          void 0 === n && (n = 0),
          void 0 === s && (s = !0),
          t.isRexSizer || (void 0 === r && (r = t._minWidth), void 0 === o && (o = t._minHeight)),
          ((l = this.getSizerConfig(t)).align = i),
          (l.alignOffsetX = a),
          (l.alignOffsetY = h),
          (l.padding = Op(n)),
          Ek(s)
            ? ((l.expandWidth = _k(s, 'width', !1)), (l.expandHeight = _k(s, 'height', !1)))
            : ((l.expandWidth = s), (l.expandHeight = s)),
          t.isRexSizer ||
            (l.expandWidth && (t.minWidth = void 0 === r ? Dr(t) : r),
            l.expandHeight && (t.minHeight = void 0 === o ? Ir(t) : o)),
          this.sizerChildren.hasOwnProperty(e) && this.sizerChildren[e].destroy(),
          (this.sizerChildren[e] = t),
          u && this.addChildrenMap(e, t),
          this
        );
      },
    },
    Dk = Kf.prototype.clear,
    Ik = function (t) {
      this.backgroundChildren && (this.backgroundChildren.length = 0);
      var e,
        i = !t && this.sizerEventsEnable;
      if ((i && (e = this.getChildren([])), Dk.call(this, t), i))
        for (var n, s = 0, r = e.length; s < r; s++)
          (n = e[s]).emit('sizer.remove', n, this), this.emit('remove', n, this);
      return this;
    },
    jk = {
      remove: function (t, e) {
        var i;
        if ('string' == typeof t) {
          if (((i = t), !(t = this.sizerChildren[i]))) return this;
        } else {
          if (this.getParentSizer(t) !== this) return this;
          i = this.childToKey(t);
        }
        return (
          i && (delete this.sizerChildren[i], this.childrenMap.hasOwnProperty(i) && delete this.childrenMap[i]),
          jp.call(this, t, e),
          this
        );
      },
      removeAll: function (t) {
        for (var e in this.sizerChildren) this.remove(e, t);
        return this;
      },
      clear: function (t) {
        for (var e in this.sizerChildren)
          delete this.sizerChildren[e], this.childrenMap.hasOwnProperty(e) && delete this.childrenMap[e];
        return Ik.call(this, t), this;
      },
    },
    Ak = {
      getChildrenWidth: function () {
        if (this.rexSizer.hidden) return 0;
        var t,
          e,
          i,
          n = 0,
          s = this.sizerChildren;
        for (var r in s)
          (e = (t = s[r]).rexSizer.padding), (i = this.getChildWidth(t) + e.left + e.right), (n = Math.max(i, n));
        return n + this.space.left + this.space.right;
      },
      getChildrenHeight: function () {
        if (this.rexSizer.hidden) return 0;
        var t,
          e,
          i,
          n = 0,
          s = this.sizerChildren;
        for (var r in s)
          (i = (t = s[r]).isRexSizer
            ? Math.max(t.minHeight, t.childrenHeight)
            : void 0 !== t.minHeight
            ? t.minHeight
            : Ir(t)),
            (i += (e = t.rexSizer.padding).top + e.bottom),
            (n = Math.max(i, n));
        return n + this.space.top + this.space.bottom;
      },
      getExpandedChildWidth: function (t, e) {
        var i;
        void 0 === e && (e = this.width);
        var n = t.rexSizer;
        if (n.expandWidth) {
          var s = e - this.space.left - this.space.right,
            r = n.padding;
          i = s - r.left - r.right;
        }
        return i;
      },
      getExpandedChildHeight: function (t, e) {
        var i;
        void 0 === e && (e = this.height);
        var n = t.rexSizer;
        if (n.expandHeight) {
          var s = e - this.space.top - this.space.bottom,
            r = n.padding;
          i = s - r.top - r.bottom;
        }
        return i;
      },
      getChildrenSizers: function (t) {
        void 0 === t && (t = []);
        var e,
          i = this.sizerChildren;
        for (var n in i) (e = i[n]).isRexSizer && t.push(e);
        return t;
      },
      layoutChildren: function () {
        var t,
          e,
          i,
          n,
          s,
          r,
          o,
          a,
          h,
          l = this.innerLeft,
          u = this.innerTop,
          c = this.innerWidth,
          d = this.innerHeight,
          f = this.sizerChildren;
        for (var p in f)
          (t = f[p]).rexSizer.hidden ||
            ((i = (e = t.rexSizer).padding),
            zg.call(this, t),
            t.isRexSizer
              ? (t.runLayout(this, this.getExpandedChildWidth(t), this.getExpandedChildHeight(t)), Mk(t, this))
              : ((a = void 0),
                (h = void 0),
                e.expandWidth && (a = c - i.left - i.right),
                e.expandHeight && (h = d - i.top - i.bottom),
                Kp(t, a, h)),
            (n = l + i.left),
            (r = c - i.left - i.right),
            (s = u + i.top),
            (o = d - i.top - i.bottom),
            Fg.call(this, t, n, s, r, o, e.align, e.alignOffsetX, e.alignOffsetY));
      },
    };
  Object.assign(Ak, Bk, jk);
  var zk = function (t, e) {
      if (Array.isArray(t)) return t.indexOf(e);
      for (var i in t) if (t[i] === e) return i;
      return null;
    },
    Fk = Phaser.Utils.Objects.IsPlainObject,
    Vk = Phaser.Utils.Objects.GetValue,
    Wk = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          Fk(n)
            ? ((n = Vk((h = n), 'x', 0)),
              (s = Vk(h, 'y', 0)),
              (o = Vk(h, 'width', void 0)),
              (a = Vk(h, 'height', void 0)))
            : Fk(o) && ((o = Vk((h = o), 'width', void 0)), (a = Vk(h, 'height', void 0))),
          ((l = e.call(this, t, n, s, o, a, h)).type = 'rexOverlapSizer'),
          (l.sizerChildren = {}),
          l.addChildrenMap('items', l.sizerChildren),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'childToKey',
            value: function (t) {
              if ('string' != typeof t) return zk(this.sizerChildren, t);
              var e = t;
              return this.sizerChildren.hasOwnPropery(e) ? e : null;
            },
          },
        ]),
        i
      );
    })(Ok);
  Object.assign(Wk.prototype, Ak);
  var Yk = Phaser.Math.Distance.Between,
    Xk = function (t, e, i) {
      var n = t.width / 2;
      return Yk(n, n, e, i) <= n;
    },
    Gk = Phaser.Math.Angle.Between,
    Hk = Phaser.Math.Angle.Normalize,
    Uk = function (t, e, i) {
      if (this.enable && t.isDown) {
        var n = this.sizerChildren.knob;
        if (Xk(n, e, i)) {
          var s = n.width / 2,
            r = n.startAngle,
            o = Gk(s, s, e, i),
            a = n.anticlockwise ? r - o : o - r,
            h = Hk(a) / (2 * Math.PI);
          this.stopEaseValue(),
            0 === this.easeValueDuration || Math.abs(this.value - h) < 0.1 ? (this.value = h) : this.easeValueTo(h);
        }
      }
    },
    Nk = function () {
      this.sizerChildren.knob.on('pointerdown', Uk, this).on('pointermove', Uk, this).setInteractive();
    },
    Kk = Phaser.Math.Angle.Between,
    Jk = Phaser.Math.Angle.Wrap,
    qk = function (t, e, i) {
      if (this.enable && !this.panPointer) {
        var n = this.sizerChildren.knob;
        Xk(n, e, i) && Qk.call(this, t);
      }
    },
    Zk = function (t, e, i) {
      if (this.enable && t.isDown) {
        var n = this.sizerChildren.knob;
        switch (this.panState) {
          case im:
            Xk(n, e, i) && Qk.call(this, t);
            break;
          case nm:
            Xk(n, e, i) ? em.call(this) : tm.call(this);
        }
      }
    },
    $k = function (t, e, i) {
      this.enable && this.panPointer === t && tm.call(this);
    },
    Qk = function (t) {
      (this.panPointer = t), (this.panState = nm);
    },
    tm = function () {
      (this.panPointer = void 0), (this.panState = im);
    },
    em = function () {
      var t = this.panPointer.prevPosition,
        e = this.panPointer.position,
        i = this.sizerChildren.knob,
        n = Kk(i.x, i.y, t.x, t.y),
        s = Kk(i.x, i.y, e.x, e.y),
        r = i.anticlockwise ? n - s : s - n,
        o = Jk(r) / (2 * Math.PI);
      this.stopEaseValue(), (this.value += o);
    },
    im = 0,
    nm = 1,
    sm = function () {
      this.sizerChildren.knob
        .on('pointerdown', qk, this)
        .on('pointermove', Zk, this)
        .on('pointerup', $k, this)
        .setInteractive(),
        (this.panPointer = void 0),
        (this.panState = im);
    },
    rm = function (t) {
      return (
        void 0 === t && (t = this.value),
        this.textFormatCallbackScope
          ? this.textFormatCallback(t)
          : this.textFormatCallback.call(this.textFormatCallbackScope, t)
      );
    },
    om = {
      setTextFormatCallback: function (t, e) {
        return (this.textFormatCallback = t), (this.textFormatCallbackScope = e), this;
      },
      getFormatText: rm,
      updateText: function (t) {
        var e = this.sizerChildren.text;
        return e && this.textFormatCallback && (e.setText(rm.call(this, t)), e.layout && e.layout()), this;
      },
    },
    am = Phaser.Utils.Objects.GetValue,
    hm = Phaser.Math.Snap.To,
    lm = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {}), ((s = e.call(this, t, n)).type = 'rexKnob'), s.bootProgressBase(n);
        var o = am(n, 'background', void 0),
          a = am(n, 'text', void 0);
        o && s.addBackground(o),
          a &&
            ((n.textColor = void 0),
            (n.textStrokeColor = void 0),
            s.setTextFormatCallback(am(n, 'textFormatCallback', void 0), am(n, 'textFormatCallbackScope', void 0)));
        var h = new nd(t, n);
        h.setDepth(am(n, 'knobDepth', 0)),
          (h._value = -1),
          t.add.existing(h),
          s.add(h, 'knob'),
          a && (s.add(a, 'text', 'center', 0, !1), t.children.moveBelow(h, a)),
          s.addChildrenMap('background', o),
          s.addChildrenMap('knob', h),
          s.addChildrenMap('text', a),
          s.setEnable(am(n, 'enable', void 0)),
          s.setGap(am(n, 'gap', void 0)),
          s.setValue(am(n, 'value', 0), am(n, 'min', void 0), am(n, 'max', void 0));
        var l = am(n, 'input', 0);
        switch (('string' == typeof l && (l = um[l]), l)) {
          case 0:
            sm.call(d(s));
            break;
          case 1:
            Nk.call(d(s));
        }
        return s;
      }
      return (
        a(i, [
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'setGap',
            value: function (t) {
              return (this.gap = t), this;
            },
          },
          {
            key: 'value',
            get: function () {
              return this.sizerChildren.knob.value;
            },
            set: function (t) {
              void 0 !== this.gap && (t = hm(t, this.gap));
              var e = this.value;
              this.sizerChildren.knob.value = t;
              var i = this.value;
              e !== i && (this.updateText(), this.eventEmitter.emit('valuechange', i, e, this.eventEmitter));
            },
          },
        ]),
        i
      );
    })(Kc(Wk)),
    um = { pan: 0, drag: 0, click: 1, none: -1 };
  Object.assign(lm.prototype, om),
    M.register('knob', function (t) {
      var e = new lm(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Knob', lm);
  var cm,
    dm,
    fm = {
      arc: Tu,
      circle: Ou,
      curve: Mu,
      ellipse: Eu,
      line: _u,
      lines: $u,
      rectangle: tc,
      roundRectangle: ic,
      triangle: sc,
    },
    pm = Phaser.Utils.Objects.GetValue,
    vm = Phaser.Utils.Objects.IsPlainObject,
    gm = function () {
      for (var t = this.getShapes(), e = 0, i = t.length; e < i; e++) t[e].lineStyle().fillStyle();
    },
    ym = {
      createShape: function (t, e) {
        var i = new fm[t]();
        return e && i.setName(e), i;
      },
      buildShapes: function (t) {
        var e = pm(t, 'create', void 0);
        if (vm(e)) {
          var i = e;
          for (var s in i) {
            var r = i[s];
            switch (n(r)) {
              case 'number':
                for (var o = 0; o < r; o++) this.addShape(this.createShape(s));
                break;
              case 'string':
                this.addShape(this.createShape(s, r));
                break;
              default:
                for (var a = r, h = ((o = 0), a.length); o < h; o++) this.addShape(this.createShape(s, a[o]));
            }
          }
        } else if (Array.isArray(e))
          for (o = 0, h = (i = e).length; o < h; o++) {
            var l = i[o];
            this.addShape(this.createShape(l.type, l.name));
          }
        else 'function' == typeof e && e.call(this);
        this.setUpdateShapesCallback(pm(t, 'update'));
      },
      setUpdateShapesCallback: function (t) {
        return (
          void 0 === t && (t = gm),
          (this.dirty = this.dirty || this.updateCallback !== t),
          (this.updateCallback = t),
          this
        );
      },
      updateShapes: function () {
        this.updateCallback.call(this);
      },
    },
    km = Phaser.GameObjects.Components.TransformMatrix,
    mm = Phaser.Math.TransformXY,
    bm = {},
    xm = Phaser.Utils.Objects.GetValue,
    Cm = Phaser.Utils.Objects.IsPlainObject,
    wm = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          Cm(n) && ((n = xm((h = n), 'x', 0)), (s = xm(h, 'y', 0)), (o = xm(h, 'width', 2)), (a = xm(h, 'height', 2))),
          ((l = e.call(this, t, n, s, o, a)).type = xm(h, 'type', 'rexCustomShapes')),
          l.buildShapes(h),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'centerX',
            get: function () {
              return this.width / 2;
            },
          },
          {
            key: 'centerY',
            get: function () {
              return this.height / 2;
            },
          },
          {
            key: 'worldToLocalXY',
            value: function (t, e, i, n) {
              return (
                'boolean' == typeof i && ((n = i), (i = void 0)),
                (function (t, e, i, n, s) {
                  void 0 === n && (n = t.scene.cameras.main), void 0 === s ? (s = {}) : !0 === s && (s = bm);
                  var r = n.scrollX,
                    o = n.scrollY,
                    a = e + r * t.scrollFactorX - r,
                    h = i + o * t.scrollFactorY - o;
                  return (
                    t.parentContainer
                      ? (void 0 === cm && ((cm = new km()), (dm = new km())),
                        t.getWorldTransformMatrix(cm, dm),
                        cm.applyInverse(a, h, s))
                      : mm(a, h, t.x, t.y, t.rotation, t.scaleX, t.scaleY, s),
                    (s.x += t.displayOriginX),
                    (s.y += t.displayOriginY),
                    s
                  );
                })(this, t, e, i, n)
              );
            },
          },
        ]),
        i
      );
    })(mu);
  Object.assign(wm.prototype, ym),
    M.register('customShapes', function (t, e, i, n, s) {
      var r = new wm(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.CustomShapes', wm);
  var Sm = Phaser.Utils.Objects.GetValue,
    Pm = Phaser.Utils.Objects.IsPlainObject,
    Tm = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          Pm(n) && ((n = Sm((h = n), 'x', 0)), (s = Sm(h, 'y', 0)), (o = Sm(h, 'width', 2)), (a = Sm(h, 'height', 2))),
          void 0 === h && (h = {}),
          h.type || (h.type = 'rexCustomProgress'),
          (l = e.call(this, t, n, s, o, a, h)).bootProgressBase(h),
          l.setValue(Sm(h, 'value', 0)),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'centerX',
            get: function () {
              return this.width / 2;
            },
          },
          {
            key: 'centerY',
            get: function () {
              return this.height / 2;
            },
          },
          {
            key: 'radius',
            get: function () {
              return Math.min(this.centerX, this.centerY);
            },
          },
        ]),
        i
      );
    })(Kc(wm));
  M.register('customProgress', function (t, e, i, n, s) {
    var r = new Tm(this.scene, t, e, i, n, s);
    return this.scene.add.existing(r), r;
  }),
    $(window, 'RexPlugins.UI.CustomProgress', Tm);
  var Om = Phaser.Utils.Objects.IsPlainObject,
    Mm = Phaser.Utils.Objects.GetValue,
    Em = Phaser.Utils.Array.GetRandom,
    _m = { out: 0, in: 1 },
    Rm = function (t, e) {
      for (var i = 0, n = arguments.length <= 2 ? 0 : arguments.length - 2; i < n; i++) {
        var s = i + 2 < 2 || arguments.length <= i + 2 ? void 0 : arguments[i + 2];
        if (s && s.hasOwnProperty(t)) return s[t];
      }
      return e;
    },
    Lm = {
      setTransitionDirection: function (t) {
        return 'string' == typeof t && (t = _m[t]), (this.dir = t), this;
      },
      setDuration: function (t) {
        return (this.duration = t), this;
      },
      setEaseFunction: function (t) {
        return (this.easeFunction = t), this;
      },
      setNextTexture: function (t, e) {
        return this.nextImage.setTexture(t, e), this;
      },
      transit: function (t, e, i) {
        if (
          (this.isRunning && ((this.ignoreCompleteEvent = !0), this.stop(), (this.ignoreCompleteEvent = !1)),
          void 0 !== i && (t = { key: t, frame: e, mode: i }),
          (this.currentTransitionMode = void 0),
          Om(t))
        ) {
          var n,
            s = t;
          (t = Mm(s, 'key', void 0)),
            (e = Mm(s, 'frame', void 0)),
            (i = Mm(s, 'mode')),
            Array.isArray(i) && (i = Em(i)),
            this.transitionModes &&
              this.transitionModes.hasOwnProperty(i) &&
              ((n = this.transitionModes[i]), (this.currentTransitionMode = i)),
            this.setDuration(Rm('duration', this.duration, s, n))
              .setEaseFunction(Rm('ease', this.easeFunction, s, n))
              .setTransitionDirection(Rm('dir', this.dir, s, n));
          var r = Rm('mask', void 0, s, n);
          r && this.setMaskGameObject(r), this.setMaskEnable(!0 === r);
          var o = Rm('onStart', void 0, s, n),
            a = Rm('onProgress', void 0, s, n),
            h = Rm('onComplete', void 0, s, n);
          (void 0 === o && void 0 === a && void 0 === h) ||
            this.setTransitionStartCallback(o, Rm('onStartScope', void 0, s, n))
              .setTransitionProgressCallback(a, Rm('onProgressScope', void 0, s, n))
              .setTransitionCompleteCallback(h, Rm('onCompleteScope', void 0, s, n));
        }
        return this.setNextTexture(t, e), this.start(), this;
      },
      addTransitionMode: function (t, e) {
        return (
          void 0 === this.transitionModes && (this.transitionModes = {}),
          Om(t) && ((t = (e = t).name), delete e.name),
          (this.transitionModes[t] = e),
          this
        );
      },
      start: function () {
        return (
          void 0 === this.easeValueTask && (this.easeValueTask = new hc(this, { eventEmitter: null })),
          this.easeValueTask.restart({ key: 't', from: 0, to: 1, duration: this.duration, ease: this.easeFunction }),
          this
        );
      },
      pause: function () {
        return this.easeValueTask && this.easeValueTask.pause(), this;
      },
      resume: function () {
        return this.easeValueTask && this.easeValueTask.resume(), this;
      },
      stop: function () {
        return this.easeValueTask && this.easeValueTask.stop(), this.setT(1), this;
      },
    },
    Bm = function (t, e, i, n, s) {
      if ((this.clear().fillStyle(16777215), 1 === this.shapeType)) {
        i = i.left;
        var r = Math.min(t, e) / 2;
        this.fillCircle(-t * (n - 0.5), -e * (s - 0.5), r + i);
      } else this.fillRect(-t * n - i.left, -e * s - i.top, t + i.left + i.right, e + i.top + i.bottom);
    },
    Dm = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        var o;
        return (
          r(this, i),
          void 0 === n && (n = 0),
          'string' == typeof n && (n = Im[n]),
          ((o = e.call(this, t.scene)).parent = t),
          (o.shapeType = n),
          (o.padding = Op(s)),
          o.setPosition().resize().setVisible(!1),
          o
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function () {
              return (this.parent = void 0), g(u(i.prototype), 'destroy', this).call(this), this;
            },
          },
          {
            key: 'setPosition',
            value: function (t, e) {
              var n = this.parent;
              return (
                void 0 === t && (t = n.x),
                void 0 === e && (e = n.y),
                g(u(i.prototype), 'setPosition', this).call(this, t, e),
                this
              );
            },
          },
          {
            key: 'resize',
            value: function (t, e, i) {
              var n = this.parent;
              void 0 === t && (t = n.width),
                void 0 === e && (e = n.height),
                void 0 === i ? (i = this.padding) : 'number' == typeof i && (i = Op(i));
              var s = this.width !== t || this.height !== e,
                r = this.padding !== i && !Hl(this.padding, i);
              return s || r
                ? ((this.width = t),
                  (this.height = e),
                  r && Qe(i, this.padding),
                  (this.originX = n.originX),
                  (this.originY = n.originY),
                  Bm.call(this, t, e, i, n.originX, n.originY),
                  this)
                : this;
            },
          },
          {
            key: 'setOrigin',
            value: function (t, e) {
              void 0 === e && (e = t);
              var i = this.parent;
              return (
                void 0 === t && (t = i.originX),
                void 0 === e && (e = i.originY),
                (this.originX === t && this.originY === e) ||
                  ((this.originX = t), (this.originY = e), Bm.call(this, this.width, this.height, this.padding, t, e)),
                this
              );
            },
          },
        ]),
        i
      );
    })(Phaser.GameObjects.Graphics),
    Im = { rectangle: 0, circle: 1 },
    jm = {
      setMaskGameObject: function (t) {
        if (!t) return this.removeMaskGameObject(), this;
        if (this.maskGameObject) {
          if (!0 === t && this.maskGameObject instanceof Dm) return this;
          if (this.maskGameObject === t) return this;
          this.removeMaskGameObject();
        }
        return (
          !0 === t && (t = new Dm(this)),
          t
            .resize(this.width, this.height)
            .setOrigin(this.originX, this.originY)
            .setPosition(0, 0)
            .setScale(1)
            .setVisible(!1),
          this.addLocal(t),
          (this.maskGameObject = t),
          t._maskObject ||
            ((t._maskObject = t.createGeometryMask()),
            t.once('destroy', function () {
              t._maskObject.destroy(), (t._maskObject = void 0);
            })),
          (this.childrenMask = t._maskObject),
          this
        );
      },
      removeMaskGameObject: function (t) {
        return (
          void 0 === t && (t = !0),
          this.backImage.clearMask(),
          this.frontImage.clearMask(),
          (this.childrenMask = void 0),
          this.remove(this.maskGameObject, t),
          (this.maskGameObject = void 0),
          this
        );
      },
      setImageMaskEnable: function (t, e, i) {
        return (
          void 0 === e && (e = !0),
          void 0 === i && (i = !1),
          e
            ? (this.childrenMask || this.setMaskGameObject(!0),
              t.setMask(this.childrenMask),
              this.childrenMask.setInvertAlpha(i))
            : t.clearMask(),
          this
        );
      },
      setCurrentImageMaskEnable: function (t, e) {
        return this.setImageMaskEnable(this.currentImage, t, e), this;
      },
      setNextImageMaskEnable: function (t, e) {
        return this.setImageMaskEnable(this.nextImage, t, e), this;
      },
      setCellImagesMaskEnable: function (t, e) {
        for (var i = this.getCellImages(), n = 0, s = i.length; n < s; n++) this.setImageMaskEnable(i[n], t, e);
        return this;
      },
      setMaskEnable: function (t, e) {
        return (
          this.setImageMaskEnable(this.backImage, t, e),
          this.setImageMaskEnable(this.frontImage, t, e),
          this.setCellImagesMaskEnable(t, e),
          this
        );
      },
    },
    Am = function (t, e, i, s, r, o) {
      var a, h;
      null == i && (i = '__BASE'),
        o ||
          ((h = o),
          'object' === n((a = i)) && (a = a.name),
          void 0 === h && (h = ','),
          (o =
            '__BASE' === a
              ? function (t, e) {
                  return ''.concat(t).concat(h).concat(e);
                }
              : function (t, e) {
                  return ''.concat(a, '_').concat(t).concat(h).concat(e);
                }));
      for (
        var l,
          u,
          c,
          d = t.sys.textures.get(e),
          f = 'object' === n(i) ? i : d.get(i),
          p = f.width / s,
          v = f.height / r,
          g = f.cutX,
          y = f.cutY,
          k = 0,
          m = 0,
          b = 0;
        b < r;
        b++
      ) {
        k = 0;
        for (var x = 0; x < s; x++) (c = o(x, b)), (l = k + g), (u = m + y), d.add(c, 0, l, u, p, v), (k += p);
        m += v;
      }
      return { getFrameNameCallback: o, cellWidth: p, cellHeight: v, columns: s, rows: r };
    },
    zm = Phaser.Utils.Objects.GetValue,
    Fm = Phaser.GameObjects.Image,
    Vm = Phaser.Utils.Objects.IsPlainObject,
    Wm = Phaser.Math.RotateAround,
    Ym = {
      gridCutImage: function (t, e, i, n) {
        void 0 === n && (n = {}), (n.objectPool = this.imagesPool);
        for (
          var s,
            r = (function (t, e, i, n) {
              Vm(e) && ((e = zm((n = e), 'columns', 1)), (i = zm(n, 'rows', 1)));
              var s = zm(n, 'createImageCallback');
              if (!s) {
                var r = zm(n, 'ImageClass', Fm);
                s = function (t, e, i) {
                  return new r(t, 0, 0, e, i);
                };
              }
              for (
                var o = zm(n, 'originX', 0.5),
                  a = zm(n, 'originY', 0.5),
                  h = zm(n, 'add', !0),
                  l = zm(n, 'align', h),
                  u = zm(n, 'objectPool', void 0),
                  c = t.scene,
                  d = t.texture,
                  f = t.frame,
                  p = Am(c, d, f, e, i),
                  v = p.getFrameNameCallback,
                  g = t.scaleX,
                  y = t.scaleY,
                  k = t.rotation,
                  m = t.getTopLeft(),
                  b = m.x,
                  x = m.y,
                  C = [],
                  w = p.cellWidth * g,
                  S = p.cellHeight * y,
                  P = 0;
                P < i;
                P++
              )
                for (var T = 0; T < e; T++) {
                  var O,
                    M = v(T, P);
                  if (((O = u && u.length > 0 ? u.pop().setTexture(d, M) : s(c, d, M)), h && c.add.existing(O), l)) {
                    var E = b + w * T + o * w,
                      _ = x + S * P + a * S;
                    O.setOrigin(o, a).setPosition(E, _).setScale(g, y).setRotation(k), Wm(O, b, x, k);
                  }
                  C.push(O);
                }
              return C;
            })(t, e, i, n),
            o = 0,
            a = r.length;
          o < a;
          o++
        )
          (s = r[o]).setVisible(!0), this.add(s);
        return (this.cellImages = r), this.setChildLocalVisible(t, !1), r;
      },
      gridCutCurrentImage: function (t, e, i) {
        return this.gridCutImage(this.currentImage, t, e, i);
      },
      gridCutNextImage: function (t, e, i) {
        return this.gridCutImage(this.nextImage, t, e, i);
      },
      getCellImages: function () {
        return this.cellImages;
      },
      freeCellImages: function () {
        var t;
        if (0 === this.cellImages.length) return this;
        for (var e, i, n = this.cellImages[0].texture, s = this.cellImages, r = 0, o = s.length; r < o; r++)
          (e = s[r]),
            this.setChildLocalAlpha(e, 1).setChildLocalScale(e, 1).setChildLocalVisible(e, !1),
            e.clearMask(),
            (i = e.frame.name),
            e.setTexture(),
            n.remove(i);
        return (t = this.imagesPool).push.apply(t, x(s)), (s.length = 0), this;
      },
    },
    Xm = {
      setFlipX: function (t) {
        return (this.flipX = t), this;
      },
      setFlipY: function (t) {
        return (this.flipY = t), this;
      },
      toggleFlipX: function () {
        return (this.flipX = !this.flipX), this;
      },
      toggleFlipY: function () {
        return (this.flipY = !this.flipY), this;
      },
      setFlip: function (t, e) {
        return (this.flipX = t), (this.flipY = e), this;
      },
      resetFlip: function () {
        return (this.flipX = !1), (this.flipY = !1), this;
      },
    },
    Gm = {};
  Object.assign(
    Gm,
    {
      setTransitionStartCallback: function (t, e) {
        return (this.onStartCallback = t), (this.onStartCallbackScope = e), this;
      },
      setTransitionProgressCallback: function (t, e) {
        return (this.onProgressCallback = t), (this.onProgressCallbackScope = e), this;
      },
      setTransitionCompleteCallback: function (t, e) {
        return (this.onCompleteCallback = t), (this.onCompleteCallbackScope = e), this;
      },
    },
    Lm,
    jm,
    Ym,
    Xm
  );
  var Hm = function (t, e, i, n) {},
    Um = function (t, e, i, n) {
      t.setChildLocalAlpha(e, 1 - n).setChildLocalAlpha(i, n);
    },
    Nm = function (t, e, i, n) {
      t.setChildLocalAlpha(e, 1);
    },
    Km = Phaser.Utils.Objects.IsPlainObject,
    Jm = Phaser.Utils.Objects.GetValue,
    qm = Phaser.Math.Clamp,
    Zm = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          Km(n)
            ? ((n = Jm((h = n), 'x', 0)), (s = Jm(h, 'y', 0)), (o = Jm(h, 'key', void 0)), (a = Jm(h, 'frame', void 0)))
            : Km(a) && ((h = a), (a = void 0));
        var u = Jm(h, 'back', void 0),
          c = Jm(h, 'front', void 0);
        u || (u = t.add.image(n, s, o, a)), c || (c = t.add.image(n, s, o, a));
        var d = Jm(h, 'width', c.width),
          f = Jm(h, 'height', c.height);
        ((l = e.call(this, t, n, s, d, f)).type = 'rexTransitionImage'),
          u.setVisible(!1),
          l.addMultiple([u, c]),
          (l.backImage = u),
          (l.frontImage = c),
          (l.maskGameObject = void 0),
          (l.cellImages = []),
          (l.imagesPool = []),
          (l.transitionModes = void 0),
          (l.currentTransitionMode = void 0);
        var p = Jm(h, 'onStart', void 0),
          v = Jm(h, 'onProgress', void 0),
          g = Jm(h, 'onComplete', void 0),
          y = Jm(h, 'dir', 0);
        void 0 === p && void 0 === v && void 0 === g && ((p = Hm), (v = Um), (g = Nm), (y = 0)),
          l
            .setTransitionStartCallback(p, Jm(h, 'onStartScope', void 0))
            .setTransitionProgressCallback(v, Jm(h, 'onProgressScope', void 0))
            .setTransitionCompleteCallback(g, Jm(h, 'onCompleteScope', void 0))
            .setTransitionDirection(y)
            .setDuration(Jm(h, 'duration', 1e3))
            .setEaseFunction(Jm(h, 'ease', 'Linear'));
        var k = Jm(h, 'mask', void 0);
        return k && l.setMaskGameObject(k), l.setMaskEnable(!1), (l.ignoreCompleteEvent = !1), l;
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.childrenMask && (this.childrenMask.destroy(), (this.childrenMask = void 0)),
                (this.backImage = void 0),
                (this.frontImage = void 0),
                (this.maskGameObject = void 0),
                (this.cellImages.length = 0),
                (this.imagesPool.length = 0),
                (this.transitionModes = void 0),
                g(u(i.prototype), 'destroy', this).call(this, t),
                (this.onStartCallback = void 0),
                (this.onStartCallbackScope = void 0),
                (this.onProgressCallback = void 0),
                (this.onProgressCallbackScope = void 0),
                (this.onCompleteCallback = void 0),
                (this.onCompleteCallbackScope = void 0),
                (this.easeValueTask = void 0));
            },
          },
          {
            key: 'currentImage',
            get: function () {
              return 0 === this.dir ? this.frontImage : this.backImage;
            },
          },
          {
            key: 'nextImage',
            get: function () {
              return 0 === this.dir ? this.backImage : this.frontImage;
            },
          },
          {
            key: 'texture',
            get: function () {
              return this.nextImage.texture;
            },
          },
          {
            key: 'frame',
            get: function () {
              return this.nextImage.frame;
            },
          },
          {
            key: 'flipX',
            get: function () {
              return this._flipX;
            },
            set: function (t) {
              this._flipX !== t && ((this._flipX = t), this.backImage.setFlipX(t), this.frontImage.setFlipX(t));
            },
          },
          {
            key: 'flipY',
            get: function () {
              return this._flipY;
            },
            set: function (t) {
              this._flipY !== t && ((this._flipY = t), this.backImage.setFlipY(t), this.frontImage.setFlipY(t));
            },
          },
          {
            key: 't',
            get: function () {
              return this._t;
            },
            set: function (t) {
              if (((t = qm(t, 0, 1)), this._t !== t)) {
                this._t = t;
                var e = this.currentImage,
                  i = this.nextImage;
                if (
                  (0 === t &&
                    (this.setChildVisible(this.frontImage, !0).setChildVisible(this.backImage, !0),
                    $m(this.onStartCallback, this.onStartCallbackScope, this, e, i, t)),
                  $m(this.onProgressCallback, this.onProgressCallbackScope, this, e, i, t),
                  1 === t)
                ) {
                  $m(this.onCompleteCallback, this.onCompleteCallbackScope, this, e, i, t);
                  var n = i.texture.key,
                    s = i.frame.name;
                  this.frontImage.setTexture(n, s),
                    this.backImage.setTexture(n, s),
                    this.setChildVisible(this.frontImage, !0)
                      .setChildVisible(this.backImage, !1)
                      .setMaskEnable(!1)
                      .freeCellImages();
                }
                1 !== t || this.ignoreCompleteEvent || this.emit('complete');
              }
            },
          },
          {
            key: 'setT',
            value: function (t) {
              return (this.t = t), this;
            },
          },
          {
            key: 'isRunning',
            get: function () {
              return !!this.easeValueTask && this.easeValueTask.isRunning;
            },
          },
          {
            key: 'setOrigin',
            value: function (t, e) {
              return (
                g(u(i.prototype), 'setOrigin', this).call(this, t, e),
                this.backImage.setOrigin(t, e),
                this.frontImage.setOrigin(t, e),
                this.maskGameObject && this.maskGameObject.setOrigin(t, e),
                this
              );
            },
          },
          {
            key: 'setTexture',
            value: function (t, e) {
              return this.frontImage.setTexture(t, e), this.backImage.setTexture(t, e).setVisible(!1), this;
            },
          },
        ]),
        i
      );
    })(Kf),
    $m = function (t, e, i, n, s, r) {
      t && (e ? t.call(e, i, n, s, r) : t(i, n, s, r));
    };
  Object.assign(Zm.prototype, Gm),
    M.register('transitionImage', function (t, e, i, n, s) {
      var r = new Zm(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.TransitionImage', Zm);
  var Qm =
      '#ifdef GL_FRAGMENT_PRECISION_HIGH\n#define highmedp highp\n#else\n#define highmedp mediump\n#endif\nprecision highmedp float;\n// Scene buffer\nuniform sampler2D uMainSampler;\nuniform sampler2D uMainSampler2;\n\nuniform int resizeMode;\nuniform float progress;\nuniform float fromRatio;\nuniform float toRatio;\nvarying vec2 outFragCoord;\n// Effect parameters\nuniform float noiseX;\nuniform float noiseY;\nuniform float noiseZ;\nuniform float fromEdgeStart;\nuniform float fromEdgeWidth;\nuniform float toEdgeStart;\nuniform float toEdgeWidth;\n\n'.concat(
        'vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\nvec3 fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\nfloat Perlin(vec3 P) {\n    vec3 i0 = mod289(floor(P)), i1 = mod289(i0 + vec3(1.0));\n    vec3 f0 = fract(P), f1 = f0 - vec3(1.0), f = fade(f0);\n    vec4 ix = vec4(i0.x, i1.x, i0.x, i1.x), iy = vec4(i0.yy, i1.yy);\n    vec4 iz0 = i0.zzzz, iz1 = i1.zzzz;\n    vec4 ixy = permute(permute(ix) + iy), ixy0 = permute(ixy + iz0), ixy1 = permute(ixy + iz1);\n    vec4 gx0 = ixy0 * (1.0 / 7.0), gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    vec4 gx1 = ixy1 * (1.0 / 7.0), gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0); gx1 = fract(gx1);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0), sz0 = step(gz0, vec4(0.0));\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1), sz1 = step(gz1, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5); gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5); gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n    vec3 g0 = vec3(gx0.x,gy0.x,gz0.x), g1 = vec3(gx0.y,gy0.y,gz0.y),\n        g2 = vec3(gx0.z,gy0.z,gz0.z), g3 = vec3(gx0.w,gy0.w,gz0.w),\n        g4 = vec3(gx1.x,gy1.x,gz1.x), g5 = vec3(gx1.y,gy1.y,gz1.y),\n        g6 = vec3(gx1.z,gy1.z,gz1.z), g7 = vec3(gx1.w,gy1.w,gz1.w);\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g0,g0), dot(g2,g2), dot(g1,g1), dot(g3,g3)));\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g4,g4), dot(g6,g6), dot(g5,g5), dot(g7,g7)));\n    g0 *= norm0.x; g2 *= norm0.y; g1 *= norm0.z; g3 *= norm0.w;\n    g4 *= norm1.x; g6 *= norm1.y; g5 *= norm1.z; g7 *= norm1.w;\n    vec4 nz = mix(vec4(dot(g0, vec3(f0.x, f0.y, f0.z)), dot(g1, vec3(f1.x, f0.y, f0.z)),\n        dot(g2, vec3(f0.x, f1.y, f0.z)), dot(g3, vec3(f1.x, f1.y, f0.z))),\n        vec4(dot(g4, vec3(f0.x, f0.y, f1.z)), dot(g5, vec3(f1.x, f0.y, f1.z)),\n            dot(g6, vec3(f0.x, f1.y, f1.z)), dot(g7, vec3(f1.x, f1.y, f1.z))), f.z);\n    return 2.2 * mix(mix(nz.x,nz.z,f.y), mix(nz.y,nz.w,f.y), f.x);\n}\nfloat Perlin(vec2 P) { return Perlin(vec3(P, 0.0)); }\n',
        '\n\nvec4 getFromColor (vec2 uv) {\n  return texture2D(uMainSampler, uv);\n}\n\nvec4 getToColor (vec2 uv) {\n  if (resizeMode == 2) {\n    //  cover\n    return texture2D(uMainSampler2, 0.5 + (vec2(uv.x, 1.0 - uv.y) - 0.5) * vec2(min(fromRatio / toRatio, 1.0), min((toRatio / fromRatio), 1.0)));\n  } else if (resizeMode == 1) {\n    //  contain\n    return texture2D(uMainSampler2, 0.5 + (vec2(uv.x, 1.0 - uv.y) - 0.5) * vec2(max(fromRatio / toRatio, 1.0), max((toRatio / fromRatio), 1.0)));\n  } else {\n    //  stretch\n    return texture2D(uMainSampler2, vec2(uv.x, 1.0 - uv.y));\n  }\n}\n\nvec4 transition (vec2 uv) {    \n  vec4 colorFront = getFromColor(uv);\n  vec4 colorTo = getToColor(uv);\n\n  float noise = (Perlin(vec3(uv.x * noiseX, uv.y * noiseY, noiseZ)) + 1.0) / 2.0\n    * (1.0 - (fromEdgeStart + fromEdgeWidth + toEdgeStart + toEdgeWidth))\n    + (fromEdgeStart + fromEdgeWidth + toEdgeStart + toEdgeWidth) * 0.5;\n  vec4 colorResult = colorFront * smoothstep(progress - (fromEdgeStart + fromEdgeWidth), progress - fromEdgeStart, noise)\n    + colorTo * smoothstep((1.0 - progress) - (toEdgeStart + toEdgeWidth), (1.0 - progress) - toEdgeStart, (1.0 - noise));\n  return colorResult;\n}\n\nvoid main () {\n  vec2 uv = outFragCoord;\n  gl_FragColor = transition(uv);\n}\n'
      ),
    tb = Phaser.Renderer.WebGL.Pipelines.PostFXPipeline,
    eb = Phaser.Utils.Objects.GetValue,
    ib = Phaser.Math.Clamp,
    nb = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t) {
        var n;
        return (
          r(this, i),
          ((n = e.call(this, { name: 'rexDissolvePostFx', game: t, renderTarget: !0, fragShader: Qm }))._progress = 0),
          (n.toFrame = null),
          (n.targetTexture = null),
          (n.resizeMode = 1),
          (n.toRatio = 1),
          (n.noiseX = 0),
          (n.noiseY = 0),
          (n.noiseZ = 0),
          (n.fromEdgeStart = 0.01),
          (n.fromEdgeWidth = 0.05),
          (n.toEdgeStart = 0.01),
          (n.toEdgeWidth = 0.05),
          n
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.setProgress(eb(t, 'progress', 0)),
                this.setTransitionTargetTexture(
                  eb(t, 'toTexture', '__DEFAULT'),
                  eb(t, 'toFrame', void 0),
                  eb(t, 'resizeMode', 1)
                ),
                this.setNoise(eb(t, 'noiseX', void 0), eb(t, 'noiseY', void 0), eb(t, 'noiseZ', void 0)),
                this.setFromEdge(eb(t, 'fromEdgeStart', 0.01), eb(t, 'fromEdgeWidth', 0.05)),
                this.setToEdge(eb(t, 'toEdgeStart', 0.01), eb(t, 'toEdgeWidth', 0.05)),
                this
              );
            },
          },
          {
            key: 'onBoot',
            value: function () {
              this.setTransitionTargetTexture();
            },
          },
          {
            key: 'onPreRender',
            value: function () {
              this.set1f('progress', this.progress),
                this.set1i('resizeMode', this.resizeMode),
                this.set1f('noiseX', this.noiseX),
                this.set1f('noiseY', this.noiseY),
                this.set1f('noiseZ', this.noiseZ),
                this.set1f('fromEdgeStart', this.fromEdgeStart),
                this.set1f('fromEdgeWidth', this.fromEdgeWidth),
                this.set1f('toEdgeStart', this.toEdgeStart),
                this.set1f('toEdgeWidth', this.toEdgeWidth);
            },
          },
          {
            key: 'onDraw',
            value: function (t) {
              this.set1f('fromRatio', t.width / t.height), this.bindTexture(this.targetTexture, 1), this.bindAndDraw(t);
            },
          },
          {
            key: 'progress',
            get: function () {
              return this._progress;
            },
            set: function (t) {
              this._progress = ib(t, 0, 1);
            },
          },
          {
            key: 'setProgress',
            value: function (t) {
              return (this.progress = t), this;
            },
          },
          {
            key: 'setTransitionTargetTexture',
            value: function (t, e, i) {
              void 0 === t && (t = '__DEFAULT');
              var n = this.game.textures.getFrame(t, e);
              return (
                n || (n = this.game.textures.getFrame('__DEFAULT')),
                (this.toRatio = n.width / n.height),
                (this.toFrame = n),
                (this.targetTexture = n.glTexture),
                void 0 !== i && (this.resizeMode = i),
                this.set1i('uMainSampler2', 1),
                this.set1f('toRatio', this.toRatio),
                this
              );
            },
          },
          {
            key: 'setResizeMode',
            value: function (t) {
              return 'string' == typeof t && (t = sb[t]), (this.resizeMode = t), this;
            },
          },
          {
            key: 'setNoise',
            value: function (t, e, i) {
              return (
                void 0 === t && (t = 4 + 6 * Math.random()),
                void 0 === e && (e = 4 + 6 * Math.random()),
                void 0 === i && (i = 10 * Math.random()),
                (this.noiseX = t),
                (this.noiseY = e),
                (this.noiseZ = i),
                this
              );
            },
          },
          {
            key: 'setFromEdge',
            value: function (t, e) {
              return (this.fromEdgeStart = t), (this.fromEdgeWidth = e), this;
            },
          },
          {
            key: 'setToEdge',
            value: function (t, e) {
              return (this.toEdgeStart = t), (this.toEdgeWidth = e), this;
            },
          },
        ]),
        i
      );
    })(tb),
    sb = { stretch: 0, contain: 1, cover: 2 },
    rb = Phaser.Utils.Array.SpliceOne,
    ob = 0.1,
    ab = [
      function (t) {
        t.addTransitionMode('slideAwayRight', {
          ease: 'Linear',
          dir: 'out',
          mask: !0,
          onStart: function (t, e, i, n) {},
          onProgress: function (t, e, i, n) {
            var s = e.width * n;
            t.setChildLocalPosition(e, s, 0);
          },
          onComplete: function (t, e, i, n) {
            t.setChildLocalPosition(e, 0, 0);
          },
        })
          .addTransitionMode('slideAwayLeft', {
            ease: 'Linear',
            dir: 'out',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = e.width * -n;
              t.setChildLocalPosition(e, s, 0);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(e, 0, 0);
            },
          })
          .addTransitionMode('slideAwayDown', {
            ease: 'Linear',
            dir: 'out',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = e.height * n;
              t.setChildLocalPosition(e, 0, s);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(e, 0, 0);
            },
          })
          .addTransitionMode('slideAwayUp', {
            ease: 'Linear',
            dir: 'out',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = e.height * -n;
              t.setChildLocalPosition(e, 0, s);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(e, 0, 0);
            },
          });
      },
      function (t) {
        t.addTransitionMode('slideRight', {
          ease: 'Linear',
          dir: 'in',
          mask: !0,
          onStart: function (t, e, i, n) {},
          onProgress: function (t, e, i, n) {
            var s = i.width * (n - 1);
            t.setChildLocalPosition(i, s, 0);
          },
          onComplete: function (t, e, i, n) {
            t.setChildLocalPosition(i, 0, 0);
          },
        })
          .addTransitionMode('slideLeft', {
            ease: 'Linear',
            dir: 'in',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = i.width * (1 - n);
              t.setChildLocalPosition(i, s, 0);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(i, 0, 0);
            },
          })
          .addTransitionMode('slideDown', {
            ease: 'Linear',
            dir: 'in',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = i.height * (n - 1);
              t.setChildLocalPosition(i, 0, s);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(i, 0, 0);
            },
          })
          .addTransitionMode('slideUp', {
            ease: 'Linear',
            dir: 'in',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = i.height * (1 - n);
              t.setChildLocalPosition(i, 0, s);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(i, 0, 0);
            },
          });
      },
      function (t) {
        t.addTransitionMode('pushRight', {
          ease: 'Linear',
          dir: 'out',
          mask: !0,
          onStart: function (t, e, i, n) {},
          onProgress: function (t, e, i, n) {
            var s = e.width * n;
            t.setChildLocalPosition(e, s, 0);
            s = i.width * (n - 1);
            t.setChildLocalPosition(i, s, 0);
          },
          onComplete: function (t, e, i, n) {
            t.setChildLocalPosition(e, 0, 0), t.setChildLocalPosition(i, 0, 0);
          },
        })
          .addTransitionMode('pushLeft', {
            ease: 'Linear',
            dir: 'out',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = e.width * -n;
              t.setChildLocalPosition(e, s, 0);
              s = i.width * (1 - n);
              t.setChildLocalPosition(i, s, 0);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(e, 0, 0), t.setChildLocalPosition(i, 0, 0);
            },
          })
          .addTransitionMode('pushDown', {
            ease: 'Linear',
            dir: 'out',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = e.height * n;
              t.setChildLocalPosition(e, 0, s);
              s = i.height * (n - 1);
              t.setChildLocalPosition(i, 0, s);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(e, 0, 0), t.setChildLocalPosition(i, 0, 0);
            },
          })
          .addTransitionMode('pushUp', {
            ease: 'Linear',
            dir: 'out',
            mask: !0,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = e.height * -n;
              t.setChildLocalPosition(e, 0, s);
              s = i.height * (1 - n);
              t.setChildLocalPosition(i, 0, s);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalPosition(e, 0, 0), t.setChildLocalPosition(i, 0, 0);
            },
          });
      },
      function (t) {
        t.addTransitionMode('zoomOut', {
          ease: 'Linear',
          dir: 'out',
          mask: !1,
          onStart: function (t, e, i, n) {},
          onProgress: function (t, e, i, n) {
            var s = 1 - n;
            t.setChildLocalScale(e, s, s);
          },
          onComplete: function (t, e, i, n) {
            t.setChildLocalScale(e, 1, 1);
          },
        })
          .addTransitionMode('zoomIn', {
            ease: 'Linear',
            dir: 'in',
            mask: !1,
            onStart: function (t, e, i, n) {},
            onProgress: function (t, e, i, n) {
              var s = n;
              t.setChildLocalScale(i, s, s);
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalScale(i, 1, 1);
            },
          })
          .addTransitionMode('zoomInOut', {
            ease: 'Linear',
            dir: 'out',
            mask: !1,
            onStart: function (t, e, i, n) {
              i.tint = 0;
            },
            onProgress: function (t, e, i, n) {
              var s;
              n < 0.5
                ? ((s = 1 - ea(n)), t.setChildLocalScale(e, s, s))
                : (e.visible && t.setChildVisible(e, !1), (s = 1 - ea(n)), t.setChildLocalScale(i, s, s));
            },
            onComplete: function (t, e, i, n) {
              t.setChildLocalScale(e, 1, 1),
                t.setChildVisible(e, !0),
                (e.tint = 16777215),
                t.setChildLocalScale(i, 1, 1),
                t.setChildVisible(i, !0),
                (i.tint = 16777215);
            },
          });
      },
      function (t) {
        t.addTransitionMode('fade', {
          ease: 'Linear',
          dir: 'out',
          mask: !1,
          onStart: function (t, e, i, n) {
            i.tint = 0;
          },
          onProgress: function (t, e, i, n) {
            var s;
            n < 0.5
              ? ((n = ea(n)), (s = Math.floor(255 * (1 - n))), (e.tint = (s << 16) + (s << 8) + s))
              : (e.visible && t.setChildVisible(e, !1),
                (n = ea(n)),
                (s = Math.floor(255 * (1 - n))),
                (i.tint = (s << 16) + (s << 8) + s));
          },
          onComplete: function (t, e, i, n) {
            t.setChildVisible(e, !0), (e.tint = 16777215), t.setChildVisible(i, !0), (i.tint = 16777215);
          },
        }).addTransitionMode('crossFade', {
          ease: 'Linear',
          dir: 'out',
          mask: !1,
          onStart: function (t, e, i, n) {},
          onProgress: function (t, e, i, n) {
            t.setChildLocalAlpha(e, 1 - n), t.setChildLocalAlpha(i, n);
          },
          onComplete: function (t, e, i, n) {
            t.setChildLocalAlpha(e, 1);
          },
        });
      },
      function (t) {
        var e,
          i =
            ((e = t.scene),
            new Tm(e, {
              type: 'Graphics',
              create: [{ name: 'rect', type: 'rectangle' }],
              update: function () {
                this.getShape('rect')
                  .fillStyle(16777215)
                  .setSize(this.width * this.value, this.height * this.value)
                  .setCenterPosition(this.centerX, this.centerY);
              },
            }));
        t.once('destroy', function () {
          i.destroy();
        })
          .addTransitionMode('irisOut', {
            ease: 'Linear',
            dir: 'out',
            mask: i,
            onStart: function (t, e, i, n) {
              t.setCurrentImageMaskEnable(!0, !0);
            },
            onProgress: function (t, e, i, n) {
              t.maskGameObject.setValue(n);
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1);
            },
          })
          .addTransitionMode('irisIn', {
            ease: 'Linear',
            dir: 'in',
            mask: i,
            onStart: function (t, e, i, n) {
              t.setNextImageMaskEnable(!0, !0);
            },
            onProgress: function (t, e, i, n) {
              t.maskGameObject.setValue(1 - n);
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1);
            },
          })
          .addTransitionMode('irisInOut', {
            ease: 'Linear',
            dir: 'out',
            mask: i,
            onStart: function (t, e, i, n) {
              (i.tint = 0), t.setCurrentImageMaskEnable(!0), t.setNextImageMaskEnable(!0);
            },
            onProgress: function (t, e, i, n) {
              var s;
              n < 0.5
                ? ((n = ea(n)),
                  (s = Math.floor(255 * (1 - n))),
                  t.maskGameObject.setValue(1 - n),
                  (e.tint = (s << 16) + (s << 8) + s))
                : (e.visible && t.setChildVisible(e, !1),
                  (n = ea(n)),
                  (s = Math.floor(255 * (1 - n))),
                  t.maskGameObject.setValue(1 - n),
                  (i.tint = (s << 16) + (s << 8) + s));
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1),
                t.setChildVisible(e, !0),
                (e.tint = 16777215),
                t.setChildVisible(i, !0),
                (i.tint = 16777215);
            },
          });
      },
      function (t) {
        var e,
          i =
            ((e = t.scene),
            new Tm(e, {
              type: 'Graphics',
              create: [{ name: 'pie', type: 'arc' }],
              update: function () {
                var t = 2 * Math.max(this.width, this.height),
                  e = 90 * this.value;
                this.getShape('pie')
                  .fillStyle(16777215)
                  .setCenterPosition(this.centerX, 0)
                  .setRadius(t)
                  .setAngle(90 - e, 90 + e)
                  .setPie();
              },
            }));
        t.once('destroy', function () {
          i.destroy();
        })
          .addTransitionMode('pieOut', {
            ease: 'Linear',
            dir: 'out',
            mask: i,
            onStart: function (t, e, i, n) {
              t.setCurrentImageMaskEnable(!0, !0);
            },
            onProgress: function (t, e, i, n) {
              t.maskGameObject.setValue(n);
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1);
            },
          })
          .addTransitionMode('pieIn', {
            ease: 'Linear',
            dir: 'in',
            mask: i,
            onStart: function (t, e, i, n) {
              t.setNextImageMaskEnable(!0, !0);
            },
            onProgress: function (t, e, i, n) {
              t.maskGameObject.setValue(1 - n);
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1);
            },
          })
          .addTransitionMode('pieInOut', {
            ease: 'Linear',
            dir: 'out',
            mask: i,
            onStart: function (t, e, i, n) {
              (i.tint = 0), t.setCurrentImageMaskEnable(!0), t.setNextImageMaskEnable(!0);
            },
            onProgress: function (t, e, i, n) {
              var s;
              n < 0.5
                ? ((n = ea(n)),
                  (s = Math.floor(255 * (1 - n))),
                  t.maskGameObject.setValue(1 - n),
                  (e.tint = (s << 16) + (s << 8) + s))
                : (e.visible && t.setChildVisible(e, !1),
                  (n = ea(n)),
                  (s = Math.floor(255 * (1 - n))),
                  t.maskGameObject.setValue(1 - n),
                  (i.tint = (s << 16) + (s << 8) + s));
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1),
                t.setChildVisible(e, !0),
                (e.tint = 16777215),
                t.setChildVisible(i, !0),
                (i.tint = 16777215);
            },
          });
      },
      function (t) {
        var e,
          i =
            ((e = t.scene),
            new Tm(e, {
              type: 'Graphics',
              create: [{ name: 'rect', type: 'rectangle' }],
              update: function () {
                var t = this.getShape('rect').fillStyle(16777215),
                  e = 1 - this.value;
                switch (this.wipeMode) {
                  case 'right':
                    t.setSize(this.width * e, this.height).setTopLeftPosition(this.width - t.width, 0);
                    break;
                  case 'left':
                    t.setSize(this.width * e, this.height).setTopLeftPosition(0, 0);
                    break;
                  case 'down':
                    t.setSize(this.width, this.height * e).setTopLeftPosition(0, this.height - t.height);
                    break;
                  case 'up':
                    t.setSize(this.width, this.height * e).setTopLeftPosition(0, 0);
                }
              },
            }));
        t.once('destroy', function () {
          i.destroy();
        })
          .addTransitionMode('wipeRight', {
            ease: 'Linear',
            dir: 'out',
            mask: i,
            onStart: function (t, e, i, n) {
              t.setCurrentImageMaskEnable(!0), (t.maskGameObject.wipeMode = 'right');
            },
            onProgress: function (t, e, i, n) {
              t.maskGameObject.setValue(n);
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1);
            },
          })
          .addTransitionMode('wipeLeft', {
            ease: 'Linear',
            dir: 'out',
            mask: i,
            onStart: function (t, e, i, n) {
              t.setCurrentImageMaskEnable(!0), (t.maskGameObject.wipeMode = 'left');
            },
            onProgress: function (t, e, i, n) {
              t.maskGameObject.setValue(n);
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1);
            },
          })
          .addTransitionMode('wipeDown', {
            ease: 'Linear',
            dir: 'out',
            mask: i,
            onStart: function (t, e, i, n) {
              t.setCurrentImageMaskEnable(!0), (t.maskGameObject.wipeMode = 'down');
            },
            onProgress: function (t, e, i, n) {
              t.maskGameObject.setValue(n);
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1);
            },
          })
          .addTransitionMode('wipeUp', {
            ease: 'Linear',
            dir: 'out',
            mask: i,
            onStart: function (t, e, i, n) {
              t.setCurrentImageMaskEnable(!0), (t.maskGameObject.wipeMode = 'up');
            },
            onProgress: function (t, e, i, n) {
              t.maskGameObject.setValue(n);
            },
            onComplete: function (t, e, i, n) {
              t.removeMaskGameObject(!1);
            },
          });
      },
      function (t) {
        var e = (function (t, e) {
          var i = new Tm(t, {
            type: 'Graphics',
            create: { rectangle: e },
            update: function () {
              for (var t = this.getShapes(), i = this.width / e, n = 0; n < e; n++)
                t[n]
                  .fillStyle(16777215)
                  .setSize(i * this.value, this.height)
                  .setTopLeftPosition(i * n, 0);
            },
          });
          return i;
        })(t.scene, 10);
        t.once('destroy', function () {
          e.destroy();
        }).addTransitionMode('blinds', {
          ease: 'Linear',
          dir: 'out',
          mask: e,
          onStart: function (t, e, i, n) {
            t.setCurrentImageMaskEnable(!0, !0);
          },
          onProgress: function (t, e, i, n) {
            t.maskGameObject.setValue(n);
          },
          onComplete: function (t, e, i, n) {
            t.removeMaskGameObject(!1);
          },
        });
      },
      function (t) {
        var e,
          i,
          n,
          s =
            ((e = t.scene),
            (i = Math.ceil(t.width / 40)),
            (n = Math.ceil(t.height / 40)),
            new Tm(e, {
              type: 'Graphics',
              create: { rectangle: i * n },
              update: function () {
                for (var t = this.getShapes(), e = this.width / i, s = this.height / n, r = 0; r < n; r++)
                  for (var o = 0; o < i; o++)
                    t[o * n + r]
                      .fillStyle(16777215)
                      .setSize(e * this.value, s * this.value)
                      .setCenterPosition(e * (o + 0.5), s * (r + 0.5));
              },
            }));
        t.once('destroy', function () {
          s.destroy();
        }).addTransitionMode('squares', {
          ease: 'Linear',
          dir: 'out',
          mask: s,
          onStart: function (t, e, i, n) {
            t.setCurrentImageMaskEnable(!0, !0);
          },
          onProgress: function (t, e, i, n) {
            t.maskGameObject.setValue(n);
          },
          onComplete: function (t, e, i, n) {
            t.removeMaskGameObject(!1);
          },
        });
      },
      function (t) {
        var e,
          i,
          n,
          s =
            ((e = t.scene),
            (i = Math.ceil(t.width / 60)),
            (n = Math.ceil(t.height / 60)),
            new Tm(e, {
              type: 'Graphics',
              create: { lines: i * n },
              update: function () {
                for (
                  var t = this.getShapes(),
                    e = this.width / (i - 1),
                    s = this.height / n,
                    r = 2 * s,
                    o = e * this.value,
                    a = s * this.value,
                    h = 0;
                  h < n;
                  h++
                )
                  for (var l = 0; l < i; l++) {
                    var u = l * e,
                      c = h * r + (l % 2) * s;
                    t[l * n + h]
                      .fillStyle(16777215)
                      .start(u + o, c)
                      .lineTo(u, c + a)
                      .lineTo(u - o, c)
                      .lineTo(u, c - a)
                      .lineTo(u + o, c)
                      .close();
                  }
              },
            }));
        t.once('destroy', function () {
          s.destroy();
        }).addTransitionMode('diamonds', {
          ease: 'Linear',
          dir: 'out',
          mask: s,
          onStart: function (t, e, i, n) {
            t.setCurrentImageMaskEnable(!0, !0);
          },
          onProgress: function (t, e, i, n) {
            t.maskGameObject.setValue(n);
          },
          onComplete: function (t, e, i, n) {
            t.removeMaskGameObject(!1);
          },
        });
      },
      function (t) {
        var e,
          i,
          n,
          s =
            ((e = t.scene),
            (i = Math.ceil(t.width / 60)),
            (n = Math.ceil(t.height / 60)),
            new Tm(e, {
              type: 'Graphics',
              create: { circle: i * n },
              update: function () {
                for (
                  var t = this.getShapes(),
                    e = this.width / (i - 1),
                    s = this.height / n,
                    r = 2 * s,
                    o = Math.max(e, s) * this.value,
                    a = 0;
                  a < n;
                  a++
                )
                  for (var h = 0; h < i; h++) {
                    var l = h * e,
                      u = a * r + (h % 2) * s;
                    t[h * n + a].fillStyle(16777215).setCenterPosition(l, u).setRadius(o);
                  }
              },
            }));
        t.once('destroy', function () {
          s.destroy();
        }).addTransitionMode('circles', {
          ease: 'Linear',
          dir: 'out',
          mask: s,
          onStart: function (t, e, i, n) {
            t.setCurrentImageMaskEnable(!0, !0);
          },
          onProgress: function (t, e, i, n) {
            t.maskGameObject.setValue(n);
          },
          onComplete: function (t, e, i, n) {
            t.removeMaskGameObject(!1);
          },
        });
      },
      function (t) {
        var e = (function (t, e) {
          var i = new Tm(t, {
            type: 'Graphics',
            create: { lines: e },
            update: function () {
              for (var t = this.getShapes(), i = this.width / e, n = i / 2, s = 0; s < e; s++) {
                var r = i * s,
                  o = this.height * this.value,
                  a = r + n;
                t[s]
                  .fillStyle(16777215)
                  .start(r, 0)
                  .horizontalLineTo(o)
                  .arc(a, o, n, 180, 0, !0)
                  .horizontalLineTo(-o)
                  .lineTo(r, 0)
                  .close();
              }
            },
          });
          return i;
        })(t.scene, 10);
        t.once('destroy', function () {
          e.destroy();
        }).addTransitionMode('curtain', {
          ease: 'Linear',
          dir: 'out',
          mask: e,
          onStart: function (t, e, i, n) {
            (i.tint = 0), t.setCurrentImageMaskEnable(!0, !0), t.setNextImageMaskEnable(!0, !0);
          },
          onProgress: function (t, e, i, n) {
            var s;
            n < 0.5
              ? ((n = ea(n)),
                (s = Math.floor(255 * (1 - n))),
                t.maskGameObject.setValue(n),
                (e.tint = (s << 16) + (s << 8) + s))
              : (e.visible && t.setChildVisible(e, !1),
                (n = ea(n)),
                (s = Math.floor(255 * (1 - n))),
                t.maskGameObject.setValue(n),
                (i.tint = (s << 16) + (s << 8) + s));
          },
          onComplete: function (t, e, i, n) {
            t.removeMaskGameObject(!1),
              t.setChildVisible(e, !0),
              (e.tint = 16777215),
              t.setChildVisible(i, !0),
              (i.tint = 16777215);
          },
        });
      },
      function (t) {
        t.addTransitionMode('pixellate', {
          ease: 'Linear',
          dir: 'out',
          mask: !0,
          onStart: function (t, e, i, n) {
            t.setChildVisible(i, !1), (e.effect = e.preFX.addPixelate(0)), (i.effect = i.preFX.addPixelate(0));
          },
          onProgress: function (t, e, i, n) {
            if (n < 0.5) {
              n = ea(n);
              var s = Math.min(e.width, e.height) / 5;
              e.effect.amount = Math.ceil(s * n);
            } else {
              e.visible && t.setChildVisible(e, !1), i.visible || t.setChildVisible(i, !0), (n = ea(n));
              s = Math.min(i.width, i.height) / 5;
              i.effect.amount = Math.ceil(s * n);
            }
          },
          onComplete: function (t, e, i, n) {
            e.preFX.remove(e.effect),
              delete e.effect,
              t.setChildVisible(e, !0),
              i.preFX.remove(i.effect),
              delete i.effect;
          },
        });
      },
      function (t) {
        var e, i, n;
        (e = t.scene.game),
          (i = 'rexDissolvePostFx'),
          (n = nb),
          H(e).renderer.pipelines.addPostPipeline(i, n),
          t.addTransitionMode('dissolve', {
            ease: 'Linear',
            dir: 'out',
            mask: !1,
            onStart: function (t, e, i, n) {
              e.effect = (function (t, e, i) {
                void 0 === i && (i = {}), t.setPostPipeline(e);
                var n = t.postPipelines[t.postPipelines.length - 1];
                return n.resetFromJSON(i), i.name && (n.name = i.name), n;
              })(e, nb);
            },
            onProgress: function (t, e, i, n) {
              e.effect.setProgress(n);
            },
            onComplete: function (t, e, i, n) {
              !(function (t, e, i) {
                if (void 0 === i)
                  for (var n = (s = t.postPipelines).length - 1; n >= 0; n--)
                    (o = s[n]) instanceof e && (o.destroy(), rb(s, n));
                else {
                  n = 0;
                  for (var s, r = (s = t.postPipelines).length; n < r; n++) {
                    var o;
                    (o = s[n]) instanceof e && o.name === i && (o.destroy(), rb(s, n));
                  }
                }
              })(e, nb),
                delete e.effect;
            },
          });
      },
      function (t) {
        t.addTransitionMode('revealRight', {
          ease: 'Linear',
          dir: 'in',
          mask: !1,
          onStart: function (t, e, i, n) {
            i.effect = i.preFX.addReveal(ob, 0, 0);
          },
          onProgress: function (t, e, i, n) {
            i.effect.progress = n;
          },
          onComplete: function (t, e, i, n) {
            i.preFX.remove(i.effect), delete i.effect;
          },
        })
          .addTransitionMode('revealLeft', {
            ease: 'Linear',
            dir: 'in',
            mask: !1,
            onStart: function (t, e, i, n) {
              i.effect = i.preFX.addReveal(ob, 1, 0);
            },
            onProgress: function (t, e, i, n) {
              i.effect.progress = n;
            },
            onComplete: function (t, e, i, n) {
              i.preFX.remove(i.effect), delete i.effect;
            },
          })
          .addTransitionMode('revealDown', {
            ease: 'Linear',
            dir: 'in',
            mask: !1,
            onStart: function (t, e, i, n) {
              i.effect = i.preFX.addReveal(ob, 0, 1);
            },
            onProgress: function (t, e, i, n) {
              i.effect.progress = n;
            },
            onComplete: function (t, e, i, n) {
              i.preFX.remove(i.effect), delete i.effect;
            },
          })
          .addTransitionMode('revealUp', {
            ease: 'Linear',
            dir: 'in',
            mask: !1,
            onStart: function (t, e, i, n) {
              i.effect = i.preFX.addReveal(ob, 1, 1);
            },
            onProgress: function (t, e, i, n) {
              i.effect.progress = n;
            },
            onComplete: function (t, e, i, n) {
              i.preFX.remove(i.effect), delete i.effect;
            },
          });
      },
    ],
    hb = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i), (l = e.call(this, t, n, s, o, a, h));
        for (var u = 0, c = ab.length; u < c; u++) ab[u](d(l));
        return l;
      }
      return a(i);
    })(Zm);
  M.register('transitionImagePack', function (t, e, i, n, s) {
    var r = new hb(this.scene, t, e, i, n, s);
    return this.scene.add.existing(r), r;
  }),
    $(window, 'RexPlugins.UI.TransitionImagePack', hb);
  var lb = {},
    ub = {
      scaleImage: function () {
        var t = this.image,
          e = (function (t, e, i, n) {
            void 0 === i && (i = !0), void 0 === n ? (n = {}) : !0 === n && (n = lb);
            var s = t.width,
              r = t.height,
              o = e.width,
              a = e.height;
            if (s <= o && r <= a)
              if (i) {
                var h = o / a;
                h < (l = s / r)
                  ? ((n.width = o), (n.height = o / l))
                  : h > l
                  ? ((n.width = a * l), (n.height = a))
                  : ((n.width = o), (n.height = a));
              } else (n.width = s), (n.height = r);
            else {
              var l = s / r;
              (n.width = Math.min(s, o)), (n.height = Math.min(r, a));
              var u = n.width / n.height;
              u < l ? (n.height = n.width / l) : u > l && (n.width = n.height * l);
            }
            return n;
          })(t, { width: this.width, height: this.height }, this.scaleUp, !0);
        return t.setDisplaySize(e.width, e.height), this.resetChildScaleState(t), this;
      },
    };
  Object.assign(ub, Xm);
  var cb = function () {
      var t = this.background;
      return t
        ? (t.setOrigin(this.originX, this.originY),
          t.setPosition(this.x, this.y),
          Kp(t, this.displayWidth, this.displayHeight),
          this.resetChildScaleState(t),
          this)
        : this;
    },
    db = Phaser.Utils.Objects.IsPlainObject,
    fb = Phaser.Utils.Objects.GetValue,
    pb = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          db(n)
            ? ((n = fb((h = n), 'x', 0)), (s = fb(h, 'y', 0)), (o = fb(h, 'key', void 0)), (a = fb(h, 'frame', void 0)))
            : db(a) && ((h = a), (a = void 0));
        var u = fb(h, 'image');
        u ? u.setPosition(n, s).setOrigin(0.5) : ((u = t.add.image(n, s, o, a)), void 0 === o && u.setVisible(!1)),
          ((l = e.call(this, t, n, s, 1, 1)).type = 'rexImageBox');
        var c = fb(h, 'background');
        c && l.add(c), (l.background = c), l.add(u), (l.image = u), (l.scaleUp = fb(h, 'scaleUp', !1));
        var d = fb(h, 'width', u.width),
          f = fb(h, 'height', u.height);
        return l.resize(d, f), l;
      }
      return (
        a(i, [
          {
            key: 'texture',
            get: function () {
              return this.image.texture;
            },
          },
          {
            key: 'frame',
            get: function () {
              return this.image.frame;
            },
          },
          {
            key: 'flipX',
            get: function () {
              return this._flipX;
            },
            set: function (t) {
              this._flipX !== t && ((this._flipX = t), this.image.setFlipX(t));
            },
          },
          {
            key: 'flipY',
            get: function () {
              return this._flipY;
            },
            set: function (t) {
              this._flipY !== t && ((this._flipY = t), this.image.setFlipY(t));
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return g(u(i.prototype), 'resize', this).call(this, t, e), cb.call(this), this.scaleImage(), this;
            },
          },
          {
            key: 'setTexture',
            value: function (t, e) {
              var i = this.image;
              return (
                i.setTexture(t, e),
                null !== t ? (this.setChildVisible(i, !0), this.scaleImage()) : this.setChildVisible(i, !1),
                this
              );
            },
          },
        ]),
        i
      );
    })(Kf);
  Object.assign(pb.prototype, ub),
    M.register('imageBox', function (t, e, i, n, s) {
      var r = new pb(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.ImageBox', pb),
    M.register('fullWindowRectangle', function (t, e) {
      var i = new cg(this.scene, t, e);
      return this.scene.add.existing(i), i;
    }),
    $(window, 'RexPlugins.UI.FullWindowRectangle', cg),
    M.register('cover', function (t) {
      var e = new gg(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Cover', gg);
  var vb = function (t, e) {
      if (
        (this.scene.sys.scale.autoRound && ((t = Math.floor(t)), (e = Math.floor(e))),
        this.width === t && this.height === e)
      )
        return this;
      var i = this.node.style;
      return (i.width = ''.concat(t, 'px')), (i.height = ''.concat(e, 'px')), this.updateSize(), this;
    },
    gb = {
      id: ['id', void 0],
      text: ['value', void 0],
      maxLength: ['maxLength', void 0],
      minLength: ['minLength', void 0],
      placeholder: ['placeholder', void 0],
      tooltip: ['title', void 0],
      readOnly: ['readOnly', !1],
      spellCheck: ['spellcheck', !1],
      autoComplete: ['autocomplete', 'off'],
    },
    yb = {
      align: ['textAlign', void 0],
      paddingLeft: ['padding-left', void 0],
      paddingRight: ['padding-right', void 0],
      paddingTop: ['padding-top', void 0],
      paddingBottom: ['padding-bottom', void 0],
      fontFamily: ['fontFamily', void 0],
      fontSize: ['font-size', void 0],
      color: ['color', '#ffffff'],
      backgroundColor: ['backgroundColor', 'transparent'],
      border: ['border', 0],
      borderColor: ['borderColor', 'transparent'],
      outline: ['outline', 'none'],
      direction: ['direction', void 0],
    },
    kb = {
      input: 'textchange',
      click: 'click',
      dblclick: 'dblclick',
      mousedown: 'pointerdown',
      mousemove: 'pointermove',
      mouseup: 'pointerup',
      touchstart: 'pointerdown',
      touchmove: 'pointermove',
      touchend: 'pointerup',
      keydown: 'keydown',
      keyup: 'keyup',
      keypress: 'keypress',
      compositionstart: 'compositionStart',
      compositionend: 'compositionEnd',
      compositionupdate: 'compositionUpdate',
      focus: 'focus',
      blur: 'blur',
      select: 'select',
    },
    mb = Phaser.Utils.Objects.GetValue,
    bb = function (t, e, i, n) {
      var s = mb(n, 'preventDefault', !1),
        r = mb(n, 'preTest'),
        o = function (n) {
          e.addEventListener(n, function (e) {
            (r && !r(t, n)) || t.emit(i[n], t, e), s && e.preventDefault();
          });
        };
      for (var a in i) o(a);
    },
    xb = Phaser.GameObjects.DOMElement,
    Cb = Phaser.Utils.Objects.IsPlainObject,
    wb = Phaser.Utils.Objects.GetValue,
    Sb = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l, u;
        r(this, i),
          Cb(n)
            ? ((n = wb((h = n), 'x', 0)), (s = wb(h, 'y', 0)), (o = wb(h, 'width', 0)), (a = wb(h, 'height', 0)))
            : Cb(o) && ((o = wb((h = o), 'width', 0)), (a = wb(h, 'height', 0))),
          void 0 === h && (h = {});
        var c = wb(h, 'inputType', void 0);
        void 0 === c && (c = wb(h, 'type', 'text')),
          'textarea' === c
            ? ((u = document.createElement('textarea')).style.resize = 'none')
            : ((u = document.createElement('input')).type = c),
          Sl(gb, h, u);
        var f = wb(h, 'style', void 0);
        f = Sl(yb, h, f);
        var p = u.style;
        for (var v in h) v in gb || v in yb || (v in p && (f[v] = h[v]));
        return (
          (f['box-sizing'] = 'border-box'),
          ((l = e.call(this, t, n, s, u, f)).type = 'rexInputText'),
          l.resize(o, a),
          bb(d(l), u, kb),
          Pl(u),
          wb(h, 'selectAll', !1) && l.selectAll(),
          (l._isFocused = !1),
          l
            .on(
              'focus',
              function () {
                this._isFocused = !0;
              },
              d(l)
            )
            .on(
              'blur',
              function () {
                this._isFocused = !1;
              },
              d(l)
            ),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'inputType',
            get: function () {
              return 'textarea' === this.node.tagName.toLowerCase() ? 'textarea' : this.node.type;
            },
          },
          {
            key: 'text',
            get: function () {
              return this.node.value;
            },
            set: function (t) {
              this.node.value = t;
            },
          },
          {
            key: 'setText',
            value: function (t) {
              return (this.text = t), this;
            },
          },
          {
            key: 'maxLength',
            get: function () {
              return this.node.maxLength;
            },
            set: function (t) {
              this.node.maxLength = t;
            },
          },
          {
            key: 'setMaxLength',
            value: function (t) {
              return (this.maxLength = t), this;
            },
          },
          {
            key: 'minLength',
            get: function () {
              return this.node.minLength;
            },
            set: function (t) {
              this.node.minLength = t;
            },
          },
          {
            key: 'setMinLength',
            value: function (t) {
              return (this.minLength = t), this;
            },
          },
          {
            key: 'placeholder',
            get: function () {
              return this.node.placeholder;
            },
            set: function (t) {
              this.node.placeholder = t;
            },
          },
          {
            key: 'setPlaceholder',
            value: function (t) {
              return (this.placeholder = t), this;
            },
          },
          {
            key: 'selectText',
            value: function (t, e) {
              return void 0 === t ? this.node.select() : this.node.setSelectionRange(t, e), this;
            },
          },
          {
            key: 'selectAll',
            value: function () {
              return this.selectText(), this;
            },
          },
          {
            key: 'selectionStart',
            get: function () {
              return this.node.selectionStart;
            },
          },
          {
            key: 'selectionEnd',
            get: function () {
              return this.node.selectionEnd;
            },
          },
          {
            key: 'selectedText',
            get: function () {
              var t = this.node;
              return t.value.substring(t.selectionStart, t.selectionEnd);
            },
          },
          {
            key: 'cursorPosition',
            get: function () {
              return this.node.selectionStart;
            },
            set: function (t) {
              this.node.setSelectionRange(t, t);
            },
          },
          {
            key: 'setCursorPosition',
            value: function (t) {
              return (
                void 0 === t ? (t = this.text.length) : t < 0 && (t = this.text.length + t),
                (this.cursorPosition = t),
                this
              );
            },
          },
          {
            key: 'tooltip',
            get: function () {
              return this.node.title;
            },
            set: function (t) {
              this.node.title = t;
            },
          },
          {
            key: 'setTooltip',
            value: function (t) {
              return (this.tooltip = t), this;
            },
          },
          {
            key: 'setTextChangedCallback',
            value: function (t) {
              return (this.onTextChanged = t), this;
            },
          },
          {
            key: 'readOnly',
            get: function () {
              return this.node.readOnly;
            },
            set: function (t) {
              this.node.readOnly = t;
            },
          },
          {
            key: 'setReadOnly',
            value: function (t) {
              return void 0 === t && (t = !0), (this.readOnly = t), this;
            },
          },
          {
            key: 'spellCheck',
            get: function () {
              return this.node.spellcheck;
            },
            set: function (t) {
              this.node.spellcheck = t;
            },
          },
          {
            key: 'setSpellCheck',
            value: function (t) {
              return (this.spellCheck = t), this;
            },
          },
          {
            key: 'fontColor',
            get: function () {
              return this.node.style.color;
            },
            set: function (t) {
              this.node.style.color = t;
            },
          },
          {
            key: 'setFontColor',
            value: function (t) {
              return (this.fontColor = t), this;
            },
          },
          {
            key: 'setStyle',
            value: function (t, e) {
              return (this.node.style[t] = e), this;
            },
          },
          {
            key: 'getStyle',
            value: function (t) {
              return this.node.style[t];
            },
          },
          {
            key: 'scrollToBottom',
            value: function () {
              return (this.node.scrollTop = this.node.scrollHeight), this;
            },
          },
          {
            key: 'setEnabled',
            value: function (t) {
              return void 0 === t && (t = !0), (this.node.disabled = !t), this;
            },
          },
          {
            key: 'setBlur',
            value: function () {
              return this.node.blur(), this;
            },
          },
          {
            key: 'setFocus',
            value: function () {
              return this.node.focus(), this;
            },
          },
          {
            key: 'isFocused',
            get: function () {
              return this._isFocused;
            },
          },
        ]),
        i
      );
    })(xb),
    Pb = { resize: vb };
  Object.assign(Sb.prototype, Pb),
    M.register('inputText', function (t) {
      var e = new Sb(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.InputText', Sb);
  var Tb = Phaser.Utils.Objects.GetValue,
    Ob = function (t, e) {
      return (
        void 0 === t && (t = 0),
        new Promise(function (i, n) {
          setTimeout(function () {
            i(e);
          }, t);
        })
      );
    },
    Mb = function (t) {
      var e = t.game,
        i = t.fileInput,
        n = t.closeDelay;
      return Mh(H(e).events, 'focus')
        .then(function () {
          return Ob(n);
        })
        .then(function () {
          var t = { files: i.files };
          return Promise.resolve(t);
        });
    },
    Eb = Phaser.Utils.Objects.GetValue,
    _b = Phaser.DOM.RemoveFromDOM,
    Rb = function (t, e) {
      var i = Eb(e, 'closeDelay', 200),
        n = (function (t, e) {
          var i = document.createElement('input');
          i.type = 'file';
          var n = Tb(e, 'accept', ''),
            s = Tb(e, 'multiple', !1);
          return i.setAttribute('accept', n), s ? i.setAttribute('multiple', '') : i.removeAttribute('multiple'), i;
        })(0, e);
      return (
        n.click(),
        Mb({ game: t, fileInput: n, closeDelay: i }).then(function (t) {
          return _b(n), n.remove(), Promise.resolve(t);
        })
      );
    },
    Lb = function (t) {
      return (
        this.setOrigin(t.originX, t.originY),
        this.setPosition(t.x, t.y),
        this.resize(t.displayWidth, t.displayHeight),
        this
      );
    },
    Bb = function (t, e, i, n, s, r) {
      if (null === s || !1 === s);
      else if (Eg(s)) s();
      else {
        var o = (function (t, e, i) {
          if (void 0 === i)
            switch (e) {
              case 'image':
              case 'svg':
                i = 'textures';
                break;
              case 'animation':
                i = 'json';
                break;
              case 'tilemapTiledJSON':
              case 'tilemapCSV':
                i = 'tilemap';
                break;
              case 'glsl':
                i = 'shader';
                break;
              default:
                i = e;
            }
          return (t = H(t)), 'textures' === i ? t.textures : t.cache[i];
        })(t, i, s);
        o.exists(n) && o.remove(n);
      }
      var a = t.load;
      if (
        (r &&
          a.once('filecomplete-'.concat(i, '-').concat(n), function (t, e, i) {
            r(i);
          }),
        Eg(e))
      )
        e();
      else {
        var h = window.URL.createObjectURL(e);
        a[i](n, h);
      }
      a.start();
    },
    Db = {
      loadFile: function (t, e, i, n, s) {
        var r = this.scene;
        return Bb(r, t, e, i, n, s), this;
      },
      loadFilePromise: function (t, e, i, n) {
        var s = this.scene;
        return new Promise(function (r, o) {
          Bb(s, t, e, i, n, function (t) {
            r(t);
          });
        });
      },
    },
    Ib = Phaser.GameObjects.DOMElement,
    jb = Phaser.Utils.Objects.IsPlainObject,
    Ab = Phaser.Utils.Objects.GetValue,
    zb = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          jb(n)
            ? ((n = Ab((h = n), 'x', 0)), (s = Ab(h, 'y', 0)), (o = Ab(h, 'width', 0)), (a = Ab(h, 'height', 0)))
            : jb(o) && ((o = Ab((h = o), 'width', 0)), (a = Ab(h, 'height', 0)));
        var u = document.createElement('input');
        (u.type = 'file'), (u.style.display = 'none');
        var c = document.createElement('label');
        c.appendChild(u);
        var f = Ab(h, 'style', void 0);
        ((l = e.call(this, t, n, s, c, f)).type = 'rexFileChooser'), l.resetFromJSON(h), l.resize(o, a);
        var p = d(l);
        return (
          (u.onchange = function () {
            p.emit('change', p);
          }),
          l.setCloseDelay(Ab(h, 'closeDelay', 200)),
          (u.onclick = function () {
            Mb({ game: t, fileInput: u, closeDelay: p.closeDelay }).then(function () {
              p.emit('select', p);
            });
          }),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return this.setAccept(Ab(t, 'accept', '')), this.setMultiple(Ab(t, 'multiple', !1)), this;
            },
          },
          {
            key: 'setAccept',
            value: function (t) {
              return void 0 === t && (t = ''), this.fileInput.setAttribute('accept', t), this;
            },
          },
          {
            key: 'setMultiple',
            value: function (t) {
              return (
                void 0 === t && (t = !0),
                t ? this.fileInput.setAttribute('multiple', '') : this.fileInput.removeAttribute('multiple'),
                this
              );
            },
          },
          {
            key: 'setCloseDelay',
            value: function (t) {
              return void 0 === t && (t = 200), (this.closeDelay = t), this;
            },
          },
          {
            key: 'fileInput',
            get: function () {
              return this.node.children[0];
            },
          },
          {
            key: 'open',
            value: function () {
              return this.fileInput.click(), this;
            },
          },
          {
            key: 'files',
            get: function () {
              return this.fileInput.files;
            },
          },
          {
            key: 'setOpenEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.fileInput.disabled = !t), this;
            },
          },
        ]),
        i
      );
    })(Ib),
    Fb = { resize: vb, syncTo: Lb };
  Object.assign(zb.prototype, Fb, Db),
    M.register('fileChooser', function (t) {
      var e = new zb(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.FileChooser', zb);
  var Vb = {
      setDropEnable: function (t) {
        return void 0 === t && (t = !0), (this.dropEnable = t), this;
      },
      toggleDropEnable: function () {
        return (this.dropEnable = !this.dropEnable), this;
      },
    },
    Wb = { resize: vb, syncTo: Lb };
  Object.assign(
    Wb,
    Vb,
    {
      addFilter: function (t, e) {
        return this.filters || (this.filters = {}), (this.filters[t] = e), this;
      },
      addFilters: function (t) {
        for (var e in (this.filters || (this.filters = {}), t)) this.filters[e] = t[e];
        return this;
      },
    },
    Db
  );
  var Yb = { dragenter: 'dragenter', dragleave: 'dragleave', dragover: 'dragover', drop: 'drop' },
    Xb = Phaser.GameObjects.DOMElement,
    Gb = Phaser.Utils.Objects.IsPlainObject,
    Hb = Phaser.Utils.Objects.GetValue,
    Ub = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          Gb(n)
            ? ((n = Hb((h = n), 'x', 0)), (s = Hb(h, 'y', 0)), (o = Hb(h, 'width', 0)), (a = Hb(h, 'height', 0)))
            : Gb(o) && ((o = Hb((h = o), 'width', 0)), (a = Hb(h, 'height', 0))),
          void 0 === h && (h = {});
        var u = document.createElement('div'),
          c = Hb(h, 'style', void 0);
        ((l = e.call(this, t, n, s, u, c)).type = 'rexFileDropZone'),
          l.resize(o, a),
          (l._files = []),
          l.setDropEnable(Hb(h, 'dropEnable', !0));
        var f = Hb(h, 'filters');
        return (
          f && l.addFilters(f),
          bb(d(l), u, Yb, {
            preventDefault: !0,
            preTest: function (t) {
              return t.dropEnable;
            },
          }),
          l.on(
            'drop',
            function (t, e) {
              this._files = e.dataTransfer.files;
              var i = this._files;
              if (i && this.filters)
                for (var n in this.filters) {
                  for (var s = this.filters[n], r = [], o = 0, a = i.length; o < a; o++) {
                    var h = i[o];
                    s(h, i) && r.push(h);
                  }
                  r.length > 0 && this.emit('drop.'.concat(n), r);
                }
            },
            d(l)
          ),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'files',
            get: function () {
              return this._files;
            },
          },
        ]),
        i
      );
    })(Xb);
  Object.assign(Ub.prototype, Wb),
    M.register('fileDropZone', function (t) {
      var e = new Ub(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.FileDropZone', Ub);
  var Nb = Phaser.Math.Wrap,
    Kb = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t) {
        var n;
        return r(this, i), ((n = e.call(this, t, 0, 0, 1, 1)).isRexSpace = !0), n;
      }
      return a(i);
    })(Phaser.GameObjects.Zone),
    Jb = function (t, e) {
      var i = this.sizerChildren;
      if (0 === i.length) return -1;
      for (var n = -1, s = 1 / 0, r = 0, o = i.length; r < o; r++) {
        var a = i[r];
        s > (h = 0 === this.orientation ? Math.abs(a.left - t) : Math.abs(a.top - e)) && ((s = h), (n = r));
      }
      var h;
      a = i[i.length - 1];
      return (
        s > (h = 0 === this.orientation ? Math.abs(a.right - t) : Math.abs(a.bottom - e)) && ((s = h), (n = r + 1)), n
      );
    },
    qb = Phaser.Utils.Objects.IsPlainObject,
    Zb = Phaser.Utils.Objects.GetValue,
    $b = Phaser.Display.Align.CENTER,
    Qb = { min: 0, full: -1 },
    tx = function (t, e, i, s, r, o, a, h, l, u) {
      Ep.call(this, t);
      var c = t.isRexSpace,
        d = n(e);
      if (null === e) return this;
      if ('number' === d);
      else if ('string' === d) e = Qb[e];
      else if (qb(e)) {
        var f;
        (e = Zb((f = e), 'proportion', void 0)),
          (i = Zb(f, 'align', $b)),
          (s = Zb(f, 'padding', 0)),
          (r = Zb(f, 'expand', !1)),
          (o = Zb(f, 'key', void 0)),
          (a = Zb(f, 'index', void 0)),
          t.isRexSizer || ((h = Zb(f, 'minWidth', void 0)), (l = Zb(f, 'minHeight', void 0))),
          (u = Zb(f, 'fitRatio', 0));
      }
      return (
        'string' == typeof i && (i = Zf[i]),
        void 0 === e && (e = c ? 1 : 0),
        void 0 === i && (i = $b),
        void 0 === s && (s = 0),
        void 0 === r && (r = !1),
        void 0 === h && (c ? (h = 0) : t.isRexSizer || (h = t._minWidth)),
        void 0 === l && (c ? (l = 0) : t.isRexSizer || (l = t._minHeight)),
        void 0 === u && (u = 0),
        ((f = this.getSizerConfig(t)).proportion = e),
        (f.align = i),
        (f.padding = Op(s)),
        (f.expand = r),
        (f.fitRatio = 0 === e ? u : 0),
        void 0 === a || a >= this.sizerChildren.length
          ? this.sizerChildren.push(t)
          : this.sizerChildren.splice(a, 0, t),
        t.isRexSizer ||
          (e > 0 &&
            (0 === this.orientation
              ? (t.minWidth = void 0 === h ? Dr(t) : h)
              : (t.minHeight = void 0 === l ? Ir(t) : l)),
          r && (0 === this.orientation ? (t.minHeight = l) : (t.minWidth = h))),
        void 0 !== o && this.addChildrenMap(o, t),
        this
      );
    },
    ex = {
      add: tx,
      addSpace: function (t) {
        return this.insertSpace(void 0, t), this;
      },
      insertSpace: function (t, e) {
        return (
          void 0 === e && (e = 1),
          tx.call(this, new Kb(this.scene), { proportion: e, minWidth: 0, minHeight: 0, index: t }),
          this
        );
      },
      insert: function (t, e, i, n, s, r, o, a) {
        return qb(i) && (i.index = t), tx.call(this, e, i, n, s, r, o, t, a), this;
      },
      insertAtPosition: function (t, e, i, n, s, r, o, a, h) {
        var l = Jb.call(this, t, e);
        return -1 === l && (l = void 0), this.insert(l, i, n, s, r, o, a, h), this;
      },
    },
    ix = Phaser.Utils.Array.Remove,
    nx = {
      remove: function (t, e) {
        return this.getParentSizer(t) !== this || (ix(this.sizerChildren, t), jp.call(this, t, e)), this;
      },
      removeAll: function (t) {
        for (var e = this.sizerChildren.length - 1; e >= 0; e--) this.remove(this.sizerChildren[e], t);
        return this;
      },
      clear: function (t) {
        return (this.sizerChildren.length = 0), Ik.call(this, t), this;
      },
    },
    sx = {
      getChildAlign: function (t) {
        return this.getSizerConfig(t).align;
      },
      setChildAlign: function (t, e) {
        return 'string' == typeof e && (e = Zf[e]), (this.getSizerConfig(t).align = e), this;
      },
    },
    rx = {
      getChildrenWidth: function (t) {
        if (this.rexSizer.hidden) return 0;
        void 0 === t && (t = !0);
        var e,
          i,
          n,
          s = 0,
          r = this.sizerChildren;
        if (0 === this.orientation)
          for (var o = this.space.item, a = !0, h = 0, l = r.length; h < l; h++)
            (e = r[h]).rexSizer.hidden ||
              ((n = 0 === e.rexSizer.proportion || t ? this.getChildWidth(e) : 0),
              (n += (i = e.rexSizer.padding).left + i.right),
              a ? (a = !1) : (n += o),
              (s += n));
        else
          for (h = 0, l = r.length; h < l; h++)
            (e = r[h]).hasOwnProperty('rexSizer') &&
              (e.rexSizer.hidden ||
                ((i = e.rexSizer.padding), (n = this.getChildWidth(e) + i.left + i.right), (s = Math.max(n, s))));
        return s + this.space.left + this.space.right;
      },
      getChildrenHeight: function (t) {
        if (this.rexSizer.hidden) return 0;
        void 0 === t && (t = !0);
        var e,
          i,
          n,
          s = 0,
          r = this.sizerChildren;
        if (0 === this.orientation)
          for (var o = 0, a = r.length; o < a; o++)
            (e = r[o]).rexSizer.hidden ||
              ((i = e.rexSizer.padding), (n = this.getChildHeight(e) + i.top + i.bottom), (s = Math.max(n, s)));
        else {
          var h = this.space.item,
            l = !0;
          for (o = 0, a = r.length; o < a; o++)
            (e = r[o]).hasOwnProperty('rexSizer') &&
              (e.rexSizer.hidden ||
                ((n = 0 === e.rexSizer.proportion || t ? this.getChildHeight(e) : 0),
                (n += (i = e.rexSizer.padding).top + i.bottom),
                l ? (l = !1) : (n += h),
                (s += n)));
        }
        return s + this.space.top + this.space.bottom;
      },
      getExpandedChildWidth: function (t, e) {
        var i;
        void 0 === e && (e = this.width);
        var n = t.rexSizer,
          s = n.padding;
        0 === this.orientation
          ? n.proportion > 0 && this.proportionLength > 0 && (i = n.proportion * this.proportionLength)
          : n.expand && (i = e - this.space.left - this.space.right - s.left - s.right);
        return i;
      },
      getExpandedChildHeight: function (t, e) {
        var i;
        void 0 === e && (e = this.height);
        var n = t.rexSizer,
          s = n.padding;
        0 === this.orientation
          ? n.expand && (i = e - this.space.top - this.space.bottom - s.top - s.bottom)
          : n.proportion > 0 && this.proportionLength > 0 && (i = n.proportion * this.proportionLength);
        return i;
      },
      getChildrenSizers: function (t) {
        void 0 === t && (t = []);
        for (var e, i = this.sizerChildren, n = 0, s = i.length; n < s; n++) (e = i[n]).isRexSizer && t.push(e);
        return t;
      },
      preLayout: function () {
        this.hasRatioFitChild = !1;
        for (var t = this.sizerChildren, e = 0, i = t.length; e < i; e++) {
          var n = t[e];
          n.rexSizer.hidden || (n.rexSizer.fitRatio && (Kp(n, 1, 1), (this.hasRatioFitChild = !0)));
        }
        return (this._childrenProportion = void 0), (this.proportionLength = void 0), Up.call(this), this;
      },
      postResolveSize: function (t, e) {
        if (this.hasRatioFitChild) {
          var i;
          0 === this.orientation
            ? (i = e - this.getInnerPadding('top') - this.getInnerPadding('bottom'))
            : (this.getInnerPadding('left'), this.getInnerPadding('right'));
          for (var n, s, r = this.sizerChildren, o = 0, a = r.length; o < a; o++) {
            var h = r[o];
            if (!h.rexSizer.hidden) {
              var l = h.rexSizer.fitRatio;
              l &&
                (0 === this.orientation
                  ? (n = (s = i - this.getChildOuterPadding(h, 'top') - this.getChildOuterPadding(h, 'bottom')) * l)
                  : (s = (n = i - this.getChildOuterPadding(h, 'top') - this.getChildOuterPadding(h, 'bottom')) / l),
                Kp(h, n, s),
                h.isRexSizer && h.setMinSize(n, s));
            }
          }
          (this.proportionLength = void 0), (this._childrenWidth = void 0), this.resolveWidth(t, !0);
        }
      },
      layoutChildren: function () {
        for (
          var t,
            e,
            i,
            n,
            s,
            r,
            o,
            a,
            h,
            l,
            u = this.sizerChildren,
            c = this.innerLeft,
            d = this.innerTop,
            f = this.innerWidth,
            p = this.innerHeight,
            v = c,
            g = d,
            y = this.startChildIndex,
            k = 0,
            m = u.length;
          k < m;
          k++
        )
          (l = 0 === y ? k : Nb(k + y, 0, m)),
            this.rtl && (l = m - l - 1),
            (t = u[l]).rexSizer.hidden ||
              ((i = (e = t.rexSizer).padding),
              zg.call(this, t),
              t.isRexSpace
                ? ((a = 0), (h = 0))
                : ((a = this.getExpandedChildWidth(t)), (h = this.getExpandedChildHeight(t))),
              t.isRexSizer ? (t.runLayout(this, a, h), Mk(t, this)) : Kp(t, a, h),
              void 0 === a && (a = Dr(t)),
              void 0 === h && (h = Ir(t)),
              0 === this.orientation
                ? ((n = v + i.left),
                  (r = 0 === e.proportion || 0 === this.proportionLength ? a : e.proportion * this.proportionLength),
                  (s = g + i.top),
                  (o = p - i.top - i.bottom))
                : ((n = v + i.left),
                  (r = f - i.left - i.right),
                  (s = g + i.top),
                  (o = 0 === e.proportion || 0 === this.proportionLength ? h : e.proportion * this.proportionLength)),
              Fg.call(this, t, n, s, r, o, e.align),
              0 === this.orientation
                ? (v += r + i.left + i.right + this.space.item)
                : (g += o + i.top + i.bottom + this.space.item));
      },
      resolveWidth: function (t) {
        t = Xp.call(this, t);
        if (void 0 === this.proportionLength && 0 === this.orientation) {
          var e = t - this.childrenWidth;
          e > 0
            ? ((e = t - this.getChildrenWidth(!1)), (this.proportionLength = e / this.childrenProportion))
            : (this.proportionLength = 0);
        }
        return t;
      },
      resolveHeight: function (t) {
        t = Gp.call(this, t);
        if (void 0 === this.proportionLength && 1 === this.orientation) {
          var e = t - this.childrenHeight;
          e > 0
            ? ((e = t - this.getChildrenHeight(!1)), (this.proportionLength = e / this.childrenProportion))
            : (this.proportionLength = 0);
        }
        return t;
      },
    };
  Object.assign(
    rx,
    ex,
    nx,
    sx,
    {
      getChildProportion: function (t) {
        return this.getSizerConfig(t).proportion;
      },
      setChildProportion: function (t, e) {
        return (this.getSizerConfig(t).proportion = e), this;
      },
    },
    {
      getChildExpand: function (t) {
        return this.getSizerConfig(t).expand;
      },
      setChildExpand: function (t, e) {
        return (this.getSizerConfig(t).expand = e), this;
      },
    }
  );
  var ox = function () {
      for (var t, e, i = 0, n = this.sizerChildren, s = 0, r = n.length; s < r; s++)
        (t = n[s]).rexSizer.hidden || ((e = t.rexSizer.proportion) > 0 && (i += e));
      return i;
    },
    ax = { x: 0, h: 0, horizontal: 0, 'left-to-right': 0, y: 1, v: 1, vertical: 1, 'top-to-bottom': 1 },
    hx = function (t) {
      return 'string' == typeof t && (t = ax[t]), t;
    },
    lx = Phaser.Utils.Objects.IsPlainObject,
    ux = Phaser.Utils.Objects.GetValue,
    cx = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l) {
        var u;
        return (
          r(this, i),
          lx(n)
            ? ((n = ux((l = n), 'x', 0)),
              (s = ux(l, 'y', 0)),
              (o = ux(l, 'width', void 0)),
              (a = ux(l, 'height', void 0)),
              (h = ux(l, 'orientation', 0)))
            : lx(o)
            ? ((o = ux((l = o), 'width', void 0)), (a = ux(l, 'height', void 0)), (h = ux(l, 'orientation', 0)))
            : lx(h) && (h = ux((l = h), 'orientation', 0)),
          void 0 === h && (h = 0),
          ((u = e.call(this, t, n, s, o, a, l)).type = 'rexSizer'),
          (u.sizerChildren = []),
          u.setOrientation(h),
          u.setItemSpacing(ux(l, 'space.item', 0)),
          u.setStartChildIndex(ux(l, 'startChildIndex', 0)),
          u.setRTL(ux(l, 'rtl', !1)),
          u.addChildrenMap('items', u.sizerChildren),
          u
        );
      }
      return (
        a(i, [
          {
            key: 'setOrientation',
            value: function (t) {
              return (this.orientation = hx(t)), this;
            },
          },
          {
            key: 'setItemSpacing',
            value: function (t) {
              return (this.space.item = t), this;
            },
          },
          {
            key: 'setStartChildIndex',
            value: function (t) {
              return (this.startChildIndex = t), this;
            },
          },
          {
            key: 'setRTL',
            value: function (t) {
              return void 0 === t && (t = !0), (this.rtl = t), this;
            },
          },
          {
            key: 'childrenProportion',
            get: function () {
              return (
                void 0 === this._childrenProportion && (this._childrenProportion = ox.call(this)),
                this._childrenProportion
              );
            },
          },
        ]),
        i
      );
    })(Ok);
  Object.assign(cx.prototype, rx);
  var dx = function (t, e, i) {
      if (t) {
        var n = null == e,
          s = null == i;
        return (
          (n && s) ||
            (n || (t.displayWidth = e),
            s || (t.displayHeight = i),
            n && (t.scaleX = t.scaleY),
            s && (t.scaleY = t.scaleX)),
          t
        );
      }
    },
    fx = {
      appendText: Bi,
      resetDisplayContent: function (t) {
        void 0 === t ? (t = {}) : 'string' == typeof t && (t = { text: t });
        var e = t.text || '';
        this.setText(e);
        var i = this.childrenMap.icon;
        if (i) {
          t.icon ? this.show(i) : this.hide(i);
          var n = t.iconSize;
          n && (this.setChildDisplaySize(i, n, n), void 0 !== this.iconWidth && this.setIconSize(n)),
            !0 !== t.icon && this.setIconTexture(t.icon, t.iconFrame);
        }
        var s = this.childrenMap.action;
        if (s) {
          t.action ? this.show(s) : this.hide(s);
          var r = t.actionSize;
          r && (this.setChildDisplaySize(s, r, r), void 0 !== this.actionWidth && this.setActionSize(r)),
            !0 !== t.action && this.setActionTexture(t.action, t.actionFrame);
        }
        return this;
      },
    },
    px = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'text',
            get: function () {
              var t = this.childrenMap.text;
              return t ? t.text : '';
            },
            set: function (t) {
              var e = this.childrenMap.text;
              e && e.setText(t);
            },
          },
          {
            key: 'setText',
            value: function (t) {
              return (this.text = t), this;
            },
          },
          {
            key: 'setIconTexture',
            value: function (t, e) {
              var i = this.childrenMap.icon;
              return i
                ? (i.setTexture(t, e),
                  void 0 !== this.iconWidth &&
                    void 0 !== this.iconHeight &&
                    (dx(i, this.iconWidth, this.iconHeight), this.resetChildScaleState(i)),
                  this)
                : this;
            },
          },
          {
            key: 'setTexture',
            value: function (t, e) {
              return this.setIconTexture(t, e), this;
            },
          },
          {
            key: 'setIconSize',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.iconWidth = t), (this.iconHeight = e), this;
            },
          },
          {
            key: 'texture',
            get: function () {
              var t = this.childrenMap.icon;
              if (t) return t.texture;
            },
          },
          {
            key: 'frame',
            get: function () {
              var t = this.childrenMap.icon;
              if (t) return t.frame;
            },
          },
          {
            key: 'setActionTexture',
            value: function (t, e) {
              var i = this.childrenMap.action;
              return (
                void 0 === i ||
                  (i.setTexture(t, e),
                  void 0 !== this.actionWidth &&
                    void 0 !== this.actionHeight &&
                    (dx(i, this.actionWidth, this.actionHeight), this.resetChildScaleState(i))),
                this
              );
            },
          },
          {
            key: 'actionTexture',
            get: function () {
              var t = this.childrenMap.action;
              if (t) return t.texture;
            },
          },
          {
            key: 'actionFrame',
            get: function () {
              var t = this.childrenMap.action;
              if (t) return t.frame;
            },
          },
          {
            key: 'setActionSize',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.actionWidth = t), (this.actionHeight = e), this;
            },
          },
          {
            key: 'preLayout',
            value: function () {
              var t = this.childrenMap.icon;
              t && void 0 !== this.iconWidth && void 0 !== this.iconHeight && dx(t, this.iconWidth, this.iconHeight);
              var e = this.childrenMap.action;
              e &&
                void 0 !== this.actionWidth &&
                void 0 !== this.actionHeight &&
                dx(e, this.actionWidth, this.actionHeight),
                g(u(i.prototype), 'preLayout', this).call(this);
            },
          },
          {
            key: 'postLayout',
            value: function (t, e, i) {
              var n = this.childrenMap.iconMask;
              n && (n.setPosition(), this.resetChildPositionState(n));
              var s = this.childrenMap.actionMask;
              return s && (s.setPosition(), this.resetChildPositionState(s)), this;
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              g(u(i.prototype), 'resize', this).call(this, t, e);
              var n = this.childrenMap.iconMask;
              n && n.resize();
              var s = this.childrenMap.actionMask;
              return s && s.resize(), this;
            },
          },
        ]),
        i
      );
    })(cx);
  Object.assign(px.prototype, fx);
  var vx = function (t, e, i, n) {
      var s = new Dm(e, i, n);
      if (t && !t.isRexSizer) {
        var r = s.createGeometryMask();
        t.setMask(r),
          this.once('destroy', function () {
            t.setMask(), r.destroy();
          });
      }
      return this.pin(s), s;
    },
    gx = Phaser.Utils.Objects.GetValue,
    yx = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).type = 'rexLabel');
        var o = gx(n, 'background', void 0),
          a = gx(n, 'icon', void 0),
          h = gx(n, 'iconMask', void 0),
          l = gx(n, 'text', void 0),
          u = gx(n, 'action', void 0),
          c = gx(n, 'actionMask', void 0),
          f = gx(n, 'align', void 0);
        if ((o && s.addBackground(o), ('right' !== f && 'bottom' !== f && 'center' !== f) || s.addSpace(), a)) {
          0 === s.orientation
            ? (l || u) &&
              (x = {
                right: gx(n, 'space.icon', 0),
                top: gx(n, 'space.iconTop', 0),
                bottom: gx(n, 'space.iconBottom', 0),
                left: gx(n, 'space.iconLeft', 0),
              })
            : (l || u) &&
              (x = {
                bottom: gx(n, 'space.icon', 0),
                left: gx(n, 'space.iconLeft', 0),
                right: gx(n, 'space.iconRight', 0),
                top: gx(n, 'space.iconTop', 0),
              });
          var p = gx(n, 'squareFitIcon', !1) ? 1 : 0;
          if ((s.add(a, { proportion: 0, padding: x, fitRatio: p }), h && (h = vx.call(d(s), a, a, 1)), !p)) {
            var v = gx(n, 'iconSize', void 0);
            s.setIconSize(gx(n, 'iconWidth', v), gx(n, 'iconHeight', v));
          }
        }
        if (l) {
          var g,
            y,
            k = gx(n, 'space.text', 0),
            m = gx(n, 'expandTextWidth', !1),
            b = gx(n, 'expandTextHeight', !1);
          0 === s.orientation
            ? ((g = m ? 1 : 0), u && (x = { right: k }), (y = b))
            : ((g = b ? 1 : 0), u && (x = { bottom: k }), (y = m)),
            s.add(l, { proportion: g, expand: y, padding: x });
        }
        if (u) {
          var x;
          x =
            0 === s.orientation
              ? {
                  top: gx(n, 'space.actionTop', 0),
                  bottom: gx(n, 'space.actionBottom', 0),
                  right: gx(n, 'space.actionRight', 0),
                }
              : {
                  left: gx(n, 'space.actionLeft', 0),
                  right: gx(n, 'space.actionRight', 0),
                  bottom: gx(n, 'space.actionBottom', 0),
                };
          p = gx(n, 'squareFitAction', !1) ? 1 : 0;
          if ((s.add(u, { proportion: 0, padding: x, fitRatio: p }), c && (c = vx.call(d(s), u, u, 1)), !p)) {
            var C = gx(n, 'actionSize');
            s.setActionSize(gx(n, 'actionWidth', C), gx(n, 'actionHeight', C));
          }
        }
        return (
          'center' === f && s.addSpace(),
          s.addChildrenMap('background', o),
          s.addChildrenMap('icon', a),
          s.addChildrenMap('iconMask', h),
          s.addChildrenMap('text', l),
          s.addChildrenMap('action', u),
          s.addChildrenMap('actionMask', c),
          s
        );
      }
      return a(i);
    })(px),
    kx = Phaser.Utils.Objects.GetValue,
    mx = function (t, e) {
      var i = kx(e, 'canvas'),
        n = kx(i, 'width', 128),
        s = kx(i, 'height', 128),
        r = new Ic(t, 0, 0, n, s);
      t.add.existing(r);
      var o = kx(i, 'key'),
        a = kx(i, 'frame'),
        h = kx(i, 'fill');
      return void 0 !== h ? r.fill(h) : void 0 !== o && r.loadTexture(o, a), (r.setTexture = r.loadTexture.bind(r)), r;
    },
    bx = Phaser.Utils.Objects.GetValue,
    xx = function (t, e) {
      var i = bx(e, 'clickTarget', this);
      return 'string' == typeof i && (i = t.getElement(i)), i;
    },
    Cx = Phaser.Utils.Objects.GetValue,
    wx = { accept: 'image/*', multiple: !1 },
    Sx = function (t, e) {
      if (0 !== e.length) {
        var i = t.childrenMap.icon,
          n = i.image,
          s = e[0];
        return n.loadFromFilePromise(s).then(function () {
          return i.scaleImage(), t.emit('select', s, t), Promise.resolve(s);
        });
      }
    },
    Px = {
      openPromise: function () {
        var t,
          e = this;
        return ((t = i().mark(function t() {
          var n;
          return i().wrap(function (t) {
            for (;;)
              switch ((t.prev = t.next)) {
                case 0:
                  return (
                    (n = e),
                    t.abrupt(
                      'return',
                      Rb(e.scene.game, wx).then(function (t) {
                        return Sx(n, t.files);
                      })
                    )
                  );
                case 2:
                case 'end':
                  return t.stop();
              }
          }, t);
        })),
        function () {
          var e = this,
            i = arguments;
          return new Promise(function (n, r) {
            var o = t.apply(e, i);
            function a(t) {
              s(o, n, r, a, h, 'next', t);
            }
            function h(t) {
              s(o, n, r, a, h, 'throw', t);
            }
            a(void 0);
          });
        })();
      },
      open: function () {
        return this.openPromise(), this;
      },
      setClickOpenEnable: function (t) {
        return (
          void 0 === t && (t = !0),
          this.clickBehavior && this.clickBehavior.setEnable(t),
          this.fileChooser && this.fileChooser.setOpenEnable(t),
          this
        );
      },
    },
    Tx = {
      getFileName: function (t) {
        if (!t) return null;
        var e = t.name;
        return e.substr(0, e.lastIndexOf('.'));
      },
      saveTexture: function (t) {
        return this.childrenMap.canvas.generateTexture(t), this;
      },
    };
  Object.assign(Tx, Px);
  var Ox = Phaser.Utils.Objects.GetValue,
    Mx = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i);
        var o = (function (t, e) {
          var i = new pb(t, {
            scaleUp: kx(e, 'scaleUpIcon', !1),
            background: kx(e, 'iconBackground'),
            image: mx(t, e),
          });
          return t.add.existing(i), i;
        })(t, n);
        (n.icon = o), ((s = e.call(this, t, n)).type = 'rexImageFileInputLabel');
        var a = s.iconWidth,
          h = s.iconWidth;
        return (
          void 0 !== a && void 0 !== h && o.resize(a, h),
          (s.clickTarget = xx(d(s), n)),
          s.clickTarget &&
            (Ox(n, 'domButton', !0)
              ? (s.fileChooser = (function (t, e) {
                  var i = t.scene,
                    n = new zb(i, wx);
                  return (
                    i.add.existing(n),
                    t.pin(n),
                    n.on('change', function () {
                      Sx(t, n.files);
                    }),
                    n
                  );
                })(d(s)))
              : (s.clickBehavior = (function (t, e) {
                  var i = xx(t, e);
                  if (i) {
                    var n = Cx(e, 'click'),
                      s = new gc(i, n);
                    return s.on('click', t.open, t), s;
                  }
                })(d(s), n))),
          s.addChildrenMap('canvas', o.image),
          s.addChildrenMap('iconBackground', o.background),
          s.addChildrenMap('fileChooser', s.fileChooser),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'postLayout',
            value: function () {
              this.fileChooser && (this.fileChooser.syncTo(this.clickTarget), this.resetChildState(this.fileChooser));
            },
          },
        ]),
        i
      );
    })(yx);
  Object.assign(Mx.prototype, Tx),
    M.register('imageInputLabel', function (t) {
      var e = new Mx(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.ImageInputLabel', Mx);
  var Ex = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), f((s = e.call(this, t)), new Proxy(d(s), d(s)));
      }
      return (
        a(i, [
          {
            key: 'get',
            value: function (t, e) {
              if (fr(t, e)) return t[e];
              var i = t.parent;
              return fr(i, e) ? i[e] : void 0;
            },
          },
          {
            key: 'set',
            value: function (t, e, i) {
              return fr(t, e) ? (t[e] = i) : fr(t.parent, e) && (t.parent[e] = i), !0;
            },
          },
          {
            key: 'key',
            get: function () {
              return this.parent.texture.key;
            },
            set: function (t) {
              this.parent.setTexture(t, this.frame);
            },
          },
          {
            key: 'frame',
            get: function () {
              return this.parent.frame.name;
            },
            set: function (t) {
              this.parent.setFrame(t);
            },
          },
          {
            key: 'scale',
            get: function () {
              return this.parent.scaleX;
            },
            set: function (t) {
              this.parent.setScale(t);
            },
          },
        ]),
        i
      );
    })(uo),
    _x = Phaser.Utils.Objects.GetValue,
    Rx = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).style = _x(n, 'style', d(s)));
        var o = _x(n, 'propertiesMap');
        return (
          (s.activeStyle = Lx(n, 'active', o)),
          (s.hoverStyle = Lx(n, 'hover', o)),
          (s.disableStyle = Lx(n, 'disable', o)),
          (s.onModifyStyle = _x(n, 'onModifyStyle')),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'getStyle',
            value: function (t) {
              return Gl(this.style, t);
            },
          },
          {
            key: 'modifyStyle',
            value: function (t) {
              for (var e in t) this.style[e] = t[e];
              return this.onModifyStyle && this.onModifyStyle(this.parent, t), this;
            },
          },
          {
            key: 'applyStyle',
            value: function (t) {
              if (t) {
                var e = this.getStyle(t);
                return Hl(e, t) ? void 0 : (this.modifyStyle(t), e);
              }
            },
          },
          {
            key: 'setActiveState',
            value: function (t) {
              return Bx.call(this, 'active', t), this;
            },
          },
          {
            key: 'setHoverState',
            value: function (t) {
              return Bx.call(this, 'hover', t), this;
            },
          },
          {
            key: 'setDisableState',
            value: function (t) {
              return Bx.call(this, 'disable', t), this;
            },
          },
        ]),
        i
      );
    })(uo),
    Lx = function (t, e, i) {
      var n = Xl(t, e);
      if (i) for (var s in n) i.hasOwnProperty(s) && ((n[i[s]] = n[s]), delete n[s]);
      return n;
    },
    Bx = function (t, e) {
      void 0 === e && (e = !0);
      var i = ''.concat(t, 'State'),
        n = ''.concat(t, 'Style'),
        s = ''.concat(t, 'StyleSave');
      this[i] !== e &&
        ((this[i] = e), e ? (this[s] = this.applyStyle(this[n])) : (this.applyStyle(this[s]), (this[s] = void 0)));
    },
    Dx = {
      addStyleManager: function (t) {
        return (this.styleManager = new Rx(this, t)), this;
      },
      setActiveState: function (t) {
        return this.styleManager.setActiveState(t), this;
      },
      setHoverState: function (t) {
        return this.styleManager.setHoverState(t), this;
      },
      setDisableState: function (t) {
        return this.styleManager.setDisableState(t), this;
      },
    },
    Ix = Phaser.GameObjects.Image,
    jx = Phaser.Utils.Objects.GetValue,
    Ax = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = jx(n, 'x', 0),
          a = jx(n, 'y', 0),
          h = jx(n, 'key', ''),
          l = jx(n, 'frame', void 0);
        (s = e.call(this, t, o, a, h, l)).type = 'rexStatesImage';
        var u = jx(n, 'effects', !0);
        return (
          u && kr(d(s), u), (s.style = new Ex(d(s), n)), (n.style = s.style), s.addStyleManager(n), delete n.style, s
        );
      }
      return a(i);
    })(Ix);
  Object.assign(Ax.prototype, Dx),
    M.register('statesImage', function (t) {
      var e = new Ax(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.StatesImage', Ax);
  var zx = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          void 0 === n && (n = {}),
          ((s = e.call(this, t, n)).type = 'rexStatesRoundRectangleShape'),
          (n.style = d(s)),
          (n.propertiesMap = Fx),
          s.addStyleManager(n),
          delete n.style,
          delete n.propertiesMap,
          s
        );
      }
      return a(i);
    })(oe),
    Fx = { color: 'fillColor', alpha: 'fillAlpha', strokeWidth: 'lineWidth' };
  Object.assign(zx.prototype, Dx),
    M.register('statesRoundRectangle', function (t) {
      var e = new zx(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.StatesRoundRectangle', zx);
  var Vx = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), f((s = e.call(this, t)), new Proxy(d(s), d(s)));
      }
      return (
        a(i, [
          {
            key: 'get',
            value: function (t, e) {
              if (fr(t, e)) return t[e];
              var i = t.parent;
              return fr(i, e) ? i[e] : void 0;
            },
          },
          {
            key: 'set',
            value: function (t, e, i) {
              return fr(t, e) ? (t[e] = i) : fr(t.parent, e) && (t.parent[e] = i), !0;
            },
          },
          {
            key: 'key',
            get: function () {
              return this.parent.texture.key;
            },
            set: function (t) {
              this.parent.setTexture(t, this.frame);
            },
          },
          {
            key: 'frame',
            get: function () {
              return this.parent.frame.name;
            },
            set: function (t) {
              this.parent.setFrame(t);
            },
          },
          {
            key: 'leftWidth',
            get: function () {
              return this.parent.leftWidth;
            },
            set: function (t) {
              var e = this.parent;
              parent.setSlices(e.width, e.height, t, e.rightWidth, e.topHeight, e.bottomHeight);
            },
          },
          {
            key: 'rightWidth',
            get: function () {
              return this.parent.rightWidth;
            },
            set: function (t) {
              var e = this.parent;
              parent.setSlices(e.width, e.height, e.leftWidth, t, e.topHeight, e.bottomHeight);
            },
          },
          {
            key: 'topHeight',
            get: function () {
              return this.parent.topHeight;
            },
            set: function (t) {
              var e = this.parent;
              parent.setSlices(e.width, e.height, e.leftWidth, e.rightWidth, t, e.bottomHeight);
            },
          },
          {
            key: 'bottomHeight',
            get: function () {
              return this.parent.bottomHeight;
            },
            set: function (t) {
              var e = this.parent;
              parent.setSlices(e.width, e.height, e.leftWidth, e.rightWidth, e.topHeight, t);
            },
          },
        ]),
        i
      );
    })(uo),
    Wx = Phaser.GameObjects.NineSlice,
    Yx = Phaser.Utils.Objects.GetValue,
    Xx = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = Yx(n, 'x', 0),
          a = Yx(n, 'y', 0),
          h = Yx(n, 'key', null),
          l = Yx(n, 'frame', null),
          u = Yx(n, 'width', 0),
          c = Yx(n, 'height', 0),
          f = Yx(n, 'leftWidth', 0),
          p = Yx(n, 'rightWidth', 0),
          v = Yx(n, 'topHeight', 0),
          g = Yx(n, 'bottomHeight', 0);
        (s = e.call(this, t, o, a, h, l, u, c, f, p, v, g)).type = 'rexStatesNineSlice';
        var y = Yx(n, 'effects', !0);
        return (
          y && kr(d(s), y), (s.style = new Vx(d(s), n)), (n.style = s.style), s.addStyleManager(n), delete n.style, s
        );
      }
      return a(i);
    })(Wx);
  Object.assign(Xx.prototype, Dx),
    M.register('statesNineSlice', function (t) {
      var e = new Xx(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.StatesNineSlice', Xx);
  var Gx = Phaser.GameObjects.Text,
    Hx = Phaser.Utils.Objects.GetValue,
    Ux = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = Hx(n, 'x', 0),
          a = Hx(n, 'y', 0),
          h = Hx(n, 'text', '');
        return (
          ((s = e.call(this, t, o, a, h, n)).type = 'rexStatesText'),
          (n.style = s.style),
          (n.onModifyStyle = function (t, e) {
            var i = e.hasOwnProperty('fontStyle') || e.hasOwnProperty('fontSize') || e.hasOwnProperty('fontFamily');
            t.style.update(i);
          }),
          s.addStyleManager(n),
          delete n.style,
          s
        );
      }
      return a(i);
    })(Gx);
  Object.assign(Ux.prototype, Dx),
    M.register('statesText', function (t) {
      var e = new Ux(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.StatesText', Ux);
  var Nx = function (t, e) {
      void 0 === e && (e = {}), void 0 === e.options && (e.options = {});
      var i = e.options;
      (i.responsive = !1),
        (i.maintainAspectRatio = !1),
        i.hasOwnProperty('devicePixelRatio') || (i.devicePixelRatio = 1);
      var n = !1;
      void 0 === i.animation ? (i.animation = {}) : !1 === i.animation && ((n = !0), (i.animation = {}));
      var s = i.animation;
      n && (s.duration = 0);
      var r = s.onProgress;
      s.onProgress = function (e) {
        r && r(e), t.needRedraw();
      };
      var o = s.onComplete;
      return (
        (s.onComplete = function (e) {
          o && o(e), t.needRedraw();
        }),
        e
      );
    },
    Kx = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          ((l = e.call(this, t, n, s, o, a)).type = 'rexChart'),
          (l.chart = void 0),
          void 0 !== h && l.setChart(h),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                (this.chart && (this.chart.destroy(), (this.chart = void 0)),
                g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              if (t === this.width && e === this.height) return this;
              if ((g(u(i.prototype), 'resize', this).call(this, t, e), this.chart)) {
                var n = this.chart;
                (n.height = this.canvas.height),
                  (n.width = this.canvas.width),
                  (n.aspectRatio = n.height ? n.width / n.height : null),
                  n.update();
              }
              return this;
            },
          },
        ]),
        i
      );
    })(Ic),
    Jx = {
      setChart: function (t) {
        if (!window.Chart) {
          return (
            console.error(
              "Can not find chartjs! Load chartjs in preload stage.\nscene.load.script('chartjs', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.8.0/Chart.min.js');"
            ),
            this
          );
        }
        return this.chart && this.chart.destroy(), (this.chart = new Chart(this.context, Nx(this, t))), this;
      },
      getChartDataset: function (t) {
        if (void 0 !== this.chart) {
          if ('string' != typeof t) return this.chart.data.datasets[t];
          for (var e, i = this.chart.data.datasets, n = 0, s = i.length; n < s; n++)
            if ((e = i[n]).label === t) return e;
        }
      },
      getChartData: function (t, e) {
        var i = this.getChartDataset(t);
        if (void 0 !== i) {
          if ('string' == typeof e) if (-1 === (e = this.chart.data.labels.indexOf(e))) return;
          return i.data[e];
        }
      },
      setChartData: function (t, e, i) {
        if (void 0 === this.chart) return this;
        var n = this.getChartDataset(t);
        if ('string' == typeof e && -1 === (e = this.chart.data.labels.indexOf(e))) return this;
        return (n.data[e] = i), this;
      },
      updateChart: function () {
        return void 0 === this.chart || this.chart.update(), this;
      },
    };
  Object.assign(Kx.prototype, Jx),
    M.register('chart', function (t, e, i, n, s) {
      var r = new Kx(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.Chart', Kx),
    M.register('container', function (t, e, i, n, s) {
      var r = new Kf(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.Container', Kf),
    M.register('sizer', function (t, e, i, n, s, r) {
      var o = new cx(this.scene, t, e, i, n, s, r);
      return this.scene.add.existing(o), o;
    }),
    $(window, 'RexPlugins.UI.Sizer', cx);
  var qx = function () {
      return Array.prototype.reduce.call(arguments, Zx, 0);
    },
    Zx = function (t, e) {
      return t + e;
    },
    $x = Phaser.Utils.Objects.IsPlainObject,
    Qx = Phaser.Utils.Objects.GetValue,
    tC = Phaser.Display.Align.CENTER,
    eC = function (t, e, i, n, s) {
      if ('number' == typeof t || 'number' == typeof e)
        if (void 0 === t) {
          for (var r = 0; r < n; r++) if (!i[(o = e * n + r)]) return o;
        } else if (void 0 === e) {
          for (r = 0; r < s; r++) if (!i[(o = r * n + t)]) return o;
        } else {
          if (!i[(o = e * n + t)]) return o;
        }
      else if (!0 === e) {
        var o;
        for (r = 0; r < n; r++) for (var a = 0; a < s; a++) if (!i[(o = a * n + r)]) return o;
      } else {
        r = 0;
        for (var h = i.length; r < h; r++) if (!i[r]) return r;
      }
      return null;
    },
    iC = {
      add: function (t, e, i, n, s, r, o) {
        (Ep.call(this, t), $x(e)) &&
          ((e = Qx((a = e), 'column', void 0)),
          (i = Qx(a, 'row', void 0)),
          (n = Qx(a, 'align', tC)),
          (s = Qx(a, 'padding', 0)),
          (r = Qx(a, 'expand', !1)),
          (o = Qx(a, 'key', void 0)));
        var a,
          h = eC(e, i, this.sizerChildren, this.columnCount, this.rowCount);
        if (null === h) {
          if ('number' == typeof e && 'number' == typeof i) return this;
          !0 === i || 'number' == typeof i ? this.addEmptyColumn() : this.addEmptyRow(),
            (h = eC(e, i, this.sizerChildren, this.columnCount, this.rowCount));
        }
        return (
          'string' == typeof n && (n = Zf[n]),
          void 0 === n && (n = tC),
          void 0 === s && (s = 0),
          void 0 === r && (r = !0),
          ((a = this.getSizerConfig(t)).align = n),
          (a.padding = Op(s)),
          $x(r)
            ? ((a.expandWidth = Qx(r, 'width', !1)), (a.expandHeight = Qx(r, 'height', !1)))
            : ((a.expandWidth = r), (a.expandHeight = r)),
          (this.sizerChildren[h] = t),
          void 0 !== o && this.addChildrenMap(o, t),
          this
        );
      },
    },
    nC = function (t, e, i, n) {
      void 0 === i && (i = 0), void 0 === n && (n = t.length - 1);
      for (var s = i; s <= n; s++) t[s] = e;
      return t;
    },
    sC = {
      remove: function (t, e) {
        if (this.getParentSizer(t) !== this) return this;
        var i = this.sizerChildren.indexOf(t);
        return -1 !== i && (this.sizerChildren[i] = null), jp.call(this, t, e), this;
      },
      removeAt: function (t, e, i) {
        var n = this.getChildAt(t, e);
        return n && this.remove(n, i), this;
      },
      removeAll: function (t) {
        for (var e = this.sizerChildren.length - 1; e >= 0; e--) {
          var i = this.sizerChildren[e];
          i && this.remove(i, t);
        }
        return this;
      },
      clear: function (t) {
        return nC(this.sizerChildren, null), Ik.call(this, t), this;
      },
    },
    rC = {
      setColumnSpace: function (t) {
        if (
          (this.space.column || (this.space.column = []),
          (this.space.column.length = this.columnCount - 1),
          'number' == typeof t)
        )
          nC(this.space.column, t);
        else for (var e = 0, i = this.columnCount - 1; e < i; e++) this.space.column[e] = t[e] || 0;
        return this;
      },
      setRowSpace: function (t) {
        if (
          (this.space.row || (this.space.row = []), (this.space.row.length = this.rowCount - 1), 'number' == typeof t)
        )
          nC(this.space.row, t);
        else for (var e = 0, i = this.rowCount - 1; e < i; e++) this.space.row[e] = t[e] || 0;
        return this;
      },
      setIndentLeft: function (t, e) {
        return (this.space.indentLeftOdd = t), (this.space.indentLeftEven = e), this;
      },
      setIndentTop: function (t, e) {
        return (this.space.indentTopOdd = t), (this.space.indentTopEven = e), this;
      },
    },
    oC = Phaser.Utils.Objects.GetValue,
    aC = function (t, e, i) {
      void 0 === e && (e = this.rowProportions[0] || 0),
        void 0 === i && (i = this.space.row[0] || 0),
        (this.rowCount += 1),
        (this.gridCount += this.columnCount);
      for (var n = [t * this.columnCount, 0], s = 0; s < this.columnCount; s++) n.push(null);
      return (
        this.sizerChildren.splice.apply(this.sizerChildren, n),
        this.rowProportions.push(e),
        (this.rowHeight.length += 1),
        this.space.row.splice(t, 0, i),
        this
      );
    },
    hC = function (t, e, i) {
      void 0 === e && (e = this.columnProportions[0] || 0),
        void 0 === i && (i = this.space.column[0] || 0),
        (this.columnCount += 1),
        (this.gridCount += this.rowCount);
      for (var n = this.rowCount - 1; n >= 0; n--) {
        var s = n * this.columnCount + t;
        this.sizerChildren.splice(s, 0, null);
      }
      return this.columnProportions.push(e), (this.columnWidth.length += 1), this.space.column.splice(t, 0, i), this;
    },
    lC = {
      getChildrenWidth: function (t) {
        if (this.rexSizer.hidden) return 0;
        void 0 === t && (t = !0);
        for (var e, i, n, s, r = 0, o = this.sizerChildren, a = 0; a < this.columnCount; a++) {
          if (((e = 0), 0 === this.columnProportions[a] || t)) {
            for (var h = 0; h < this.rowCount; h++)
              (i = o[h * this.columnCount + a]) &&
                (i.rexSizer.hidden ||
                  ((n = i.rexSizer.padding), (s = this.getChildWidth(i) + n.left + n.right), (e = Math.max(e, s))));
            r += e;
          }
          this.columnWidth[a] = e;
        }
        var l = this.space,
          u = Math.max(l.indentLeftOdd, l.indentLeftEven);
        return r + qx.apply(void 0, [l.left, u].concat(x(l.column), [l.right]));
      },
      getChildrenHeight: function (t) {
        if (this.rexSizer.hidden) return 0;
        void 0 === t && (t = !0);
        for (var e, i, n, s, r = 0, o = this.sizerChildren, a = 0; a < this.rowCount; a++) {
          if (((e = 0), 0 === this.rowProportions[a] || t)) {
            for (var h = 0; h < this.columnCount; h++)
              (i = o[a * this.columnCount + h]) &&
                (i.rexSizer.hidden ||
                  ((s = i.isRexSizer
                    ? Math.max(i.minHeight, i.childrenHeight)
                    : i.hasOwnProperty('minHeight')
                    ? i.minHeight
                    : Ir(i)),
                  (s += (n = i.rexSizer.padding).top + n.bottom),
                  (e = Math.max(e, s))));
            r += e;
          }
          this.rowHeight[a] = e;
        }
        var l = this.space,
          u = Math.max(l.indentTopOdd, l.indentTopEven);
        return r + qx.apply(void 0, [l.top, u].concat(x(l.row), [l.bottom]));
      },
      getExpandedChildWidth: function (t, e) {
        var i,
          n = t.rexSizer;
        if (n.expandWidth) {
          var s = n.padding;
          i = e - s.left - s.right;
        }
        return i;
      },
      getExpandedChildHeight: function (t, e) {
        var i,
          n = t.rexSizer;
        if (n.expandHeight) {
          var s = n.padding;
          i = e - s.top - s.bottom;
        }
        return i;
      },
      getChildrenSizers: function (t) {
        void 0 === t && (t = []);
        for (var e, i = this.sizerChildren, n = 0, s = i.length; n < s; n++) (e = i[n]) && e.isRexSizer && t.push(e);
        return t;
      },
      preLayout: function () {
        return (
          (this._totalColumnProportions = void 0),
          (this._totalRowProportions = void 0),
          (this.proportionWidthLength = void 0),
          (this.proportionHeightLength = void 0),
          Up.call(this),
          this
        );
      },
      layoutChildren: function () {
        for (
          var t,
            e,
            i,
            n,
            s,
            r,
            o,
            a,
            h,
            l,
            u,
            c,
            d = this.innerLeft,
            f = this.innerTop,
            p = this.space.column,
            v = this.space.row,
            g = this.space.indentLeftOdd,
            y = this.space.indentLeftEven,
            k = this.space.indentTopOdd,
            m = this.space.indentTopEven,
            b = 0;
          b < this.rowCount;
          b++
        ) {
          (c = this.getRowHeight(b)), (n = d + (b % 2 ? y : g));
          for (var x = 0; x < this.columnCount; x++)
            (u = this.getColumnWidth(x)),
              (t = this.getChildAt(x, b)) && !t.rexSizer.hidden
                ? (zg.call(this, t),
                  (h = this.getExpandedChildWidth(t, u)),
                  (l = this.getExpandedChildHeight(t, c)),
                  t.isRexSizer ? (t.runLayout(this, h, l), Mk(t, this)) : Kp(t, h, l),
                  (s = n + (i = (e = t.rexSizer).padding).left),
                  (o = u - i.left - i.right),
                  (r = f + (x % 2 ? m : k) + i.top),
                  (a = c - i.top - i.bottom),
                  Fg.call(this, t, s, r, o, a, e.align),
                  (n += u + p[x]))
                : (n += u + p[x]);
          f += c + v[b];
        }
      },
      resolveWidth: function (t) {
        t = Xp.call(this, t);
        if (void 0 === this.proportionWidthLength) {
          var e = this.totalColumnProportions;
          if (e > 0) {
            var i = t - this.getChildrenWidth(!1);
            i >= 0 && (this.proportionWidthLength = i / e);
          } else this.proportionWidthLength = 0;
        }
        return t;
      },
      resolveHeight: function (t) {
        t = Gp.call(this, t);
        if (void 0 === this.proportionHeightLength) {
          var e = this.totalRowProportions;
          if (e > 0) {
            var i = t - this.getChildrenHeight(!1);
            i >= 0 && (this.proportionHeightLength = i / e);
          } else this.proportionHeightLength = 0;
        }
        return t;
      },
      resolveChildrenWidth: function (t) {
        var e, i, n;
        for (var s in this.sizerChildren)
          (e = this.sizerChildren[s]) &&
            e.isRexSizer &&
            !e.ignoreLayout &&
            ((n = this.getColumnWidth(parseInt(s) % this.columnCount)),
            (i = this.getExpandedChildWidth(e, n)),
            (i = e.resolveWidth(i)),
            e.resolveChildrenWidth(i));
      },
      runWidthWrap: function (t) {
        var e, i, n;
        for (var s in this.sizerChildren)
          !(e = this.sizerChildren[s]) ||
            (e.isRexSizer && e.ignoreLayout) ||
            !e.runWidthWrap ||
            ((n = this.getColumnWidth(parseInt(s) % this.columnCount)),
            (i = this.getExpandedChildWidth(e, n)),
            e.isRexSizer && (i = e.resolveWidth(i)),
            e.runWidthWrap(i));
        return this;
      },
      resetGrid: function (t, e, i, n, s) {
        if (
          (void 0 === i && (i = 0),
          void 0 === n && (n = 0),
          (this.columnCount = t),
          (this.rowCount = e),
          (this.gridCount = t * e),
          this.removeAll(),
          (this.sizerChildren.length = t * e),
          nC(this.sizerChildren, null),
          (this.columnProportions = []),
          (this.columnProportions.length = t),
          'number' == typeof i)
        )
          nC(this.columnProportions, i);
        else for (var r = 0; r < t; r++) this.columnProportions[r] = i[r] || 0;
        if (((this.rowProportions = []), (this.rowProportions.length = e), 'number' == typeof n))
          nC(this.rowProportions, n);
        else for (r = 0; r < e; r++) this.rowProportions[r] = n[r] || 0;
        (this.columnWidth = []),
          (this.columnWidth.length = t),
          (this.rowHeight = []),
          (this.rowHeight.length = e),
          this.setColumnSpace(oC(s, 'column', 0)),
          this.setRowSpace(oC(s, 'row', 0));
        var o = this.scene,
          a = this.createCellContainerCallback;
        if (a)
          for (var h = 0, l = this.rowCount; h < l; h++)
            for (var u = 0, c = this.columnCount; u < c; u++) {
              var d = { column: u, row: h },
                f = a(o, u, h, d);
              f && this.add(f, d);
            }
        return this;
      },
      inseryEmptyRow: aC,
      addEmptyRow: function (t, e) {
        return aC.call(this, this.rowCount, t, e), this;
      },
      insertEmptyColumn: hC,
      addEmptyColumn: function (t, e) {
        return hC.call(this, this.columnCount, t, e), this;
      },
    };
  Object.assign(lC, iC, sC, rC);
  var uC = function () {
      for (var t, e = 0, i = 0; i < this.columnCount; i++) (t = this.columnProportions[i]) > 0 && (e += t);
      return e;
    },
    cC = function () {
      for (var t, e = 0, i = 0; i < this.rowCount; i++) (t = this.rowProportions[i]) > 0 && (e += t);
      return e;
    },
    dC = Phaser.Utils.Objects.IsPlainObject,
    fC = Phaser.Utils.Objects.GetValue,
    pC = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h, l, u, c, d) {
        var f;
        return (
          r(this, i),
          dC(n)
            ? ((n = fC((d = n), 'x', 0)),
              (s = fC(d, 'y', 0)),
              (o = fC(d, 'width', void 0)),
              (a = fC(d, 'height', void 0)),
              (h = fC(d, 'column', d.col || 0)),
              (l = fC(d, 'row', 0)),
              (u = fC(d, 'columnProportions', 0)),
              (c = fC(d, 'rowProportions', 0)))
            : dC(o)
            ? ((o = fC((d = o), 'width', void 0)),
              (a = fC(d, 'height', void 0)),
              (h = fC(d, 'column', d.col || 0)),
              (l = fC(d, 'row', 0)),
              (u = fC(d, 'columnProportions', 0)),
              (c = fC(d, 'rowProportions', 0)))
            : dC(h)
            ? ((h = fC((d = h), 'column', d.col || 0)),
              (l = fC(d, 'row', 0)),
              (u = fC(d, 'columnProportions', 0)),
              (c = fC(d, 'rowProportions', 0)))
            : dC(u) && ((u = fC((d = u), 'columnProportions', 0)), (c = fC(d, 'rowProportions', 0))),
          ((f = e.call(this, t, n, s, o, a, d)).type = 'rexGridSizer'),
          (f.sizerChildren = []),
          f.addChildrenMap('items', f.sizerChildren),
          f.setCreateCellContainerCallback(fC(d, 'createCellContainerCallback')),
          f.setIndentLeft(fC(d, 'space.indentLeftOdd', 0), fC(d, 'space.indentLeftEven', 0)),
          f.setIndentTop(fC(d, 'space.indentTopOdd', 0), fC(d, 'space.indentTopEven', 0)),
          f.resetGrid(h, l, u, c, fC(d, 'space', void 0)),
          f
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (g(u(i.prototype), 'destroy', this).call(this, t),
                (this.columnProportions = void 0),
                (this.rowProportions = void 0),
                (this.columnWidth = void 0),
                (this.rowHeight = void 0),
                (this.createCellContainerCallback = void 0));
            },
          },
          {
            key: 'setColumnProportion',
            value: function (t, e) {
              return t >= this.columnProportions.length || (this.columnProportions[t] = e), this;
            },
          },
          {
            key: 'setRowProportion',
            value: function (t, e) {
              return t >= this.rowProportions.length || (this.rowProportions[t] = e), this;
            },
          },
          {
            key: 'totalColumnProportions',
            get: function () {
              return (
                void 0 === this._totalColumnProportions && (this._totalColumnProportions = uC.call(this)),
                this._totalColumnProportions
              );
            },
          },
          {
            key: 'totalRowProportions',
            get: function () {
              return (
                void 0 === this._totalRowProportions && (this._totalRowProportions = cC.call(this)),
                this._totalRowProportions
              );
            },
          },
          {
            key: 'getChildAt',
            value: function (t, e) {
              return this.sizerChildren[e * this.columnCount + t];
            },
          },
          {
            key: 'childToGridIndex',
            value: function (t, e) {
              if (!t) return null;
              var i = this.sizerChildren.indexOf(t);
              return -1 === i
                ? null
                : (void 0 === e && (e = {}), (e.x = i % this.columnCount), (e.y = Math.floor(i / this.columnCount)), e);
            },
          },
          {
            key: 'getColumnWidth',
            value: function (t) {
              var e = this.columnProportions[t];
              return 0 === e ? this.columnWidth[t] : e * this.proportionWidthLength;
            },
          },
          {
            key: 'getRowHeight',
            value: function (t) {
              var e = this.rowProportions[t];
              return 0 === e ? this.rowHeight[t] : e * this.proportionHeightLength;
            },
          },
          {
            key: 'setCreateCellContainerCallback',
            value: function (t) {
              return (this.createCellContainerCallback = t), this;
            },
          },
        ]),
        i
      );
    })(Ok);
  Object.assign(pC.prototype, lC),
    M.register('gridSizer', function (t, e, i, n, s, r, o, a, h) {
      var l = new pC(this.scene, t, e, i, n, s, r, o, a, h);
      return this.scene.add.existing(l), l;
    }),
    $(window, 'RexPlugins.UI.GridSizer', pC);
  var vC = function (t, e, i, n) {
      return e / t <= i ? e / (n - 1) : 0;
    },
    gC = function (t, e) {
      void 0 === e ? (e = { lines: [], width: 0, height: 0 }) : ((e.lines.length = 0), (e.width = 0), (e.height = 0));
      for (
        var i,
          n,
          s,
          r,
          o = this.sizerChildren,
          a = this.space.item,
          h = this.space.line,
          l = this.space.indentLeftOdd,
          u = this.space.indentLeftEven,
          c = this.space.indentTopOdd,
          d = this.space.indentTopEven,
          f = 0,
          p = e.lines,
          v = void 0,
          g = 0,
          y = o.length;
        g < y;
        g++
      ) {
        if ('\n' === (i = o[g])) (i = void 0), (n = 0), (r = !0);
        else {
          if (i.rexSizer.hidden) continue;
          i.isRexSizer && i.layout(), (r = f < (n = yC(i)) || void 0 === v);
        }
        if (r)
          v && ((v.width = t - (f + a)), (e.width = Math.max(e.width, v.width)), (e.height += v.height + h)),
            (v = { children: [], height: 0 }),
            p.push(v),
            (f = t - (p.length % 2 ? l : u));
        (f -= n + a), i && (v.children.push(i), (s = kC(i)), (v.height = Math.max(v.height, s)));
      }
      return (
        v && ((v.width = t - (f + a)), (e.width = Math.max(e.width, v.width)), (e.height += v.height)),
        (e.height += Math.max(c, d)),
        e
      );
    },
    yC = function (t) {
      var e = t.rexSizer.padding;
      return Dr(t) + e.left + e.right;
    },
    kC = function (t) {
      var e = t.rexSizer.padding;
      return Ir(t) + e.top + e.bottom;
    },
    mC = Phaser.Math.Distance.Between,
    bC = function (t, e) {
      var i = this.sizerChildren;
      if (0 === i.length) return -1;
      for (var n = -1, s = 1 / 0, r = 0, o = i.length; r < o; r++) {
        var a = i[r];
        if (!(Math.abs(a.centerY - e) > a.height / 2)) {
          s > (h = mC(a.left, a.centerY, t, e)) && ((s = h), (n = r));
          var h,
            l = i[r + 1];
          if (!l || l.y !== a.y) s > (h = mC(a.right, a.centerY, t, e)) && ((s = h), (n = r + 1));
        }
      }
      return n;
    },
    xC = Phaser.Utils.Objects.IsPlainObject,
    CC = Phaser.Utils.Objects.GetValue,
    wC = Phaser.Display.Align.CENTER,
    SC = function (t, e, i, n) {
      if ('\n' === t) return this.addNewLine(), this;
      var s;
      (Ep.call(this, t), xC(e)) &&
        ((e = CC((s = e), 'padding', 0)), (i = CC(s, 'key', void 0)), (n = CC(s, 'index', void 0)));
      return (
        void 0 === e && (e = 0),
        ((s = this.getSizerConfig(t)).align = wC),
        (s.padding = Op(e)),
        void 0 === n || n >= this.sizerChildren.length
          ? this.sizerChildren.push(t)
          : this.sizerChildren.splice(n, 0, t),
        void 0 !== i && this.addChildrenMap(i, t),
        this
      );
    },
    PC = {
      add: function (t, e, i) {
        if (Lg(t)) for (var n = t, s = 0, r = n.length; s < r; s++) SC.call(this, n[s], e);
        else SC.call(this, t, e, i);
        return this;
      },
      addNewLine: function () {
        return this.sizerChildren.push('\n'), this;
      },
      insert: function (t, e, i, n) {
        return SC.call(this, e, i, n, t), this;
      },
      insertAtPosition: function (t, e, i, n, s) {
        var r = bC.call(this, t, e);
        return -1 === r && (r = void 0), this.insert(r, i, n, s), this;
      },
    },
    TC = Phaser.Utils.Array.Remove,
    OC = {
      remove: function (t, e) {
        return this.getParentSizer(t) !== this || (TC(this.sizerChildren, t), jp.call(this, t, e)), this;
      },
      removeAll: function (t) {
        for (var e = this.sizerChildren.length - 1; e >= 0; e--) this.remove(this.sizerChildren[e], t);
        return this;
      },
      clear: function (t) {
        return (this.sizerChildren.length = 0), Ik.call(this, t), this;
      },
    },
    MC = {
      getChildrenWidth: function () {
        return this.rexSizer.hidden ? 0 : this.maxChildWidth + this.space.left + this.space.right;
      },
      getChildrenHeight: function () {
        return this.rexSizer.hidden ? 0 : this.widthWrapResult.height + this.space.top + this.space.bottom;
      },
      getChildrenSizers: function (t) {
        void 0 === t && (t = []);
        for (var e, i = this.sizerChildren, n = 0, s = i.length; n < s; n++)
          '\n' !== (e = i[n]) && e.isRexSizer && t.push(e);
        return t;
      },
      preLayout: function () {
        return (this._maxChildWidth = void 0), (this._maxChildHeight = void 0), Up.call(this), this;
      },
      layoutChildren: function () {
        for (
          var t,
            e,
            i,
            n,
            s,
            r,
            o,
            a,
            h,
            l,
            u,
            c = this.innerWidth,
            d = this.justifyPercentage,
            f = this.space.item,
            p = this.space.line,
            v = this.space.indentLeftOdd,
            g = this.space.indentLeftEven,
            y = this.space.indentTopOdd,
            k = this.space.indentTopEven,
            m = 0,
            b = this.innerLeft,
            x = this.innerTop,
            C = this.widthWrapResult.lines,
            w = x,
            S = 0,
            P = C.length;
          S < P;
          S++
        ) {
          switch (
            ((h = (a = C[S]).children),
            this.rtl && h.reverse(),
            (u = b + (S % 2 ? g : v)),
            (l = c - a.width),
            this.align)
          ) {
            case 0:
              break;
            case 1:
              u += l;
              break;
            case 2:
              u += l / 2;
              break;
            case 3:
              m = vC(c, l, d, h.length);
              break;
            case 4:
              0 === (m = vC(c, l, d, h.length)) && (u += l);
              break;
            case 5:
              0 === (m = vC(c, l, d, h.length)) && (u += l / 2);
          }
          for (var T = !0, O = 0, M = h.length; O < M; O++)
            (t = h[O]).rexSizer.hidden ||
              ((i = (e = t.rexSizer).padding),
              zg.call(this, t),
              (n = u + i.left),
              T ? (T = !1) : (n += f),
              (s = w + (O % 2 ? k : y) + i.top),
              (r = Dr(t)),
              (o = Ir(t)),
              (u = n + r + i.right + m),
              Fg.call(this, t, n, s, r, o, e.align));
          w += a.height + p;
        }
      },
      runWidthWrap: function (t) {
        var e = t - this.space.left - this.space.right;
        (this.widthWrapResult = gC.call(this, e, this.widthWrapResult)), Np.call(this, t);
      },
    };
  Object.assign(MC, PC, OC);
  var EC = function (t) {
      void 0 === t && (t = this.sizerChildren);
      for (var e, i, n = 0, s = 0, r = t.length; s < r; s++)
        '\n' !== (e = t[s]) && ((i = this.getChildWidth(e)), (n = Math.max(i, n)));
      return n;
    },
    _C = function (t) {
      void 0 === t && (t = this.sizerChildren);
      for (var e, i, n = 0, s = 0, r = t.length; s < r; s++)
        '\n' !== (e = t[s]) &&
          ((i = e.isRexSizer
            ? Math.max(e.minHeight, e.childrenHeight)
            : e.hasOwnProperty('minHeight')
            ? e.minHeight
            : Ir(e)),
          (n = Math.max(i, n)));
      return n;
    },
    RC = Phaser.Utils.Objects.IsPlainObject,
    LC = Phaser.Utils.Objects.GetValue,
    BC = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          RC(n)
            ? ((n = LC((h = n), 'x', 0)),
              (s = LC(h, 'y', 0)),
              (o = LC(h, 'width', void 0)),
              (a = LC(h, 'height', void 0)))
            : RC(o) && ((o = LC((h = o), 'width', void 0)), (a = LC(h, 'height', void 0))),
          ((l = e.call(this, t, n, s, o, a, h)).type = 'rexFixWidthSizer'),
          (l.sizerChildren = []),
          l.setOrientation(LC(h, 'orientation', 0)),
          l.setItemSpacing(LC(h, 'space.item', 0)),
          l.setLineSpacing(LC(h, 'space.line', 0)),
          l.setIntentLeft(LC(h, 'space.indentLeftOdd', 0), LC(h, 'space.indentLeftEven', 0)),
          l.setIntentTop(LC(h, 'space.indentTopOdd', 0), LC(h, 'space.indentTopEven', 0)),
          l.setAlign(LC(h, 'align', 0)),
          l.setJustifyPercentage(LC(h, 'justifyPercentage', 0.25)),
          l.setRTL(LC(h, 'rtl', !1)),
          l.addChildrenMap('items', l.sizerChildren),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'setOrientation',
            value: function (t) {
              return (this.orientation = hx(t)), this;
            },
          },
          {
            key: 'setItemSpacing',
            value: function (t) {
              return (this.space.item = t), this;
            },
          },
          {
            key: 'setLineSpacing',
            value: function (t) {
              return (this.space.line = t), this;
            },
          },
          {
            key: 'setIntentLeft',
            value: function (t, e) {
              return (this.space.indentLeftOdd = t), (this.space.indentLeftEven = e), this;
            },
          },
          {
            key: 'setIntentTop',
            value: function (t, e) {
              return (this.space.indentTopOdd = t), (this.space.indentTopEven = e), this;
            },
          },
          {
            key: 'setAlign',
            value: function (t) {
              return 'string' == typeof t && (t = DC[t]), (this.align = t), this;
            },
          },
          {
            key: 'setJustifyPercentage',
            value: function (t) {
              return (this.justifyPercentage = t), this;
            },
          },
          {
            key: 'setRTL',
            value: function (t) {
              return void 0 === t && (t = !0), (this.rtl = t), this;
            },
          },
          {
            key: 'maxChildWidth',
            get: function () {
              return void 0 === this._maxChildWidth && (this._maxChildWidth = EC.call(this)), this._maxChildWidth;
            },
          },
          {
            key: 'maxChildHeight',
            get: function () {
              return void 0 === this._maxChildHeight && (this._maxChildHeight = _C.call(this)), this._maxChildHeight;
            },
          },
        ]),
        i
      );
    })(Ok),
    DC = {
      left: 0,
      top: 0,
      right: 1,
      bottom: 1,
      center: 2,
      justify: 3,
      'justify-left': 3,
      'justify-top': 3,
      'justify-right': 4,
      'justify-bottom': 4,
      'justify-center': 5,
    };
  Object.assign(BC.prototype, MC),
    M.register('fixWidthSizer', function (t, e, i, n, s) {
      var r = new BC(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.FixWidthSizer', BC),
    M.register('overlapSizer', function (t, e, i, n, s) {
      var r = new Wk(this.scene, t, e, i, n, s);
      return this.scene.add.existing(r), r;
    }),
    $(window, 'RexPlugins.UI.OverlapSizer', Wk),
    M.register('space', function () {
      return new Kb(this.scene);
    }),
    $(window, 'RexPlugins.UI.Space', Kb),
    M.register('label', function (t) {
      var e = new yx(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Label', yx);
  var IC = function (t, e) {
      var i, n;
      switch (
        (e &&
          (e.hasOwnProperty('type')
            ? (i = e.type)
            : e.hasOwnProperty('leftWidth')
            ? (i = 'nineSlice')
            : e.hasOwnProperty('key') && (i = 'image')),
        i)
      ) {
        case 'image':
          n = new Ax(t, e);
          break;
        case 'nineSlice':
          n = e.hasOwnProperty('stretchMode') ? new J(t, e) : new Xx(t, e);
          break;
        default:
          n = new zx(t, e);
      }
      return t.add.existing(n), n;
    },
    jC = Phaser.Utils.Objects.GetValue,
    AC = Phaser.GameObjects.BitmapText,
    zC = function (t, e) {
      var i,
        n = jC(e, '$type');
      switch ((void 0 === n && jC(e, 'key') && (n = 'bitmaptext'), n)) {
        case 'bitmaptext':
        case 'bitmap':
          var s = jC(e, 'key'),
            r = jC(e, 'size');
          void 0 === r && (r = jC(e, 'fontSize')), (i = new AC(t, 0, 0, s, '', r));
          var o = jC(e, 'color');
          void 0 !== o && i.setTint(o);
          break;
        case 'bbcodetext':
        case 'bbcode':
          i = new gn(t, 0, 0, '', e);
          break;
        default:
          i = new Ux(t, e);
      }
      return t.add.existing(i), i;
    },
    FC = Phaser.GameObjects.BitmapText,
    VC = function (t) {
      return t instanceof FC;
    },
    WC = Phaser.GameObjects.Text,
    YC = function (t) {
      return t instanceof WC;
    },
    XC = function (t, e) {
      return (
        void 0 === e && (e = 0),
        (t._minWidth = e),
        (t.runWidthWrap = (function (t) {
          return t instanceof ar;
        })(t)
          ? (function (t) {
              return function (e) {
                return t.setFixedSize(e, 0).runWordWrap(), (t.minHeight = t.height), t;
              };
            })(t)
          : VC(t)
          ? (function (t) {
              return function (e) {
                return t.setMaxWidth(e), (t.minHeight = t.height), t;
              };
            })(t)
          : (function (t) {
              return function (e) {
                var i = t.padding,
                  n = e - i.left - i.right,
                  s = t.style;
                return (
                  YC(t)
                    ? ((s.wordWrapWidth = n), (s.maxLines = 0))
                    : (0 === s.wrapMode && (s.wrapMode = 1), (s.wrapWidth = n), (s.maxLines = 0)),
                  (s.fixedWidth = e),
                  (s.fixedHeight = 0),
                  t.updateText(),
                  (t.minHeight = t.height),
                  t
                );
              };
            })(t)),
        t
      );
    },
    GC = function (t, e) {
      var i = new Ax(t, e);
      return t.add.existing(i), i;
    },
    HC = Phaser.Utils.Objects.GetValue,
    UC = function (t, e, i) {
      e = e ? _(e) : {};
      var n = HC(i, 'background', IC),
        s = HC(i, 'text', zC),
        r = HC(i, 'icon', GC),
        o = HC(i, 'action', GC);
      if ((n ? (e.background = n(t, e.background)) : delete e.background, s)) {
        var a = HC(e, 'wrapText', !1);
        a && (!0 === a && (a = 'word'), $(e, 'text.wrap.mode', a), (e.expandTextWidth = !0)),
          (e.text = s(t, e.text)),
          a && (e.text = XC(e.text));
      } else delete e.text;
      return (
        r && null !== e.icon ? (e.icon = r(t, e.icon)) : delete e.icon,
        o && null !== e.action ? (e.action = o(t, e.action)) : delete e.action,
        e
      );
    },
    NC = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        var o;
        return r(this, i), (n = UC(t, n, s)), ((o = e.call(this, t, n)).type = 'rexSimpleLabel'), o;
      }
      return (
        a(i, [
          {
            key: 'setActiveState',
            value: function (t) {
              return KC(this.getChildren(), 'setActiveState', t), this;
            },
          },
          {
            key: 'setHoverState',
            value: function (t) {
              return KC(this.getChildren(), 'setHoverState', t), this;
            },
          },
          {
            key: 'setDisableState',
            value: function (t) {
              return KC(this.getChildren(), 'setDisableState', t), this;
            },
          },
        ]),
        i
      );
    })(yx),
    KC = function (t, e, i) {
      for (var n = 0, s = t.length; n < s; n++) {
        var r = t[n];
        r && r[e] && r[e](i);
      }
    };
  M.register('simpleLabel', function (t, e) {
    var i = new NC(this.scene, t, e);
    return this.scene.add.existing(i), i;
  }),
    $(window, 'RexPlugins.UI.SimpleLabel', NC);
  var JC = Phaser.Utils.Objects.GetValue,
    qC = Phaser.Utils.Objects.GetValue,
    ZC = Phaser.Utils.Objects.GetValue,
    $C = [
      function (t) {
        var e = this.scene,
          i = JC(t, 'orientation', 0);
        this.setOrientation(i);
        var n = JC(t, 'icon', void 0),
          s = JC(t, 'iconMask', void 0),
          r = JC(t, 'innerBackground', void 0),
          o = JC(t, 'title', void 0),
          a = JC(t, 'separator', void 0),
          h = JC(t, 'text', void 0),
          l = JC(t, 'action', void 0),
          u = JC(t, 'actionMask', void 0);
        if (n) {
          g =
            0 === this.orientation
              ? {
                  right: JC(t, 'space.icon', 0),
                  top: JC(t, 'space.iconTop', 0),
                  bottom: JC(t, 'space.iconBottom', 0),
                  left: JC(t, 'space.iconLeft', 0),
                }
              : {
                  bottom: JC(t, 'space.icon', 0),
                  left: JC(t, 'space.iconLeft', 0),
                  right: JC(t, 'space.iconRight', 0),
                  top: JC(t, 'space.iconTop', 0),
                };
          var c = JC(t, 'squareFitIcon', !1) ? 1 : 0;
          if ((this.add(n, { proportion: 0, padding: g, fitRatio: c }), s && (s = vx.call(this, n, n, 1)), !c)) {
            var d = JC(t, 'iconSize', void 0);
            this.setIconSize(JC(t, 'iconWidth', d), JC(t, 'iconHeight', d));
          }
        }
        var f = new cx(e, { orientation: 1 });
        r && f.addBackground(r);
        var p = JC(t, 'space.separator', 0);
        if (o) {
          var v = JC(t, 'align.title', 'left'),
            g = { bottom: !a && h ? p : 0, left: JC(t, 'space.titleLeft', 0), right: JC(t, 'space.titleRight', 0) };
          f.add(o, { proportion: 0, align: v, padding: g });
        }
        if (a) {
          g = {
            top: o ? p : 0,
            bottom: h ? p : 0,
            left: JC(t, 'space.separatorLeft', 0),
            right: JC(t, 'space.separatorRight', 0),
          };
          f.add(a, { expand: !0, padding: g });
        }
        if (h) {
          (v = JC(t, 'align.text', 'left')),
            (g = { left: JC(t, 'space.textLeft', 0), right: JC(t, 'space.textRight', 0) });
          f.add(h, { proportion: 0, align: v, padding: g });
        }
        g = void 0;
        if ((l && (g = { right: JC(t, 'space.text', 0) }), this.add(f, { proportion: 1, padding: g }), l)) {
          g =
            0 === this.orientation
              ? {
                  top: JC(t, 'space.actionTop', 0),
                  bottom: JC(t, 'space.actionBottom', 0),
                  right: JC(t, 'space.actionRight', 0),
                }
              : {
                  left: JC(t, 'space.actionLeft', 0),
                  right: JC(t, 'space.actionRight', 0),
                  bottom: JC(t, 'space.actionBottom', 0),
                };
          c = JC(t, 'squareFitAction', !1) ? 1 : 0;
          if ((this.add(l, { proportion: 0, padding: g, fitRatio: c }), u && (u = vx.call(this, l, l, 1)), !c)) {
            var y = JC(t, 'actionSize');
            this.setActionSize(JC(t, 'actionWidth', y), JC(t, 'actionHeight', y));
          }
        }
        this.addChildrenMap('icon', n),
          this.addChildrenMap('iconMask', s),
          this.addChildrenMap('innerSizer', f),
          this.addChildrenMap('innerBackground', r),
          this.addChildrenMap('title', o),
          this.addChildrenMap('separator', a),
          this.addChildrenMap('text', h),
          this.addChildrenMap('action', l),
          this.addChildrenMap('actionMask', u);
      },
      function (t) {
        this.setOrientation(1), this.setRTL(!1);
        var e = this.scene,
          i = qC(t, 'title', void 0),
          n = qC(t, 'separator', void 0),
          s = qC(t, 'innerBackground', void 0),
          r = qC(t, 'icon', void 0),
          o = qC(t, 'iconMask', void 0),
          a = qC(t, 'text', void 0),
          h = qC(t, 'action', void 0),
          l = qC(t, 'actionMask', void 0);
        if (i) {
          var u = qC(t, 'align.title', 'left'),
            c = {
              bottom: qC(t, 'space.title', 0),
              left: qC(t, 'space.titleLeft', 0),
              right: qC(t, 'space.titleRight', 0),
            };
          this.add(i, { proportion: 0, align: u, padding: c });
        }
        if (n) {
          var d = qC(t, 'space.separator', 0);
          c = {
            top: i ? d : 0,
            bottom: a ? d : 0,
            left: qC(t, 'space.separatorLeft', 0),
            right: qC(t, 'space.separatorRight', 0),
          };
          this.add(n, { proportion: 0, expand: !0, padding: c });
        }
        var f = qC(t, 'orientation', 0),
          p = new cx(e, {
            orientation: f,
            rtl: qC(t, 'rtl', !1),
            space: {
              left: qC(t, 'space.innerLeft', 0),
              right: qC(t, 'space.innerRight', 0),
              top: qC(t, 'space.innerTop', 0),
              bottom: qC(t, 'space.innerBottom', 0),
            },
          });
        if ((s && p.addBackground(s), this.add(p, { proportion: 1, expand: !0 }), r)) {
          c = void 0;
          c =
            0 === p.orientation
              ? {
                  right: qC(t, 'space.icon', 0),
                  top: qC(t, 'space.iconTop', 0),
                  bottom: qC(t, 'space.iconBottom', 0),
                  left: qC(t, 'space.iconLeft', 0),
                }
              : {
                  bottom: qC(t, 'space.icon', 0),
                  left: qC(t, 'space.iconLeft', 0),
                  right: qC(t, 'space.iconRight', 0),
                  top: qC(t, 'space.iconTop', 0),
                };
          var v = qC(t, 'squareFitIcon', !1) ? 1 : 0;
          if ((p.add(r, { proportion: 0, padding: c, fitRatio: v }), o && (o = vx.call(this, r, r, 1)), !v)) {
            var g = qC(t, 'iconSize', void 0);
            this.setIconSize(qC(t, 'iconWidth', g), qC(t, 'iconHeight', g));
          }
        }
        if (a) {
          u = qC(t, 'align.text', 'left');
          var y,
            k,
            m = qC(t, 'space.text', 0),
            b = qC(t, 'expandTextWidth', !1),
            x = qC(t, 'expandTextHeight', !1);
          0 === p.orientation
            ? ((y = b ? 1 : 0), h && (c = { right: m }), (k = x))
            : ((y = x ? 1 : 0), h && (c = { bottom: m }), (k = b)),
            p.add(a, { proportion: y, expand: k, align: u, padding: c });
        }
        if (h) {
          c =
            0 === p.orientation
              ? {
                  top: qC(t, 'space.actionTop', 0),
                  bottom: qC(t, 'space.actionBottom', 0),
                  right: qC(t, 'space.actionRight', 0),
                }
              : {
                  left: qC(t, 'space.actionLeft', 0),
                  right: qC(t, 'space.actionRight', 0),
                  bottom: qC(t, 'space.actionBottom', 0),
                };
          v = qC(t, 'squareFitAction', !1) ? 1 : 0;
          if ((p.add(h, { proportion: 0, padding: c, fitRatio: v }), l && (l = vx.call(this, h, h, 1)), !v)) {
            var C = qC(t, 'actionSize');
            this.setActionSize(qC(t, 'actionWidth', C), qC(t, 'actionHeight', C));
          }
        }
        this.addChildrenMap('title', i),
          this.addChildrenMap('separator', n),
          this.addChildrenMap('innerSizer', p),
          this.addChildrenMap('innerBackground', s),
          this.addChildrenMap('icon', r),
          this.addChildrenMap('iconMask', o),
          this.addChildrenMap('text', a),
          this.addChildrenMap('action', h),
          this.addChildrenMap('actionMask', l);
      },
    ],
    QC = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).type = 'rexTitleLabel');
        var o = ZC(n, 'background', void 0);
        o && s.addBackground(o);
        var a = ZC(n, 'layoutMode', 0);
        return ($C[a] || $C[0]).call(d(s), n), s.addChildrenMap('background', n.background), s;
      }
      return (
        a(i, [
          {
            key: 'title',
            get: function () {
              var t = this.childrenMap.title;
              return t ? t.title : '';
            },
            set: function (t) {
              var e = this.childrenMap.title;
              e && e.setText(t);
            },
          },
          {
            key: 'setTitle',
            value: function (t) {
              return (this.title = t), this;
            },
          },
          {
            key: 'resetDisplayContent',
            value: function (t) {
              void 0 === t ? (t = {}) : 'string' == typeof t && (t = { text: t }),
                g(u(i.prototype), 'resetDisplayContent', this).call(this, t);
              var e = this.childrenMap.title;
              return (
                e && (void 0 === t.title || (t.title ? (this.show(e), this.setTitle(t.title)) : this.hide(e))), this
              );
            },
          },
        ]),
        i
      );
    })(px);
  M.register('titleLabel', function (t) {
    var e = new QC(this.scene, t);
    return this.scene.add.existing(e), e;
  }),
    $(window, 'RexPlugins.UI.TitleLabel', QC);
  var tw = Phaser.Utils.Objects.GetValue,
    ew = Phaser.Utils.Objects.IsPlainObject,
    iw = function (t, e) {
      var i = tw(e, 'background', void 0),
        n = tw(e, 'icon', void 0),
        s = tw(e, 'iconMask', void 0),
        r = tw(e, 'nameText', void 0),
        o = tw(e, 'valueText', void 0),
        a = tw(e, 'bar', void 0),
        h = tw(e, 'action', void 0),
        l = tw(e, 'actionMask', void 0),
        u = 'line' === tw(e, 'barShape', 'line');
      ew(a) &&
        ((a = new (u ? Pd : fd)(t, a)),
        t.add.existing(a),
        r && t.children.moveBelow(a, r),
        o && t.children.moveBelow(a, o));
      var c = r || o || a;
      if ((i && this.addBackground(i), n)) {
        var d = void 0;
        0 === this.orientation
          ? (c || h) &&
            (d = {
              right: tw(e, 'space.icon', 0),
              top: tw(e, 'space.iconTop', 0),
              bottom: tw(e, 'space.iconBottom', 0),
            })
          : (c || h) &&
            (d = {
              bottom: tw(e, 'space.icon', 0),
              left: tw(e, 'space.iconLeft', 0),
              right: tw(e, 'space.iconRight', 0),
            }),
          this.add(n, { proportion: 0, padding: d }),
          s && (s = vx.call(this, n, n, 1));
      }
      if (c) {
        var f,
          p = new cx(t, { orientation: 1 });
        if (r || o) {
          if (((f = new cx(t, { orientation: 0 })), r)) {
            '' === r.text && r.setText(' '), r.setOrigin(0, r.originY);
            var d = { left: tw(e, 'space.name', 0) };
            f.add(r, { padding: d });
          }
          if (o) {
            '' === o.text && o.setText(' '), o.setOrigin(1, o.originY), f.addSpace();
            d = { right: tw(e, 'space.value', 0) };
            f.add(o, { padding: d }),
              this.setValueTextFormatCallback(
                tw(e, 'valueTextFormatCallback', nw),
                tw(e, 'valueTextFormatCallbackScope', void 0)
              );
          }
          p.add(f, { expand: !0 });
        }
        if (a)
          if (u) {
            var v = f ? tw(e, 'space.bar') : 0;
            void 0 === v && (v = tw(e, 'space.barTop', 0));
            d = {
              top: v,
              bottom: tw(e, 'space.barBottom', 0),
              left: tw(e, 'space.barLeft', 0),
              right: tw(e, 'space.barRight', 0),
            };
            p.add(a, { expand: !0, padding: d });
          } else {
            d = {
              top: tw(e, 'space.barTop', 0),
              bottom: tw(e, 'space.barBottom', 0),
              left: tw(e, 'space.barLeft', 0),
              right: tw(e, 'space.barRight', 0),
            };
            this.addBackground(a, d);
          }
        d = void 0;
        h && (d = { right: tw(e, 'space.text', 0) });
        var g = tw(e, 'align.text', 'bottom');
        this.add(p, { proportion: 1, align: g, padding: d });
      }
      h &&
        ((d =
          0 === this.orientation
            ? { top: tw(e, 'space.actionTop', 0), bottom: tw(e, 'space.actionBottom', 0) }
            : { left: tw(e, 'space.actionLeft', 0), right: tw(e, 'space.actionRight', 0) }),
        this.add(h, { proportion: 0, padding: d }),
        l && (l = vx.call(this, h, h, 1)));
      this.addChildrenMap('background', i),
        this.addChildrenMap('icon', n),
        this.addChildrenMap('iconMask', s),
        this.addChildrenMap('name', r),
        this.addChildrenMap('value', o),
        this.addChildrenMap('bar', a),
        this.addChildrenMap('action', h),
        this.addChildrenMap('actionMask', l);
    },
    nw = function (t, e, i) {
      return t.toString();
    },
    sw = Phaser.Math.Clamp,
    rw = {
      setValueTextFormatCallback: function (t, e) {
        return (this.valueTextFormatCallback = t), (this.valueTextFormatCallbackScope = e), this;
      },
      getFormatValueText: function (t, e, i) {
        return (
          void 0 === t && (t = this.value),
          void 0 === e && (e = this.minValue),
          void 0 === i && (i = this.maxValue),
          this.valueTextFormatCallbackScope
            ? this.valueTextFormatCallback(t, e, i)
            : this.valueTextFormatCallback.call(this.valueTextFormatCallbackScope, t, e, i)
        );
      },
      updateValueText: function (t, e, i) {
        var n = this.childrenMap.value;
        return (
          n && this.valueTextFormatCallback && (n.setText(this.getFormatValueText(t, e, i)), n.layout && n.layout()),
          this
        );
      },
      setValue: function (t, e, i) {
        return (
          (t = sw(t, e, i)),
          (this.value = t),
          (this.minValue = e),
          (this.maxValue = i),
          this.updateValueText(t, e, i),
          this.setBarValue(t, e, i),
          this
        );
      },
      setEaseValueDuration: function (t) {
        return (this.easeValueDuration = t), this;
      },
      easeValueTo: function (t, e, i) {
        return (
          (this.minValue = e),
          (this.maxValue = i),
          void 0 === this.easeValueTask &&
            ((this.easeValueTask = new hc(this)),
            this.easeValueTask.on(
              'update',
              function () {
                this.setValue(this.value, this.minValue, this.maxValue);
              },
              this
            )),
          this.easeValueTask.restart({ key: 'value', to: t, duration: this.easeValueDuration }),
          this
        );
      },
    },
    ow = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, n)).type = 'rexNameValueLabel'),
          iw.call(d(s), t, n),
          s.setEaseValueDuration(1e3),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'nameText',
            get: function () {
              var t = this.childrenMap.name;
              return void 0 === t ? '' : t.text;
            },
            set: function (t) {
              var e = this.childrenMap.name;
              void 0 !== e && e.setText(t);
            },
          },
          {
            key: 'setNameText',
            value: function (t) {
              return (this.nameText = t), this;
            },
          },
          {
            key: 'valueText',
            get: function () {
              var t = this.childrenMap.value;
              return void 0 === t ? '' : t.text;
            },
            set: function (t) {
              var e = this.childrenMap.value;
              void 0 !== e && e.setText(t);
            },
          },
          {
            key: 'setValueText',
            value: function (t) {
              return (this.valueText = t), this;
            },
          },
          {
            key: 'barValue',
            get: function () {
              var t = this.childrenMap.bar;
              if (void 0 !== t) return t.value;
            },
            set: function (t) {
              var e = this.childrenMap.bar;
              void 0 !== e && e.setValue(t);
            },
          },
          {
            key: 'setBarValue',
            value: function (t, e, i) {
              var n = this.childrenMap.bar;
              return void 0 === n || n.setValue(t, e, i), this;
            },
          },
          {
            key: 'easeBarValueTo',
            value: function (t, e, i) {
              var n = this.childrenMap.bar;
              return void 0 === n || n.easeValueTo(t, e, i), this;
            },
          },
          {
            key: 'setTexture',
            value: function (t, e) {
              var i = this.childrenMap.icon;
              if (void 0 !== i) return i.setTexture(t, e), this;
            },
          },
          {
            key: 'texture',
            get: function () {
              var t = this.childrenMap.icon;
              if (void 0 !== t) return t.texture;
            },
          },
          {
            key: 'frame',
            get: function () {
              var t = this.childrenMap.icon;
              if (void 0 !== t) return t.frame;
            },
          },
          {
            key: 'postLayout',
            value: function (t, e, i) {
              var n = this.childrenMap.iconMask;
              n && (n.setPosition(), this.resetChildPositionState(n));
              var s = this.childrenMap.actionMask;
              return s && (s.setPosition(), this.resetChildPositionState(s)), this;
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              g(u(i.prototype), 'resize', this).call(this, t, e);
              var n = this.childrenMap.iconMask;
              n && n.resize();
              var s = this.childrenMap.actionMask;
              return s && s.resize(), this;
            },
          },
        ]),
        i
      );
    })(cx);
  Object.assign(ow.prototype, rw),
    M.register('nameValueLabel', function (t) {
      var e = new ow(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.NameValueLabel', ow);
  var aw = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t) {
        var n;
        r(this, i), (n = e.call(this)).setTable(Ct(t, 'table')), n.setMaxLevel(Ct(t, 'maxLevel'));
        var s = Ct(t, 'exp', 0),
          o = Ct(t, 'level', void 0);
        return (
          void 0 === o ||
            n.checkLevel(o, s) ||
            (console.error('Level '.concat(o, ' and Exp ').concat(s, ' are mismatch')), (o = void 0)),
          n.resetExp(s, o),
          n
        );
      }
      return (
        a(i, [
          {
            key: 'setTable',
            value: function (t) {
              return (this.levelTable = t), (this.isLevelMapFunction = Eg(t)), this;
            },
          },
          {
            key: 'setMaxLevel',
            value: function (t) {
              var e;
              return (
                void 0 === t && (t = Array.isArray(this.levelTable) ? this.levelTable.length - 1 : -1),
                (e = -1 !== t ? this.getExp(t) : -1),
                (this.hasMaxLevel = -1 !== t),
                (this.maxLevel = t),
                (this.maxExp = e),
                this
              );
            },
          },
          {
            key: 'resetExp',
            value: function (t, e) {
              return (
                this.hasMaxLevel && t > this.maxExp && (t = this.maxExp),
                void 0 === e && (e = this.getLevel(t)),
                (this._exp = t),
                (this._level = e),
                (this._requiredExp = this.getRequiredExpToNextLevel(e, t)),
                this
              );
            },
          },
          {
            key: 'exp',
            get: function () {
              return this._exp;
            },
            set: function (t) {
              if ((this.hasMaxLevel && t > this.maxExp && (t = this.maxExp), t < this._exp)) this.resetExp(t);
              else if (t !== this._exp) {
                for (var e, i = this.getLevel(t, this._level), n = this._level, s = this._exp; ; ) {
                  var r = this.getExp(n),
                    o = this.getExp(n + 1);
                  if (((e = Math.min(o, t)), this.emit('levelup', n, s, e, r, o), n === i && e === t)) break;
                  n++, (s = o);
                }
                this.resetExp(t, i);
              }
            },
          },
          {
            key: 'level',
            get: function () {
              return this._level;
            },
            set: function (t) {
              this.hasMaxLevel && t > this.maxLevel ? (this.exp = this.maxExp) : (this.exp = this.getExp(t));
            },
          },
          {
            key: 'requiredExp',
            get: function () {
              return this._requiredExp;
            },
          },
          {
            key: 'getExp',
            value: function (t) {
              return void 0 === t
                ? this._exp
                : this.isLevelMapFunction
                ? this.levelTable(t)
                : (this.hasMaxLevel && t > this.maxLevel && (t = this.maxLevel), this.levelTable[t]);
            },
          },
          {
            key: 'getLevel',
            value: function (t, e) {
              if (void 0 === t) return this._level;
              for (void 0 === e && (e = 0); ; ) {
                var i = this.getExp(e + 1);
                if (i > t) break;
                if ((e++, this.hasMaxLevel && i === this.maxExp)) break;
              }
              return e;
            },
          },
          {
            key: 'getRequiredExpToNextLevel',
            value: function (t, e) {
              return void 0 === t && (t = this.level), void 0 === e && (e = this.exp), this.getExp(t + 1) - e;
            },
          },
          {
            key: 'checkLevel',
            value: function (t, e) {
              return e >= this.getExp(t) && e < this.getExp(t + 1);
            },
          },
          {
            key: 'gainExp',
            value: function (t, e, i) {
              return e && this.on('levelup', e, i), (this.exp += t), e && this.off('levelup', e, i), this;
            },
          },
          {
            key: 'setExp',
            value: function (t, e, i) {
              return e && this.on('levelup', e, i), (this.exp = t), e && this.off('levelup', e, i), this;
            },
          },
          {
            key: 'setLevel',
            value: function (t, e, i) {
              return e && this.on('levelup', e, i), (this.level = t), e && this.off('levelup', e, i), this;
            },
          },
        ]),
        i
      );
    })(qv),
    hw = function t(e, i, n) {
      var s,
        r = Ct(n, 'reverse', !1);
      if (Lg(e[0]))
        if (r) for (o = (a = e.length) - 1; o >= 0; o--) s = t(e[o], i, n);
        else for (var o = 0, a = e.length; o < a; o++) s = t(e[o], i, n);
      else s = lw(e, i, n);
      return s;
    },
    lw = function (t, e, i) {
      var n,
        s = Ct(i, 'argsConvert', void 0),
        r = Ct(i, 'argsConvertScope', void 0),
        o = t[0];
      if (((uw = Vu(uw, t, 1)), s)) {
        !0 === s && ((s = xa), (r = void 0));
        for (var a = 0, h = uw.length; a < h; a++) uw[a] = r ? s.call(r, uw[a], t) : s(uw[a], t);
      }
      return 'string' == typeof o ? null == (n = e[o]) && (n = Ct(e, o, null)) : (n = o), n.apply(e, uw);
    },
    uw = [],
    cw = Phaser.Utils.Objects.GetValue,
    dw = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), (s = e.call(this, t, n));
        var o = cw(n, 'clock', void 0);
        return (
          o || (o = new ta(t)),
          (s.clock = o),
          s.clock.on('update', s.update, d(s)),
          (s.commands = []),
          s.resetFromJSON(n),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.clock.resetFromJSON(cw(t, 'clock', void 0)),
                (this.state = cw(t, 'state', 0)),
                (this.commands = cw(t, 'commands', [])),
                (this.scope = cw(t, 'scope', void 0)),
                this.setTimeUnit(cw(t, 'timeUnit', 0)),
                this.setDtMode(cw(t, 'dtMode', 0)),
                (this.index = cw(t, 'index', 0)),
                (this.nextTime = cw(t, 'nextTime', 0)),
                this
              );
            },
          },
          {
            key: 'toJSON',
            value: function () {
              return {
                clock: this.clock.toJSON(),
                state: this.state,
                commands: this.commands,
                scope: this.scope,
                timeUnit: this.timeUnit,
                dtMode: this.dtMode,
                index: this.index,
                nextTime: this.nextTime,
              };
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.clock.shutdown(t), (this.commands = void 0), g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'load',
            value: function (t, e, i) {
              this.stop();
              var n = cw(i, 'timeUnit', void 0);
              void 0 !== n && this.setTimeUnit(n);
              var s = cw(i, 'dtMode', void 0);
              return (
                void 0 !== s && this.setDtMode(s),
                (t = t
                  .filter(function (t) {
                    var e = t[0];
                    return !isNaN(e);
                  })
                  .map(function (t) {
                    return 'string' == typeof t[0] && (t[0] = parseFloat(t[0])), t;
                  })),
                0 === this.dtMode &&
                  t.sort(function (t, e) {
                    var i = t[0],
                      n = e[0];
                    return i > n ? 1 : i < n ? -1 : 0;
                  }),
                Vu(this.commands, t),
                (this.scope = e),
                this
              );
            },
          },
          {
            key: 'clear',
            value: function () {
              return (this.commands.length = 0), this;
            },
          },
          {
            key: 'append',
            value: function (t, e) {
              var i;
              if (Array.isArray(e)) i = e;
              else {
                for (var n = arguments.length, s = new Array(n > 2 ? n - 2 : 0), r = 2; r < n; r++)
                  s[r - 2] = arguments[r];
                i = [e].concat(s);
              }
              return this.commands.push([t, i]), this;
            },
          },
          {
            key: 'start',
            value: function (t) {
              return (
                void 0 === t && (t = 0),
                this.stop(),
                (this.index = 0),
                (this.state = 1),
                (this.nextTime = this.getNextDt(0)),
                this.clock.start(t),
                this.update(t),
                this.emit('start', this.parent, this),
                this
              );
            },
          },
          {
            key: 'pause',
            value: function () {
              return this.clock.pause(), this.emit('pause', this.parent, this), this;
            },
          },
          {
            key: 'resume',
            value: function () {
              return this.clock.resume(), this.emit('resume', this.parent, this), this;
            },
          },
          {
            key: 'stop',
            value: function () {
              return this.clock.stop(), (this.state = 0), this.emit('stop', this.parent, this), this;
            },
          },
          {
            key: 'seek',
            value: function (t) {
              return this.clock.seek(t), this;
            },
          },
          {
            key: 'seekToNext',
            value: function () {
              return this.seek(this.nextTime), this;
            },
          },
          {
            key: 'isPlaying',
            get: function () {
              return this.clock.isRunning;
            },
          },
          {
            key: 'completed',
            get: function () {
              return 2 === this.state;
            },
          },
          {
            key: 'timeScale',
            get: function () {
              return this.clock.timeScale;
            },
            set: function (t) {
              this.clock.timeScale = t;
            },
          },
          {
            key: 'setTimeScale',
            value: function (t) {
              return (this.timeScale = t), this;
            },
          },
          {
            key: 'now',
            get: function () {
              return this.clock.now;
            },
          },
          {
            key: 'update',
            value: function (t) {
              if (this.nextTime > t) return this;
              for (var e = this.commands; ; ) {
                var i = e[this.index],
                  n = i[1];
                if (
                  (Lg(n) || (n = Vu(fw, i, 1)),
                  hw(n, this.scope),
                  this.emit('runcommand', n, this.scope),
                  this.index >= e.length - 1)
                )
                  return (this.nextTime = 0), this.complete(), this;
                if ((this.index++, (this.nextTime = this.getNextDt(this.nextTime)), this.nextTime > t)) return this;
              }
            },
          },
          {
            key: 'complete',
            value: function () {
              this.clock.stop(), (this.state = 2), this.emit('complete', this.parent, this);
            },
          },
          {
            key: 'getNextDt',
            value: function (t) {
              var e = this.commands[this.index][0];
              return 1 === this.timeUnit && (e *= 1e3), 1 === this.dtMode && (e += t), e;
            },
          },
          {
            key: 'setDtMode',
            value: function (t) {
              return 'string' == typeof t && (t = vw[t]), (this.dtMode = t), this;
            },
          },
          {
            key: 'setTimeUnit',
            value: function (t) {
              return 'string' == typeof t && (t = pw[t]), (this.timeUnit = t), this;
            },
          },
        ]),
        i
      );
    })(uo),
    fw = [],
    pw = { ms: 0, s: 1, sec: 1 },
    vw = { abs: 0, absolute: 0, inc: 1, increment: 1 },
    gw = function (t, e, i, n, s) {
      var r = ((i - e) / (s - n)) * this.totalEaseDuration,
        o = i === s ? t + 1 : t;
      this.player
        .append(0, this.setEaseValueDuration, r)
        .append(0, this.easeValueTo, i, n, s)
        .append(0, this.emit, 'levelup.start', t, e, i, this)
        .append(r, j)
        .append(0, this.emit, 'levelup.end', o, e, i, this),
        this.player.isPlaying || this.player.start();
    },
    yw = Phaser.Utils.Objects.GetValue,
    kw = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, n)).type = 'rexExpBar'),
          s.setTotalEaseDuration(yw(n, 'easeDuration', 1e3)),
          (s.levelCounter = new aw(yw(n, 'levelCounter'))),
          (s.player = new dw(d(s), { scope: d(s), dtMode: 1 })),
          s.levelCounter.on('levelup', gw, d(s)),
          s.player.on(
            'complete',
            function () {
              this.player.clear(), this.emit('levelup.complete', this.level, this);
            },
            d(s)
          ),
          s.setValue(s.exp, s.getExp(s.level), s.getExp(s.level + 1)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.levelCounter.destroy(),
                (this.levelCounter = void 0),
                this.player.destroy(),
                (this.player = void 0),
                g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'exp',
            get: function () {
              return this.levelCounter.exp;
            },
            set: function (t) {
              this.levelCounter.exp = t;
            },
          },
          {
            key: 'level',
            get: function () {
              return this.levelCounter.level;
            },
            set: function (t) {
              this.levelCounter.level = t;
            },
          },
          {
            key: 'requiredExp',
            get: function () {
              return this.levelCounter.requiredExp;
            },
          },
          {
            key: 'setTotalEaseDuration',
            value: function (t) {
              return (this.totalEaseDuration = t), this;
            },
          },
        ]),
        i
      );
    })(ow);
  Object.assign(kw.prototype, {
    setExpTable: function (t) {
      return this.levelCounter.setTable(t), this;
    },
    resetExp: function (t) {
      return (
        this.levelCounter.resetExp(t),
        this.setValue(this.exp, this.getExp(this.level), this.getExp(this.level + 1)),
        this
      );
    },
    getExp: function (t) {
      return this.levelCounter.getExp(t);
    },
    getLevel: function (t, e) {
      return this.levelCounter.getLevel(t, e);
    },
    getRequiredExpToNextLevel: function (t, e) {
      return this.levelCounter.getRequiredExpToNextLevel(t, e);
    },
    gainExp: function (t) {
      return this.levelCounter.gainExp(t), this;
    },
    setExp: function (t) {
      return this.levelCounter.setExp(t), this;
    },
    setLevel: function (t) {
      return this.levelCounter.setLevel(t), this;
    },
  }),
    M.register('expBar', function (t) {
      var e = new kw(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.ExpBar', kw);
  var mw = cx.prototype.add,
    bw = cx.prototype.addSpace,
    xw = function (t) {
      var e = !t.isRexSpace,
        i = !e || this.buttonsExpand ? 1 : 0;
      if (0 === this.sizerChildren.length)
        if (e) {
          !this.buttonsExpand &&
            ('right' === this.buttonsAlign || 'center' === this.buttonsAlign || 'bottom' === this.buttonsAlign) &&
            bw.call(this),
            mw.call(this, t, { proportion: i, expand: !0 });
          var n = !this.buttonsExpand && 'center' === this.buttonsAlign;
          n && bw.call(this), (this.hasTailSpace = n);
        } else mw.call(this, t, { proportion: i, expand: !0 }), (this.hasTailSpace = !1);
      else if (this.hasTailSpace) {
        var s = this.sizerChildren.length - 1;
        mw.call(this, t, { index: s, proportion: i, expand: !0 });
      } else mw.call(this, t, { proportion: i, expand: !0 });
      return e && this.buttonGroup.add(t), this;
    },
    Cw = {
      addButton: function (t) {
        if (Lg(t)) for (var e = t, i = 0, n = e.length; i < n; i++) xw.call(this, e[i]);
        else xw.call(this, t);
        return this;
      },
      addButtons: function (t) {
        for (var e = 0, i = t.length; e < i; e++) xw.call(this, t[e]);
        return this;
      },
    },
    ww = cx.prototype.remove,
    Sw = cx.prototype.clear,
    Pw = function (t, e) {
      return this.getParentSizer(t) !== this || (this.buttonGroup.remove(t), ww.call(this, t, e)), this;
    },
    Tw = {
      remove: function (t, e) {
        if (Lg(t)) for (var i = t, n = 0, s = i.length; n < s; n++) Pw.call(this, i[n], e);
        else Pw.call(this, t, e);
        return this;
      },
      clear: function (t) {
        return (this.buttonGroup.buttons.length = 0), Sw.call(this, t), this;
      },
      removeButton: function (t, e) {
        return (t = this.getButton(t)) ? (this.remove(t, e), this) : this;
      },
      clearButtons: function (t) {
        for (var e = this.buttonGroup.buttons, i = e.length - 1; i >= 0; i--) Pw.call(this, e[i], t);
        return this;
      },
    },
    Ow = function (t, e, i) {
      if (t) {
        var n = this.setValueCallback,
          s = this.setValueCallbackScope;
        n && (s ? n.call(s, t, e, i) : n(t, e, i)), this.fireEvent('button.statechange', t, e, i);
      }
    },
    Mw = function (t) {
      var e = this;
      (t._selected = void 0),
        Object.defineProperty(t, 'selected', {
          get: function () {
            return t._selected;
          },
          set: function (i) {
            if (t._selected !== i) {
              var n = t._selected;
              (t._selected = i), Ow.call(e, t, i, n);
            }
          },
          enumerable: !0,
          configurable: !0,
        }),
        (t.selected = !1);
    },
    Ew = {
      add: function (t) {
        return (
          this.buttons.push(t),
          t._click ||
            ((t._click = new gc(t, this.clickConfig)),
            t._click
              .on(
                'click',
                function (t, e, i, n) {
                  this.fireEvent('button.click', e, i, n);
                },
                this
              )
              .on(
                'enable',
                function (t, e) {
                  this.fireEvent('button.enable', e);
                },
                this
              )
              .on(
                'disable',
                function (t, e) {
                  this.fireEvent('button.disable', e);
                },
                this
              ),
            t
              .on(
                'pointerover',
                function (e, i, n, s) {
                  this.fireEvent('button.over', t, e, s);
                },
                this
              )
              .on(
                'pointerout',
                function (e, i) {
                  this.fireEvent('button.out', t, e, i);
                },
                this
              )
              .on(
                'pointerdown',
                function (e, i, n, s) {
                  this.fireEvent('button.down', t, e, s);
                },
                this
              )
              .on(
                'pointerup',
                function (e, i) {
                  this.fireEvent('button.up', t, e, i);
                },
                this
              )),
          this.buttonsType &&
            (void 0 === t.name && console.error(''.concat(this.parent.constructor.name, ': Option button miss value')),
            Mw.call(this, t)),
          this
        );
      },
      addMultiple: function (t) {
        for (var e = 0, i = t.length; e < i; e++) this.add(t[e]);
        return this;
      },
    },
    _w = Phaser.Utils.Array.Remove,
    Rw = {
      remove: function (t) {
        return this.buttonsType && delete t.selected, _w(this.buttons, t), this;
      },
      clear: function () {
        if (this.buttonsType) for (var t = this.buttons, e = 0, i = t.length; e < i; e++) delete t[e].selected;
        return (this.buttons.length = 0), this;
      },
    },
    Lw = Phaser.Utils.Objects.GetValue,
    Bw = {
      setButtonsType: function (t) {
        void 0 === t && (t = {});
        var e,
          i,
          n = Lw(t, 'buttonsType', t.type);
        if (((this.buttonsType = n), !this.buttonsType)) return this;
        switch (
          ((e = Lw(t, 'setValueCallback', void 0)),
          (i = Lw(t, 'setValueCallbackScope', void 0)),
          void 0 === e &&
            ((e = Lw(t, 'setButtonStateCallback', void 0)), (i = Lw(t, 'setButtonStateCallbackScope', void 0))),
          (this.setValueCallback = e),
          (this.setValueCallbackScope = i),
          n)
        ) {
          case 'radio':
            this.setRadioType();
            break;
          case 'checkboxes':
            this.setCheckboxesType();
        }
        return this;
      },
      setRadioType: function () {
        var t = this.parent,
          e = this.buttons;
        t._value = void 0;
        var i = void 0;
        return (
          Object.defineProperty(t, 'value', {
            get: function () {
              return t._value;
            },
            set: function (n) {
              if (t._value !== n) {
                t._value = n;
                for (var s = 0, r = e.length; s < r; s++) {
                  var o = e[s];
                  o.rexSizer.hidden ||
                    (void 0 === i ? (o.name === n ? (o.selected = !0) : (o.selected = !1)) : (o.selected = i === s));
                }
              }
            },
            enumerable: !0,
            configurable: !0,
          }),
          t.on(
            'button.click',
            function (e) {
              (i = this.buttons.indexOf(e)), (t.value = e.name), (i = void 0);
            },
            this
          ),
          this
        );
      },
      setCheckboxesType: function () {
        return (
          this.parent.on('button.click', function (t) {
            t.selected = !t.selected;
          }),
          this
        );
      },
      clearAllButtonsState: function () {
        for (var t = this.buttons, e = 0, i = t.length; e < i; e++) {
          t[e].selected = !1;
        }
        return this;
      },
      getAllButtonsState: function () {
        for (var t = {}, e = this.buttons, i = 0, n = e.length; i < n; i++) {
          var s = e[i];
          s.rexSizer.hidden || (t[s.name] = s.selected);
        }
        return t;
      },
      setSelectedButtonName: function (t) {
        return (this.parent.value = t), this;
      },
      getSelectedButtonName: function () {
        return this.parent.value;
      },
      setButtonState: function (t, e) {
        void 0 === e && (e = !0);
        for (var i = this.buttons, n = 0, s = i.length; n < s; n++) {
          var r = i[n];
          if (!r.rexSizer.hidden && r.name === t) {
            r.selected = e;
            break;
          }
        }
        return this;
      },
      getButtonState: function (t) {
        for (var e = this.buttons, i = 0, n = e.length; i < n; i++) {
          var s = e[i];
          if (!s.rexSizer.hidden && s.name === t) return s.selected;
        }
      },
    },
    Dw = function (t, e) {
      return t ? (t.hasOwnProperty('name') ? (t.name === e ? t : null) : GetElementByName(t, e)) : null;
    },
    Iw = {
      getButton: function (t) {
        var e,
          i = this.buttons;
        switch (n(t)) {
          case 'number':
            e = i[t];
            break;
          case 'string':
            e = (function (t, e) {
              if (!t) return null;
              if (Lg(t)) {
                for (var i, n = 0, s = t.length; n < s; n++) if ((i = Dw(t[n], e))) return i;
              } else for (var r in t) if ((i = Dw(t[r], e))) return i;
            })(i, t);
            break;
          default:
            (e = t), -1 === i.indexOf(e) && (e = void 0);
        }
        return e;
      },
      setButtonEnable: function (t, e) {
        var i = this.buttons;
        if (void 0 === t || 'boolean' == typeof t) {
          e = t;
          for (var n = 0, s = i.length; n < s; n++) i[n]._click.setEnable(e);
        } else this.getButton(t)._click.setEnable(e);
        return this;
      },
      toggleButtonEnable: function (t) {
        var e = this.buttons;
        if (void 0 === t || 'boolean' == typeof t) for (var i = 0, n = e.length; i < n; i++) e[i]._click.toggleEnable();
        else this.getButton(t)._click.toggleEnable();
        return this;
      },
      getButtonEnable: function (t) {
        return void 0 === t && (t = 0), this.getButton(t)._click.enable;
      },
      emitButtonClick: function (t) {
        return (this.buttonGroup ? this.buttonGroup : this).fireEvent('button.click', t), this;
      },
      showButton: function (t) {
        return Xv(this.getButton(t)), this;
      },
      hideButton: function (t) {
        return Gv(this.getButton(t)), this;
      },
      isButtonShown: function (t) {
        return Hv(this.getButton(t)), this;
      },
      forEachButtton: function (t, e) {
        for (var i = this.buttons, n = 0, s = i.length; n < s; n++) e ? t.call(e, i[n], n, i) : t(i[n], n, i);
        return this;
      },
    },
    jw = (function () {
      function t(e) {
        r(this, t),
          (this.parent = e.parent),
          (this.eventEmitter = e.eventEmitter),
          (this.groupName = e.groupName),
          (this.clickConfig = e.clickConfig),
          (this.buttonsType = void 0),
          (this.buttons = []);
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              (this.parent = void 0),
                (this.eventEmitter = void 0),
                (this.clickConfig = void 0),
                (this.buttons = void 0);
            },
          },
        ]),
        t
      );
    })(),
    Aw = {
      fireEvent: function (t, e) {
        if (this.buttons) {
          var i, n, s, r;
          if ('number' == typeof e) {
            if (((i = e), !(e = this.buttons[i]))) return;
          } else if (-1 === (i = this.buttons.indexOf(e))) return;
          for (var o = arguments.length, a = new Array(o > 2 ? o - 2 : 0), h = 2; h < o; h++) a[h - 2] = arguments[h];
          if (this.eventEmitter !== this.parent) (n = this.parent).emit.apply(n, [t, e, i].concat(a));
          if (void 0 !== this.groupName) (s = this.eventEmitter).emit.apply(s, [t, e, this.groupName, i].concat(a));
          else (r = this.eventEmitter).emit.apply(r, [t, e, i].concat(a));
        }
      },
    };
  Object.assign(jw.prototype, Ew, Rw, Bw, Iw, Aw);
  var zw = {
      clearAllButtonsState: function () {
        return this.buttonGroup.clearAllButtonsState(), this;
      },
      getAllButtonsState: function () {
        return this.buttonGroup.getAllButtonsState();
      },
      setSelectedButtonName: function (t) {
        return this.buttonGroup.setSelectedButtonName(t), this;
      },
      getSelectedButtonName: function () {
        return this.buttonGroup.getSelectedButtonName();
      },
      setButtonState: function (t, e) {
        return this.buttonGroup.setButtonState(t, e), this;
      },
      getButtonState: function (t) {
        return this.buttonGroup.getButtonState(t);
      },
    },
    Fw = Phaser.Utils.Objects.GetValue,
    Vw = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = n.space;
        'number' == typeof o && (n.space = { item: o }),
          ((s = e.call(this, t, n)).type = 'rexButtons'),
          (s.buttonGroup = new jw({
            parent: d(s),
            eventEmitter: Fw(n, 'eventEmitter', d(s)),
            groupName: Fw(n, 'groupName', void 0),
            clickConfig: Fw(n, 'click', void 0),
          }).setButtonsType(n));
        var a = Fw(n, 'background', void 0),
          h = Fw(n, 'buttons', void 0);
        return (
          (s.buttonsExpand = Fw(n, 'expand', !1)),
          (s.buttonsAlign = Fw(n, 'align', void 0)),
          a && s.addBackground(a),
          h && s.addButtons(h),
          s.addChildrenMap('background', a),
          s.addChildrenMap('buttons', s.buttonGroup.buttons),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (g(u(i.prototype), 'destroy', this).call(this, t),
                this.buttonGroup.destroy(),
                (this.buttonGroup = void 0));
            },
          },
          {
            key: 'buttons',
            get: function () {
              return this.buttonGroup.buttons;
            },
          },
          {
            key: 'groupName',
            get: function () {
              return this.buttonGroup.groupName;
            },
            set: function (t) {
              this.buttonGroup.groupName = t;
            },
          },
          {
            key: 'eventEmitter',
            get: function () {
              return this.buttonGroup.eventEmitter;
            },
          },
        ]),
        i
      );
    })(cx);
  Object.assign(Vw.prototype, Cw, Tw, Iw, zw),
    M.register('buttons', function (t) {
      var e = new Vw(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Buttons', Vw);
  var Ww = pC.prototype.add,
    Yw = {
      addButton: function (t, e, i) {
        return Ww.call(this, t, e, i, void 0, 0, this.buttonsExpand), this.buttonGroup.add(t), this;
      },
      addButtons: function (t, e) {
        for (var i = 0, n = t; i < n; i++) this.addButton(t[i], void 0, e);
        return this;
      },
    },
    Xw = pC.prototype.remove,
    Gw = pC.prototype.clear,
    Hw = function (t, e) {
      return (t = this.getButton(t)) ? (this.buttonGroup.remove(t), Xw.call(this, t, e), this) : this;
    },
    Uw = {
      remove: function (t, e) {
        if (Lg(t)) for (var i = t, n = 0, s = i.length; n < s; n++) Hw.call(this, i[n], e);
        else Hw.call(this, t, e);
        return this;
      },
      clear: function (t) {
        return (this.buttonGroup.buttons.length = 0), Gw.call(this, t), this;
      },
      removeButton: function (t, e) {
        return this.remove(t, e), this;
      },
      clearButtons: function (t) {
        for (var e = this.buttonGroup.buttons, i = e.length - 1; i >= 0; i--) Hw.call(this, e[i], t);
        return this;
      },
    },
    Nw = Phaser.Utils.Objects.GetValue,
    Kw = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = Nw(n, 'row', 0),
          a = Nw(n, 'column', n.col || 0),
          h = Nw(n, 'createCellContainerCallback'),
          l = Nw(n, 'buttons', void 0),
          u = Nw(n, 'expand', !0),
          c = u ? 1 : 0;
        if ((h && (n.createCellContainerCallback = void 0), void 0 !== l)) {
          o = Math.max(o, l.length);
          for (var f = 0, p = l.length; f < p; f++) a = Math.max(a, l[f].length);
        }
        (n.row = o),
          (n.column = a),
          (n.columnProportions = c),
          (n.rowProportions = c),
          ((s = e.call(this, t, n)).type = 'rexGridButtons'),
          (s.buttonGroup = new jw({
            parent: d(s),
            eventEmitter: Nw(n, 'eventEmitter', d(s)),
            groupName: Nw(n, 'groupName', void 0),
            clickConfig: Nw(n, 'click', void 0),
          }).setButtonsType(n));
        var v = Nw(n, 'background', void 0);
        if (((s.buttonsExpand = u), Nw(n, 'space', void 0), v && s.addBackground(v), l))
          for (var g, y = 0, k = l.length; y < k; y++)
            for (var m = 0, b = (g = l[y]).length; m < b; m++) (w = g[m]) && s.addButton(w, m, y);
        else if (h)
          for (var x = 0; x < o; x++)
            for (var C = 0; C < a; C++) {
              var w;
              (w = h(t, C, x)) && s.addButton(w, C, x);
            }
        return s.addChildrenMap('background', v), s.addChildrenMap('buttons', s.buttonGroup.buttons), s;
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (g(u(i.prototype), 'destroy', this).call(this, t),
                this.buttonGroup.destroy(),
                (this.buttonGroup = void 0));
            },
          },
          {
            key: 'buttons',
            get: function () {
              return this.buttonGroup.buttons;
            },
          },
          {
            key: 'groupName',
            get: function () {
              return this.buttonGroup.groupName;
            },
            set: function (t) {
              this.buttonGroup.groupName = t;
            },
          },
          {
            key: 'eventEmitter',
            get: function () {
              return this.buttonGroup.eventEmitter;
            },
          },
        ]),
        i
      );
    })(pC);
  Object.assign(Kw.prototype, Yw, Uw, Iw, zw),
    M.register('gridButtons', function (t) {
      var e = new Kw(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.GridButtons', Kw);
  var Jw = BC.prototype.add,
    qw = function (t) {
      return Jw.call(this, t), this.buttonGroup.add(t), this;
    },
    Zw = {
      addButton: function (t) {
        if (Lg(t)) for (var e = t, i = 0, n = e.length; i < n; i++) qw.call(this, e[i]);
        else qw.call(this, t);
        return this;
      },
      addButtons: function (t) {
        if (Lg(t[0]))
          for (var e, i = t, n = 0, s = i.length - 1; n <= s; n++) {
            for (var r = 0, o = (e = i[n]).length; r < o; r++) qw.call(this, e[r]);
            n > s && Jw.addNewLine(this);
          }
        else for (r = 0, o = t.length; r < o; r++) qw.call(this, t[r]);
        return this;
      },
    },
    $w = BC.prototype.remove,
    Qw = BC.prototype.clear,
    tS = function (t, e) {
      return (t = this.getButton(t)) ? (this.buttonGroup.remove(t), $w.call(this, t, e), this) : this;
    },
    eS = {
      remove: function (t, e) {
        if (Lg(t)) for (var i = t, n = 0, s = i.length; n < s; n++) tS.call(this, i[n], e);
        else tS.call(this, t, e);
        return this;
      },
      clear: function (t) {
        return (this.buttonGroup.buttons.length = 0), Qw.call(this, t), this;
      },
      removeButton: function (t, e) {
        return this.remove(t, e), this;
      },
      clearButtons: function (t) {
        for (var e = this.buttonGroup.buttons, i = e.length - 1; i >= 0; i--) tS.call(this, e[i], t);
        return this;
      },
    },
    iS = Phaser.Utils.Objects.GetValue,
    nS = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = n.space;
        'number' == typeof o && (n.space = { item: o, line: o }),
          ((s = e.call(this, t, n)).type = 'rexFixWidthButtons'),
          (s.buttonGroup = new jw({
            parent: d(s),
            eventEmitter: iS(n, 'eventEmitter', d(s)),
            groupName: iS(n, 'groupName', void 0),
            clickConfig: iS(n, 'click', void 0),
          }).setButtonsType(n));
        var a = iS(n, 'background', void 0),
          h = iS(n, 'buttons', void 0);
        return (
          (s.buttonsAlign = iS(n, 'align', void 0)),
          a && s.addBackground(a),
          h && s.addButtons(h),
          s.addChildrenMap('background', a),
          s.addChildrenMap('buttons', s.buttonGroup.buttons),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (g(u(i.prototype), 'destroy', this).call(this, t),
                this.buttonGroup.destroy(),
                (this.buttonGroup = void 0));
            },
          },
          {
            key: 'buttons',
            get: function () {
              return this.buttonGroup.buttons;
            },
          },
          {
            key: 'groupName',
            get: function () {
              return this.buttonGroup.groupName;
            },
            set: function (t) {
              this.buttonGroup.groupName = t;
            },
          },
          {
            key: 'eventEmitter',
            get: function () {
              return this.buttonGroup.eventEmitter;
            },
          },
        ]),
        i
      );
    })(BC);
  Object.assign(nS.prototype, Zw, eS, Iw, zw),
    M.register('fixWidthButtons', function (t) {
      var e = new nS(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.FixWidthButtons', nS);
  var sS = Phaser.Utils.Objects.GetValue,
    rS = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).type = 'rexFileSelectorButton');
        var o = new zb(t);
        return (
          t.add.existing(o),
          s.addBackground(o),
          s.addChildrenMap('fileChooser', o),
          s.setAccept(sS(n, 'accept', '')),
          s.setMultiple(sS(n, 'multiple', !1)),
          o.on(
            'change',
            function (t) {
              var e = t.files;
              0 !== e.length && ((e = Array.from(e)), this.emit('select', e, this));
            },
            d(s)
          ),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'files',
            get: function () {
              return this.childrenMap.fileChooser.files;
            },
          },
        ]),
        i
      );
    })(yx);
  Object.assign(rS.prototype, {
    setAccept: function (t) {
      return this.childrenMap.fileChooser.setAccept(t), this;
    },
    setMultiple: function (t) {
      return this.childrenMap.fileChooser.setMultiple(t), this;
    },
    loadFile: function (t, e, i, n, s) {
      return this.childrenMap.fileChooser.loadFile(t, e, i, n, s), this;
    },
    loadFilePromise: function (t, e, i, n) {
      return this.childrenMap.fileChooser.loadFilePromise(t, e, i, n);
    },
  }),
    M.register('fileSelectorButton', function (t) {
      var e = new rS(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.FileSelectorButton', rS);
  var oS = {
      getChoice: function (t) {
        var e = this.childrenMap.choicesSizer;
        return e ? e.getButton(t) : void 0;
      },
      getAction: function (t) {
        return this.childrenMap.actionsSizer.getButton(t);
      },
      getToolbar: function (t) {
        return this.childrenMap.toolbarSizer.getButton(t);
      },
      getLeftToolbar: function (t) {
        return this.childrenMap.leftToolbarSizer.getButton(t);
      },
      setChoiceEnable: function (t, e) {
        var i = this.childrenMap.choicesSizer;
        return i && i.setButtonEnable(t, e), this;
      },
      setActionEnable: function (t, e) {
        return this.childrenMap.actionsSizer.setButtonEnable(t, e), this;
      },
      setToolbarEnable: function (t, e) {
        return this.childrenMap.toolbarSizer.setButtonEnable(t, e), this;
      },
      setLeftToolbarEnable: function (t, e) {
        return this.childrenMap.leftToolbarSizer.setButtonEnable(t, e), this;
      },
      toggleChoiceEnable: function (t) {
        var e = this.childrenMap.choicesSizer;
        return e && e.toggleButtonEnable(t), this;
      },
      toggleActionEnable: function (t) {
        return this.childrenMap.actionsSizer.toggleButtonEnable(t), this;
      },
      toggleToolbarEnable: function (t) {
        return this.childrenMap.toolbarSizer.toggleButtonEnable(t), this;
      },
      toggleLeftToolbarEnable: function (t) {
        return this.childrenMap.leftToolbarSizer.toggleButtonEnable(t), this;
      },
      getChoiceEnable: function (t) {
        var e = this.childrenMap.choicesSizer;
        return !!e && e.getButtonEnable(t);
      },
      getActionEnable: function (t) {
        return this.childrenMap.actionsSizer.getButtonEnable(t);
      },
      getToolbarEnable: function (t) {
        return this.childrenMap.toolbarSizer.getButtonEnable(t);
      },
      getLeftToolbarEnable: function (t) {
        return this.childrenMap.leftToolbarSizer.getButtonEnable(t);
      },
      emitChoiceClick: function (t) {
        var e = this.childrenMap.choicesSizer;
        return e && e.emitButtonClick(t), this;
      },
      emitActionClick: function (t) {
        return this.childrenMap.actionsSizer.emitButtonClick(t), this;
      },
      emitToolbarClick: function (t) {
        return this.childrenMap.toolbarSizer.emitButtonClick(t), this;
      },
      emitLeftToolbarClick: function (t) {
        return this.childrenMap.leftToolbarSizer.emitButtonClick(t), this;
      },
      showChoice: function (t) {
        var e = this.childrenMap.choicesSizer;
        return e && e.showButton(t), this;
      },
      showAction: function (t) {
        return this.childrenMap.actionsSizer.showButton(t), this;
      },
      showToolbar: function (t) {
        return this.childrenMap.toolbarSizer.showButton(t), this;
      },
      showLeftToolbar: function (t) {
        return this.childrenMap.leftToolbarSizer.showButton(t), this;
      },
      hideChoice: function (t) {
        var e = this.childrenMap.choicesSizer;
        return e && e.hideButton(t), this;
      },
      hideAction: function (t) {
        return this.childrenMap.actionsSizer.hideButton(t), this;
      },
      hideToolbar: function (t) {
        return this.childrenMap.toolbarSizer.hideButton(t), this;
      },
      hideLeftToolbar: function (t) {
        return this.childrenMap.leftToolbarSizer.hideButton(t), this;
      },
      addChoice: function (t) {
        var e = this.childrenMap.choicesSizer;
        return e && e.addButton(t), this;
      },
      addAction: function (t) {
        return this.childrenMap.actionsSizer.addButton(t), this;
      },
      addToolbar: function (t) {
        return this.childrenMap.toolbarSizer.addButton(t), this;
      },
      addLeftToolbar: function (t) {
        return this.childrenMap.leftToolbarSizer.addButton(t), this;
      },
      removeChoice: function (t, e) {
        var i = this.childrenMap.choicesSizer;
        return i && i.removeButton(t, e), this;
      },
      removeAction: function (t, e) {
        return this.childrenMap.actionsSizer.removeButton(t, e), this;
      },
      removeToolbar: function (t, e) {
        return this.childrenMap.toolbarSizer.removeButton(t, e), this;
      },
      removeLeftToolbar: function (t, e) {
        return this.childrenMap.leftToolbarSizer.removeButton(t, e), this;
      },
      clearChoices: function (t) {
        var e = this.childrenMap.choicesSizer;
        return e && e.clearButtons(t), this;
      },
      clearActions: function (t) {
        return this.childrenMap.actionsSizer.clearButtons(t), this;
      },
      clearToolbar: function (t) {
        return this.childrenMap.toolbarSizer.clearButtons(t), this;
      },
      clearLeftToolbar: function (t) {
        return this.childrenMap.leftToolbarSizer.clearButtons(t), this;
      },
      forEachChoice: function (t, e) {
        var i = this.childrenMap.choicesSizer;
        return i && i.forEachButtton(t, e), this;
      },
      forEachAction: function (t, e) {
        return this.childrenMap.actionsSizer.forEachButtton(t, e), this;
      },
      forEachToolbar: function (t, e) {
        return this.childrenMap.toolbarSizer.forEachButtton(t, e), this;
      },
      forEachLeftToolbar: function (t, e) {
        return this.childrenMap.leftToolbarSizer.forEachButtton(t, e), this;
      },
      setAllButtonsEnable: function (t) {
        return (
          void 0 === t && (t = !0),
          this.childrenMap.toolbarSizer && this.setToolbarEnable(t),
          this.childrenMap.leftToolbarSizer && this.setLeftToolbarEnable(t),
          this.childrenMap.actionsSizer && this.setActionEnable(t),
          this.childrenMap.choicesSizer && this.setChoiceEnable(t),
          this
        );
      },
      getChoicesButtonStates: function () {
        var t = this.childrenMap.choicesSizer;
        return t ? t.getAllButtonsState() : {};
      },
      getChoicesButtonState: function (t) {
        var e = this.childrenMap.choicesSizer;
        return void 0 === t ? (e ? e.getAllButtonsState() : {}) : !!e && e.getButtonState(t);
      },
      setChoicesButtonState: function (t, e) {
        var i = this.childrenMap.choicesSizer;
        return i && i.setButtonState(t, e), this;
      },
      clearChoicesButtonStates: function () {
        var t = this.childrenMap.choicesSizer;
        return t && t.clearAllButtonsState(), this;
      },
      getChoicesSelectedButtonName: function () {
        var t = this.childrenMap.choicesSizer;
        return t ? t.getSelectedButtonName() : '';
      },
      setChoicesSelectedButtonName: function (t) {
        var e = this.childrenMap.choicesSizer;
        return e && e.setSelectedButtonName(t), this;
      },
    },
    aS = {
      onCreateModalBehavior: function (t) {
        t.on('button.click', function (e, i, n, s, r) {
          if ('actions' === i) {
            var o = { index: n, text: e.text, button: e, dialog: t };
            switch (t.buttonsType) {
              case 'radio':
                o.value = t.getChoicesSelectedButtonName();
                break;
              case 'checkboxes':
                o.value = t.getChoicesButtonStates();
                break;
              default:
                o.value = void 0;
            }
            t.modalClose(o);
          }
        });
      },
      modal: function (t, e) {
        return (
          t && !1 === t.defaultBehavior ? (this.onCreateModalBehavior = !1) : delete this.onCreateModalBehavior,
          _g.modal.call(this, t, e),
          this
        );
      },
    },
    hS = {};
  Object.assign(hS, oS, aS);
  var lS = Phaser.Utils.Objects.GetValue,
    uS = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          (n.orientation = 1),
          ((s = e.call(this, t, n)).type = 'rexDialog'),
          (s.eventEmitter = lS(n, 'eventEmitter', d(s)));
        var o,
          a,
          h,
          l,
          u = lS(n, 'background', void 0),
          c = lS(n, 'title', void 0),
          f = lS(n, 'toolbar', void 0),
          p = lS(n, 'toolbarBackground', void 0),
          v = lS(n, 'leftToolbar', void 0),
          g = lS(n, 'leftToolbarBackground', void 0),
          y = lS(n, 'content', void 0),
          k = lS(n, 'description', void 0),
          m = lS(n, 'choices', void 0),
          b = lS(n, 'choicesBackground', void 0),
          x = lS(n, 'actions', void 0),
          C = lS(n, 'actionsBackground', void 0),
          w = lS(n, 'click', void 0);
        if (
          (u && s.addBackground(u),
          f &&
            (h = new Vw(t, {
              groupName: 'toolbar',
              background: p,
              buttons: f,
              orientation: 0,
              space: { item: lS(n, 'space.toolbarItem', 0) },
              click: w,
              eventEmitter: s.eventEmitter,
            })),
          v &&
            (l = new Vw(t, {
              groupName: 'leftToolbar',
              background: g,
              buttons: v,
              orientation: 0,
              space: { item: lS(n, 'space.leftToolbarItem', 0) },
              click: w,
              eventEmitter: s.eventEmitter,
            })),
          c || f || v)
        ) {
          var S,
            P = !!c && lS(n, 'expand.title', !0),
            T = lS(n, 'align.title', 'center'),
            O = !((c && !P && 'center' === T) || (!c && (f || v)));
          S = O ? new cx(t, { orientation: 0 }) : new Wk(t);
          var M = !!O || { height: !0 };
          if ((l && S.add(l, { align: 'left', expand: M }), c)) {
            O && !P && 'right' === T && S.addSpace();
            var E = { left: lS(n, 'space.titleLeft', 0), right: lS(n, 'space.titleRight', 0) },
              _ = P ? 1 : 0;
            S.add(c, { align: T, proportion: _, expand: M, padding: E }), O && !P && 'left' === T && S.addSpace();
          }
          h && (O && !c && S.addSpace(), S.add(h, { align: 'right', expand: M })),
            (y || k || m || x) && (E = { bottom: lS(n, 'space.title', 0), top: lS(n, 'space.titleTop', 0) });
          _ = lS(n, 'proportion.title', 0);
          s.add(S, { padding: E, proportion: _, expand: !0 });
        }
        if (y) {
          var R = lS(n, 'align.content', 'center'),
            L = lS(n, 'space.content', 0),
            B =
              ((E = {
                left: lS(n, 'space.contentLeft', 0),
                right: lS(n, 'space.contentRight', 0),
                bottom: k || m || x ? L : 0,
              }),
              (_ = lS(n, 'proportion.content', 0)),
              lS(n, 'expand.content', !0));
          s.add(y, { align: R, padding: E, proportion: _, expand: B });
        }
        if (k) {
          R = lS(n, 'align.description', 'center');
          var D = lS(n, 'space.description', 0);
          (E = {
            left: lS(n, 'space.descriptionLeft', 0),
            right: lS(n, 'space.descriptionRight', 0),
            bottom: m || x ? D : 0,
          }),
            (_ = lS(n, 'proportion.description', 0)),
            (B = lS(n, 'expand.description', !0));
          s.add(k, { align: R, padding: E, proportion: _, expand: B });
        }
        if (m) {
          var I = lS(n, 'choicesType', '').split('-'),
            j = cS(I, 'wrap') ? nS : cS(I, 'grid') ? Kw : Vw,
            A = cS(I, 'radio') ? 'radio' : cS(I, 'checkboxes') ? 'checkboxes' : void 0,
            z = {
              left: lS(n, 'space.choicesBackgroundLeft', 0),
              right: lS(n, 'space.choicesBackgroundRight', 0),
              top: lS(n, 'space.choicesBackgroundTop', 0),
              bottom: lS(n, 'space.choicesBackgroundBottom', 0),
            },
            F = lS(n, 'space.choice', 0);
          j === Vw
            ? (z.item = F)
            : j === nS
            ? ((z.item = F), (z.line = lS(n, 'space.choiceLine', F)))
            : ((z.column = lS(n, 'space.choiceColumn', F)), (z.row = lS(n, 'space.choiceRow', F)));
          var V = {
            width: lS(n, 'choicesWidth', void 0),
            height: lS(n, 'choicesHeight', void 0),
            groupName: 'choices',
            buttonsType: A,
            background: b,
            buttons: m,
            space: z,
            click: w,
            eventEmitter: s.eventEmitter,
            setValueCallback: lS(n, 'choicesSetValueCallback', void 0),
            setValueCallbackScope: lS(n, 'choicesSetValueCallbackScope', void 0),
          };
          j === Vw && (V.orientation = cS(I, 'x') ? 0 : 1), (o = new j(t, V));
          var W = lS(n, 'space.choices', 0);
          (E = { left: lS(n, 'space.choicesLeft', 0), right: lS(n, 'space.choicesRight', 0), bottom: x ? W : 0 }),
            (R = lS(n, 'align.choices', 'center')),
            (_ = lS(n, 'proportion.choices', 0)),
            (B = lS(n, 'expand.choices', !0));
          s.add(o, { align: R, padding: E, proportion: _, expand: B }), (s.buttonsType = A);
        }
        if (x) {
          a = new Vw(t, {
            groupName: 'actions',
            background: C,
            buttons: x,
            orientation: 0,
            space: { item: lS(n, 'space.action', 0) },
            expand: lS(n, 'expand.actions', !1),
            align: lS(n, 'align.actions', 'center'),
            click: w,
            eventEmitter: s.eventEmitter,
          });
          (E = {
            left: lS(n, 'space.actionsLeft', 0),
            right: lS(n, 'space.actionsRight', 0),
            bottom: lS(n, 'space.actionsBottom', 0),
          }),
            (_ = lS(n, 'proportion.action', 0));
          s.add(a, { align: 'center', padding: E, proportion: _, expand: !0 });
        }
        return (
          fS(d(s), 'click'),
          fS(d(s), 'over'),
          fS(d(s), 'out'),
          fS(d(s), 'enable'),
          fS(d(s), 'disable'),
          s.addChildrenMap('background', u),
          s.addChildrenMap('title', c),
          s.addChildrenMap('toolbar', f),
          s.addChildrenMap('leftToolbar', v),
          s.addChildrenMap('content', y),
          s.addChildrenMap('description', k),
          s.addChildrenMap('choices', o ? o.buttons : void 0),
          s.addChildrenMap('actions', a ? a.buttons : void 0),
          s.addChildrenMap('choicesSizer', o),
          s.addChildrenMap('actionsSizer', a),
          s.addChildrenMap('toolbarSizer', h),
          s.addChildrenMap('leftToolbarSizer', l),
          s
        );
      }
      return a(i);
    })(cx),
    cS = function (t, e) {
      return -1 !== t.indexOf(e);
    },
    dS = { actions: 'action', choices: 'choice', toolbar: 'toolbar', leftToolbar: 'leftToolbar' },
    fS = function (t, e) {
      t.on('button.'.concat(e), function (i, n, s, r, o) {
        dS.hasOwnProperty(n) && t.emit(''.concat(dS[n], '.').concat(e), i, s, r, o);
      });
    };
  Object.assign(uS.prototype, hS),
    M.register('dialog', function (t) {
      var e = new uS(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Dialog', uS);
  var pS = function (t, e, i) {
      var n = new NC(t, e, i);
      return t.add.existing(n), n;
    },
    vS = function (t) {
      this.childrenMap.title.resetDisplayContent(t.title);
    },
    gS = function (t) {
      var e = this.childrenMap.content;
      if (e.resetDisplayContent) e.resetDisplayContent(t.content);
      else {
        var i = t.content || '';
        e.setText(i);
      }
    },
    yS = function (t) {
      var e = this.childrenMap.actions;
      if (e) {
        var i = t.buttons;
        if (i) {
          for (
            var n = this.scene, s = this.defaultActionConfig, r = this.defaultActionButtonCreator, o = 0, a = i.length;
            o < a;
            o++
          ) {
            var h = i[o],
              l = e[o];
            l || ((l = pS(n, s, r)), this.addAction(l)), l.show().resetDisplayContent(h);
          }
          this.buttonMode = i.length;
          for (o = i.length, a = e.length; o < a; o++) e[o].hide();
        } else {
          var u = e[0];
          u && u.resetDisplayContent(t.buttonA);
          var c = e[1];
          c && c.resetDisplayContent(t.buttonB);
        }
      }
    },
    kS = function (t) {
      var e = this.childrenMap.choices;
      if (e) {
        var i = t.choices;
        i || (i = []);
        for (
          var n = this.scene, s = this.defaultChoiceConfig, r = this.defaultActionButtonCreator, o = 0, a = i.length;
          o < a;
          o++
        ) {
          var h = i[o];
          'string' == typeof h && (h = { text: h });
          var l,
            u = e[o];
          u || ((u = pS(n, s, r)), this.addChoice(u)),
            u.show().resetDisplayContent(h),
            (l = h.hasOwnProperty('value') ? h.value : h.text),
            u.setName(l);
        }
        for (o = i.length, a = e.length; o < a; o++) e[o].hide();
      }
    },
    mS = {
      resetDisplayContent: function (t) {
        return void 0 === t && (t = {}), vS.call(this, t), gS.call(this, t), yS.call(this, t), kS.call(this, t), this;
      },
      modal: function (t, e) {
        Eg(t) && ((e = t), (t = void 0)), void 0 === t && (t = {});
        var i = 0 === this.buttonMode;
        return (
          t.hasOwnProperty('anyTouchClose') || (t.anyTouchClose = i),
          t.hasOwnProperty('manualClose') || (t.manualClose = !i),
          _g.modal.call(this, t, e),
          this
        );
      },
    },
    bS = function (t) {
      t.setHoverState && t.setHoverState(!0);
    },
    xS = function (t) {
      t.setHoverState && t.setHoverState(!1);
    },
    CS = function (t, e, i, n) {
      t.setActiveState && t.setActiveState(n);
    },
    wS = function (t) {
      t.setDisableState && t.setDisableState(!1);
    },
    SS = function (t) {
      t.setDisableState && t.setDisableState(!0);
    },
    PS = function () {
      this.on('button.over', bS)
        .on('button.out', xS)
        .on('button.enable', wS)
        .on('button.disable', SS)
        .on('button.statechange', CS);
    },
    TS = { v: 0, vertical: 0, y: 0, h: 1, horizontal: 1, x: 1, xy: 2, vh: 2 },
    OS = function (t, e) {
      void 0 === e && (e = 'scrollMode'), t.hasOwnProperty(e) || (t[e] = MS(t));
      var i = t[e];
      return 'string' == typeof i && (i = TS[i]), i;
    },
    MS = function (t) {
      var e = !!t.sliderY || !!t.scrollerY,
        i = !!t.sliderX || !!t.scrollerX;
      return e && i ? 2 : e ? 0 : i ? 1 : 0;
    },
    ES = Phaser.Utils.Objects.GetValue,
    _S = Phaser.Math.Percent,
    RS = function (t, e, i) {
      var n;
      return t.y === e.y ? (n = _S(i.x, t.x, e.x)) : t.x === e.x && (n = _S(i.y, t.y, e.y)), n;
    },
    LS = function (t, e, i) {
      var n, s;
      this.enable &&
        ((BS.x = e),
        (BS.y = i),
        this.reverseAxis
          ? ((n = this.getEndPoint()), (s = this.getStartPoint()))
          : ((n = this.getStartPoint()), (s = this.getEndPoint())),
        (this.value = RS(n, s, BS)));
    },
    BS = {},
    DS = function (t, e, i) {
      if (this.enable && t.isDown) {
        var n, s;
        (IS.x = t.worldX),
          (IS.y = t.worldY),
          this.reverseAxis
            ? ((n = this.getEndPoint()), (s = this.getStartPoint()))
            : ((n = this.getStartPoint()), (s = this.getEndPoint()));
        var r = RS(n, s, IS);
        this.stopEaseValue(),
          0 === this.easeValueDuration || Math.abs(this.value - r) < 0.1 ? (this.value = r) : this.easeValueTo(r);
      }
    },
    IS = {},
    jS = function (t, e) {
      void 0 === e && (e = AS);
      var i = this.childrenMap.thumb,
        n = i.x,
        s = i.y;
      return (
        xp(i, this.innerLeft, this.innerTop, this.innerWidth, this.innerHeight, t),
        (e.x = i.x),
        (e.y = i.y),
        (i.x = n),
        (i.y = s),
        e
      );
    },
    AS = {},
    zS = Phaser.Display.Align.LEFT_CENTER,
    FS = Phaser.Display.Align.TOP_CENTER,
    VS = {},
    WS = Phaser.Display.Align.RIGHT_CENTER,
    YS = Phaser.Display.Align.BOTTOM_CENTER,
    XS = {},
    GS = Phaser.Math.Linear,
    HS = {},
    US = Phaser.Display.Align.LEFT_CENTER,
    NS = Phaser.Display.Align.TOP_CENTER,
    KS = Phaser.Display.Align.RIGHT_CENTER,
    JS = Phaser.Display.Align.BOTTOM_CENTER,
    qS = Phaser.Utils.Objects.GetValue,
    ZS = Phaser.Utils.Objects.IsPlainObject,
    $S = Phaser.Math.Clamp,
    QS = Phaser.Math.Snap.To,
    tP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          ((s = e.call(this, t, n)).type = 'rexSlider'),
          s.bootProgressBase(n),
          (s.reverseAxis = qS(n, 'reverseAxis', !1));
        var o = qS(n, 'background', void 0),
          a = qS(n, 'track', void 0),
          h = qS(n, 'indicator', void 0),
          l = qS(n, 'thumb', void 0);
        o && (ZS(o) && (o = IC(t, o)), s.addBackground(o)),
          a &&
            (ZS(a) && (a = IC(t, a)),
            s.add(a, {
              proportion: 1,
              expand: !0,
              minWidth: 0 === s.orientation ? 0 : void 0,
              minHeight: 1 === s.orientation ? 0 : void 0,
            })),
          h && (ZS(h) && (h = IC(t, h)), s.pin(h)),
          l && (ZS(l) && (l = IC(t, l)), s.pin(l));
        var u = qS(n, 'input', 0);
        switch (('string' == typeof u && (u = eP[u]), u)) {
          case 0:
            l &&
              (l.setInteractive(),
              s.scene.input.setDraggable(l),
              l
                .on('drag', LS, d(s))
                .on(
                  'dragstart',
                  function (t) {
                    this.eventEmitter.emit('inputstart', t);
                  },
                  d(s)
                )
                .on(
                  'dragend',
                  function (t) {
                    this.eventEmitter.emit('inputend', t);
                  },
                  d(s)
                ));
            break;
          case 1:
            s.on('pointerdown', DS, d(s))
              .on('pointermove', DS, d(s))
              .on(
                'pointerdown',
                function (t) {
                  this.eventEmitter.emit('inputstart', t);
                },
                d(s)
              )
              .on(
                'pointerup',
                function (t) {
                  this.eventEmitter.emit('inputend', t);
                },
                d(s)
              )
              .on(
                'pointerover',
                function (t) {
                  t.isDown && this.eventEmitter.emit('inputstart', t);
                },
                d(s)
              )
              .on(
                'pointerout',
                function (t) {
                  t.isDown && this.eventEmitter.emit('inputend', t);
                },
                d(s)
              )
              .setInteractive();
        }
        return (
          s.addChildrenMap('background', o),
          s.addChildrenMap('track', a),
          s.addChildrenMap('indicator', h),
          s.addChildrenMap('thumb', l),
          s.setEnable(qS(n, 'enable', void 0)),
          s.setGap(qS(n, 'gap', void 0)),
          s.setValue(qS(n, 'value', 0), qS(n, 'min', void 0), qS(n, 'max', void 0)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'setGap',
            value: function (t, e, i) {
              return t && void 0 !== e && (t /= i - e), (this.gap = t), this;
            },
          },
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              void 0 !== this.gap && (t = QS(t, this.gap));
              var e = this._value;
              (this._value = $S(t, 0, 1)),
                e !== this._value &&
                  (this.updateThumb(this._value),
                  this.updateIndicator(this._value),
                  this.eventEmitter.emit('valuechange', this._value, e, this.eventEmitter));
            },
          },
          {
            key: 'postLayout',
            value: function (t, e, i) {
              return this.updateThumb(), this.updateIndicator(), this;
            },
          },
        ]),
        i
      );
    })(Kc(cx)),
    eP = { pan: 0, drag: 0, click: 1, none: -1 },
    iP = {
      getStartPoint: function (t) {
        if ((void 0 === t && (t = VS), this.childrenMap.thumb)) {
          var e = 0 === this.orientation ? zS : FS;
          jS.call(this, e, t);
        } else
          0 === this.orientation
            ? ((t.x = this.innerLeft + 1), (t.y = this.centerY))
            : ((t.x = this.centerX), (t.y = this.innerTop + 1));
        return t;
      },
      getEndPoint: function (t) {
        if ((void 0 === t && (t = XS), this.childrenMap.thumb)) {
          var e = 0 === this.orientation ? WS : YS;
          jS.call(this, e, t);
        } else
          0 === this.orientation
            ? ((t.x = this.innerRight - 1), (t.y = this.centerY))
            : ((t.x = this.centerX), (t.y = this.innerBottom - 1));
        return t;
      },
      updateThumb: function (t) {
        var e,
          i,
          n = this.childrenMap.thumb;
        return (
          void 0 === n ||
            (void 0 === t && (t = this.value),
            this.reverseAxis
              ? ((e = this.getEndPoint()), (i = this.getStartPoint()))
              : ((e = this.getStartPoint()), (i = this.getEndPoint())),
            (function (t, e, i, n) {
              void 0 === n && (n = HS), (n.x = GS(e.x, i.x, t)), (n.y = GS(e.y, i.y, t));
            })(t, e, i, n),
            this.resetChildPositionState(n)),
          this
        );
      },
      updateIndicator: function (t) {
        var e = this.childrenMap.indicator;
        if (void 0 === e) return this;
        void 0 === t && (t = this.value);
        var i,
          n,
          s,
          r = this.reverseAxis,
          o = this.childrenMap.thumb;
        if (o)
          if (0 === this.orientation) {
            var a = Dr(o);
            if (r) {
              h = o.x - a * o.originX;
              i = this.right - h;
            } else {
              var h;
              i = (h = o.x - a * o.originX) + a - this.left;
            }
          } else {
            var l = Ir(o);
            if (r) {
              u = o.y - l * o.originY;
              n = this.bottom - u;
            } else {
              var u;
              n = (u = o.y - l * o.originY) + l - this.top;
            }
          }
        else 0 === this.orientation ? (i = this.width * t) : (n = this.height * t);
        Kp(e, i, n),
          (s = r ? (0 === this.orientation ? KS : JS) : 0 === this.orientation ? US : NS),
          bp(e, this, s),
          this.resetChildPositionState(e);
      },
    };
  Object.assign(tP.prototype, iP);
  var nP = Phaser.Utils.Objects.GetValue,
    sP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).type = 'rexScrollBar');
        var o,
          a = nP(n, 'background', void 0),
          h = nP(n, 'buttons', void 0),
          l = nP(h, 'top', nP(h, 'left', void 0)),
          u = nP(h, 'bottom', nP(h, 'right', void 0)),
          c = nP(n, 'slider', void 0);
        (a && s.addBackground(a), l) &&
          (s.add(l),
          new Jg(l).on(
            'intouch',
            function () {
              if (this.enable) {
                var t = o.reverseAxis ? this.scrollStep : -this.scrollStep;
                this.value += t;
              }
            },
            d(s)
          ));
        if (c) {
          var f;
          if (((c.orientation = s.orientation), (c.eventEmitter = d(s)), (c.value = null), 0 === s.orientation))
            f = void 0 === nP(c, 'width', void 0) ? 1 : 0;
          else f = void 0 === nP(c, 'height', void 0) ? 1 : 0;
          (o = new tP(t, c)), t.add.existing(o), s.add(o, { proportion: f });
        }
        u &&
          (s.add(u),
          new Jg(u).on(
            'intouch',
            function () {
              if (this.enable) {
                var t = o.reverseAxis ? -this.scrollStep : this.scrollStep;
                this.value += t;
              }
            },
            d(s)
          ));
        var p = [l, u];
        s.addChildrenMap('background', a), s.addChildrenMap('slider', o), s.addChildrenMap('buttons', p);
        var v = nP(n, 'valuechangeCallback', null);
        if (null !== v) {
          var g = nP(n, 'valuechangeCallbackScope', void 0);
          s.on('valuechange', v, g);
        }
        return (
          s.setEnable(nP(n, 'enable', void 0)), s.setValue(nP(n, 'value', 0)), s.setScrollStep(nP(h, 'step', 0.01)), s
        );
      }
      return (
        a(i, [
          {
            key: 'setScrollStep',
            value: function (t) {
              return (this.scrollStep = t), this;
            },
          },
          {
            key: 'enable',
            get: function () {
              return !!this.childrenMap.slider && this.childrenMap.slider.enable;
            },
            set: function (t) {
              this.childrenMap.slider && this.childrenMap.slider.setEnable(t);
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'value',
            get: function () {
              return this.childrenMap.slider ? this.childrenMap.slider.value : 0;
            },
            set: function (t) {
              this.childrenMap.slider && (this.childrenMap.slider.value = t);
            },
          },
          {
            key: 'setValue',
            value: function (t, e, i) {
              return this.childrenMap.slider && this.childrenMap.slider.setValue(t, e, i), this;
            },
          },
          {
            key: 'addValue',
            value: function (t, e, i) {
              return this.childrenMap.slider && this.childrenMap.slider.addValue(t, e, i), this;
            },
          },
          {
            key: 'getValue',
            value: function (t, e) {
              return this.childrenMap.slider ? this.childrenMap.slider.getValue(t, e) : 0;
            },
          },
          {
            key: 'easeValueTo',
            value: function (t, e, i) {
              return this.childrenMap.slider && this.childrenMap.slider.easeValueTo(t, e, i), this;
            },
          },
          {
            key: 'stopEaseValue',
            value: function () {
              return this.childrenMap.slider && this.childrenMap.slider.stopEaseValue(), this;
            },
          },
          {
            key: 'setEaseValueDuration',
            value: function (t) {
              return this.childrenMap.slider && this.childrenMap.slider.setEaseValueDuration(t), this;
            },
          },
          {
            key: 'setEaseValueFunction',
            value: function (t) {
              return this.childrenMap.slider && this.childrenMap.slider.setEaseValueFunction(t), this;
            },
          },
        ]),
        i
      );
    })(cx),
    rP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), ((s = e.call(this, n)).parent = t), s.init(), s;
      }
      return (
        a(i, [
          {
            key: 'init',
            value: function () {
              this.start('IDLE');
            },
          },
          {
            key: 'next_IDLE',
            value: function () {
              var t,
                e = this.parent;
              return e.dragState.isDown && (t = 0 === e.dragThreshold ? 'DRAG' : 'DRAGBEGIN'), t;
            },
          },
          {
            key: 'update_IDLE',
            value: function (t, e) {
              this.next();
            },
          },
          {
            key: 'next_DRAGBEGIN',
            value: function () {
              var t = this.parent,
                e = t.dragState;
              return e.isDown ? (e.pointer.getDistance() >= t.dragThreshold ? 'DRAG' : 'DRAGBEGIN') : 'IDLE';
            },
          },
          {
            key: 'update_DRAGBEGIN',
            value: function (t, e) {
              this.next();
            },
          },
          {
            key: 'next_DRAG',
            value: function () {
              var t,
                e = this.parent;
              return e.dragState.isUp && (t = e.outOfBounds ? 'BACK' : e.slidingEnable ? 'SLIDE' : 'IDLE'), t;
            },
          },
          {
            key: 'update_DRAG',
            value: function (t, e) {
              var i = this.parent;
              i.dragState.justMoved && i.dragging(), this.next();
            },
          },
          {
            key: 'enter_DRAG',
            value: function () {
              this.parent.onDragStart();
            },
          },
          {
            key: 'exit_DRAG',
            value: function () {
              this.parent.onDragEnd();
            },
          },
          {
            key: 'next_SLIDE',
            value: function () {
              var t,
                e = this.parent;
              return e.dragState.isDown ? (t = 'DRAG') : e.isSliding || (t = 'IDLE'), t;
            },
          },
          {
            key: 'enter_SLIDE',
            value: function () {
              this.parent.onSliding();
            },
          },
          {
            key: 'exit_SLIDE',
            value: function () {
              this.parent.stop();
            },
          },
          {
            key: 'update_SLIDE',
            value: function (t, e) {
              this.parent.sliding(t, e), this.next();
            },
          },
          {
            key: 'next_BACK',
            value: function () {
              var t,
                e = this.parent;
              return e.dragState.isDown ? (t = 'DRAG') : e.isPullBack || (t = 'IDLE'), t;
            },
          },
          {
            key: 'enter_BACK',
            value: function () {
              this.parent.onPullBack();
            },
          },
          {
            key: 'exit_BACK',
            value: function () {
              this.parent.stop();
            },
          },
          {
            key: 'update_BACK',
            value: function (t, e) {
              this.parent.pullBack(t, e), this.next();
            },
          },
        ]),
        i
      );
    })(ig),
    oP = Phaser.Utils.Objects.GetValue,
    aP = Phaser.Math.Distance.Between,
    hP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, n))._enable = void 0),
          t.setInteractive(oP(n, 'inputConfig', void 0)),
          s.resetFromJSON(n),
          s.boot(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                (this.pointer = void 0),
                (this.isInTouched = !1),
                (this.holdStartTime = void 0),
                (this.x = void 0),
                (this.y = void 0),
                (this.preX = void 0),
                (this.preY = void 0),
                (this.localX = void 0),
                (this.localY = void 0),
                (this.justMoved = !1),
                this.setEnable(oP(t, 'enable', !0)),
                (this.holdThreshold = oP(t, 'holdThreshold', 50)),
                (this.pointerOutReleaseEnable = oP(t, 'pointerOutRelease', !0)),
                this
              );
            },
          },
          {
            key: 'boot',
            value: function () {
              this.parent.on('pointerdown', this.onPointIn, this),
                this.parent.on('pointerup', this.onPointOut, this),
                this.pointerOutReleaseEnable && this.parent.on('pointerout', this.onPointOut, this),
                this.parent.on('pointermove', this.onPointerMove, this),
                this.scene.sys.events.on('preupdate', this.preupdate, this);
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.scene.sys.events.off('preupdate', this.preupdate, this),
                (this.pointer = void 0),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'enable',
            get: function () {
              return this._enable;
            },
            set: function (t) {
              this._enable !== t && (t || ((this.isInTouched = !1), (this.pointer = void 0)), (this._enable = t));
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'setPointerOutReleaseEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.pointerOutReleaseEnable = t), this;
            },
          },
          {
            key: 'isDown',
            get: function () {
              return this.pointer && this.pointer.isDown;
            },
          },
          {
            key: 'isUp',
            get: function () {
              return !this.isDown;
            },
          },
          {
            key: 'dx',
            get: function () {
              return this.x - this.preX;
            },
          },
          {
            key: 'dy',
            get: function () {
              return this.y - this.preY;
            },
          },
          {
            key: 'dt',
            get: function () {
              return uu(this.scene);
            },
          },
          {
            key: 'speed',
            get: function () {
              return this.x === this.preX && this.y === this.preY
                ? 0
                : aP(this.preX, this.preY, this.x, this.y) / (0.001 * this.dt);
            },
          },
          {
            key: 'speedX',
            get: function () {
              return this.dx / (0.001 * this.dt);
            },
          },
          {
            key: 'speedY',
            get: function () {
              return this.dy / (0.001 * this.dt);
            },
          },
          {
            key: 'onPointIn',
            value: function (t, e, i) {
              this.enable &&
                t.isDown &&
                void 0 === this.pointer &&
                ((this.pointer = t), (this.localX = e), (this.localY = i));
            },
          },
          {
            key: 'onPointOut',
            value: function (t) {
              this.enable && this.pointer === t && (this.pointer = void 0);
            },
          },
          {
            key: 'onPointerMove',
            value: function (t, e, i) {
              this.enable && t.isDown && this.pointer === t && ((this.localX = e), (this.localY = i));
            },
          },
          {
            key: 'preupdate',
            value: function (t, e) {
              if (this.enable) {
                var i = this.pointer;
                (this.justMoved = !1),
                  i && !this.isInTouched
                    ? ((this.x = i.worldX),
                      (this.y = i.worldY),
                      (this.preX = i.worldX),
                      (this.preY = i.worldY),
                      (this.isInTouched = !0),
                      (this.holdStartTime = void 0),
                      this.emit('touchstart', i, this.localX, this.localY))
                    : i && this.isInTouched
                    ? this.x === i.x && this.y === i.y
                      ? void 0 === this.holdStartTime
                        ? (this.holdStartTime = t)
                        : t - this.holdStartTime > this.holdThreshold && ((this.preX = this.x), (this.preY = this.y))
                      : ((this.preX = this.x),
                        (this.preY = this.y),
                        (this.x = i.worldX),
                        (this.y = i.worldY),
                        (this.holdStartTime = void 0),
                        (this.justMoved = !0),
                        this.emit('touchmove', i, this.localX, this.localY))
                    : !i &&
                      this.isInTouched &&
                      ((this.isInTouched = !1), (this.holdStartTime = void 0), this.emit('touchend', i));
              }
            },
          },
        ]),
        i
      );
    })(uo),
    lP = Phaser.Utils.Objects.GetValue,
    uP = (function () {
      function t(e) {
        r(this, t), this.resetFromJSON(e);
      }
      return (
        a(t, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.setValue(lP(t, 'value', 0)),
                this.setSpeed(lP(t, 'speed', 0)),
                this.setAcceleration(lP(t, 'acceleration', 0)),
                this
              );
            },
          },
          {
            key: 'reset',
            value: function () {
              this.setValue(0), this.setSpeed(0), this.setAcceleration(0);
            },
          },
          {
            key: 'setValue',
            value: function (t) {
              return (this.value = t), this;
            },
          },
          {
            key: 'setSpeed',
            value: function (t) {
              return (this.speed = t), this;
            },
          },
          {
            key: 'setAcceleration',
            value: function (t) {
              return (this.acceleration = t), this;
            },
          },
          {
            key: 'updateSpeed',
            value: function (t) {
              return (
                0 !== this.acceleration && ((this.speed += this.acceleration * t), this.speed < 0 && (this.speed = 0)),
                this
              );
            },
          },
          {
            key: 'getDeltaValue',
            value: function (t) {
              return this.updateSpeed(t), this.speed <= 0 ? 0 : this.speed * t;
            },
          },
          {
            key: 'update',
            value: function (t) {
              return this.updateSpeed(t), this.speed > 0 && (this.value += this.getDeltaValue(t)), this;
            },
          },
          {
            key: 'isMoving',
            get: function () {
              return this.speed > 0;
            },
          },
        ]),
        t
      );
    })(),
    cP = (function () {
      function t() {
        r(this, t), this.value, this.dir, (this.movement = new uP());
      }
      return (
        a(t, [
          {
            key: 'init',
            value: function (t, e, i, n, s) {
              return (
                (this.value = t),
                (this.end = s),
                (this.dir = void 0 !== s ? t < s : e),
                this.movement.setSpeed(i).setAcceleration(-n),
                this
              );
            },
          },
          {
            key: 'stop',
            value: function () {
              this.movement.reset();
            },
          },
          {
            key: 'update',
            value: function (t) {
              var e = this.movement.getDeltaValue(t);
              return (
                this.dir || (e = -e),
                void 0 === this.end
                  ? (this.value += e)
                  : 0 === e
                  ? (this.value = this.end)
                  : ((this.value += e),
                    this.dir
                      ? this.value > this.end && (this.value = this.end)
                      : this.value < this.end && (this.value = this.end)),
                this
              );
            },
          },
          {
            key: 'isMoving',
            get: function () {
              return this.movement.isMoving;
            },
          },
        ]),
        t
      );
    })(),
    dP = Phaser.Utils.Objects.GetValue,
    fP = Phaser.Math.Clamp,
    pP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), (s = e.call(this, t, n));
        var o = dP(n, 'enable', !0);
        s._state = new rP(d(s), { enable: o, eventEmitter: !1 });
        var a = {
          inputConfig: dP(n, 'inputConfig', void 0),
          enable: o,
          pointerOutRelease: dP(n, 'pointerOutRelease', !0),
          eventEmitter: !1,
        };
        (s.dragState = new hP(t, a)), (s._enable = void 0), (s._value = void 0), (s._slowDown = new cP());
        var h = dP(n, 'valuechangeCallback', null);
        if (null !== h) {
          var l = dP(n, 'valuechangeCallbackScope', void 0);
          s.on('valuechange', h, l);
        }
        if (null !== (h = dP(n, 'overmaxCallback', null))) {
          l = dP(n, 'overmaxCallbackScope', void 0);
          s.on('overmax', h, l);
        }
        if (null !== (h = dP(n, 'overminCallback', null))) {
          l = dP(n, 'overminCallbackScope', void 0);
          s.on('overmin', h, l);
        }
        return s.resetFromJSON(n), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              this.setOrientationMode(dP(t, 'orientation', 0)),
                this.setDragThreshold(dP(t, 'threshold', 10)),
                this.setSlidingDeceleration(dP(t, 'slidingDeceleration', 5e3)),
                this.setBackDeceleration(dP(t, 'backDeceleration', 2e3));
              var e = dP(t, 'dragRate', 1);
              (e *= dP(t, 'dragReverse', !1) ? -1 : 1), this.setDragRate(e);
              var i = dP(t, 'bounds', void 0);
              return (
                i ? this.setBounds(i) : this.setBounds(dP(t, 'max', 0), dP(t, 'min', 0)),
                this.setValue(dP(t, 'value', this.maxValue || 0)),
                this.setEnable(dP(t, 'enable', !0)),
                this
              );
            },
          },
          {
            key: 'boot',
            value: function () {
              this.scene.sys.events.on('preupdate', this._state.update, this._state);
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.scene.sys.events.off('preupdate', this._state.update, this._state),
                this._state.destroy(t),
                this.dragState.destroy(t),
                (this._state = void 0),
                (this.dragState = void 0),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'enable',
            get: function () {
              return this._enable;
            },
            set: function (t) {
              if (this._enable !== t)
                return (this._enable = t), this._state.setEnable(t), this.dragState.setEnable(t), this;
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'setOrientationMode',
            value: function (t) {
              return 'string' == typeof t && (t = vP[t]), (this.orientationMode = t), this;
            },
          },
          {
            key: 'setDragThreshold',
            value: function (t) {
              return (this.dragThreshold = t), this;
            },
          },
          {
            key: 'setSlidingDeceleration',
            value: function (t) {
              return (this.slidingDeceleration = t), this;
            },
          },
          {
            key: 'setBackDeceleration',
            value: function (t) {
              return (this.backDeceleration = t), this;
            },
          },
          {
            key: 'setDragRate',
            value: function (t) {
              return (this.dragRate = t), this;
            },
          },
          {
            key: 'setBounds',
            value: function (t, e) {
              if (Array.isArray(t)) {
                var i = t;
                (t = i[0]), (e = i[1]);
              }
              return (
                t < e ? ((this.minValue = t), (this.maxValue = e)) : ((this.minValue = e), (this.maxValue = t)), this
              );
            },
          },
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              if (t !== this._value) {
                var e = this._value,
                  i = this.overMax(t),
                  n = this.overMin(t);
                i && this.emit('overmax', t, e),
                  n && this.emit('overmin', t, e),
                  this.backEnable || (i && (t = this.maxValue), n && (t = this.minValue)),
                  (this._value = t),
                  this.emit('valuechange', t, e);
              }
            },
          },
          {
            key: 'setValue',
            value: function (t, e) {
              return void 0 === e && (e = !1), e && (t = fP(t, this.minValue, this.maxValue)), (this.value = t), this;
            },
          },
          {
            key: 'addValue',
            value: function (t, e) {
              return this.setValue(this.value + t, e), this;
            },
          },
          {
            key: 'state',
            get: function () {
              return this._state.state;
            },
          },
          {
            key: 'isDragging',
            get: function () {
              return this.dragState.isInTouched;
            },
          },
          {
            key: 'outOfMaxBound',
            get: function () {
              return this.overMax(this.value);
            },
          },
          {
            key: 'outOfMinBound',
            get: function () {
              return this.overMin(this.value);
            },
          },
          {
            key: 'outOfBounds',
            get: function () {
              return this.outOfMinBound || this.outOfMaxBound;
            },
          },
          {
            key: 'overMax',
            value: function (t) {
              return null != this.maxValue && t > this.maxValue;
            },
          },
          {
            key: 'overMin',
            value: function (t) {
              return null != this.minValue && t < this.minValue;
            },
          },
          {
            key: 'backEnable',
            get: function () {
              return 'number' == typeof this.backDeceleration;
            },
          },
          {
            key: 'isPullBack',
            get: function () {
              return this._slowDown.isMoving;
            },
          },
          {
            key: 'slidingEnable',
            get: function () {
              return 'number' == typeof this.slidingDeceleration;
            },
          },
          {
            key: 'isSliding',
            get: function () {
              return this._slowDown.isMoving;
            },
          },
          {
            key: 'dragDelta',
            get: function () {
              var t;
              return (
                (t =
                  0 === this.orientationMode ? this.dragState.dy : 1 === this.orientationMode ? this.dragState.dx : 0),
                (t *= this.dragRate)
              );
            },
          },
          {
            key: 'dragSpeed',
            get: function () {
              var t;
              return (
                (t =
                  0 === this.orientationMode
                    ? this.dragState.speedY
                    : 1 === this.orientationMode
                    ? this.dragState.speedX
                    : 0),
                (t *= this.dragRate)
              );
            },
          },
          {
            key: 'onDragStart',
            value: function () {
              this.emit('dragstart');
            },
          },
          {
            key: 'onDragEnd',
            value: function () {
              this.emit('dragend');
            },
          },
          {
            key: 'dragging',
            value: function () {
              this.value += this.dragDelta;
            },
          },
          {
            key: 'onSliding',
            value: function () {
              var t = this.value,
                e = this.dragSpeed;
              if (0 === e) return this._slowDown.stop(), void this._state.next();
              var i = this.slidingDeceleration;
              this._slowDown.init(t, e > 0, Math.abs(e), i);
            },
          },
          {
            key: 'sliding',
            value: function (t, e) {
              e *= 0.001;
              var i = this._slowDown.update(e).value;
              this.overMax(i)
                ? ((this.value = this.maxValue), this._slowDown.stop())
                : this.overMin(i)
                ? ((this.value = this.minValue), this._slowDown.stop())
                : (this.value = i);
            },
          },
          {
            key: 'onPullBack',
            value: function () {
              var t = this.value,
                e = this.outOfMinBound ? this.minValue : this.maxValue,
                i = Math.abs(e - t),
                n = this.backDeceleration,
                s = Math.sqrt(2 * n * i);
              this._slowDown.init(t, void 0, s, n, e);
            },
          },
          {
            key: 'pullBack',
            value: function (t, e) {
              (e *= 0.001),
                (this.value = this._slowDown.update(e).value),
                this._slowDown.isMoving || this._state.next();
            },
          },
          {
            key: 'stop',
            value: function () {
              this._slowDown.stop();
            },
          },
        ]),
        i
      );
    })(uo),
    vP = { y: 0, v: 0, vertical: 0, x: 1, h: 1, horizontal: 1 },
    gP = Phaser.Utils.Objects.GetValue,
    yP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        (r(this, i),
        (s = e.call(this, t, n)).parent !== s.scene ? (s.focusMode = gP(n, 'focus', !0)) : (s.focusMode = !1),
        s.setSpeed(gP(n, 'speed', 0.1)),
        s.setEnable(gP(n, 'enable', !0)),
        s.focusMode)
          ? (t = s.parent).setInteractive(gP(n, 'inputConfig', void 0)).on(
              'wheel',
              function (t, e, i, n, s) {
                this.enable && this.scroll(i);
              },
              d(s)
            )
          : s.scene.input.on('wheel', s.onSceneScroll, d(s));
        return s;
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function () {
              this.focusMode || this.scene.input.off('wheel', this.onSceneScroll, this);
            },
          },
          {
            key: 'onSceneScroll',
            value: function (t, e, i, n, s, r) {
              this.enable && this.scroll(n);
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'setSpeed',
            value: function (t) {
              return (this.speed = t), this;
            },
          },
          {
            key: 'scroll',
            value: function (t) {
              (t *= this.speed), this.emit('scroll', t, this.parent, this);
            },
          },
        ]),
        i
      );
    })(uo),
    kP = Phaser.Utils.Objects.GetValue,
    mP = function (t, e, i, n) {
      var s,
        r,
        o,
        a,
        h = 'Y' === (i = i.toUpperCase()),
        l = 2 === t.scrollMode,
        u = t.childrenMap.child,
        c = 'slider'.concat(i);
      if ((s = l || n.hasOwnProperty(c) ? kP(n, c, void 0) : kP(n, 'slider', void 0))) {
        var d, f, p;
        !0 === s && (s = {}),
          (s.orientation = h ? 1 : 0),
          (r = (function (t, e) {
            void 0 === e && (e = {});
            var i = Qe(e);
            ((e = { slider: i }).orientation = i.orientation),
              delete i.orientation,
              (e.background = i.background),
              delete i.background,
              (e.buttons = i.buttons),
              delete i.buttons;
            var n = new sP(t, e);
            t.add.existing(n);
            var s = n.childrenMap.slider;
            return (
              n.addChildrenMap('track', s.childrenMap.track),
              n.addChildrenMap('indicator', s.childrenMap.indicator),
              n.addChildrenMap('thumb', s.childrenMap.thumb),
              n
            );
          })(t.scene, s));
        var v = kP(s, 'position', 0);
        'string' == typeof v && (v = bP[v]);
        var g = kP(n, 'space.slider'.concat(i), void 0);
        void 0 === g && void 0 === (g = kP(n, 'space.slider', void 0)) && (g = l ? 0 : kP(n, 'space.child', 0));
        var y = 'number' == typeof g;
        h
          ? 0 === v
            ? ((d = 2), (f = 1), (p = y ? { left: g } : g))
            : ((d = 0), (f = 1), (p = y ? { right: g } : g))
          : 0 === v
          ? ((d = 1), (f = 2), (p = y ? { top: g } : g))
          : ((d = 1), (f = 0), (p = y ? { bottom: g } : g)),
          e.add(r, { column: d, row: f, align: 'center', padding: p, expand: !0 }),
          (t['hideUnscrollableSlider'.concat(i)] = kP(s, 'hideUnscrollableSlider', !1)),
          (t['adaptThumb'.concat(i, 'SizeMode')] = kP(s, 'adaptThumbSize', !1)),
          (t['minThumb'.concat(i, 'Size')] = kP(s, 'minThumbSize', void 0));
      } else
        (t['hideUnscrollableSlider'.concat(i)] = !1),
          (t['adaptThumb'.concat(i, 'SizeMode')] = !1),
          (t['minThumb'.concat(i, 'Size')] = void 0);
      var k = 'scroller'.concat(i);
      (o = l || n.hasOwnProperty(k) ? kP(n, k, !0) : kP(n, 'scroller', !0)) &&
        u &&
        (!0 === o && (o = {}), (o.orientation = h ? 0 : 1), (a = new pP(u, o)));
      var m,
        b,
        x,
        C,
        w = kP(n, l ? 'mouseWheelScroller'.concat(i) : 'mouseWheelScroller', !1);
      (w && u && (m = new yP(u, w)),
      t.addChildrenMap('slider'.concat(i), r),
      t.addChildrenMap('scroller'.concat(i), a),
      t.addChildrenMap('mouseWheelScroller'.concat(i), m),
      (l && !h) ||
        ((t.hideUnscrollableSlider = t['hideUnscrollableSlider'.concat(i)]),
        (t.adaptThumbSizeMode = t['adaptThumb'.concat(i, 'SizeMode')]),
        (t.minThumbSize = t['minThumb'.concat(i, 'Size')]),
        t.addChildrenMap('slider', r),
        t.addChildrenMap('scroller', a),
        t.addChildrenMap('mouseWheelScroller', m)),
      r) &&
        (l ? ((b = h ? 't' : 's'), (C = 'scroll'.concat(i))) : ((b = 't'), (C = 'scroll')),
        r.on('valuechange', function (e) {
          (t[b] = e), t.emit(C, t);
        }));
      a &&
        (l ? ((x = 'childO'.concat(i)), (C = 'scroll'.concat(i))) : ((x = 'childOY'), (C = 'scroll')),
        a.on('valuechange', function (e) {
          (t[x] = e), t.emit(C, t);
        }));
      if (m) {
        var S = 'addChildO'.concat(i);
        m.on('scroll', function (e) {
          t[S](-e, !0);
        });
      }
    },
    bP = { right: 0, left: 1, bottom: 0, top: 1 },
    xP = Phaser.Utils.Objects.GetValue,
    CP = function (t, e) {
      var i = t.scene,
        n = [0, 1, 0],
        s = [0, 1, 0],
        r = xP(e, 'width'),
        o = xP(e, 'height');
      r || xP(e, 'child.expandWidth', !0) || (n[1] = 0);
      o || xP(e, 'child.expandHeight', !0) || (s[1] = 0);
      var a = new pC(i, { column: 3, row: 3, columnProportions: n, rowProportions: s });
      switch (
        ((function (t, e, i) {
          var n = ES(i, 'child'),
            s = ES(n, 'gameObject', void 0);
          if (s) {
            var r = ES(i, 'space.child', 0);
            t.childMargin = {};
            var o = t.childMargin,
              a = {};
            if ('number' == typeof r)
              switch (t.scrollMode) {
                case 0:
                case 1:
                  (o.top = 0), (o.bottom = 0), (o.left = 0), (o.right = 0);
                  break;
                default:
                  (o.top = r), (o.bottom = r), (o.left = r), (o.right = r);
              }
            else
              switch (t.scrollMode) {
                case 0:
                  (o.top = ES(r, 'top', 0)),
                    (o.bottom = ES(r, 'bottom', 0)),
                    (a.left = ES(r, 'left', 0)),
                    (a.right = ES(r, 'right', 0));
                  break;
                case 1:
                  (o.top = ES(r, 'left', 0)),
                    (o.bottom = ES(r, 'right', 0)),
                    (a.top = ES(r, 'top', 0)),
                    (a.bottom = ES(r, 'bottom', 0));
                  break;
                default:
                  (o.top = ES(r, 'top', 0)),
                    (o.bottom = ES(r, 'bottom', 0)),
                    (o.left = ES(r, 'left', 0)),
                    (o.right = ES(r, 'right', 0));
              }
            e.add(s, {
              column: 1,
              row: 1,
              align: ES(n, 'align', 'center'),
              padding: a,
              expand: { width: ES(n, 'expandWidth', !0), height: ES(n, 'expandHeight', !0) },
            });
          }
          t.addChildrenMap('child', s);
        })(t, a, e),
        t.scrollMode)
      ) {
        case 0:
          mP(t, a, 'y', e);
          break;
        case 1:
          mP(t, a, 'x', e);
          break;
        default:
          mP(t, a, 'y', e), mP(t, a, 'x', e);
      }
      return a;
    },
    wP = function (t) {
      var e, i, n, s;
      switch (this.scrollMode) {
        case 0:
        case 1:
          (e = this.topChildOY),
            (i = this.bottomChildOY),
            (n = this.childrenMap.scroller),
            (s = this.childrenMap.slider);
          break;
        default:
          'Y' === (t = t.toUpperCase())
            ? ((e = this.topChildOY), (i = this.bottomChildOY))
            : ((e = this.leftChildOX), (i = this.rightChildOX)),
            (n = this.childrenMap['scroller'.concat(t)]),
            (s = this.childrenMap['slider'.concat(t)]);
      }
      n && n.setBounds(e, i), s && s.setEnable(e !== i);
    },
    SP = function (t) {
      switch (this.scrollMode) {
        case 0:
        case 1:
          (e = this.childrenMap.slider) && this.hideUnscrollableSlider && this.setChildVisible(e, this.isOverflow);
          break;
        default:
          t = t.toUpperCase();
          var e = this.childrenMap['slider'.concat(t)],
            i = this['hideUnscrollableSlider'.concat(t)],
            n = this['isOverflow'.concat(t)];
          e && i && this.setChildVisible(e, n);
      }
    },
    PP = function (t) {
      switch (this.scrollMode) {
        case 0:
        case 1:
          if (!this.adaptThumbSizeMode) return;
          if (!(a = this.childrenMap.slider)) return;
          var e = Math.min(this.childVisibleHeight / this.childHeight, 1),
            i = a.childrenMap.track,
            n = a.childrenMap.thumb,
            s = this.minThumbSize;
          if (0 === this.scrollMode) {
            var r = i.displayHeight * e;
            void 0 !== s && r < s && (r = s), Kp(n, void 0, r);
          } else {
            var o = i.displayWidth * e;
            void 0 !== s && o < s && (o = s), Kp(n, o, void 0);
          }
          TP(a);
          break;
        default:
          var a;
          if (((t = t.toUpperCase()), !this['adaptThumb'.concat(t, 'SizeMode')])) return;
          if (!(a = this.childrenMap['slider'.concat(t)])) return;
          (i = a.childrenMap.track), (n = a.childrenMap.thumb), (s = this['minThumb'.concat(t, 'Size')]);
          if ('Y' === t) {
            (e = Math.min(this.childVisibleHeight / this.childHeight, 1)), (r = i.displayHeight * e);
            void 0 !== s && r < s && (r = s), Kp(n, void 0, r);
          } else {
            (e = Math.min(this.childVisibleWidth / this.childWidth, 1)), (o = i.displayWidth * e);
            void 0 !== s && o < s && (o = s), Kp(n, o, void 0);
          }
          TP(a);
      }
    },
    TP = function (t) {
      var e = t.minWidth,
        i = t.minHeight;
      (t.minWidth = t.width), (t.minHeight = t.height), t.layout(), (t.minWidth = e), (t.minHeight = i);
    },
    OP = Phaser.Utils.Objects.GetValue,
    MP = Phaser.Math.Clamp,
    EP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = OS(n),
          a = 1 === o;
        (n.orientation = a ? 0 : 1),
          ((s = e.call(this, t, n)).type = OP(n, 'type', 'rexScrollable')),
          (s.scrollMode = o);
        var h = OP(n, 'background', void 0);
        h && s.addBackground(h);
        var l = OP(n, 'header', void 0);
        if (l) {
          var u = OP(n, 'align.header', 'center'),
            c = OP(n, 'space.header', 0);
          (v = a ? { right: c } : { bottom: c }),
            s.add(l, { proportion: 0, align: u, padding: v, expand: OP(n, 'expand.header', !0) });
        }
        var f = CP(d(s), n);
        f && s.add(f, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var p = OP(n, 'footer', void 0);
        if (p) {
          u = OP(n, 'align.footer', 'center');
          var v,
            g = OP(n, 'space.footer', 0);
          (v = a ? { left: g } : { top: g }),
            s.add(p, { proportion: 0, align: u, padding: v, expand: OP(n, 'expand.footer', !0) });
        }
        return (
          s.addChildrenMap('background', h),
          s.addChildrenMap('header', l),
          s.addChildrenMap('footer', p),
          (s.runLayoutFlag = !1),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'postLayout',
            value: function (t, e, i) {
              return (
                this.resizeController(),
                this.runLayoutFlag || ((this.runLayoutFlag = !0), this.setT(0), 2 === this.scrollMode && this.setS(0)),
                this
              );
            },
          },
          {
            key: 't',
            get: function () {
              var t = this.childrenMap.child.t,
                e = this.childMargin;
              if (0 !== e.top || 0 !== e.bottom) {
                var i = this.childrenMap.child,
                  n = i.topChildOY - i.bottomChildOY,
                  s = n + e.top + e.bottom,
                  r = n * t + e.top;
                t = 0 !== s ? r / s : 0;
              }
              return t;
            },
            set: function (t) {
              var e = this.childMargin;
              if (0 !== e.top || 0 !== e.bottom) {
                var i = this.childrenMap.child,
                  n = i.topChildOY - i.bottomChildOY,
                  s = (n + e.top + e.bottom) * t - e.top;
                t = 0 !== n ? s / n : 0;
              }
              (this.childrenMap.child.t = t), this.updateController();
            },
          },
          {
            key: 's',
            get: function () {
              var t = this.childrenMap.child.s,
                e = this.childMargin;
              if (0 !== e.left || 0 !== e.right) {
                var i = this.childrenMap.child,
                  n = i.leftChildOX - i.rightChildOX,
                  s = n + e.left + e.right,
                  r = n * t + e.left;
                t = 0 !== s ? r / s : 0;
              }
              return t;
            },
            set: function (t) {
              var e = this.childMargin;
              if (0 !== e.left || 0 !== e.right) {
                var i = this.childrenMap.child,
                  n = i.leftChildOX - i.rightChildOX,
                  s = (n + e.left + e.right) * t - e.left;
                t = 0 !== n ? s / n : 0;
              }
              (this.childrenMap.child.s = t), this.updateController();
            },
          },
          {
            key: 'childOY',
            get: function () {
              return this.childrenMap.child.childOY;
            },
            set: function (t) {
              (this.childrenMap.child.childOY = t), this.updateController();
            },
          },
          {
            key: 'childOX',
            get: function () {
              return this.childrenMap.child.childOX;
            },
            set: function (t) {
              (this.childrenMap.child.childOX = t), this.updateController();
            },
          },
          {
            key: 'topChildOY',
            get: function () {
              return this.childrenMap.child.topChildOY + this.childMargin.top;
            },
          },
          {
            key: 'bottomChildOY',
            get: function () {
              return this.childrenMap.child.bottomChildOY - this.childMargin.bottom;
            },
          },
          {
            key: 'leftChildOX',
            get: function () {
              return this.childrenMap.child.leftChildOX + this.childMargin.left;
            },
          },
          {
            key: 'rightChildOX',
            get: function () {
              return this.childrenMap.child.rightChildOX - this.childMargin.right;
            },
          },
          {
            key: 'childVisibleHeight',
            get: function () {
              return this.childrenMap.child.childVisibleHeight;
            },
          },
          {
            key: 'childHeight',
            get: function () {
              return this.childrenMap.child.childHeight;
            },
          },
          {
            key: 'childVisibleWidth',
            get: function () {
              return this.childrenMap.child.childVisibleWidth;
            },
          },
          {
            key: 'childWidth',
            get: function () {
              return this.childrenMap.child.childWidth;
            },
          },
          {
            key: 'isOverflow',
            get: function () {
              var t = this.childrenMap.child;
              return t.topChildOY !== t.bottomChildOY;
            },
          },
          {
            key: 'isOverflowY',
            get: function () {
              return this.isOverflow;
            },
          },
          {
            key: 'isOverflowX',
            get: function () {
              var t = this.childrenMap.child;
              return t.leftChildOX !== t.rightChildOX;
            },
          },
          {
            key: 'setChildOY',
            value: function (t, e) {
              return (
                void 0 === e && (e = !1),
                e && (t = MP(t, this.bottomChildOY, this.topChildOY)),
                (this.childOY = t),
                this
              );
            },
          },
          {
            key: 'addChildOY',
            value: function (t, e) {
              return this.setChildOY(this.childOY + t, e), this;
            },
          },
          {
            key: 'setT',
            value: function (t, e) {
              return void 0 === e && (e = !1), e && (t = MP(t, 0, 1)), (this.t = t), this;
            },
          },
          {
            key: 'addT',
            value: function (t, e) {
              return this.setT(this.t + t, e), this;
            },
          },
          {
            key: 'scrollToTop',
            value: function () {
              return (this.t = 0), this;
            },
          },
          {
            key: 'scrollToBottom',
            value: function () {
              if (((this.t = 1), 0 === this.t)) return this;
              do {
                this.t = 1;
              } while (1 !== this.t);
              return this;
            },
          },
          {
            key: 'setChildOX',
            value: function (t, e) {
              return (
                void 0 === e && (e = !1),
                e && (t = MP(t, this.leftChildOX, this.rightChildOX)),
                (this.childOX = t),
                this
              );
            },
          },
          {
            key: 'addChildOX',
            value: function (t, e) {
              return this.setChildOX(this.childOX + t, e), this;
            },
          },
          {
            key: 'setS',
            value: function (t, e) {
              return void 0 === e && (e = !1), e && (t = MP(t, 0, 1)), (this.s = t), this;
            },
          },
          {
            key: 'addS',
            value: function (t, e) {
              return this.setS(this.s + t, e), this;
            },
          },
          {
            key: 'scrollToLeft',
            value: function () {
              return (this.s = 0), this;
            },
          },
          {
            key: 'scrollToRight',
            value: function () {
              if (((this.s = 1), 0 === this.s)) return this;
              do {
                this.s = 1;
              } while (1 !== this.s);
              return this;
            },
          },
          {
            key: 'sliderEnable',
            get: function () {
              var t = this.childrenMap.slider;
              return !!t && t.enable;
            },
            set: function (t) {
              var e = this.childrenMap.slider;
              e && e.setEnable(t);
            },
          },
          {
            key: 'setSliderEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.sliderEnable = t), this;
            },
          },
          {
            key: 'sliderYEnable',
            get: function () {
              return this.sliderEnable;
            },
            set: function (t) {
              this.sliderEnable = t;
            },
          },
          {
            key: 'setSliderYEnable',
            value: function (t) {
              return this.setSliderEnable(t), this;
            },
          },
          {
            key: 'sliderXEnable',
            get: function () {
              var t = this.childrenMap.sliderX;
              return !!t && t.enable;
            },
            set: function (t) {
              var e = this.childrenMap.sliderX;
              e && e.setEnable(t);
            },
          },
          {
            key: 'setSliderXEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.sliderXEnable = t), this;
            },
          },
          {
            key: 'scrollerEnable',
            get: function () {
              var t = this.childrenMap.scroller;
              return !!t && t.enable;
            },
            set: function (t) {
              var e = this.childrenMap.scroller;
              e && e.setEnable(t);
            },
          },
          {
            key: 'setScrollerEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.scrollerEnable = t), this;
            },
          },
          {
            key: 'scrollerYEnable',
            get: function () {
              return this.scrollerEnable;
            },
            set: function (t) {
              this.scrollerEnable = t;
            },
          },
          {
            key: 'setScrollerYEnable',
            value: function (t) {
              return this.setScrollerEnable(t), this;
            },
          },
          {
            key: 'scrollerXEnable',
            get: function () {
              var t = this.childrenMap.scrollerX;
              return !!t && t.enable;
            },
            set: function (t) {
              var e = this.childrenMap.scrollerX;
              e && e.setEnable(t);
            },
          },
          {
            key: 'setScrollerXEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.scrollerXEnable = t), this;
            },
          },
          {
            key: 'mouseWheelScrollerEnable',
            get: function () {
              var t = this.childrenMap.mouseWheelScroller;
              return !!t && t.enable;
            },
            set: function (t) {
              var e = this.childrenMap.mouseWheelScroller;
              e && e.setEnable(t);
            },
          },
          {
            key: 'setMouseWheelScrollerEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.mouseWheelScrollerEnable = t), this;
            },
          },
          {
            key: 'mouseWheelScrollerYEnable',
            get: function () {
              return this.mouseWheelScrollerEnable;
            },
            set: function (t) {
              this.mouseWheelScrollerEnable = t;
            },
          },
          {
            key: 'setMouseWheelScrollerYEnable',
            value: function (t) {
              return this.setMouseWheelScrollerEnable(t), this;
            },
          },
          {
            key: 'mouseWheelScrollerXEnable',
            get: function () {
              var t = this.childrenMap.mouseWheelScrollerX;
              return !!t && t.enable;
            },
            set: function (t) {
              var e = this.childrenMap.mouseWheelScrollerX;
              e && e.setEnable(t);
            },
          },
          {
            key: 'setMouseWheelScrollerXEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.mouseWheelScrollerXEnable = t), this;
            },
          },
          {
            key: 'setDropZoneEnable',
            value: function (t) {
              void 0 === t && (t = !0);
              var e = this.childrenMap.child;
              return e.setInteractive(), (e.input.dropZone = t), this;
            },
          },
        ]),
        i
      );
    })(cx),
    _P = {
      resizeController: function () {
        switch (this.scrollMode) {
          case 0:
          case 1:
            wP.call(this), this.updateController(), SP.call(this), PP.call(this);
            break;
          default:
            wP.call(this, 'y'),
              wP.call(this, 'x'),
              this.updateController(),
              SP.call(this, 'y'),
              SP.call(this, 'x'),
              PP.call(this, 'y'),
              PP.call(this, 'x');
        }
        return this;
      },
      updateController: function () {
        switch (this.scrollMode) {
          case 0:
          case 1:
            var t = this.childrenMap.scroller,
              e = this.childrenMap.slider;
            t && t.setValue(this.childOY), e && e.setValue(this.t);
            break;
          default:
            var i = this.childrenMap.scrollerY,
              n = this.childrenMap.sliderY,
              s = this.childrenMap.scrollerX,
              r = this.childrenMap.sliderX;
            i && i.setValue(this.childOY),
              n && n.setValue(this.t),
              s && s.setValue(this.childOX),
              r && r.setValue(this.s);
        }
      },
    };
  Object.assign(EP.prototype, _P);
  var RP = function (t) {
      return VC(t) ? 2 : YC(t) ? 0 : 1;
    },
    LP = function (t, e, i) {
      switch (RP(t)) {
        case 0:
          i = t.getWrappedText(e);
          break;
        case 1:
          i = t.getPenManager(e, i);
          break;
        case 2:
          i = t.maxWidth > 0 ? t.setText(e).getTextBounds().wrappedText.split('\n') : e.split('\n');
      }
      return i;
    },
    BP = function (t) {
      return (t - this.textLineSpacing) / (this.textLineHeight + this.textLineSpacing);
    },
    DP = function (t) {
      return t * (this.textLineHeight + this.textLineSpacing) - this.textLineSpacing;
    },
    IP = function (t) {
      var e,
        i = t + this.visibleLinesCount + 1;
      switch (this.textObjectType) {
        case 0:
        case 2:
          e = this.lines.slice(t, i).join('\n');
          break;
        case 1:
          var n = this.lines.getLineStartIndex(t),
            s = this.lines.getLineEndIndex(i - 1);
          e = this.lines.getSliceTagText(n, s, !0);
      }
      return e;
    },
    jP = function (t, e) {
      switch (RP(t)) {
        case 0:
          var i = (s = t.style).wordWrapWidth,
            n = s.wordWrapCallback;
          (s.wordWrapWidth = 0),
            (s.wordWrapCallback = void 0),
            t.setText(e),
            (s.wordWrapWidth = i),
            (s.wordWrapCallback = n);
          break;
        case 1:
          var s,
            r = (s = t.style).wrapMode;
          (s.wrapMode = 0), t.setText(e), (s.wrapMode = r);
          break;
        case 2:
          var o = t._maxWidth;
          (t._maxWidth = 0), t.setText(e), (t._maxWidth = o);
      }
    },
    AP = function () {
      var t = this.textObject.rexSizer;
      (this.textObject.y += t.offsetY - t.preOffsetY),
        (t.preOffsetY = t.offsetY),
        this.resetChildPositionState(this.textObject),
        this.textCropEnable && zP.call(this);
    },
    zP = function () {
      if (this.textObject.setCrop) {
        var t,
          e,
          i = this.textObject.rexSizer.offsetY;
        i <= 0 ? ((t = -i), (e = this.height)) : ((t = 0), (e = this.height - i)),
          this.textObject.setCrop(0, t, this.width, e);
      }
    },
    FP = function (t, e, i) {
      if (
        ((i += this.textLineHeight + this.textLineSpacing),
        this.textObjectWidth !== e || this._textObjectRealHeight !== i)
      ) {
        switch (((this.textObjectWidth = e), (this._textObjectRealHeight = i), this.textObjectType)) {
          case 0:
          case 1:
            t.setFixedSize(e, i);
            var n = t.style,
              s = Math.max(e, 0);
            0 === this.textObjectType
              ? (n.wordWrapWidth = s)
              : (0 === n.wrapMode && (n.wrapMode = 1), (n.wrapWidth = s));
            break;
          case 2:
            t.setMaxWidth(e);
        }
        this.setText();
      }
    },
    VP = {
      setText: function (t) {
        return (
          void 0 !== t && (this.text = t),
          (this.lines = LP(this.textObject, this.text, this.lines)),
          (this.linesCount = this.lines.length),
          (this._textHeight = void 0),
          (this._textVisibleHeight = void 0),
          this.updateTextObject(),
          this
        );
      },
      updateTextObject: function () {
        var t = Math.max(Math.floor(BP.call(this, -this.textOY)), 0),
          e = DP.call(this, t) + this.textOY,
          i = IP.call(this, t);
        return jP(this.textObject, i), (this.textObject.rexSizer.offsetY = e), AP.call(this), this;
      },
      preLayout: function () {
        return (
          (this._textLineHeight = void 0),
          (this._textLineSpacing = void 0),
          (this._visibleLinesCount = void 0),
          (this._textHeight = void 0),
          (this._textVisibleHeight = void 0),
          Up.call(this),
          this
        );
      },
      layoutChildren: function () {
        var t,
          e,
          i,
          n,
          s,
          r,
          o,
          a = this.left,
          h = this.top;
        (t = this.textObject).rexSizer.hidden ||
          ((n = a + (i = (e = t.rexSizer).padding).left),
          (s = h + i.top),
          (r = this.width - i.left - i.right),
          (o = this.height - i.top - i.bottom),
          FP.call(this, t, r, o),
          xp(t, n, s, r, o, e.align),
          (e.preOffsetY = 0),
          AP.call(this),
          this.textMask && (this.textMask.setPosition().resize(), this.resetChildPositionState(this.textMask)));
      },
    },
    WP = Phaser.Utils.Objects.IsPlainObject,
    YP = Phaser.Utils.Objects.GetValue,
    XP = Phaser.Display.Align.TOP_LEFT,
    GP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          WP(n)
            ? ((n = YP((h = n), 'x', 0)),
              (s = YP(h, 'y', 0)),
              (o = YP(h, 'width', void 0)),
              (a = YP(h, 'height', void 0)))
            : WP(o) && ((o = YP((h = o), 'width', void 0)), (a = YP(h, 'height', void 0))),
          ((l = e.call(this, t, n, s, o, a, h)).type = 'rexTextBlock'),
          (l.textObject = void 0),
          (l.linesCount = 0),
          (l.textMask = void 0),
          (l.textObjectType = void 0),
          (l._textLineHeight = void 0),
          (l._textLineSpacing = void 0),
          (l._visibleLinesCount = void 0),
          (l._textHeight = void 0),
          (l._textVisibleHeight = void 0),
          (l._textObjectRealHeight = 0),
          (l.lines = void 0),
          (l.text = YP(h, 'content', '')),
          (l._textOY = 0),
          (l.execeedTopState = !1),
          (l.execeedBottomState = !1),
          l.setClampMode(YP(h, 'clamplTextOY', !0)),
          (l.alwaysScrollable = YP(h, 'alwaysScrollable', !1));
        var u = YP(h, 'background', void 0),
          c = YP(h, 'text', void 0);
        void 0 === c && (c = HP(t)), (l.textCropEnable = YP(h, 'textCrop', !!c.setCrop));
        var f = YP(h, 'textMask', !l.textCropEnable);
        u && l.addBackground(u), l.add(c), (l.sizerChildren = [c]);
        var p = l.getSizerConfig(c);
        return (
          (p.align = XP),
          (p.padding = Op(0)),
          (p.expand = !0),
          (l.textObject = c),
          (l.textObjectType = RP(c)),
          (p.preOffsetY = 0),
          (p.offsetY = 0),
          f && (l.textMask = vx.call(d(l), l.textObject, d(l))),
          l.addChildrenMap('background', u),
          l.addChildrenMap('text', c),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              if (this.scene && !this.ignoreDestroy) {
                if (((this.textObject = void 0), (this.textMask = void 0), this.lines)) {
                  switch (this.textObjectType) {
                    case 0:
                    case 2:
                      this.lines.length = 0;
                      break;
                    case 1:
                      this.lines.destroy();
                  }
                  this.lines = void 0;
                }
                g(u(i.prototype), 'destroy', this).call(this, t);
              }
            },
          },
          {
            key: 'setClampMode',
            value: function (t) {
              return void 0 === t && (t = !0), (this.clampTextOY = t), this;
            },
          },
          {
            key: 'textLineHeight',
            get: function () {
              if (void 0 === this._textLineHeight) {
                var t;
                switch (this.textObjectType) {
                  case 0:
                  case 1:
                    var e = this.textObject.style;
                    t = e.metrics.fontSize + e.strokeThickness;
                    break;
                  case 2:
                    var i = this.textObject.fontSize / this.textObject.fontData.size;
                    t = this.textObject.fontData.lineHeight * i;
                }
                this._textLineHeight = t;
              }
              return this._textLineHeight;
            },
          },
          {
            key: 'textLineSpacing',
            get: function () {
              if (void 0 === this._textLineSpacing) {
                var t;
                switch (this.textObjectType) {
                  case 0:
                  case 1:
                    t = this.textObject.lineSpacing;
                    break;
                  case 2:
                    t = 0;
                }
                this._textLineSpacing = t;
              }
              return this._textLineSpacing;
            },
          },
          {
            key: 'visibleLinesCount',
            get: function () {
              return (
                void 0 === this._visibleLinesCount &&
                  (this._visibleLinesCount = Math.floor(BP.call(this, this._textObjectRealHeight))),
                this._visibleLinesCount
              );
            },
          },
          {
            key: 'topTextOY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'bottomTextOY',
            get: function () {
              return -this.textVisibleHeight;
            },
          },
          {
            key: 'textHeight',
            get: function () {
              return (
                void 0 === this._textHeight && (this._textHeight = DP.call(this, this.linesCount)), this._textHeight
              );
            },
          },
          {
            key: 'textObjectHeight',
            get: function () {
              return this._textObjectRealHeight - (this.textLineHeight + this.textLineSpacing);
            },
          },
          {
            key: 'textVisibleHeight',
            get: function () {
              if (void 0 === this._textVisibleHeight) {
                var t = this.textHeight - this.textObjectHeight;
                !this.alwaysScrollable && t < 0 && (t = 0), (this._textVisibleHeight = t);
              }
              return this._textVisibleHeight;
            },
          },
          {
            key: 'textOYExceedTop',
            value: function (t) {
              return void 0 === t && (t = this.textOY), t > this.topTextOY;
            },
          },
          {
            key: 'textOYExeceedBottom',
            value: function (t) {
              return void 0 === t && (t = this.textOY), t < this.bottomTextOY;
            },
          },
          {
            key: 'textOY',
            get: function () {
              return this._textOY;
            },
            set: function (t) {
              var e = this.topTextOY,
                i = this.bottomTextOY,
                n = this.textOYExceedTop(t),
                s = this.textOYExeceedBottom(t);
              this.clampTextOY && (this.visibleLinesCount > this.linesCount ? (t = 0) : n ? (t = e) : s && (t = i)),
                this._textOY !== t && ((this._textOY = t), this.updateTextObject()),
                n && (this.execeedTopState || this.emit('execeedtop', this, t, e)),
                (this.execeedTopState = n),
                s && (this.execeedBottomState || this.emit('execeedbottom', this, t, i)),
                (this.execeedBottomState = s);
            },
          },
          {
            key: 'setTextOY',
            value: function (t) {
              return (this.textOY = t), this;
            },
          },
          {
            key: 't',
            get: function () {
              var t = this.textVisibleHeight;
              return 0 === t ? 0 : this.textOY / -t;
            },
            set: function (t) {
              this.textOY = -this.textVisibleHeight * t;
            },
          },
          {
            key: 'setTextOYByPercentage',
            value: function (t) {
              return (this.t = t), this;
            },
          },
        ]),
        i
      );
    })(Ok),
    HP = function (t) {
      return t.add.text(0, 0, '');
    };
  Object.assign(GP.prototype, VP);
  var UP = {
      scrollToLine: function (t) {
        return this.setChildOY(-this.lineHeight * t), this;
      },
      scrollToNextLine: function (t) {
        void 0 === t && (t = 1);
        var e = this.lineIndex + t;
        return this.scrollToLine(e), this;
      },
    },
    NP = Phaser.Utils.Objects.GetValue,
    KP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = NP(n, 'text', void 0),
          a = NP(n, 'textWidth', void 0),
          h = NP(n, 'textHeight', void 0),
          l = NP(n, 'textCrop', !!o.setCrop),
          u = NP(n, 'textMask', !l),
          c = NP(n, 'content', ''),
          d = new GP(t, {
            width: a,
            height: h,
            text: o,
            textMask: u,
            textCrop: l && !u,
            content: c,
            clamplTextOY: NP(n, 'clamplChildOY', !1),
            alwaysScrollable: NP(n, 'alwaysScrollable', !1),
          });
        t.add.existing(d),
          (function (t) {
            Object.defineProperty(t, 'childOY', {
              configurable: !0,
              get: function () {
                return t.textOY;
              },
              set: function (e) {
                t.textOY = e;
              },
            }),
              Object.defineProperty(t, 'topChildOY', {
                get: function () {
                  return t.topTextOY;
                },
              }),
              Object.defineProperty(t, 'bottomChildOY', {
                get: function () {
                  return t.bottomTextOY;
                },
              }),
              Object.defineProperty(t, 'childVisibleHeight', {
                get: function () {
                  return t.textObjectHeight;
                },
              }),
              Object.defineProperty(t, 'childHeight', {
                get: function () {
                  return t.textHeight;
                },
              });
          })(d),
          (n.scrollMode = 0),
          (n.type = 'rexTextArea'),
          (n.child = { gameObject: d, expandWidth: void 0 === a, expandHeight: void 0 === h });
        var f = NP(n, 'space', void 0);
        return f && (f.child = NP(f, 'text', 0)), (s = e.call(this, t, n)).addChildrenMap('text', o), s;
      }
      return (
        a(i, [
          {
            key: 'text',
            get: function () {
              return this.childrenMap.child.text;
            },
          },
          {
            key: 'lineHeight',
            get: function () {
              var t = this.childrenMap.child;
              return t.textLineHeight + t.textLineSpacing;
            },
          },
          {
            key: 'lineIndex',
            get: function () {
              return Math.floor(-this.childOY / this.lineHeight);
            },
          },
          {
            key: 'linesCount',
            get: function () {
              return this.childrenMap.child.linesCount;
            },
          },
          {
            key: 'contentHeight',
            get: function () {
              return this.childrenMap.child.textHeight;
            },
          },
        ]),
        i
      );
    })(EP);
  Object.assign(
    KP.prototype,
    {
      setText: function (t) {
        return this.childrenMap.child.setText(t), this.resizeController(), this;
      },
      appendText: function (t) {
        return this.setText(this.text + t), this;
      },
    },
    UP
  );
  var JP = Phaser.Utils.Objects.GetValue,
    qP = function (t, e, i) {
      e = e ? _(e) : {};
      var n = JP(i, 'background', IC),
        s = JP(i, 'text', zC),
        r = JP(i, 'track', IC),
        o = JP(i, 'thumb', IC);
      n ? (e.background = n(t, e.background)) : delete e.background, s ? (e.text = s(t, e.text)) : delete e.text;
      var a = e.slider;
      !1 !== a &&
        (void 0 === a && (a = {}),
        r ? (a.track = r(t, a.track)) : delete a.track,
        o ? (a.thumb = o(t, a.thumb)) : delete a.thumb,
        (e.slider = a));
      var h = new KP(t, e);
      return t.add.existing(h), h;
    },
    ZP = Phaser.Utils.Objects.GetValue,
    $P = Phaser.Utils.Objects.GetValue,
    QP = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        var o;
        r(this, i), (n = n ? _(n) : {}), void 0 === s && (s = {});
        var a = $P(s, 'background', IC);
        a ? (n.background = a(t, n.background)) : delete n.background,
          (n.title = pS(t, n.title, s.title)),
          (n.content = (function (t, e, i) {
            var n,
              s = ZP(e, '$type');
            void 0 === s && e && (e.hasOwnProperty('slider') || e.hasOwnProperty('scroller')) && (s = 'textarea'),
              (n = 'textarea' === s ? new qP(t, e, i) : new pS(t, e, i));
            return t.add.existing(n), n;
          })(t, n.content, s.content)),
          n.content instanceof KP && Yl(n, 'height') && !Yl(n, 'proportion.content') && $(n, 'proportion.content', 1);
        var h = n.button,
          l = n.buttonA || h,
          u = n.buttonB || h,
          c = n.buttonMode;
        void 0 === c && (c = l && u ? 2 : l ? 1 : 0);
        var f = s.button,
          p = s.buttonA || f,
          v = s.buttonB || f;
        switch (c) {
          case 2:
            n.actions = [pS(t, l, p), pS(t, u, v)];
            break;
          case 1:
            n.actions = [pS(t, l, p)];
            break;
          case 0:
            break;
          default:
            n.actions = [];
        }
        var g = n.choice;
        g && (n.choices = []),
          ((o = e.call(this, t, n)).type = 'rexConfirmDialog'),
          (o.buttonMode = c),
          (o.defaultActionConfig = h),
          (o.defaultActionButtonCreator = f),
          (o.defaultChoiceConfig = g),
          (o.defaultChoiceCreator = s.choice);
        var y = o.childrenMap.actions;
        return (
          o.addChildrenMap('buttonA', y ? y[0] : null), o.addChildrenMap('buttonB', y ? y[1] : null), PS.call(d(o)), o
        );
      }
      return a(i);
    })(uS);
  Object.assign(QP.prototype, mS),
    M.register('confirmDialog', function (t, e) {
      var i = new QP(this.scene, t, e);
      return this.scene.add.existing(i), i;
    }),
    $(window, 'RexPlugins.UI.ConfirmDialog', QP);
  var tT = Phaser.Utils.Objects.GetValue,
    eT = function (t, e, i) {
      var n = tT(t, 'proportion.'.concat(e), i.proportion),
        s = tT(t, 'align.'.concat(e), 'center'),
        r = tT(t, 'space.'.concat(e), void 0);
      if ('number' == typeof r && i.paddingKey) {
        var o = r;
        (r = {})[i.paddingKey] = o;
      }
      return { proportion: n, align: s, padding: r, expand: tT(t, 'expand.'.concat(e), !0) };
    },
    iT = function (t) {
      return eT(t, 'header', { proportion: 0, paddingKey: 'bottom' });
    },
    nT = function (t) {
      return eT(t, 'leftSide', { proportion: 0, paddingKey: 'right' });
    },
    sT = function (t) {
      return eT(t, 'content', { proportion: 1 });
    },
    rT = function (t) {
      return eT(t, 'rightSide', { proportion: 0, paddingKey: 'left' });
    },
    oT = function (t) {
      return eT(t, 'footer', { proportion: 0, paddingKey: 'top' });
    },
    aT = function (t, e) {
      var i = new cx(t, { orientation: e });
      return t.add.existing(i), i;
    },
    hT = Phaser.Utils.Objects.GetValue,
    lT = [
      function (t) {
        var e = this.scene,
          i = t.header;
        i && this.add(i, iT(t));
        var n = aT(e, 0);
        this.add(n, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var s = t.leftSide;
        s && n.add(s, nT(t));
        var r = t.content;
        r && n.add(r, sT(t));
        var o = t.rightSide;
        o && n.add(o, rT(t));
        var a = t.footer;
        a && this.add(a, oT(t));
      },
      function (t) {
        var e = this.scene,
          i = t.header;
        i && this.add(i, iT(t));
        var n = aT(e, 0);
        this.add(n, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var s = t.leftSide;
        s && n.add(s, nT(t));
        var r = aT(e, 1);
        n.add(r, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var o = aT(e, 0);
        r.add(o, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var a = t.content;
        a && o.add(a, sT(t));
        var h = t.rightSide;
        h && o.add(h, rT(t));
        var l = t.footer;
        l && r.add(l, oT(t));
      },
      function (t) {
        var e = this.scene,
          i = t.header;
        i && this.add(i, iT(t));
        var n = aT(e, 0);
        this.add(n, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var s = aT(e, 1);
        n.add(s, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var r = aT(e, 0);
        s.add(r, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var o = t.leftSide;
        o && r.add(o, nT(t));
        var a = t.content;
        a && r.add(a, sT(t));
        var h = t.footer;
        h && s.add(h, oT(t));
        var l = t.rightSide;
        l && n.add(l, rT(t));
      },
      function (t) {
        var e = this.scene,
          i = t.header;
        i && this.add(i, iT(t));
        var n = aT(e, 0);
        this.add(n, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var s = t.leftSide;
        s && n.add(s, nT(t));
        var r = aT(e, 1);
        n.add(r, { proportion: 1, align: 'center', padding: 0, expand: !0 });
        var o = t.content;
        o && r.add(o, sT(t));
        var a = t.footer;
        a && r.add(a, oT(t));
        var h = t.rightSide;
        h && n.add(h, rT(t));
      },
    ],
    uT = { FFF: 0, LFF: 1, FFR: 2, LFR: 3 },
    cT = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          void 0 === n && (n = {}),
          (n.orientation = 1),
          ((s = e.call(this, t, n)).type = 'rexHolyGrail'),
          s.build(n),
          s
        );
      }
      return a(i);
    })(cx),
    dT = {
      build: function (t) {
        this.clear(!0);
        var e = hT(t, 'background', void 0);
        e && this.addBackground(e);
        var i = hT(t, 'layoutMode', 0);
        'string' == typeof i && (i = uT[i.toUpperCase()]),
          (lT[i] || lT[0]).call(this, t),
          this.addChildrenMap('background', t.background),
          this.addChildrenMap('header', t.header),
          this.addChildrenMap('leftSide', t.leftSide),
          this.addChildrenMap('content', t.content),
          this.addChildrenMap('rightSide', t.rightSide),
          this.addChildrenMap('footer', t.footer);
      },
    };
  Object.assign(cT.prototype, dT),
    M.register('holyGrail', function (t) {
      var e = new cT(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.HolyGrail', cT);
  var fT = {
      getButtonsSizer: function (t) {
        return this.childrenMap[''.concat(t, 'ButtonsSizer')];
      },
      getButton: function (t, e) {
        var i = this.getButtonsSizer(t);
        return i ? i.getButton(e) : void 0;
      },
      setButtonEnable: function (t, e, i) {
        return this.getButtonsSizer(t).setButtonEnable(e, i), this;
      },
      setLeftButtonEnable: function (t, e) {
        return this.childrenMap.leftButtonsSizer.setButtonEnable(t, e), this;
      },
      setRightButtonEnable: function (t, e) {
        return this.childrenMap.rightButtonsSizer.setButtonEnable(t, e), this;
      },
      setTopButtonEnable: function (t, e) {
        return this.childrenMap.topButtonsSizer.setButtonEnable(t, e), this;
      },
      setBottomButtonEnable: function (t, e) {
        return this.childrenMap.bottomButtonsSizer.setButtonEnable(t, e), this;
      },
      toggleButtonEnable: function (t, e) {
        return this.getButtonsSizer(t).toggleButtonEnable(e), this;
      },
      toggleLeftButtonEnable: function (t) {
        return this.childrenMap.leftButtonsSizer.toggleButtonEnable(t), this;
      },
      toggleRightButtonEnable: function (t) {
        return this.childrenMap.rightButtonsSizer.toggleButtonEnable(t), this;
      },
      toggleTopButtonEnable: function (t) {
        return this.childrenMap.topButtonsSizer.toggleButtonEnable(t), this;
      },
      toggleBottomButtonEnable: function (t) {
        return this.childrenMap.bottomButtonsSizer.toggleButtonEnable(t), this;
      },
      getButtonEnable: function (t, e) {
        return this.getButtonsSizer(t).getButtonEnable(e);
      },
      getLeftButtonEnable: function (t) {
        return this.childrenMap.leftButtonsSizer.getButtonEnable(t);
      },
      getRightButtonEnable: function (t) {
        return this.childrenMap.rightButtonsSizer.getButtonEnable(t);
      },
      getTopButtonEnable: function (t) {
        return this.childrenMap.topButtonsSizer.getButtonEnable(t);
      },
      getBottomButtonEnable: function (t) {
        return this.childrenMap.bottomButtonsSizer.getButtonEnable(t);
      },
      emitButtonClick: function (t, e) {
        var i = this.getButtonsSizer(t);
        return i ? (i.emitButtonClick(e), this) : this;
      },
      emitLeftButtonClick: function (t) {
        return this.childrenMap.leftButtonsSizer.emitButtonClick(t), this;
      },
      emitRightButtonClick: function (t) {
        return this.childrenMap.rightButtonsSizer.emitButtonClick(t), this;
      },
      emitTopButtonClick: function (t) {
        return this.childrenMap.topButtonsSizer.emitButtonClick(t), this;
      },
      emitBottomButtonClick: function (t) {
        return this.childrenMap.bottomButtonsSizer.emitButtonClick(t), this;
      },
      getLeftButton: function (t) {
        return this.childrenMap.leftButtonsSizer.getButton(t);
      },
      getRightButton: function (t) {
        return this.childrenMap.rightButtonsSizer.getButton(t);
      },
      getTopButton: function (t) {
        return this.childrenMap.topButtonsSizer.getButton(t);
      },
      getBottomButton: function (t) {
        return this.childrenMap.bottomButtonsSizer.getButton(t);
      },
      showButton: function (t, e) {
        return Xv(this.getButton(t, e)), this;
      },
      showLeftButton: function (t) {
        return Xv(this.getLeftButton(t)), this;
      },
      showRightButton: function (t) {
        return Xv(this.getRightButton(t)), this;
      },
      showTopButton: function (t) {
        return Xv(this.getTopButton(t)), this;
      },
      showBottomButton: function (t) {
        return Xv(this.getBottomButton(t)), this;
      },
      hideButton: function (t, e) {
        return Gv(this.getButton(t, e)), this;
      },
      hideLeftButton: function (t) {
        return Gv(this.getLeftButton(t)), this;
      },
      hideRightButton: function (t) {
        return Gv(this.getRightButton(t)), this;
      },
      hideTopButton: function (t) {
        return Gv(this.getTopButton(t)), this;
      },
      hideBottomButton: function (t) {
        return Gv(this.getBottomButton(t)), this;
      },
      addButton: function (t, e) {
        return this.getButtonsSizer(t).addButton(e), this;
      },
      addLeftButton: function (t) {
        return this.addButton('left', t), this;
      },
      addRightButton: function (t) {
        return this.addButton('right', t), this;
      },
      addTopButton: function (t) {
        return this.addButton('top', t), this;
      },
      removeButton: function (t, e, i) {
        return this.getButtonsSizer(t).removeButton(e, i), this;
      },
      removeLeftButton: function (t, e) {
        return this.removeButton('left', t, e), this;
      },
      removeRightButton: function (t, e) {
        return this.removeButton('right', t, e), this;
      },
      removeTopButton: function (t, e) {
        return this.removeButton('top', t, e), this;
      },
      removeBottomButton: function (t, e) {
        return this.removeButton('bottom', t, e), this;
      },
      clearButtons: function (t, e) {
        return this.getButtonsSizer(t).clearButtons(e), this;
      },
      clearLeftButtons: function (t) {
        return this.clearButtons('left', t), this;
      },
      clearRightButtons: function (t) {
        return this.clearButtons('right', t), this;
      },
      clearTopButtons: function (t) {
        return this.clearButtons('top', t), this;
      },
      clearBottomButtonss: function (t) {
        return this.clearButtons('bottom', t), this;
      },
      forEachButton: function (t, e, i) {
        return this.getButtonsSizer(t).forEachButtton(e, i), this;
      },
      forEachLeftButton: function (t, e) {
        return this.childrenMap.leftButtonsSizer.forEachButtton(t, e), this;
      },
      forEachRightButton: function (t, e) {
        return this.childrenMap.rightButtonsSizer.forEachButtton(t, e), this;
      },
      forEachTopButton: function (t, e) {
        return this.childrenMap.topButtonsSizer.forEachButtton(t, e), this;
      },
      forEachBottomButton: function (t, e) {
        return this.childrenMap.bottomButtonsSizer.forEachButtton(t, e), this;
      },
    },
    pT = Phaser.Utils.Objects.GetValue,
    vT = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          (n.column = 3),
          (n.row = 3),
          (n.columnProportions = [0, 0, 0]),
          (n.rowProportions = [0, 0, 0]);
        var o = pT(n, 'expand.panel', !1);
        o && ((n.columnProportions[1] = 1), (n.rowProportions[1] = 1)),
          ((s = e.call(this, t, n)).type = 'rexTabs'),
          (s.eventEmitter = pT(n, 'eventEmitter', d(s)));
        var a,
          h,
          l,
          u,
          c = pT(n, 'background', void 0),
          f = pT(n, 'panel', void 0),
          p = pT(n, 'leftButtons', void 0),
          v = pT(n, 'leftButtonsBackground', void 0),
          g = pT(n, 'rightButtons', void 0),
          y = pT(n, 'rightButtonsBackground', void 0),
          k = pT(n, 'topButtons', void 0),
          m = pT(n, 'topButtonsBackground', void 0),
          b = pT(n, 'bottomButtons', void 0),
          x = pT(n, 'bottomButtonsBackground', void 0),
          C = pT(n, 'click', void 0);
        if ((c && s.addBackground(c), f && s.add(f, { column: 1, row: 1, expand: o }), p)) {
          var w = pT(n, 'space.leftButtonsOffset', 0),
            S = pT(n, 'space.leftButton', 0),
            P = pT(n, 'expand.leftButtons', !1),
            T = pT(n, 'align.leftButtons', 'top');
          (a = new Vw(t, {
            groupName: 'left',
            background: v,
            buttons: p,
            orientation: 'y',
            space: { item: S },
            expand: P,
            click: C,
            eventEmitter: s.eventEmitter,
          })),
            s.add(a, { column: 0, row: 1, align: T, padding: { top: w }, expand: P });
        }
        if (g) {
          var O = pT(n, 'space.rightButtonsOffset', 0),
            M = pT(n, 'space.rightButton', 0),
            E = pT(n, 'expand.rightButtons', !1),
            _ = pT(n, 'align.rightButtons', 'top');
          (h = new Vw(t, {
            groupName: 'right',
            background: y,
            buttons: g,
            orientation: 'y',
            space: { item: M },
            expand: E,
            click: C,
            eventEmitter: s.eventEmitter,
          })),
            s.add(h, { column: 2, row: 1, align: _, padding: { top: O }, expand: E });
        }
        if (k) {
          var R = pT(n, 'space.topButtonsOffset', 0),
            L = pT(n, 'space.topButton', 0),
            B = pT(n, 'expand.topButtons', !1),
            D = pT(n, 'align.topButtons', 'left');
          (l = new Vw(t, {
            groupName: 'top',
            background: m,
            buttons: k,
            orientation: 'x',
            space: { item: L },
            expand: B,
            align: pT(n, 'align.topButtons', void 0),
            click: C,
            eventEmitter: s.eventEmitter,
          })),
            s.add(l, { column: 1, row: 0, align: D, padding: { left: R }, expand: B });
        }
        if (b) {
          var I = pT(n, 'space.bottomButtonsOffset', 0),
            j = pT(n, 'space.bottomButton', 0),
            A = pT(n, 'expand.bottomButtons', !1),
            z = pT(n, 'align.bottomButtons', 'left');
          (u = new Vw(t, {
            groupName: 'bottom',
            background: x,
            buttons: b,
            orientation: 'x',
            space: { item: j },
            expand: A,
            align: pT(n, 'align.bottomButtons', void 0),
            click: C,
            eventEmitter: s.eventEmitter,
          })),
            s.add(u, { column: 1, row: 2, align: z, padding: { left: I }, expand: A });
        }
        return (
          s.addChildrenMap('background', c),
          s.addChildrenMap('panel', f),
          s.addChildrenMap('leftButtons', p),
          s.addChildrenMap('rightButtons', g),
          s.addChildrenMap('topButtons', k),
          s.addChildrenMap('bottomButtons', b),
          s.addChildrenMap('leftButtonsSizer', a),
          s.addChildrenMap('rightButtonsSizer', h),
          s.addChildrenMap('topButtonsSizer', l),
          s.addChildrenMap('bottomButtonsSizer', u),
          s
        );
      }
      return a(i);
    })(pC);
  Object.assign(vT.prototype, fT),
    M.register('tabs', function (t) {
      var e = new vT(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Tabs', vT),
    M.register('slider', function (t) {
      var e = new tP(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Slider', tP);
  var gT = (function () {
    function t(e, i) {
      r(this, t), (this.container = null), (this._deltaHeight = 0), this.setParent(e);
    }
    return (
      a(t, [
        {
          key: 'setParent',
          value: function (t) {
            (this.parent = t), (this.parentContainer = t.getParentContainer());
          },
        },
        {
          key: 'destroy',
          value: function (t) {
            void 0 === t && (t = !1),
              t || this.destroyContainer(),
              (this.deltaHeight = 0),
              (this.data = void 0),
              (this.container = null),
              (this.parent = void 0),
              (this.parentContainer = void 0);
          },
        },
        {
          key: 'table',
          get: function () {
            return this.parent;
          },
        },
        {
          key: 'scrollMode',
          get: function () {
            return this.parentContainer.scrollMode;
          },
        },
        {
          key: 'colIndx',
          get: function () {
            return this.parent.cellIndxeToColIndex(this.index);
          },
        },
        {
          key: 'rowIndx',
          get: function () {
            return this.parent.cellIndxeToRowIndex(this.index);
          },
        },
        {
          key: 'getContainer',
          value: function () {
            return this.container;
          },
        },
        {
          key: 'setContainer',
          value: function (t) {
            return t
              ? (this.container && this.container.destroy(), (this.container = t), this.parentContainer.add(t), this)
              : (this.destroyContainer(), this);
          },
        },
        {
          key: 'destroyContainer',
          value: function () {
            return this.container && (this.container.destroy(), (this.container = null)), this;
          },
        },
        {
          key: 'popContainer',
          value: function () {
            if (this.container) {
              var t = this.container;
              return (this.container = null), this.parentContainer.remove(t), t;
            }
            return null;
          },
        },
        {
          key: 'setXY',
          value: function (t, e) {
            return this.container && this.parentContainer.setChildLocalPosition(this.container, t, e), this;
          },
        },
        {
          key: 'setCellContainerAlign',
          value: function (t) {
            return 'string' == typeof t && (t = Zf[t]), (this.cellContainerAlign = t), this;
          },
        },
        {
          key: 'deltaHeight',
          get: function () {
            return this._deltaHeight;
          },
          set: function (t) {
            null == t && (t = 0);
            var e = this.parent;
            0 === this._deltaHeight && 0 !== t
              ? e.nonZeroDeltaHeightCount++
              : 0 !== this._deltaHeight && 0 === t && e.nonZeroDeltaHeightCount--;
            var i = this._deltaHeight !== t;
            if (((this._deltaHeight = t), i)) {
              e.resetTotalRowsHeight();
              var n = 0 === this.scrollMode ? 'cellheightchange' : 'cellwidthchange';
              this.parentContainer.emit(n, this, this.container, this.parentContainer);
            }
          },
        },
        {
          key: 'deltaWidth',
          get: function () {
            return this.deltaHeight;
          },
          set: function (t) {
            this.deltaHeight = t;
          },
        },
        {
          key: 'setDeltaHeight',
          value: function (t) {
            return (this.deltaHeight = t), this;
          },
        },
        {
          key: 'setDeltaWidth',
          value: function (t) {
            return (this.deltaHeight = t), this;
          },
        },
        {
          key: 'height',
          get: function () {
            return 0 === this.scrollMode
              ? this.deltaHeight + this.parent.defaultCellHeight
              : this.parent.defaultCellWidth;
          },
          set: function (t) {
            1 !== this.scrollMode && this.setDeltaHeight(t - this.parent.defaultCellHeight);
          },
        },
        {
          key: 'setHeight',
          value: function (t) {
            return (this.height = t), this;
          },
        },
        {
          key: 'width',
          get: function () {
            return 0 === this.scrollMode
              ? this.parent.defaultCellWidth
              : this.deltaHeight + this.parent.defaultCellHeight;
          },
          set: function (t) {
            0 !== this.scrollMode && this.setDeltaHeight(t - this.parent.defaultCellHeight);
          },
        },
        {
          key: 'setWidth',
          value: function (t) {
            return (this.width = t), this;
          },
        },
        {
          key: 'scene',
          get: function () {
            return this.parentContainer.scene;
          },
        },
      ]),
      t
    );
  })();
  Object.assign(gT.prototype, St);
  var yT = Phaser.Utils.Objects.GetValue,
    kT = Phaser.Utils.Array.SpliceOne,
    mT = (function () {
      function t(e, i) {
        r(this, t), (this.parent = e), (this.cells = []), (this.cellPool = new ot()), this.resetFromJSON(i);
      }
      return (
        a(t, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              void 0 === t && (t = {}),
                (this.colCount = void 0),
                (this.nonZeroDeltaHeightCount = 0),
                this.resetTotalRowsHeight();
              var e = t.cellHeight;
              void 0 === e && (e = 30);
              var i = t.cellWidth;
              return (
                void 0 === i && (i = 30),
                this.setDefaultCellHeight(e),
                this.setDefaultCellWidth(i),
                this.initCells(yT(t, 'cellsCount', 0)),
                this.setColumnCount(yT(t, 'columns', 1)),
                this
              );
            },
          },
          {
            key: 'destroy',
            value: function (t) {
              this.cellPool.destroy(), (this.cells = void 0), (this.parent = void 0);
            },
          },
          {
            key: 'defaultCellHeightMode',
            get: function () {
              return 0 === this.nonZeroDeltaHeightCount;
            },
          },
          {
            key: 'setDefaultCellHeight',
            value: function (t) {
              return (this.defaultCellHeight = t), this;
            },
          },
          {
            key: 'setDefaultCellWidth',
            value: function (t) {
              return (this.defaultCellWidth = t), this;
            },
          },
          {
            key: 'initCells',
            value: function (t) {
              var e = this.cells;
              e.length = t;
              for (var i = 0; i < t; i++) e[i] = null;
              return this;
            },
          },
          {
            key: 'insertNewCells',
            value: function (t, e) {
              var i = this.cells;
              if (t === i.length) {
                var n = t + e;
                i.legth = n;
                for (var s = t; s < n; s++) i[s] = null;
              } else {
                var r,
                  o = [];
                o.length = e;
                for (s = 0; s < e; s++) o[s] = null;
                (r = this.cells).splice.apply(r, [t, 0].concat(o));
              }
              return this.resetTotalRowsHeight(), this;
            },
          },
          {
            key: 'removeCells',
            value: function (t, e) {
              for (var i = t + e, n = t; n < i; n++) this.freeCell(n);
              return (
                i === this.cells.length
                  ? (this.cells.length = t)
                  : (1 === e ? kT(this.cells, t) : this.cells.splice(t, e), this.buildCellIndex(t)),
                this.resetTotalRowsHeight(),
                this
              );
            },
          },
          {
            key: 'setColumnCount',
            value: function (t) {
              return (this.colCount = t), this.resetTotalRowsHeight(), this;
            },
          },
          {
            key: 'rowCount',
            get: function () {
              return Math.ceil(this.cells.length / this.colCount);
            },
          },
          {
            key: 'cellsCount',
            get: function () {
              return this.cells.length;
            },
          },
          {
            key: 'isValidCellIdx',
            value: function (t) {
              return t >= 0 && t < this.cells.length;
            },
          },
          {
            key: 'heightToRowIndex',
            value: function (t, e) {
              if ((void 0 === e && (e = 0), 0 === t)) return 0;
              if (this.defaultCellHeightMode) {
                var i = t / this.defaultCellHeight;
                if (1 === e) i = Math.ceil(i);
                else i = Math.floor(i);
                return i;
              }
              var n,
                s = this.rowCount,
                r = t;
              for (i = 0; ; ) {
                if (((n = i >= 0 && i < s), !((r -= this.getRowHeight(i)) > 0 && n))) {
                  if (0 === r) return 2 === e && (i += 1), i;
                  if (1 === e) {
                    var o = i;
                    (n = (i += 1) >= 0 && i < s) || (i = o);
                  }
                  return i;
                }
                i += 1;
              }
            },
          },
          {
            key: 'widthToColIndex',
            value: function (t, e) {
              if (0 === t) return 0;
              var i = t / this.defaultCellWidth;
              return (i = e ? Math.ceil(i) : Math.floor(i));
            },
          },
          {
            key: 'colRowToCellIndex',
            value: function (t, e) {
              return t >= this.colCount ? null : e * this.colCount + t;
            },
          },
          {
            key: 'rowIndexToHeight',
            value: function (t, e) {
              if (this.defaultCellHeightMode) return (e - t + 1) * this.defaultCellHeight;
              for (var i = 0, n = t; n <= e; n++) i += this.getRowHeight(n);
              return i;
            },
          },
          {
            key: 'colIndexToWidth',
            value: function (t, e) {
              return (e - t + 1) * this.defaultCellWidth;
            },
          },
          {
            key: 'getRowHeight',
            value: function (t) {
              var e = this.colCount;
              if (e <= 1) return this.getCellHeight(this.colRowToCellIndex(0, t));
              for (var i, n = 0, s = 0; s < e; s++)
                n < (i = this.getCellHeight(this.colRowToCellIndex(s, t))) && (n = i);
              return n;
            },
          },
          {
            key: 'getColWidth',
            value: function (t) {
              return this.defaultCellWidth;
            },
          },
          {
            key: 'getCellHeight',
            value: function (t) {
              if (!this.isValidCellIdx(t)) return 0;
              var e;
              if (this.defaultCellHeightMode) e = this.defaultCellHeight;
              else {
                var i = this.getCell(t, !1),
                  n = i ? i.deltaHeight : 0;
                e = this.defaultCellHeight + n;
              }
              return e;
            },
          },
          {
            key: 'resetTotalRowsHeight',
            value: function () {
              this._totalRowsHeight = null;
            },
          },
          {
            key: 'totalRowsHeight',
            get: function () {
              return (
                null === this._totalRowsHeight && (this._totalRowsHeight = this.rowIndexToHeight(0, this.rowCount - 1)),
                this._totalRowsHeight
              );
            },
          },
          {
            key: 'totalColumnWidth',
            get: function () {
              return this.colCount * this.defaultCellWidth;
            },
          },
          {
            key: 'cellIndxeToColIndex',
            value: function (t) {
              return t % this.colCount;
            },
          },
          {
            key: 'cellIndxeToRowIndex',
            value: function (t) {
              return Math.floor(t / this.colCount);
            },
          },
          {
            key: 'getCell',
            value: function (t, e) {
              if (!this.isValidCellIdx(t)) return null;
              if ((void 0 === e && (e = !0), null === this.cells[t] && e)) {
                var i = this.newCell(t);
                this.cells[t] = i;
              }
              return this.cells[t];
            },
          },
          {
            key: 'newCell',
            value: function (t) {
              var e = this.cellPool.pop();
              return null === e ? (e = new gT(this)) : e.setParent(this), (e.index = t), e;
            },
          },
          {
            key: 'buildCellIndex',
            value: function (t) {
              void 0 === t && (t = 0);
              for (var e, i = this.cells, n = t, s = i.length; n < s; n++) (e = i[n]) && (e.index = n);
              return this;
            },
          },
          {
            key: 'getParentContainer',
            value: function () {
              return this.parent;
            },
          },
          {
            key: 'freeCell',
            value: function (t) {
              return 'number' == typeof t && (t = this.cells[t]), t ? (t.destroy(), this.cellPool.push(t), this) : this;
            },
          },
        ]),
        t
      );
    })(),
    bT = function (t) {
      return t.hasOwnProperty('geometryMask') ? t.geometryMask : t.bitmapMask;
    },
    xT = Phaser.Geom.Intersects.RectangleToRectangle,
    CT = Phaser.Geom.Rectangle.Overlaps,
    wT = function (t) {
      if (!t.displayList) return !1;
      for (;;) {
        var e = t.rexContainer;
        if (e) {
          if (e.visible) {
            var i = e.parent;
            if (i) {
              t = i;
              continue;
            }
            return !0;
          }
          return !1;
        }
        return t.visible;
      }
    },
    ST = function (t, e) {
      var i = e.top,
        n = e.bottom,
        s = e.left,
        r = e.right,
        o = 0;
      return (
        (o += t.contains(s, i) ? 1 : 0),
        (o += t.contains(s, n) ? 1 : 0),
        (o += t.contains(r, i) ? 1 : 0),
        (o += t.contains(r, n) ? 1 : 0)
      );
    },
    PT = function (t, e, i) {
      e.hasOwnProperty('isRexContainerLite')
        ? ((e.syncChildrenEnable = !1), t.setChildMaskVisible(e, !0), (e.syncChildrenEnable = !0))
        : (e.clearMask && e.clearMask(), t.setChildMaskVisible(e, !0));
    },
    TT = function (t, e, i) {
      e.hasOwnProperty('isRexContainerLite')
        ? ((e.syncChildrenEnable = !1), t.setChildMaskVisible(e, !0), (e.syncChildrenEnable = !0))
        : (e.setMask && e.setMask(i), t.setChildMaskVisible(e, !0));
    },
    OT = function (t, e, i) {
      e.hasOwnProperty('isRexContainerLite')
        ? ((e.syncChildrenEnable = !1), t.setChildMaskVisible(e, !1), (e.syncChildrenEnable = !0))
        : (e.clearMask && e.clearMask(), t.setChildMaskVisible(e, !1));
    },
    MT = Phaser.Utils.Objects.GetValue,
    ET = { update: 0, everyTick: 1 },
    _T = {
      setupChildrenMask: function (t) {
        return (
          !1 === t ||
            (this.setMaskUpdateMode(MT(t, 'updateMode', 0)),
            this.enableChildrenMask(MT(t, 'padding', 0)),
            this.setMaskLayer(MT(t, 'layer', void 0)),
            this.startMaskUpdate()),
          this
        );
      },
      destroyChildrenMask: function () {
        return this.childrenMask
          ? (this.stopMaskUpdate(), this.childrenMask.destroy(), (this.childrenMask = void 0), this)
          : this;
      },
      setMaskUpdateMode: function (t) {
        return 'string' == typeof t && (t = ET[t]), (this.maskUpdateMode = t), this;
      },
      startMaskUpdate: function () {
        this.scene.game.events.on('poststep', this.maskChildren, this);
      },
      stopMaskUpdate: function () {
        this.scene.game.events.off('poststep', this.maskChildren, this);
      },
      enableChildrenMask: function (t) {
        var e = vx.call(this, null, this, 0, t);
        return (this.childrenMask = e.createGeometryMask()), this;
      },
      setMaskChildrenFlag: function (t) {
        return void 0 === t && (t = !0), (this.maskChildrenFlag = t), this;
      },
      setMaskLayer: function (t) {
        return (this.maskLayer = t), this;
      },
      maskChildren: function () {
        return this.childrenMask && this.maskChildrenFlag && 0 !== this.alpha && this.visible
          ? (this.privateRenderLayer
              ? this.privateRenderLayer.setMask(this.childrenMask)
              : this.maskLayer
              ? (this.addToLayer(this.maskLayer), this.maskLayer.setMask(this.childrenMask))
              : (function (t, e, i) {
                  if (e) {
                    void 0 === i && (i = t.getAllChildren());
                    for (var n, s, r = t.getBounds(), o = bT(e), a = 0, h = i.length; a < h; a++)
                      if ((n = i[a]) !== o && wT(n))
                        if (n.getBounds)
                          switch (((s = n.getBounds(s)), ST(r, s))) {
                            case 4:
                              PT(t, n);
                              break;
                            case 0:
                              xT(r, s) || CT(r, s) ? TT(t, n, e) : OT(t, n);
                              break;
                            default:
                              TT(t, n, e);
                          }
                        else TT(t, n, e);
                  }
                })(this, this.childrenMask),
            0 === this.maskUpdateMode && (this.maskChildrenFlag = !1),
            this)
          : this;
      },
      layoutChildrenMask: function () {
        if (!this.childrenMask) return this;
        var t = bT(this.childrenMask);
        return t.setPosition().resize(), this.resetChildPositionState(t), this;
      },
    },
    RT = function (t) {
      var e,
        i = null;
      ((e = t.getContainer())
        ? ((i = e), t.popContainer())
        : this.cellContainersPool &&
          null !== (i = this.cellContainersPool.getFirstDead()) &&
          i.setActive(!0).setVisible(!0),
      this.emit('cellvisible', t, i, this),
      this.cellContainersPool) &&
        ((e = t.getContainer())
          ? null === i
            ? this.cellContainersPool.add(e)
            : i !== e && (this.cellContainersPool.add(e), this.cellContainersPool.killAndHide(i))
          : null !== i && this.cellContainersPool.killAndHide(i));
    },
    LT = function (t) {
      if ((this.emit('cellinvisible', t), this.cellContainersPool)) {
        var e = t.popContainer();
        e && this.cellContainersPool.killAndHide(e);
      }
      t.destroyContainer();
    },
    BT = function () {
      var t = this.preVisibleCells;
      (this.preVisibleCells = this.visibleCells), (this.visibleCells = t), this.visibleCells.clear();
    },
    DT = function (t, e) {
      (e -= this.y + this.topLeftY), (t -= this.x + this.topLeftX);
      var i = this.tableOY - (0 === this.scrollMode ? e : t),
        n = this.tableOX - (0 === this.scrollMode ? t : e),
        s = this.table,
        r = s.heightToRowIndex(-i, 0),
        o = s.widthToColIndex(-n),
        a = s.colRowToCellIndex(o, r);
      return null === a ? null : this.isCellVisible(a) ? a : null;
    },
    IT = Phaser.Math.Clamp,
    jT = {
      setTableOY: function (t) {
        var e = this.table,
          i = this.topTableOY,
          n = this.bottomTableOY,
          s = t > this.topTableOY,
          r = t < this.bottomTableOY;
        this.clampTableOXY &&
          (e.rowCount < e.heightToRowIndex(this.instHeight, 1) ? (t = 0) : s ? (t = i) : r && (t = n));
        return (
          this._tableOY !== t && (this._tableOY = t),
          s && (this.execeedTopState || this.emit('execeedtop', this, t, i)),
          (this.execeedTopState = s),
          r && (this.execeedBottomState || this.emit('execeedbottom', this, t, n)),
          (this.execeedBottomState = r),
          this
        );
      },
      setTableOX: function (t) {
        var e = this.table,
          i = this.leftTableOX,
          n = this.rightTableOX,
          s = t > this.leftTableOX,
          r = t < this.rightTableOX;
        this.clampTableOXY &&
          (e.colCount < e.widthToColIndex(this.instWidth, !0) ? (t = 0) : s ? (t = i) : r && (t = n));
        return (
          this._tableOX !== t && (this._tableOX = t),
          s && (this.execeedLeftState || this.emit('execeedleft', this, t, i)),
          (this.execeedLeftState = s),
          r && (this.execeedRightState || this.emit('execeedright', this, t, n)),
          (this.execeedRightState = r),
          this
        );
      },
      showCells: function () {
        if (0 !== this.cellsCount) {
          var t = this.table;
          this.startRowIndex = Math.max(t.heightToRowIndex(-this.tableOY, 2), 0);
          for (
            var e = this.startRowIndex,
              i = Math.max(t.widthToColIndex(-this.tableOX), 0),
              n = i,
              s = t.colRowToCellIndex(n, e),
              r = this.bottomBound,
              o = this.rightBound,
              a = t.cellsCount - 1,
              h = t.colCount - 1,
              l = this.getCellTLX(n),
              u = l,
              c = this.getCellTLY(e);
            c < r && s <= a;

          ) {
            if (this.table.isValidCellIdx(s)) {
              var d,
                f,
                p = t.getCell(s, !0);
              if (
                (this.visibleCells.set(p),
                this.preVisibleCells.contains(p) || this.showCell(p),
                0 === this.scrollMode ? ((d = u), (f = c)) : ((d = c), (f = u)),
                null == p.cellContainerAlign)
              )
                p.setXY(d, f);
              else {
                var v = p.getContainer();
                xp(v, d, f, p.width, p.height, p.cellContainerAlign), p.setXY(v.x, v.y);
              }
            }
            u < o && n < h
              ? ((u += t.getColWidth(n)), (n += 1))
              : ((u = l), (c += t.getRowHeight(e)), (n = i), (e += 1)),
              (s = t.colRowToCellIndex(n, e));
          }
        }
      },
      showCell: RT,
      getCellTLX: function (t) {
        var e = 0 === this.scrollMode ? this.topLeftX : this.topLeftY;
        return this.tableOX + this.table.colIndexToWidth(0, t - 1) + e;
      },
      getCellTLY: function (t) {
        var e = 0 === this.scrollMode ? this.topLeftY : this.topLeftX;
        return this.tableOY + this.table.rowIndexToHeight(0, t - 1) + e;
      },
      hideCells: function () {
        var t = this.preVisibleCells,
          e = this.visibleCells;
        t.iterate(function (t) {
          e.contains(t) || this.hideCell(t);
        }, this);
      },
      hideCell: LT,
      updateTable: function (t) {
        return (
          void 0 === t && (t = !1),
          t && (BT.call(this), this.hideCells()),
          BT.call(this),
          this.showCells(),
          this.hideCells(),
          this.setMaskChildrenFlag(),
          this
        );
      },
      isCellVisible: function (t) {
        var e = this.table.getCell(t, !1);
        return e && this.visibleCells.contains(e);
      },
      pointToCellIndex: DT,
      pointToCellContainer: function (t, e) {
        var i = DT.call(this, t, e);
        if (null !== i) return this.getCellContainer(i);
      },
      eachVisibleCell: function (t, e) {
        return this.visibleCells.each(t, e), this;
      },
      iterateVisibleCell: function (t, e) {
        return this.visibleCells.iterate(t, e), this;
      },
      eachCell: function (t, e) {
        return this.table.cells.slice().forEach(t, e), this;
      },
      iterateCell: function (t, e) {
        return this.table.cells.forEach(t, e), this;
      },
      setCellsCount: function (t) {
        var e = this.cellsCount;
        return e === t || (e > t ? this.removeCells(t, e - t) : this.insertNewCells(e, t - e)), this;
      },
      insertNewCells: function (t, e) {
        return (
          'object' === n(t) && (t = t.index),
          void 0 === e && (e = 1),
          e <= 0 || ((t = IT(t, 0, this.cellsCount)), this.table.insertNewCells(t, e)),
          this
        );
      },
      removeCells: function (t, e) {
        if (('object' === n(t) && (t = t.index), void 0 === e && (e = 1), t < 0 && ((e += t), (t = 0)), e <= 0))
          return this;
        if (t > this.cellsCount) return this;
        for (var i, s = t, r = t + e; s < r; s++)
          (i = this.getCell(s, !1)) &&
            (this.visibleCells.contains(i) && (LT.call(this, i), this.visibleCells.delete(i)),
            this.preVisibleCells.delete(i));
        return this.table.removeCells(t, e), this;
      },
      setColumnCount: function (t) {
        return this.table.colCount === t || this.table.setColumnCount(t), this;
      },
      setGridSize: function (t, e) {
        return this.setCellsCount(t * e), this.table.setColumnCount(t), this;
      },
      updateVisibleCell: function (t) {
        var e = this.table.getCell(t, !1);
        return e && e.container ? (RT.call(this, e), this) : this;
      },
    };
  Object.assign(jT, _T);
  var AT = Phaser.GameObjects.Group,
    zT = Phaser.Structs.Set,
    FT = Phaser.Utils.Objects.GetValue,
    VT = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          void 0 === h && (h = {}),
          ((l = e.call(this, t, n, s, o, a)).type = 'rexGridTable'),
          (l._tableOX = 0),
          (l._tableOY = 0),
          (l.visibleCells = new zT()),
          (l.preVisibleCells = new zT()),
          (l.execeedTopState = !1),
          (l.execeedBottomState = !1),
          (l.execeedLeftState = !1),
          (l.execeedRightState = !1),
          FT(h, 'reuseCellContainer', !1) && (l.cellContainersPool = new AT(t));
        var u,
          c,
          f,
          p = FT(h, 'cellVisibleCallback', null);
        if (null !== p) {
          var v = FT(h, 'cellVisibleCallbackScope', void 0);
          l.on('cellvisible', p, v);
        }
        if (null !== (p = FT(h, 'cellInvisibleCallback', null))) {
          v = FT(h, 'cellInvisibleCallbackScope', void 0);
          l.on('cellinvisible', p, v);
        }
        FT(h, 'enableLayer', !1) && l.enableLayer(),
          l.setupChildrenMask(FT(h, 'mask', void 0)),
          l.setScrollMode(FT(h, 'scrollMode', 0)),
          l.setClampMode(FT(h, 'clamplTableOXY', !0));
        var g = 0 === l.scrollMode;
        (g
          ? ((u = h.cellWidth), (c = h.cellHeight), (f = h.columns))
          : ((u = h.cellHeight), (c = h.cellWidth), (f = FT(h, 'rows', h.columns))),
        f || (f = 1),
        (l.expandCellSize = void 0 === u),
        l.expandCellSize) && (u = (o = g ? l.width : l.height) / f);
        return (h.cellWidth = u), (h.cellHeight = c), (h.columns = f), (l.table = new mT(d(l), h)), l.updateTable(), l;
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.destroyChildrenMask(),
                this.table.destroy(t),
                (this.table = void 0),
                this.cellContainersPool && (this.cellContainersPool.destroy(!0), (this.cellContainersPool = void 0)),
                g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'setScrollMode',
            value: function (t) {
              return 'string' == typeof t && (t = WT[t.toLowerCase()]), (this.scrollMode = t), this;
            },
          },
          {
            key: 'setClampMode',
            value: function (t) {
              return void 0 === t && (t = !0), (this.clampTableOXY = t), this;
            },
          },
          {
            key: 'tableOY',
            get: function () {
              return this._tableOY;
            },
            set: function (t) {
              this.setTableOY(t).updateTable();
            },
          },
          {
            key: 'tableOX',
            get: function () {
              return this._tableOX;
            },
            set: function (t) {
              this.setTableOX(t).updateTable();
            },
          },
          {
            key: 'setTableOXY',
            value: function (t, e) {
              return this.setTableOY(e).setTableOX(t), this;
            },
          },
          {
            key: 'addTableOY',
            value: function (t) {
              return this.setTableOY(this.tableOY + t), this;
            },
          },
          {
            key: 'addTableOX',
            value: function (t) {
              return this.setTableOX(this.tableOX + t), this;
            },
          },
          {
            key: 'addTableOXY',
            value: function (t, e) {
              return this.addTableOY(e).addTableOX(t), this;
            },
          },
          {
            key: 'setTableOYByPercentage',
            value: function (t) {
              return this.setTableOY(-this.tableVisibleHeight * t), this;
            },
          },
          {
            key: 'getTableOYPercentage',
            value: function () {
              var t = this.tableVisibleHeight;
              return 0 === t ? 0 : this.tableOY / -t;
            },
          },
          {
            key: 'setTableOXByPercentage',
            value: function (t) {
              return this.setTableOX(-this.tableVisibleWidth * t), this;
            },
          },
          {
            key: 'getTableOXPercentage',
            value: function () {
              var t = this.tableVisibleWidth;
              return 0 === t ? 0 : this.tableOX / -t;
            },
          },
          {
            key: 't',
            get: function () {
              return this.getTableOYPercentage();
            },
            set: function (t) {
              this.setTableOYByPercentage(t).updateTable();
            },
          },
          {
            key: 's',
            get: function () {
              return this.getTableOXPercentage();
            },
            set: function (t) {
              this.setTableOXByPercentage(t).updateTable();
            },
          },
          {
            key: 'scrollToBottom',
            value: function () {
              if (((this.t = 1), 0 === this.t)) return this;
              do {
                this.t = 1;
              } while (1 !== this.t);
              return this;
            },
          },
          {
            key: 'scrollToRow',
            value: function (t) {
              this.scrollToBottom();
              var e = this.table.rowIndexToHeight(0, t - 1);
              return this.setTableOY(-e).updateTable(), this;
            },
          },
          {
            key: 'scrollToNextRow',
            value: function (t) {
              return void 0 === t && (t = 1), this.scrollToRow(this.startRowIndex + t), this;
            },
          },
          {
            key: 'getCell',
            value: function (t) {
              return this.table.getCell(t, !0);
            },
          },
          {
            key: 'getCellContainer',
            value: function (t) {
              var e,
                i = this.table.getCell(t, !1);
              return i && (e = i.getContainer()), e;
            },
          },
          {
            key: 'cellsCount',
            get: function () {
              return this.table.cellsCount;
            },
          },
          {
            key: 'columnCount',
            get: function () {
              return this.table.colCount;
            },
          },
          {
            key: 'setCellHeight',
            value: function (t, e) {
              return (('number' == typeof t ? this.table.getCell(t, !0) : t).height = e), this;
            },
          },
          {
            key: 'setCellWidth',
            value: function (t, e) {
              return (('number' == typeof t ? this.table.getCell(t, !0) : t).width = e), this;
            },
          },
          {
            key: 'instHeight',
            get: function () {
              return 0 === this.scrollMode ? this.height : this.width;
            },
          },
          {
            key: 'instWidth',
            get: function () {
              return 0 === this.scrollMode ? this.width : this.height;
            },
          },
          {
            key: 'tableHeight',
            get: function () {
              return this.table.totalRowsHeight;
            },
          },
          {
            key: 'tableWidth',
            get: function () {
              return this.table.totalColumnWidth;
            },
          },
          {
            key: 'topTableOY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'bottomTableOY',
            get: function () {
              return -this.tableVisibleHeight;
            },
          },
          {
            key: 'leftTableOX',
            get: function () {
              return 0;
            },
          },
          {
            key: 'rightTableOX',
            get: function () {
              return -this.tableVisibleWidth;
            },
          },
          {
            key: 'tableVisibleHeight',
            get: function () {
              var t = this.tableHeight - this.instHeight;
              return t < 0 && (t = 0), t;
            },
          },
          {
            key: 'tableVisibleWidth',
            get: function () {
              var t = this.tableWidth - this.instWidth;
              return t < 0 && (t = 0), t;
            },
          },
          {
            key: 'bottomLeftY',
            get: function () {
              return -this.displayHeight * this.originY + this.displayHeight;
            },
          },
          {
            key: 'topRightX',
            get: function () {
              return -this.displayWidth * this.originX + this.displayWidth;
            },
          },
          {
            key: 'topLeftX',
            get: function () {
              return -this.displayWidth * this.originX;
            },
          },
          {
            key: 'topLeftY',
            get: function () {
              return -this.displayHeight * this.originY;
            },
          },
          {
            key: 'bottomBound',
            get: function () {
              return 0 === this.scrollMode ? this.bottomLeftY : this.topRightX;
            },
          },
          {
            key: 'rightBound',
            get: function () {
              return 0 === this.scrollMode ? this.topRightX : this.bottomLeftY;
            },
          },
          {
            key: 'resize',
            value: function (t, e) {
              return (
                (this.width === t && this.height === e) ||
                  (g(u(i.prototype), 'resize', this).call(this, t, e),
                  this.expandCellSize && this.table.setDefaultCellWidth(this.instWidth / this.table.colCount),
                  this.updateTable(!0),
                  this.layoutChildrenMask(),
                  this.maskChildren()),
                this
              );
            },
          },
        ]),
        i
      );
    })(Kf);
  Object.assign(VT.prototype, jT);
  var WT = { v: 0, vertical: 0, h: 1, horizontal: 1 },
    YT = function (t) {
      t.on(
        'cellvisible',
        function (t, e, i) {
          var n = this.createCellContainerCallback,
            s = this.createCellContainerCallbackScope;
          (t.item = this.items[t.index]),
            (t.items = this.items),
            (e = s ? n.call(s, t, e, i) : n(t, e, i)) &&
              (null == t.cellContainerAlign && e.setOrigin && e.setOrigin(0), e.isRexSizer && e.layout()),
            (t.item = void 0),
            (t.items = void 0),
            t.setContainer(e);
        },
        this
      );
    },
    XT = function (t, e, i, n, s, r, o) {
      var a;
      if (null != (a = void 0 === s ? n : i.pointToCellIndex(n, s))) {
        var h = i.getCellContainer(a);
        h && t.emit(e, h, a, r, o);
      }
    },
    GT = function (t, e) {
      t.on(
        'pointerdown',
        function (e, i, n, s) {
          XT(this.eventEmitter, 'cell.down', t, e.worldX, e.worldY, e, s);
        },
        this
      ).on(
        'pointerup',
        function (e, i, n, s) {
          XT(this.eventEmitter, 'cell.up', t, e.worldX, e.worldY, e, s);
        },
        this
      );
    },
    HT = function (t, e) {
      t.on('pointermove', UT, this).on('pointerover', UT, this).on('pointerout', NT, this);
    },
    UT = function (t, e, i, n) {
      var s = this.childrenMap.child,
        r = s.pointToCellIndex(t.worldX, t.worldY);
      if (r !== s.input.lastOverCellIndex) {
        var o = s.input.lastOverCellIndex;
        (s.input.lastOverCellIndex = r),
          XT(this.eventEmitter, 'cell.out', s, o, void 0, t, n),
          XT(this.eventEmitter, 'cell.over', s, r, void 0, t, n);
      }
    },
    NT = function (t, e) {
      var i = this.childrenMap.child,
        n = i.input.lastOverCellIndex;
      (i.input.lastOverCellIndex = void 0), XT(this.eventEmitter, 'cell.out', i, n, void 0, t, e);
    },
    KT = Phaser.Utils.Objects.GetValue,
    JT = function (t, e) {
      var i = KT(e, 'click', void 0);
      !1 !== i &&
        (void 0 === i && (i = {}),
        (i.threshold = 10),
        (t._click = new gc(t, i)),
        t._click.on(
          'click',
          function (t, e, i, n) {
            XT(this.eventEmitter, 'cell.click', e, i.worldX, i.worldY, i, n);
          },
          this
        ));
    },
    qT = Phaser.Utils.Objects.GetValue,
    ZT = function (t, e) {
      var i = qT(e, 'tap', void 0);
      !1 !== i &&
        ((t._tap = new ky(t, i)),
        t._tap.on(
          'tap',
          function (t, e, i) {
            var n = 'cell.'.concat(t.tapsCount, 'tap');
            XT(this.eventEmitter, n, t.gameObject, t.worldX, t.worldY, i);
          },
          this
        ));
    },
    $T = Phaser.Utils.Objects.GetValue,
    QT = function (t, e) {
      var i = $T(e, 'press', void 0);
      !1 !== i &&
        ((t._press = new wy(t, i)),
        t._press
          .on(
            'pressstart',
            function (e, i, n) {
              XT(this.eventEmitter, 'cell.pressstart', t, e.worldX, e.worldY, n);
            },
            this
          )
          .on(
            'pressend',
            function (e, i, n) {
              XT(this.eventEmitter, 'cell.pressend', t, e.worldX, e.worldY, n);
            },
            this
          ));
    },
    tO = Phaser.Utils.Objects.GetValue,
    eO = function (t, e) {
      var i = tO(e, 'swipe', void 0);
      !1 !== i &&
        (void 0 === i && (i = {}),
        (i.dir = '4dir'),
        (t._swipe = new Fy(t, i)),
        t._swipe.on(
          'swipe',
          function (e, i, n) {
            var s = e.left ? 'left' : e.right ? 'right' : e.up ? 'up' : 'down';
            XT(this.eventEmitter, 'cell.swipe'.concat(s), t, e.worldX, e.worldY, n);
          },
          this
        ));
    },
    iO = function (t, e) {
      t.setInteractive(),
        GT.call(this, t, e),
        HT.call(this, t, e),
        JT.call(this, t, e),
        ZT.call(this, t, e),
        QT.call(this, t, e),
        eO.call(this, t, e);
    },
    nO = Phaser.Utils.Objects.GetValue,
    sO = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = OS(n),
          a = nO(n, 'table', void 0);
        void 0 === a && (a = {}), (a.scrollMode = 2 === o ? 0 : o), (a.clamplTableOXY = nO(n, 'clamplChildOY', !1));
        var h,
          l,
          u = nO(a, 'width', void 0),
          c = nO(a, 'height', void 0),
          f = new VT(t, 0, 0, u, c, a);
        t.add.existing(f),
          0 === a.scrollMode ? ((h = void 0 === u), (l = void 0 === c)) : ((h = void 0 === c), (l = void 0 === u)),
          (function (t) {
            Object.defineProperty(t, 'childOY', {
              configurable: !0,
              get: function () {
                return t.tableOY;
              },
              set: function (e) {
                t.tableOY = e;
              },
            }),
              Object.defineProperty(t, 'childOX', {
                configurable: !0,
                get: function () {
                  return t.tableOX;
                },
                set: function (e) {
                  t.tableOX = e;
                },
              }),
              Object.defineProperty(t, 'topChildOY', {
                get: function () {
                  return t.topTableOY;
                },
              }),
              Object.defineProperty(t, 'bottomChildOY', {
                get: function () {
                  return t.bottomTableOY;
                },
              }),
              Object.defineProperty(t, 'leftChildOX', {
                get: function () {
                  return t.leftTableOX;
                },
              }),
              Object.defineProperty(t, 'rightChildOX', {
                get: function () {
                  return t.rightTableOX;
                },
              }),
              Object.defineProperty(t, 'childVisibleHeight', {
                get: function () {
                  return t.instHeight;
                },
              }),
              Object.defineProperty(t, 'childHeight', {
                get: function () {
                  return t.tableHeight;
                },
              }),
              Object.defineProperty(t, 'childVisibleWidth', {
                get: function () {
                  return t.instWidth;
                },
              }),
              Object.defineProperty(t, 'childWidth', {
                get: function () {
                  return t.tableWidth;
                },
              });
          })(f),
          (f._minWidth = void 0 === u ? 0 : void 0),
          (f._minHeight = void 0 === c ? 0 : void 0),
          (n.type = 'rexGridTable'),
          (n.child = { gameObject: f, expandWidth: h, expandHeight: l });
        var p = nO(n, 'space', void 0);
        p && (p.child = nO(p, 'table', 0)),
          (s = e.call(this, t, n)).addChildrenMap('table', f),
          s.addChildrenMap('tableLayer', f.maskLayer),
          (s.eventEmitter = nO(n, 'eventEmitter', d(s)));
        var v = nO(n, 'createCellContainerCallback', j),
          g = nO(n, 'createCellContainerCallbackScope', void 0);
        s.setCreateCellContainerCallback(v, g), YT.call(d(s), f), (s.resizeControllerFlag = !1);
        var y = 0 === o ? 'cellheightchange' : 'cellwidthchange';
        return (
          f.on(
            y,
            function () {
              this.resizeControllerFlag = !0;
            },
            d(s)
          ),
          nO(a, 'interactive', !0) && iO.call(d(s), f, a),
          s.setItems(nO(n, 'items', [])),
          t.game.events.on('poststep', s.onPostStep, d(s)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.scene.game.events.off('poststep', this.onPostStep, this),
                g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'setCreateCellContainerCallback',
            value: function (t, e) {
              return (this.createCellContainerCallback = t), (this.createCellContainerCallbackScope = e), this;
            },
          },
          {
            key: 'refresh',
            value: function () {
              return this.setItems(this.items), this;
            },
          },
          {
            key: 'getCell',
            value: function (t) {
              return this.childrenMap.child.getCell(t);
            },
          },
          {
            key: 'getCellContainer',
            value: function (t) {
              return this.childrenMap.child.getCellContainer(t);
            },
          },
          {
            key: 'updateVisibleCell',
            value: function (t) {
              return this.childrenMap.child.updateVisibleCell(t);
            },
          },
          {
            key: 'onPostStep',
            value: function () {
              this.resizeControllerFlag && (this.resizeController(), (this.resizeControllerFlag = !1));
            },
          },
          {
            key: 'startRowIndex',
            get: function () {
              return this.childrenMap.child.startRowIndex;
            },
          },
        ]),
        i
      );
    })(EP),
    rO = {
      setItems: function (t) {
        this.items = void 0 === t ? [] : t;
        var e = this.childrenMap.child;
        return e.setCellsCount(this.items.length), e.updateTable(!0), this.resizeController(), this;
      },
    };
  Object.assign(
    sO.prototype,
    {
      scrollToRow: function (t) {
        return this.childrenMap.child.scrollToRow(t), this;
      },
      scrollToNextRow: function (t) {
        return this.childrenMap.child.scrollToNextRow(t), this;
      },
    },
    rO
  ),
    M.register('gridTable', function (t) {
      var e = new sO(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.GridTable', sO);
  var oO = function (t, e) {
      return t.sameOrientation ? (t.orientation = e.orientation) : (t.orientation = 0 === e.orientation ? 1 : 0), t;
    },
    aO = function (t, e) {
      t.popUp(oO(t.root.easeIn, t));
    },
    hO = function (t, e) {
      t.scaleDown(oO(t.root.easeOut, t));
    },
    lO = {
      setTransitInCallback: function (t) {
        return void 0 === t && (t = aO), (this.transitInCallback = t), this;
      },
      setTransitOutCallback: function (t) {
        return void 0 === t && (t = hO), (this.transitOutCallback = t), this;
      },
    },
    uO = {
      delayCall: function (t, e, i) {
        return (
          (this.timer = (function (t, e, i, n, s) {
            var r = ho(t);
            return r.time.delayedCall(e, function () {
              r.sys.events.once('postupdate', function () {
                i.call(n, s);
              });
            });
          })(this, t, e, i)),
          this
        );
      },
      removeDelayCall: function () {
        return this.timer && (this.timer.remove(!1), (this.timer = void 0)), this;
      },
    },
    cO = {
      expandSubMenu: function (t, e) {
        var i;
        if ((n = this.childrenMap.subMenu) && n.parentButton === t) return this;
        this.collapseSubMenu(), (i = this.root.toggleOrientation ? (0 === this.orientation ? 1 : 0) : this.orientation);
        var n = new this.constructor(this.scene, {
          items: e,
          orientation: i,
          space: this.space,
          createBackgroundCallback: this.root.createBackgroundCallback,
          createBackgroundCallbackScope: this.root.createBackgroundCallbackScope,
          createButtonCallback: this.root.createButtonCallback,
          createButtonCallbackScope: this.root.createButtonCallbackScope,
          easeIn: this.root.easeIn,
          easeOut: this.root.easeOut,
          _rootMenu: this.root,
          _parentMenu: this,
          _parentButton: t,
        });
        return this.pin(n), (this.childrenMap.subMenu = n), this.root.emit('expand', n, t, this), this;
      },
      collapse: function () {
        var t = this.root;
        t.emit('collapse', this, this.parentButton, t);
        var e = t.easeOut.duration;
        return t.transitOutCallback(this, e), this.collapseSubMenu(), this.delayCall(e, this.destroy, this), this;
      },
      collapseSubMenu: function () {
        var t = this.childrenMap.subMenu;
        return void 0 === t || ((this.childrenMap.subMenu = void 0), this.remove(t), t.collapse()), this;
      },
    };
  Object.assign(cO, lO, uO);
  var dO = function (t, e) {
      return (
        'number' == typeof e && (e = { duration: e }),
        e.hasOwnProperty('orientation') && void 0 !== e.orientation
          ? (e.sameOrientation = hx(e.orientation) === t.orientation)
          : (e.sameOrientation = !0),
        (e.destroy = !1),
        e
      );
    },
    fO = function () {
      var t = this.root,
        e = t.easeIn.duration;
      t.transitInCallback(this, e),
        this !== this.root &&
          this.delayCall(
            e,
            function () {
              this.root.emit('popup.complete', this);
            },
            this
          );
    },
    pO = Phaser.Utils.Objects.GetValue,
    vO = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {}), n.hasOwnProperty('orientation') || (n.orientation = 1);
        var o = n._rootMenu,
          a = n._parentMenu,
          h = n._parentButton,
          l = pO(n, 'popup', !0),
          u = pO(n, 'items', void 0),
          c = pO(n, 'createBackgroundCallback', void 0),
          f = pO(n, 'createBackgroundCallbackScope', void 0);
        n.background = (function (t, e, i, n) {
          var s;
          return i && ((e.scene = t), (s = n ? i.call(n, e) : i(e)), (e.scene = void 0)), s;
        })(t, u, c, f);
        var p = pO(n, 'createButtonCallback', void 0),
          v = pO(n, 'createButtonCallbackScope', void 0);
        if (
          ((n.buttons = (function (t, e, i, n) {
            var s,
              r,
              o = [];
            if (e && i)
              for (var a = 0, h = e.length; a < h; a++)
                ((s = e[a]).scene = t), (r = n ? i.call(n, s, a, e) : i(s, a, e)), (s.scene = void 0), o.push(r);
            return o;
          })(t, u, p, v)),
          ((s = e.call(this, t, n)).type = 'rexMenu'),
          (s.items = u),
          (s.root = void 0 === o ? d(s) : o),
          (s.isRoot = s.root === d(s)),
          (s.parentMenu = a),
          (s.parentButton = h),
          (s.timer = void 0),
          s.isRoot)
        ) {
          s.isPopUpMode = l;
          var g = n.bounds;
          void 0 === g && (g = to(t)),
            (s.bounds = g),
            (s.subMenuSide = [s.y < g.centerY ? mO : kO, s.x < g.centerX ? yO : gO]),
            void 0 !== (C = pO(n, 'subMenuSide', void 0)) &&
              ('string' == typeof C && (C = bO[C]), (s.subMenuSide[s.orientation] = C)),
            (s.toggleOrientation = pO(n, 'toggleOrientation', !1)),
            (s.expandEventName = pO(n, 'expandEvent', 'button.click')),
            (s.easeIn = dO(d(s), pO(n, 'easeIn', 0))),
            (s.easeOut = dO(d(s), pO(n, 'easeOut', 0))),
            s.setTransitInCallback(pO(n, 'transitIn')),
            s.setTransitOutCallback(pO(n, 'transitOut')),
            (s.createBackgroundCallback = c),
            (s.createBackgroundCallbackScope = f),
            (s.createButtonCallback = p),
            (s.createButtonCallbackScope = v),
            (s.childrenKey = pO(n, 'childrenKey', 'children')),
            (s._isPassedEvent = !1),
            (s.pointerDownOutsideCollapsing = pO(n, 'pointerDownOutsideCollapsing', !0)),
            s.pointerDownOutsideCollapsing && t.input.on('pointerdown', s.onPointerDownOutside, d(s));
        }
        var y,
          k = 0,
          m = 0;
        if (!s.root.easeIn.sameOrientation) {
          var b = oO(s.root.easeIn, d(s)).orientation,
            x = a ? a.orientation : s.orientation,
            C = s.root.subMenuSide[x];
          0 === b && C === gO && (k = 1), 1 === b && C === kO && (m = 1);
        }
        if ((l && s.setOrigin(k, m).layout(), !s.isRoot))
          switch ((s.setScale(s.root.scaleX, s.root.scaleY), (C = s.root.subMenuSide[a.orientation]))) {
            case gO:
              s.alignTop(h.top).alignRight(h.left);
              break;
            case yO:
              s.alignTop(h.top).alignLeft(h.right);
              break;
            case kO:
              s.alignLeft(h.left).alignBottom(h.top);
              break;
            case mO:
              s.alignLeft(h.left).alignTop(h.bottom);
          }
        return (
          (y = d(s))
            .on(
              y.root.expandEventName,
              function (t, e) {
                if (!this._isPassedEvent) {
                  var i = this.root.childrenKey,
                    n = this.items[e][i];
                  n && this.expandSubMenu(t, n);
                }
              },
              y
            )
            .on(
              'button.click',
              function (t, e, i, n) {
                this !== this.root &&
                  ((this.root._isPassedEvent = !0),
                  this.root.emit('button.click', t, e, i, n),
                  (this.root._isPassedEvent = !1));
              },
              y
            )
            .on(
              'button.over',
              function (t, e, i, n) {
                this !== this.root &&
                  ((this.root._isPassedEvent = !0),
                  this.root.emit('button.over', t, e, i, n),
                  (this.root._isPassedEvent = !1));
              },
              y
            )
            .on(
              'button.out',
              function (t, e, i, n) {
                this !== this.root &&
                  ((this.root._isPassedEvent = !0),
                  this.root.emit('button.out', t, e, i, n),
                  (this.root._isPassedEvent = !1));
              },
              y
            ),
          l && (s.pushIntoBounds(s.root.bounds), fO.call(d(s))),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.isRoot &&
                  this.pointerDownOutsideCollapsing &&
                  this.scene.input.off('pointerdown', this.onPointerDownOutside, this),
                g(u(i.prototype), 'destroy', this).call(this, t),
                this.removeDelayCall());
            },
          },
          {
            key: 'isInTouching',
            value: function (t) {
              return (
                !!g(u(i.prototype), 'isInTouching', this).call(this, t) ||
                (!!this.childrenMap.subMenu && this.childrenMap.subMenu.isInTouching(t))
              );
            },
          },
          {
            key: 'onPointerDownOutside',
            value: function (t) {
              this.isInTouching(t) || (this.isPopUpMode ? this.collapse() : this.collapseSubMenu());
            },
          },
        ]),
        i
      );
    })(Vw),
    gO = 2,
    yO = 0,
    kO = 3,
    mO = 1,
    bO = { up: kO, down: mO, left: gO, right: yO };
  Object.assign(vO.prototype, cO),
    M.register('menu', function (t) {
      var e = new vO(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Menu', vO);
  var xO = {
      setWrapEnable: function (t) {
        return void 0 === t && (t = !0), (this.listWrapEnable = t), this;
      },
      setCreateButtonCallback: function (t) {
        return (this.listCreateButtonCallback = t), this;
      },
      setCreateListBackgroundCallback: function (t) {
        return (this.listCreateBackgroundCallback = t), this;
      },
      setButtonClickCallback: function (t) {
        return (this.listOnButtonClick = t), this;
      },
      setButtonOverCallback: function (t) {
        return (this.listOnButtonOver = t), this;
      },
      setButtonOutCallback: function (t) {
        return (this.listOnButtonOut = t), this;
      },
      setListExpandDirection: function (t) {
        return 'string' == typeof t && (t = CO[t]), (this.listExpandDirection = t), this;
      },
      setListEaseInDuration: function (t) {
        return void 0 === t && (t = 0), (this.listEaseInDuration = t), this;
      },
      setListEaseOutDuration: function (t) {
        return void 0 === t && (t = 0), (this.listEaseOutDuration = t), this;
      },
      setListTransitInCallback: function (t) {
        return (this.listTransitInCallback = t), this;
      },
      settListTransitOutCallback: function (t) {
        return (this.listTransitOutCallback = t), this;
      },
      setListBounds: function (t) {
        return (this.listBounds = t), this;
      },
      setListWidth: function (t) {
        return (this.listWidth = t), this;
      },
      setListHeight: function (t) {
        return (this.listHeight = t), this;
      },
      setListSize: function (t, e) {
        return this.setListWidth(t).setListHeight(e), this;
      },
      setListAlignmentMode: function (t) {
        return (this.listAlignMode = t), this;
      },
      setListAlignmentSide: function (t) {
        return void 0 === t && (t = ''), (this.listAlignSide = t), this;
      },
      setListSpace: function (t) {
        return void 0 === t && (t = {}), (this.listSpace = t), this;
      },
      setListDraggable: function (t) {
        return void 0 === t && (t = !0), (this.listDraggable = t), this;
      },
    },
    CO = { down: 0, up: 1 },
    wO = function () {
      var t,
        e = this.scene,
        i = this.listCreateBackgroundCallback;
      i && ((t = i.call(this, e)), e.add.existing(t));
      var n = [],
        s = this.listCreateButtonCallback;
      if (s)
        for (var r = this.options, o = 0, a = r.length; o < a; o++) {
          var h = s.call(this, e, r[o], o, r);
          e.add.existing(h), n.push(h);
        }
      var l = this.listWidth;
      void 0 === l && (l = 'text' === this.listAlignMode ? this.getElement('text').width : this.width);
      var u,
        c = this.listHeight;
      return (
        (u = this.listWrapEnable
          ? new nS(e, {
              width: l,
              height: c,
              background: t,
              buttons: n,
              space: this.listSpace,
              draggable: this.listDraggable,
            })
          : new Vw(e, {
              width: l,
              height: c,
              orientation: 'y',
              background: t,
              buttons: n,
              space: this.listSpace,
              draggable: this.listDraggable,
            })),
        e.add.existing(u),
        u
      );
    },
    SO = Phaser.Utils.Objects.GetValue,
    PO = function (t, e) {
      var i = SO(e, 'expandDirection', void 0);
      'string' == typeof i && (i = TO[i]);
      var n,
        s,
        r,
        a,
        h,
        l,
        u = ((r = 'alignTargetX'), Yl((n = e), (s = 'alignTarget')) ? Ct(n, s) : r && Yl(n, r) ? Ct(n, r) : a),
        c = SO(e, 'alignTargetY', u),
        d = SO(e, 'alignOffsetX', 0),
        f = SO(e, 'alignOffsetY', 0),
        p = SO(e, 'alignSide', '').includes('right'),
        v = SO(e, 'bounds'),
        g = 0 === i,
        y = !g && !(1 === i),
        k = p ? 1 : 0,
        m = g || y ? 0 : 1;
      t.setOrigin(k, m),
        (h = p ? u.getTopRight().x : u.getTopLeft().x),
        (l = c.getBottomLeft().y),
        t.setPosition(h + d, l + f);
      var b = v;
      b || (b = to(t.scene)),
        y && t.getBottomLeft().y > b.bottom && ((l = c.getTopLeft().y), t.setOrigin(0, 1).setPosition(h + d, l + f));
    },
    TO = { down: 0, up: 1 },
    OO = Phaser.Utils.Objects.GetValue,
    MO = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          null == n.transitIn &&
            (n.transitIn = function (t, e) {
              rv(t, e, 'y', 'Cubic');
            }),
          null == n.transitOut &&
            (n.transitOut = function (t, e) {
              !(function (t, e, i, n, s) {
                void 0 === n && (n = 'Linear');
                var r = { mode: 0 };
                switch (i) {
                  case 0:
                  case 'x':
                    r.end = { x: 0 };
                    break;
                  case 1:
                  case 'y':
                    r.end = { y: 0 };
                    break;
                  default:
                    r.end = 0;
                }
                (r.duration = e), (r.ease = n), void 0 === s ? (s = new nv(t, r)) : s.resetFromJSON(r), s.restart();
              })(t, e, 'y', 'Linear');
            }),
          (n.manualClose = !0),
          (n.clickOutsideClose = !0),
          (n.destroy = !0),
          (s = e.call(this, t, n)),
          PO(t, n),
          t.isRexSizer && t.layout();
        var o = OO(n, 'touchOutsideClose', !1),
          a = OO(n, 'anyTouchClose', !1);
        return (
          a && (o = !1),
          a ? s.once('open', s.anyTouchClose, d(s)) : o && s.once('open', s.touchOutsideClose, d(s)),
          s.requestOpen(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown ||
                (this.scene.input.off('pointerup', this.touchCloseCallback, this),
                g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'touchOutsideClose',
            value: function () {
              return (
                this.scene.input.on('pointerup', this.touchCloseCallback, this), (this.clickOutsideTest = !0), this
              );
            },
          },
          {
            key: 'anyTouchClose',
            value: function () {
              return this.scene.input.once('pointerup', this.touchCloseCallback, this), this;
            },
          },
          {
            key: 'touchCloseCallback',
            value: function (t) {
              (this.clickOutsideTest && wg(this.parent, t.worldX, t.worldY)) || this.requestClose();
            },
          },
          {
            key: 'onOpen',
            value: function () {
              this.emit('open', this.parent, this), g(u(i.prototype), 'onOpen', this).call(this);
            },
          },
          {
            key: 'onClose',
            value: function () {
              this.emit('close', this.parent, this), g(u(i.prototype), 'onClose', this).call(this);
            },
          },
        ]),
        i
      );
    })(ug),
    EO = {
      openListPanel: function () {
        if (this.listPanel) return this;
        var t,
          e = wO.call(this);
        e
          .on(
            'button.over',
            function (t, i, n, s) {
              this.listOnButtonOver && this.listOnButtonOver.call(this, t, i, n, s),
                this.emit('button.over', this, e, t, i, n, s);
            },
            this
          )
          .on(
            'button.out',
            function (t, i, n, s) {
              this.listOnButtonOut && this.listOnButtonOut.call(this, t, i, n, s),
                this.emit('button.out', this, e, t, i, n, s);
            },
            this
          ),
          (t = this.listAlignMode && 'label' !== this.listAlignMode ? this.getElement(this.listAlignMode) : this);
        var i = new MO(e, {
          duration: { in: this.listEaseInDuration, out: this.listEaseOutDuration },
          transitIn: this.listTransitInCallback,
          transitOut: this.listTransitOutCallback,
          expandDirection: this.listExpandDirection,
          alignTargetX: t,
          alignTargetY: this,
          alignSide: this.listAlignSide,
          bounds: this.listBounds,
          anyTouchClose: !0,
        })
          .on(
            'open',
            function () {
              e.on(
                'button.click',
                function (t, i, n, s) {
                  this.listOnButtonClick && this.listOnButtonClick.call(this, t, i, n, s),
                    this.emit('button.click', this, e, t, i, n, s);
                },
                this
              ),
                this.emit('list.open', this, e);
            },
            this
          )
          .on(
            'close',
            function () {
              (this.listPanel = void 0), (this.dropDownBehavior = void 0);
            },
            this
          );
        return (this.listPanel = e), (this.dropDownBehavior = i), this.pin(e), this;
      },
      closeListPanel: function () {
        return this.dropDownBehavior ? (this.dropDownBehavior.requestClose(), this) : this;
      },
      toggleListPanel: function () {
        return this.listPanel ? this.closeListPanel() : this.openListPanel(), this;
      },
    };
  Object.assign(EO, xO);
  var _O = Phaser.Utils.Objects.GetValue,
    RO = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          ((s = e.call(this, t, n)).type = 'rexDropDownList'),
          (s.timer = void 0),
          s.setOptions(_O(n, 'options'));
        var o = _O(n, 'list');
        return (
          s.setWrapEnable(_O(o, 'wrap', !1)),
          s.setCreateButtonCallback(_O(o, 'createButtonCallback')),
          s.setCreateListBackgroundCallback(_O(o, 'createBackgroundCallback')),
          s.setButtonClickCallback(_O(o, 'onButtonClick')),
          s.setButtonOverCallback(_O(o, 'onButtonOver')),
          s.setButtonOutCallback(_O(o, 'onButtonOut')),
          s.setListExpandDirection(_O(o, 'expandDirection')),
          s.setListEaseInDuration(_O(o, 'easeIn', 500)),
          s.setListEaseOutDuration(_O(o, 'easeOut', 100)),
          s.setListTransitInCallback(_O(o, 'transitIn')),
          s.settListTransitOutCallback(_O(o, 'transitOut')),
          s.setListSize(_O(o, 'width'), _O(o, 'height')),
          s.setListAlignmentMode(_O(o, 'alignParent', 'text')),
          s.setListAlignmentSide(_O(o, 'alignSide', '')),
          s.setListBounds(_O(o, 'bounds')),
          s.setListSpace(_O(o, 'space')),
          s.setListDraggable(_O(o, 'draggable', !1)),
          s.setValueChangeCallback(_O(n, 'setValueCallback'), _O(n, 'setValueCallbackScope')),
          s.setValue(_O(n, 'value')),
          s.onClick(s.toggleListPanel, d(s)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.listPanel && (this.listPanel.destroy(t), (this.listPanel = void 0)),
                g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'setOptions',
            value: function (t) {
              return void 0 === t && (t = []), (this.options = t), this;
            },
          },
          {
            key: 'setValueChangeCallback',
            value: function (t, e) {
              return (this.valueChangeCallback = t), (this.valueChangeCallbackScope = e), this;
            },
          },
          {
            key: 'setValue',
            value: function (t) {
              return (this.value = t), this;
            },
          },
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              if (this._value !== t) {
                var e = this._value;
                this._value = t;
                var i = this.valueChangeCallback,
                  n = this.valueChangeCallbackScope;
                i && (n ? i.call(n, this, t, e) : i(this, t, e)), this.emit('valuechange', this, t, e);
              }
            },
          },
          {
            key: 'emitButtonClick',
            value: function (t) {
              var e = this.options[t];
              return e ? (this.emit('button.click', this, void 0, e, t), this) : this;
            },
          },
        ]),
        i
      );
    })(yx);
  Object.assign(RO.prototype, EO),
    M.register('dropDownList', function (t) {
      var e = new RO(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.DropDownList', RO);
  var LO = function (t, e, i) {
      void 0 === i && (i = {});
      var n = (e = e ? _(e) : {}).label || e.button,
        s = e.button || e.label;
      delete e.label, delete e.button;
      var r = i.label || i.button || i,
        o = i.button || i.label || i,
        a = UC(t, n, r);
      return (
        (a.list = e.list || {}),
        (a.list.createButtonCallback = function (t, e) {
          var i = pS(t, s, o).resetDisplayContent(e);
          return e.hasOwnProperty('value') && (i.value = e.value), i;
        }),
        (a.list.onButtonOver = function (t, e, i, n) {
          t.setHoverState && t.setHoverState(!0);
        }),
        (a.list.onButtonOut = function (t, e, i, n) {
          t.setHoverState && t.setHoverState(!1);
        }),
        a
      );
    },
    BO = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s) {
        var o;
        return r(this, i), (n = LO(t, n, s)), ((o = e.call(this, t, n)).type = 'rexSimpleDropDownList'), o;
      }
      return (
        a(i, [
          {
            key: 'setOptions',
            value: function (t) {
              void 0 === t && (t = []);
              for (var e = 0, n = t.length; e < n; e++) {
                var s = t[e];
                'string' == typeof s && (t[e] = { text: s, value: s });
              }
              return g(u(i.prototype), 'setOptions', this).call(this, t), this;
            },
          },
        ]),
        i
      );
    })(RO);
  M.register('simpleDropDownList', function (t, e) {
    var i = new BO(this.scene, t, e);
    return this.scene.add.existing(i), i;
  }),
    $(window, 'RexPlugins.UI.SimpleDropDownList', BO);
  var DO = function (t) {
      return Array.isArray(t) ? (t = t.join('\n')) : 'number' == typeof t && (t = t.toString()), t;
    },
    IO = {
      clearText: function () {
        return (this.sections.length = 0), (this.pageStartIndexes.length = 0), (this.lines.length = 0), this;
      },
      appendPage: function (t) {
        var e = this.totalLinesCount;
        this.sections.push(DO(t));
        t = this.sections.join('\n');
        this.lines = LP(this.parent, t, this.lines);
        for (var i = this.totalLinesCount - e, n = Math.ceil(i / this.pageLinesCount), s = 0; s < n; s++)
          this.pageStartIndexes.push(e + s * this.pageLinesCount);
        return this;
      },
      setText: function (t, e) {
        void 0 === e && (e = !0), e && this.resetPageIdx(), this.clearText();
        for (var i = DO(t).split(this.pageBreak), n = 0, s = i.length; n < s; n++) this.appendPage(i[n]);
        return this;
      },
      appendText: function (t) {
        var e = this.content + DO(t);
        return this.setText(e, !1), this;
      },
    },
    jO = Phaser.Math.Clamp,
    AO = {
      getPage: function (t) {
        return (
          void 0 === t && (t = this.pageIndex), this.setPageIndex(t).getLines(this.startLineIndex, this.endLineIndex)
        );
      },
      getNextPage: function () {
        return this.getPage(this.pageIndex + 1);
      },
      getPreviousPage: function () {
        return this.getPage(this.pageIndex - 1);
      },
      getFirstPage: function () {
        return this.getPage(0);
      },
      getLastPage: function () {
        return this.getPage(this.lastPageIndex);
      },
      resetPageIdx: function () {
        return (this.pageIndex = -1), this;
      },
      setPageIndex: function (t) {
        return (
          (t = jO(t, 0, this.lastPageIndex)),
          (this.pageIndex = t),
          (this.startLineIndex = this.pageStartIndexes[t]),
          (this.endLineIndex = this.pageStartIndexes[t + 1]),
          this
        );
      },
    },
    zO = {
      showPage: function (t) {
        return this.displayText(this.getPage(t)), this;
      },
      showNextPage: function () {
        return this.displayText(this.getNextPage()), this;
      },
      showPreviousPage: function () {
        return this.displayText(this.getPreviousPage()), this;
      },
      showFirstPage: function () {
        return this.displayText(this.getFirstPage()), this;
      },
      showLastPage: function () {
        return this.displayText(this.getLastPage()), this;
      },
      show: function () {
        return this.displayText(this.getLines()), this;
      },
      showNextLine: function () {
        return this.displayText(this.setStartLineIndex(this.startLineIndex + 1).getLines()), this;
      },
      showPreviousLine: function () {
        return this.displayText(this.setStartLineIndex(this.startLineIndex - 1).getLines()), this;
      },
      displayText: function (t) {
        jP(this.parent, t);
      },
    },
    FO = {
      getLines: function (t, e) {
        var i;
        switch (
          (void 0 === t && (t = this.startLineIndex),
          void 0 === e && (e = t + this.pageLinesCount),
          this.textObjectType)
        ) {
          case 0:
          case 2:
            i = this.lines.slice(t, e).join('\n');
            break;
          case 1:
            var n = this.lines.getLineStartIndex(t),
              s = this.lines.getLineEndIndex(e - 1);
            i = this.lines.getSliceTagText(n, s, !0);
        }
        return i;
      },
    };
  Object.assign(FO, IO, AO, zO);
  var VO = Phaser.Utils.Objects.GetValue,
    WO = Phaser.Math.Clamp,
    YO = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, { eventEmitter: !1 })).textObjectType = RP(s.parent)),
          (s.pageStartIndexes = []),
          (s.lines = LP(s.parent, '')),
          (s.sections = []),
          s.resetFromJSON(n),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                this.setMaxLines(VO(t, 'maxLines', void 0)),
                this.setPageBreak(VO(t, 'pageBreak', '\f\n')),
                this.setText(VO(t, 'text', '')),
                this.setStartLineIndex(VO(t, 'start', 0)),
                this.setPageIndex(VO(t, 'page', -1)),
                this
              );
            },
          },
          {
            key: 'toJSON',
            value: function () {
              return {
                maxLines: this.maxLines,
                text: this.content,
                start: this.startLineIndex,
                page: this.pageIndex,
                pageBreak: this.pageBreak,
              };
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              if (!this.isShutdown) {
                switch (this.textObjectType) {
                  case 0:
                  case 2:
                    this.lines.length = 0;
                    break;
                  case 1:
                    this.lines.destroy();
                }
                (this.pageStartIndexes.length = 0),
                  (this.sections.length = 0),
                  (this.lines = void 0),
                  (this.pageStartIndexes = void 0),
                  (this.sections = void 0),
                  g(u(i.prototype), 'shutdown', this).call(this, t);
              }
            },
          },
          {
            key: 'setMaxLines',
            value: function (t) {
              return (this.maxLines = t), this;
            },
          },
          {
            key: 'setPageBreak',
            value: function (t) {
              return (this.pageBreak = t), this;
            },
          },
          {
            key: 'pageCount',
            get: function () {
              return this.pageStartIndexes.length;
            },
          },
          {
            key: 'lastPageIndex',
            get: function () {
              return this.pageCount - 1;
            },
          },
          {
            key: 'isFirstPage',
            get: function () {
              return this.pageIndex <= 0;
            },
          },
          {
            key: 'isLastPage',
            get: function () {
              return this.pageIndex >= this.pageCount - 1;
            },
          },
          {
            key: 'totalLinesCount',
            get: function () {
              return this.lines ? this.lines.length : 0;
            },
          },
          {
            key: 'startLineIndex',
            get: function () {
              return this._startLineIndex;
            },
            set: function (t) {
              (t = WO(t, 0, this.totalLinesCount - 1)), (this._startLineIndex = t);
            },
          },
          {
            key: 'setStartLineIndex',
            value: function (t) {
              return (this.startLineIndex = t), this;
            },
          },
          {
            key: 'pageLinesCount',
            get: function () {
              if (void 0 !== this.maxLines) return this.maxLines;
              var t;
              switch (this.textObjectType) {
                case 0:
                case 1:
                  var e = this.parent.style.maxLines;
                  t =
                    e > 0
                      ? e
                      : Math.floor(
                          (function (t) {
                            var e, i, n;
                            switch (RP(t)) {
                              case 0:
                              case 1:
                                (e = t.height - t.padding.top - t.padding.bottom),
                                  (i = t.lineSpacing),
                                  (n = t.style.metrics.fontSize + t.style.strokeThickness);
                                break;
                              case 2:
                                (e = t.height), (i = 0);
                                var s = t.fontSize / t.fontData.size;
                                n = t.fontData.lineHeight * s;
                            }
                            return (e - i) / (n + i);
                          })(this.parent)
                        );
                  break;
                case 2:
                  t = this.totalLinesCount;
              }
              return t;
            },
          },
          {
            key: 'content',
            get: function () {
              return this.sections.join(this.pageBreak);
            },
          },
        ]),
        i
      );
    })(uo);
  Object.assign(YO.prototype, FO);
  var XO,
    GO = Phaser.Utils.Objects.GetFastValue,
    HO = Phaser.Utils.Objects.GetValue,
    UO = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), ((s = e.call(this, t, n)).timer = null), s.resetFromJSON(n), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              this.setTextWrapEnable(HO(t, 'wrap', !1)),
                this.setTypeMode(HO(t, 'typeMode', 0)),
                this.setTypingSpeed(HO(t, 'speed', 333)),
                (this.setTextCallback = GO(t, 'setTextCallback', null)),
                (this.setTextCallbackScope = GO(t, 'setTextCallbackScope', null)),
                this.setTypingContent(GO(t, 'text', '')),
                (this.typingIdx = GO(t, 'typingIdx', 0)),
                (this.insertIdx = null),
                (this.insertChar = null);
              var e = GO(t, 'elapsed', null);
              return null !== e && this.start(void 0, void 0, this.typingIdx, e), this;
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown || (this.freeTimer(), g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'setTypeMode',
            value: function (t) {
              return 'string' == typeof t && (t = KO[t]), (this.typeMode = t), this;
            },
          },
          {
            key: 'setTypeSpeed',
            value: function (t) {
              return (this.speed = t), this;
            },
          },
          {
            key: 'setTypingSpeed',
            value: function (t) {
              return (this.speed = t), this;
            },
          },
          {
            key: 'setTextWrapEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.textWrapEnable = t), this;
            },
          },
          {
            key: 'text',
            get: function () {
              return this._text;
            },
            set: function (t) {
              var e = NO(t);
              this.textWrapEnable &&
                (e = (function (t, e) {
                  switch (RP(t)) {
                    case 0:
                      t.style.syncFont(t.canvas, t.context), (e = t.runWordWrap(e));
                      break;
                    case 1:
                      e = t.getText(e, void 0, void 0, !0);
                      break;
                    case 2:
                      e = t.setText(e).getTextBounds().wrappedText;
                  }
                  return e;
                })(this.parent, e)),
                (this._text = e);
            },
          },
          {
            key: 'isTyping',
            get: function () {
              return null !== this.getTimer();
            },
          },
          {
            key: 'isLastChar',
            get: function () {
              return this.typingIdx === this.textLen;
            },
          },
          {
            key: 'start',
            value: function (t, e, i, n) {
              return (
                void 0 !== t && this.setTypingContent(t),
                void 0 !== e && (this.speed = e),
                void 0 === i && (i = 0),
                (this.typingIdx = i + 1),
                0 === this.speed ? this.stop(!0) : (this.setText(''), this.startTimer(n)),
                this
              );
            },
          },
          {
            key: 'appendText',
            value: function (t) {
              var e = this.text.concat(NO(t));
              return this.isTyping ? this.setTypingContent(e) : this.start(e, void 0, this.textLen), this;
            },
          },
          {
            key: 'stop',
            value: function (t) {
              if ((this.getTimer() && this.freeTimer(), t)) {
                for (; !this.isLastChar; )
                  this.getTypingString(this.text, this.typingIdx, this.textLen, this.typeMode),
                    this.emit('typechar', this.insertChar),
                    this.typingIdx++;
                this.setText(this.text), this.emit('type'), this.emit('complete', this, this.parent);
              }
              return this;
            },
          },
          {
            key: 'pause',
            value: function () {
              var t = this.getTimer();
              return t && (t.paused = !0), this;
            },
          },
          {
            key: 'resume',
            value: function () {
              var t = this.getTimer();
              return t && (t.paused = !1), this;
            },
          },
          {
            key: 'setTypingContent',
            value: function (t) {
              return (this.text = t), (this.textLen = this.getTextLength(this.text)), this;
            },
          },
          {
            key: 'onTyping',
            value: function () {
              var t = this.getTypingString(this.text, this.typingIdx, this.textLen, this.typeMode);
              this.setText(t),
                this.emit('typechar', this.insertChar),
                this.emit('type'),
                this.isLastChar
                  ? (this.freeTimer(), this.emit('complete', this, this.parent))
                  : ((this.timer.delay = this.speed), this.typingIdx++);
            },
          },
          {
            key: 'getTypingString',
            value: function (t, e, i, n) {
              var s;
              if (0 === n) {
                var r = 0,
                  o = e;
                (this.insertIdx = o), (s = this.getSubString(t, r, o));
              } else if (1 === n) {
                r = (o = i) - e;
                (this.insertIdx = 0), (s = this.getSubString(t, r, o));
              } else if (2 === n) {
                var a = i / 2;
                o = (r = Math.floor(a - e / 2)) + e;
                (this.insertIdx = e % 2 ? e : 0), (s = this.getSubString(t, r, o));
              } else if (3 === n) {
                var h,
                  l = Math.floor(e / 2);
                if (l > 0) {
                  r = (o = i) - l;
                  h = this.getSubString(t, r, o);
                } else h = '';
                var u,
                  c = e - l;
                if (c > 0) {
                  o = (r = 0) + c;
                  (this.insertIdx = o), (u = this.getSubString(t, r, o));
                } else (u = ''), (this.insertIdx = 0);
                s = u + h;
              }
              return (this.insertChar = s.charAt(this.insertIdx - 1)), s;
            },
          },
          {
            key: 'startTimer',
            value: function (t) {
              var e;
              return (
                this.timer && this.freeTimer(),
                void 0 === t ? (e = 0) : (this.speed, (e = t)),
                (this.timer = this.scene.time.addEvent({
                  delay: 1e-4,
                  startAt: e,
                  loop: !0,
                  callback: this.onTyping,
                  callbackScope: this,
                })),
                this
              );
            },
          },
          {
            key: 'getTimer',
            value: function () {
              return this.timer;
            },
          },
          {
            key: 'freeTimer',
            value: function () {
              return this.timer && (this.timer.remove(), (this.timer = null)), this;
            },
          },
          {
            key: 'setText',
            value: function (t) {
              this.setTextCallback &&
                (t = this.setTextCallbackScope
                  ? this.setTextCallback.call(this.setTextCallbackScope, t, this.isLastChar, this.insertIdx)
                  : this.setTextCallback(t, this.isLastChar, this.insertIdx)),
                this.textWrapEnable ? jP(this.parent, t) : this.parent.setText(t);
            },
          },
          {
            key: 'getTextLength',
            value: function (t) {
              var e = this.parent;
              return e.getPlainText ? e.getPlainText(t).length : t.length;
            },
          },
          {
            key: 'getSubString',
            value: function (t, e, i) {
              var n = this.parent;
              return n.getSubString ? n.getSubString(t, e, i) : t.slice(e, i);
            },
          },
        ]),
        i
      );
    })(uo),
    NO = function (t) {
      return Array.isArray(t) ? (t = t.join('\n')) : 'number' == typeof t && (t = t.toString()), t;
    },
    KO = { 'left-to-right': 0, 'right-to-left': 1, 'middle-to-sides': 2, 'sides-to-middle': 3 },
    JO = Phaser.Utils.Objects.GetValue,
    qO = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        return (
          r(this, i), void 0 === n && (n = {}), n.hasOwnProperty('layoutMode') || (n.layoutMode = 1), e.call(this, t, n)
        );
      }
      return a(i);
    })(
      (void 0 === XO && (XO = 'rexTextBox'),
      (function (t) {
        l(i, t);
        var e = p(i);
        function i(t, n) {
          var s;
          r(this, i), ((s = e.call(this, t, n)).type = XO);
          var o = s.childrenMap.text;
          return (
            (s.page = new YO(o, JO(n, 'page', void 0))),
            (s.typing = new UO(o, JO(n, 'typing', n.type))),
            s.typing.on('complete', s.onPageEnd, d(s)).on('type', s.onType, d(s)).on('typechar', s.onTypeChar, d(s)),
            (s.textWidth = o.width),
            (s.textHeight = o.height),
            s
          );
        }
        return (
          a(i, [
            {
              key: 'start',
              value: function (t, e) {
                return (
                  this.page.setText(t),
                  void 0 !== e && this.setTypingSpeed(e),
                  this.emit('start'),
                  this.typeNextPage(),
                  this
                );
              },
            },
            {
              key: 'typeNextPage',
              value: function () {
                if (this.isLastPage) this.emit('complete');
                else {
                  var t = this.page.getNextPage();
                  this.typing.start(t);
                }
                return this;
              },
            },
            {
              key: 'pause',
              value: function () {
                return this.isTyping && (this.typing.pause(), this.emit('pause')), this;
              },
            },
            {
              key: 'resume',
              value: function () {
                return this.isTyping || (this.emit('resume'), this.typing.resume()), this;
              },
            },
            {
              key: 'stop',
              value: function (t) {
                return this.typing.stop(t), this;
              },
            },
            {
              key: 'showLastPage',
              value: function () {
                return this.typing.stop(), this.page.showLastPage(), this.emit('type'), this.onPageEnd(), this;
              },
            },
            {
              key: 'setTypeSpeed',
              value: function (t) {
                return this.typing.setTypingSpeed(t), this;
              },
            },
            {
              key: 'setTypingSpeed',
              value: function (t) {
                return this.typing.setTypingSpeed(t), this;
              },
            },
            {
              key: 'isTyping',
              get: function () {
                return this.typing.isTyping;
              },
            },
            {
              key: 'isLastPage',
              get: function () {
                return this.page.isLastPage;
              },
            },
            {
              key: 'isFirstPage',
              get: function () {
                return this.page.isFirstPage;
              },
            },
            {
              key: 'pageCount',
              get: function () {
                return this.page.pageCount;
              },
            },
            {
              key: 'pageIndex',
              get: function () {
                return this.page.pageIndex;
              },
            },
            {
              key: 'typingSpeed',
              get: function () {
                return this.typing.speed;
              },
            },
            {
              key: 'onType',
              value: function () {
                var t = this.childrenMap.text;
                (this.textWidth === t.width && this.textHeight === t.height) ||
                  ((this.textWidth = t.width), (this.textHeight = t.height), this.getTopmostSizer().layout()),
                  this.emit('type');
              },
            },
            {
              key: 'onTypeChar',
              value: function (t) {
                this.emit('typechar', t);
              },
            },
            {
              key: 'onPageEnd',
              value: function () {
                var t = this.isLastPage;
                this.emit('pageend'), t && this.emit('complete');
              },
            },
          ]),
          i
        );
      })(QC))
    );
  M.register('textBox', function (t) {
    var e = new qO(this.scene, t);
    return this.scene.add.existing(e), e;
  }),
    $(window, 'RexPlugins.UI.TextBox', qO);
  var ZO = Phaser.Utils.Objects.GetValue,
    $O = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).type = 'rexNumberBar');
        var o,
          a = ZO(n, 'background', void 0),
          h = ZO(n, 'icon', void 0),
          l = ZO(n, 'iconMask', void 0),
          u = ZO(n, 'slider', void 0),
          c = ZO(n, 'text', void 0),
          f = ZO(n, 'space.icon', 0),
          p = ZO(n, 'space.slider', 0);
        (a && s.addBackground(a), h) &&
          (0 === s.orientation ? (u || c) && (v = { right: f }) : (u || c) && (v = { bottom: f }),
          s.add(h, { proportion: 0, align: 'center', padding: v }),
          l && (l = vx.call(d(s), h, h, 1)));
        if (u) {
          var v, g;
          if (
            ((u.orientation = s.orientation),
            (u.eventEmitter = d(s)),
            (u.value = null),
            u.hasOwnProperty('input') || (u.input = -1),
            (o = new tP(t, u)),
            t.add.existing(o),
            0 === s.orientation ? c && (v = { right: p }) : c && (v = { bottom: p }),
            0 === s.orientation)
          )
            g = void 0 === ZO(u, 'width', void 0) ? 1 : 0;
          else g = void 0 === ZO(u, 'height', void 0) ? 1 : 0;
          s.add(o, { proportion: g, align: 'center', padding: v });
        }
        c && s.add(c),
          s.addChildrenMap('background', a),
          s.addChildrenMap('icon', h),
          s.addChildrenMap('iconMask', l),
          s.addChildrenMap('slider', o),
          s.addChildrenMap('text', c);
        var y = ZO(n, 'valuechangeCallback', null);
        if (null !== y) {
          var k = ZO(n, 'valuechangeCallbackScope', void 0);
          s.on('valuechange', y, k);
        }
        return s.setEnable(ZO(n, 'enable', void 0)), s.setValue(ZO(n, 'value', 0)), s;
      }
      return (
        a(i, [
          {
            key: 'enable',
            get: function () {
              return !!this.childrenMap.slider && this.childrenMap.slider.enable;
            },
            set: function (t) {
              this.childrenMap.slider && this.childrenMap.slider.setEnable(t);
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'value',
            get: function () {
              return this.childrenMap.slider ? this.childrenMap.slider.value : 0;
            },
            set: function (t) {
              this.childrenMap.slider && (this.childrenMap.slider.value = t);
            },
          },
          {
            key: 'setValue',
            value: function (t, e, i) {
              return this.childrenMap.slider && this.childrenMap.slider.setValue(t, e, i), this;
            },
          },
          {
            key: 'addValue',
            value: function (t, e, i) {
              return this.childrenMap.slider && this.childrenMap.slider.addValue(t, e, i), this;
            },
          },
          {
            key: 'getValue',
            value: function (t, e) {
              return this.childrenMap.slider ? this.childrenMap.slider.getValue(t, e) : 0;
            },
          },
          {
            key: 'easeValueTo',
            value: function (t, e, i) {
              return this.childrenMap.slider && this.childrenMap.slider.easeValueTo(t, e, i), this;
            },
          },
          {
            key: 'stopEaseValue',
            value: function () {
              return this.childrenMap.slider && this.childrenMap.slider.stopEaseValue(), this;
            },
          },
          {
            key: 'setEaseValueDuration',
            value: function (t) {
              return this.childrenMap.slider && this.childrenMap.slider.setEaseValueDuration(t), this;
            },
          },
          {
            key: 'setEaseValueFunction',
            value: function (t) {
              return this.childrenMap.slider && this.childrenMap.slider.setEaseValueFunction(t), this;
            },
          },
          {
            key: 'text',
            get: function () {
              var t = this.childrenMap.text;
              return void 0 === t ? '' : t.text ? t.text : t.getData('text');
            },
            set: function (t) {
              var e = this.childrenMap.text;
              void 0 !== e && (e.setText ? e.setText(t) : e.setData('text', t));
            },
          },
          {
            key: 'setText',
            value: function (t) {
              return (this.text = t), this;
            },
          },
        ]),
        i
      );
    })(cx);
  M.register('numberBar', function (t) {
    var e = new $O(this.scene, t);
    return this.scene.add.existing(e), e;
  }),
    $(window, 'RexPlugins.UI.NumberBar', $O),
    M.register('scrollBar', function (t) {
      var e = new sP(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.ScrollBar', sP);
  var QO = Phaser.Utils.Objects.GetValue,
    tM = {
      leftTop: 'left-top',
      centerTop: 'center-top',
      rightTop: 'right-top',
      leftCenter: 'left-center',
      center: 'center',
      rightCenter: 'right-center',
      leftBottom: 'left-bottom',
      centerBottom: 'center-bottom',
      rightBottom: 'right-bottom',
    },
    eM = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).type = 'rexBadge');
        var o = QO(n, 'background', void 0);
        o && s.addBackground(o), s.addChildrenMap('background', o);
        var a = QO(n, 'main', void 0);
        for (var h in (a && s.add(a, { key: 'main', align: 'center', expand: !1 }), s.addChildrenMap('main', a), tM)) {
          var l = QO(n, h, void 0);
          l && (s.add(l, { key: h, align: tM[h], expand: !1 }), s.addChildrenMap(h, l));
        }
        return s;
      }
      return a(i);
    })(Wk);
  M.register('badgeLabel', function (t) {
    var e = new eM(this.scene, t);
    return this.scene.add.existing(e), e;
  }),
    $(window, 'RexPlugins.UI.BadgeLabel', eM);
  var iM = Wk.prototype.add,
    nM = function (t, e, i, n, s, r, o, a, h) {
      return t.setVisible(!1), iM.call(this, t, e, i, n, s, r, o, a, h), this;
    },
    sM = { add: nM, addPage: nM },
    rM = Kf.prototype.setChildVisible,
    oM = {
      getPage: function (t) {
        return void 0 === t ? null : this.sizerChildren.hasOwnProperty(t) ? this.sizerChildren[t] : null;
      },
      swapPage: function (t, e) {
        this._previousKey = this._currentKey;
        var i = this.previousPage;
        i &&
          (0 === this.swapMode
            ? (rM.call(this, i, !1), this.emit('pageinvisible', i, this._previousKey, this))
            : i.destroy()),
          t && !this.sizerChildren.hasOwnProperty(t) && this.emit('createpage', t, this),
          (this._currentKey = t);
        var n = this.currentPage;
        return (
          n &&
            (rM.call(this, n, !0),
            this.emit('pagevisible', n, this._currentKey, this),
            void 0 === e && (e = this.fadeInDuration),
            e > 0 && n.setAlpha(0).fadeIn(e, 1)),
          this
        );
      },
      hasPage: function (t) {
        return this.sizerChildren.hasOwnProperty(t);
      },
    };
  Object.assign(oM, sM);
  var aM = Phaser.Utils.Objects.GetValue,
    hM = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, n)).type = 'rexPages'),
          (s.childrenMap = s.sizerChildren),
          (s._previousKey = void 0),
          (s._currentKey = void 0),
          s.setSwapMode(aM(n, 'swapMode', 0)),
          s.setFadeInDuration(aM(n, 'fadeIn', 0)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'setSwapMode',
            value: function (t) {
              return 'string' == typeof t && (t = lM[t]), (this.swapMode = t), this;
            },
          },
          {
            key: 'setFadeInDuration',
            value: function (t) {
              return (this.fadeInDuration = t), this;
            },
          },
          {
            key: 'previousKey',
            get: function () {
              return this._previousKey;
            },
          },
          {
            key: 'currentKey',
            get: function () {
              return this._currentKey;
            },
            set: function (t) {
              this.swapPage(t);
            },
          },
          {
            key: 'currentPage',
            get: function () {
              return this.getPage(this.currentKey);
            },
          },
          {
            key: 'previousPage',
            get: function () {
              return this.getPage(this.previousKey);
            },
          },
          {
            key: 'keys',
            get: function () {
              return Object.keys(this.sizerChildren);
            },
          },
        ]),
        i
      );
    })(Wk);
  Object.assign(hM.prototype, oM);
  var lM = { invisible: 0, destroy: 1 };
  M.register('pages', function (t) {
    var e = new hM(this.scene, t);
    return this.scene.add.existing(e), e;
  }),
    $(window, 'RexPlugins.UI.Pages', hM);
  var uM = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'tint',
            get: function () {
              return 0 === this.vertices.length ? 16777215 : this.vertices[0].color;
            },
          },
          {
            key: 'setInteractive',
            value: function () {
              var t = function (t, e, i) {
                for (var n = this.faces, s = 0; s < n.length; s++) {
                  if (n[s].contains(e, i)) return !0;
                }
                return !1;
              }.bind(this);
              return this.scene.sys.input.enable(this, t), this;
            },
          },
          {
            key: 'forceUpdate',
            value: function () {
              return (this.dirtyCache[10] = 1), this;
            },
          },
        ]),
        i
      );
    })(Phaser.GameObjects.Mesh),
    cM = Phaser.Math.Vector3,
    dM = Phaser.Math.Matrix4,
    fM = new cM(),
    pM = new cM(),
    vM = new dM(),
    gM = Phaser.Utils.Objects.IsPlainObject,
    yM = Phaser.Utils.Objects.GetValue,
    kM = Phaser.Geom.Mesh.GenerateGridVerts,
    mM = Phaser.Math.RadToDeg,
    bM = Phaser.Math.DegToRad,
    xM = 1 + 1 / Math.sin(bM(45)),
    CM = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          gM(n) &&
            ((n = yM((h = n), 'x', 0)), (s = yM(h, 'y', 0)), (o = yM(h, 'key', null)), (a = yM(h, 'frame', null))),
          ((l = e.call(this, t, n, s, o, a)).type = 'rexPerspectiveImage'),
          l.setSizeToFrame(),
          l.resetPerspective(),
          l.panZ(xM),
          (l.hideCCW = yM(h, 'hideCCW', !0));
        var u = yM(h, 'gridWidth', 0),
          c = yM(h, 'gridHeight', u);
        return l.resetVerts(u, c), (l.prevFrame = l.frame), l;
      }
      return (
        a(i, [
          {
            key: 'preUpdate',
            value: function (t, e) {
              this.prevFrame !== this.frame && ((this.prevFrame = this.frame), this.syncSize()),
                g(u(i.prototype), 'preUpdate', this).call(this, t, e);
            },
          },
          {
            key: 'originX',
            get: function () {
              return 0.5;
            },
          },
          {
            key: 'originY',
            get: function () {
              return 0.5;
            },
          },
          {
            key: 'resetPerspective',
            value: function () {
              return this.setPerspective(this.width, this.height, 45), this;
            },
          },
          {
            key: 'resetVerts',
            value: function (t, e) {
              if (
                (void 0 !== t && (this.gridWidth = t),
                void 0 !== e && (this.gridHeight = e),
                this.clear(),
                (this.dirtyCache[9] = -1),
                0 === this.width || 0 === this.height)
              )
                return this;
              var i = this.frame.cutWidth,
                n = this.frame.cutHeight;
              0 === this.gridWidth ? (t = Math.max(i / 8, 32)) : (e = this.gridWidth),
                (e = 0 === this.gridHeight ? Math.max(n / 8, 32) : this.gridHeight),
                kM({
                  mesh: this,
                  width: i / this.height,
                  height: n / this.height,
                  widthSegments: Math.ceil(i / t),
                  heightSegments: Math.ceil(n / e),
                });
              var s = this.transformInfo;
              return s && this.transformVerts(s.x, s.y, s.z, s.rotateX, s.rotateY, s.rotateZ), this;
            },
          },
          {
            key: 'syncSize',
            value: function () {
              return this.setSizeToFrame(), this.resetPerspective(), this.resetVerts(), this;
            },
          },
          {
            key: 'rotationX',
            get: function () {
              return this.modelRotation.x;
            },
            set: function (t) {
              this.modelRotation.x = t;
            },
          },
          {
            key: 'angleX',
            get: function () {
              return mM(this.rotationX);
            },
            set: function (t) {
              this.rotationX = bM(t);
            },
          },
          {
            key: 'rotationY',
            get: function () {
              return this.modelRotation.y;
            },
            set: function (t) {
              this.modelRotation.y = t;
            },
          },
          {
            key: 'angleY',
            get: function () {
              return mM(this.rotationY);
            },
            set: function (t) {
              this.rotationY = bM(t);
            },
          },
          {
            key: 'rotationZ',
            get: function () {
              return this.modelRotation.z;
            },
            set: function (t) {
              this.modelRotation.z = t;
            },
          },
          {
            key: 'angleZ',
            get: function () {
              return mM(this.rotationZ);
            },
            set: function (t) {
              this.rotationZ = bM(t);
            },
          },
          {
            key: 'transformVerts',
            value: function (t, e, i, n, s, r) {
              return (
                void 0 === t && (t = 0),
                void 0 === e && (e = 0),
                void 0 === i && (i = 0),
                void 0 === n && (n = 0),
                void 0 === s && (s = 0),
                void 0 === r && (r = 0),
                this.transformInfo || (this.transformInfo = {}),
                (this.transformInfo.x = t),
                (this.transformInfo.y = e),
                (this.transformInfo.rotateX = n),
                (this.transformInfo.rotateY = s),
                (this.transformInfo.rotateZ = r),
                (function (t, e, i, n, s, r, o) {
                  void 0 === e && (e = 0),
                    void 0 === i && (i = 0),
                    void 0 === n && (n = 0),
                    void 0 === s && (s = 0),
                    void 0 === r && (r = 0),
                    void 0 === o && (o = 0),
                    fM.set(e, i, n),
                    pM.set(s, r, o),
                    vM.fromRotationXYTranslation(pM, fM, !0);
                  for (var a = 0, h = t.vertices.length; a < h; a++) t.vertices[a].transformMat4(vM);
                })(this, t, e, i, n, s, r),
                this
              );
            },
          },
        ]),
        i
      );
    })(uM),
    wM = Phaser.Textures.DynamicTexture,
    SM = function (t, e, i) {
      return void 0 === e && (e = 2), void 0 === i && (i = 2), new wM(t.sys.textures, null, e, i);
    },
    PM = Phaser.Utils.Objects.IsPlainObject,
    TM = Phaser.Utils.Objects.GetValue,
    OM = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          PM(n) &&
            ((n = TM((h = n), 'x', 0)), (s = TM(h, 'y', 0)), (o = TM(h, 'width', 32)), (a = TM(h, 'height', 32)));
        var u = SM(t, o, a);
        return ((l = e.call(this, t, n, s, u, null, h)).type = 'rexPerspectiveRenderTexture'), (l.rt = l.texture), l;
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (g(u(i.prototype), 'destroy', this).call(this, t), this.rt.destroy(), (this.rt = null));
            },
          },
          {
            key: 'snapshot',
            value: function (t, e) {
              return (
                void 0 === e && (e = {}),
                (e.gameObjects = t),
                (e.renderTexture = this.rt),
                Xf(e),
                (this.width === this.frame.realWidth && this.height === this.frame.realHeight) || this.syncSize(),
                this
              );
            },
          },
        ]),
        i
      );
    })(CM);
  Phaser.Animations.AnimationState, Phaser.Utils.Objects.IsPlainObject, Phaser.Utils.Objects.GetValue;
  var MM = function (t, e, i, n) {
      if (Array.isArray(t))
        for (var s = 0, r = t.length; s < r; s++) {
          var o = t[s];
          if ((!n || o) && (i ? e.call(i, o, s, t) : e(o, s, t))) return;
        }
      else {
        for (var a in t) {
          o = t[a];
          if ((!n || o) && (i ? e.call(i, o, a, t) : e(o, a, t))) return;
        }
      }
    },
    EM = Phaser.Math.RadToDeg,
    _M = Phaser.Math.DegToRad,
    RM = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          ((l = e.call(this, t, n, s, o, a)).faces = h),
          MM(
            h,
            function (t) {
              t.setPosition(n, s), this.add(t);
            },
            d(l),
            !0
          ),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'rotationX',
            get: function () {
              return 0;
            },
            set: function (t) {},
          },
          {
            key: 'angleX',
            get: function () {
              return EM(this.rotationX);
            },
            set: function (t) {
              this.rotationX = _M(t);
            },
          },
          {
            key: 'rotateX',
            get: function () {
              return EM(this.rotationX);
            },
            set: function (t) {
              this.rotationX = _M(t);
            },
          },
          {
            key: 'rotationY',
            get: function () {
              return 0;
            },
            set: function (t) {},
          },
          {
            key: 'angleY',
            get: function () {
              return EM(this.rotationY);
            },
            set: function (t) {
              this.rotationY = _M(t);
            },
          },
          {
            key: 'rotateY',
            get: function () {
              return EM(this.rotationY);
            },
            set: function (t) {
              this.rotationY = _M(t);
            },
          },
          {
            key: 'rotationZ',
            get: function () {
              return 0;
            },
            set: function (t) {},
          },
          {
            key: 'angleZ',
            get: function () {
              return EM(this.rotationZ);
            },
            set: function (t) {
              this.rotationZ = _M(t);
            },
          },
          {
            key: 'rotateZ',
            get: function () {
              return EM(this.rotationZ);
            },
            set: function (t) {
              this.rotationZ = _M(t);
            },
          },
          {
            key: 'setDebug',
            value: function (t, e) {
              return (
                MM(
                  this.faces,
                  function (i) {
                    i.setDebug(t, e);
                  },
                  null,
                  !0
                ),
                this
              );
            },
          },
          {
            key: 'panX',
            value: function (t) {
              return (
                MM(
                  this.faces,
                  function (e) {
                    e.panX(t);
                  },
                  null,
                  !0
                ),
                this
              );
            },
          },
          {
            key: 'panY',
            value: function (t) {
              return (
                MM(
                  this.faces,
                  function (e) {
                    e.panY(t);
                  },
                  null,
                  !0
                ),
                this
              );
            },
          },
          {
            key: 'panZ',
            value: function (t) {
              return (
                MM(
                  this.faces,
                  function (e) {
                    e.panZ(t);
                  },
                  null,
                  !0
                ),
                this
              );
            },
          },
          {
            key: 'transformVerts',
            value: function (t, e, i, n, s, r) {
              return (
                MM(
                  this.faces,
                  function (o) {
                    o.transformVerts(t, e, i, n, s, r);
                  },
                  null,
                  !0
                ),
                this
              );
            },
          },
          {
            key: 'forEachFace',
            value: function (t, e, i) {
              return MM(this.faces, t, e, i), this;
            },
          },
        ]),
        i
      );
    })(Kf),
    LM = Phaser.Utils.Objects.IsPlainObject,
    BM = { key: '__WHITE' },
    DM = { image: CM, rendertexture: OM },
    IM = function (t, e) {
      var i;
      return (
        void 0 === e && (e = BM),
        LM(e)
          ? (e.hasOwnProperty('type') ||
              (e.hasOwnProperty('key') ? (e.type = 'image') : e.hasOwnProperty('width') && (e.type = 'rendertexture')),
            (i = new DM[e.type](t, e)),
            t.add.existing(i))
          : (i = e),
        i
      );
    },
    jM = (0, Phaser.Math.DegToRad)(180),
    AM = Phaser.Utils.Objects.GetValue,
    zM = Phaser.Math.Linear,
    FM = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, n)).resetFromJSON(n), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setEase(AM(t, 'ease', 'Cubic')),
                this.setFrontToBackDirection(AM(t, 'frontToBack', 0)),
                this.setBackToFrontDirection(AM(t, 'backToFront', 1)),
                this
              );
            },
          },
          {
            key: 'setFrontToBackDirection',
            value: function (t) {
              return 'string' == typeof t && (t = VM[t]), (this.endAngleFB = 0 === t ? 180 : -180), this;
            },
          },
          {
            key: 'setBackToFrontDirection',
            value: function (t) {
              return 'string' == typeof t && (t = VM[t]), (this.endAngleBF = 0 === t ? -180 : 180), this;
            },
          },
          {
            key: 'start',
            value: function (t, e) {
              if (this.timer.isRunning) return this;
              this.timer.setDelay(this.delay).setDuration(t);
              var n = e + 1;
              return (
                0 === this.parent.face
                  ? ((this.startAngle = 0), (this.endAngle = this.endAngleFB * n))
                  : ((this.startAngle = this.endAngleBF), (this.endAngle = this.startAngle - this.endAngleBF * n)),
                g(u(i.prototype), 'start', this).call(this),
                this
              );
            },
          },
          {
            key: 'flip',
            value: function (t, e) {
              return (
                this.isRunning ||
                  (void 0 === t && (t = this.duration),
                  void 0 === e && (e = 0),
                  this.start(t, e),
                  this.emit('start', this.parent, this),
                  (this.parent.currentFaceIndex = (this.parent.currentFaceIndex + e + 1) % 2)),
                this
              );
            },
          },
          {
            key: 'flipRight',
            value: function (t, e) {
              return (
                0 === this.parent.currentFaceIndex ? this.setFrontToBackDirection(0) : this.setBackToFrontDirection(0),
                this.flip(t, e),
                this
              );
            },
          },
          {
            key: 'flipLeft',
            value: function (t, e) {
              return (
                0 === this.parent.currentFaceIndex ? this.setFrontToBackDirection(1) : this.setBackToFrontDirection(1),
                this.flip(t, e),
                this
              );
            },
          },
          {
            key: 'updateGameObject',
            value: function (t, e) {
              var i = this.easeFn(e.t),
                n = zM(this.startAngle, this.endAngle, i);
              0 === t.orientation ? (t.angleY = n) : (t.angleX = n);
            },
          },
        ]),
        i
      );
    })(_o),
    VM = { right: 0, 'left-to-right': 0, left: 1, 'right-to-left': 1 },
    WM = Phaser.Utils.Objects.IsPlainObject,
    YM = Phaser.Utils.Objects.GetValue,
    XM = ['back', 'front'],
    GM = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o) {
        var a;
        r(this, i), WM(n) && ((n = YM((o = n), 'x', 0)), (s = YM(o, 'y', 0)));
        var h = (function (t, e, i) {
            var n;
            if (void 0 === i) {
              var s;
              n = [];
              for (var r = 0, o = e.length; r < o; r++) (a = (s = e[r]) ? IM(t, s) : null), n.push(a);
            } else {
              var a, h;
              for (n = {}, r = 0, o = i.length; r < o; r++)
                (h = i[r]), (a = e.hasOwnProperty(h) ? IM(t, e[h]) : null), (n[h] = a);
            }
            return n;
          })(t, o, XM),
          l = h.back,
          u = h.front,
          c = YM(o, 'width'),
          f = YM(o, 'height');
        if (void 0 === c || void 0 === f) {
          if (void 0 === c) {
            var p = u ? u.width : 0,
              v = l ? l.width : 0;
            c = Math.max(p, v);
          }
          if (void 0 === f) {
            var g = u ? u.height : 0,
              y = l ? l.height : 0;
            f = Math.max(g, y);
          }
        }
        ((a = e.call(this, t, n, s, c, f, h)).type = 'rexPerspectiveCard'),
          (a.frontFaceRotationX = 0),
          (a.frontFaceRotationY = 0),
          (a.frontFaceRotationZ = 0),
          MM(
            h,
            function (t, e) {
              this[''.concat(e, 'Face')] = t;
            },
            d(a)
          );
        var k = YM(o, 'flip', void 0);
        return (
          !1 !== k && (a.flip = new FM(d(a), k)),
          a.setOrientation(YM(o, 'orientation', 0)),
          (function (t, e) {
            var i = e.back;
            i && (0 === t.orientation ? i.transformVerts(0, 0, 0, 0, jM, 0) : i.transformVerts(0, 0, 0, jM, 0, 0));
          })(d(a), h),
          a.setFace(YM(o, 'face', 0)),
          a
        );
      }
      return (
        a(i, [
          {
            key: 'rotationX',
            get: function () {
              return this.frontFaceRotationX;
            },
            set: function (t) {
              this.frontFaceRotationX !== t &&
                ((this.frontFaceRotationX = t),
                MM(
                  this.faces,
                  function (e) {
                    e.rotationX = t;
                  },
                  null,
                  !0
                ));
            },
          },
          {
            key: 'rotationY',
            get: function () {
              return this.frontFaceRotationY;
            },
            set: function (t) {
              this.frontFaceRotationY !== t &&
                ((this.frontFaceRotationY = t),
                MM(
                  this.faces,
                  function (e) {
                    e.rotationY = t;
                  },
                  null,
                  !0
                ));
            },
          },
          {
            key: 'rotationZ',
            get: function () {
              return this.frontFaceRotationZ;
            },
            set: function (t) {
              this.frontFaceRotationZ !== t &&
                ((this.frontFaceRotationZ = t),
                MM(
                  this.faces,
                  function (e) {
                    e.rotationZ = t;
                  },
                  null,
                  !0
                ));
            },
          },
          {
            key: 'setOrientation',
            value: function (t) {
              return 'string' == typeof t && (t = HM[t]), (this.orientation = t), this;
            },
          },
          {
            key: 'face',
            get: function () {
              return this.currentFaceIndex;
            },
            set: function (t) {
              'string' == typeof t && (t = UM[t]), (this.currentFaceIndex = t);
              var e = 1 === t ? 180 : 0;
              0 === this.orientation ? (this.angleY = e) : (this.angleX = e);
            },
          },
          {
            key: 'setFace',
            value: function (t) {
              return (this.face = t), this;
            },
          },
          {
            key: 'toggleFace',
            value: function () {
              var t = 0 === this.face ? 1 : 0;
              return this.setFace(t), this;
            },
          },
        ]),
        i
      );
    })(RM),
    HM = { x: 0, horizontal: 0, h: 0, y: 1, vertical: 1, v: 1 },
    UM = { front: 0, back: 1 };
  Phaser.Utils.Objects.GetValue,
    Phaser.Math.RadToDeg,
    Phaser.Math.DegToRad,
    Phaser.Math.Angle.WrapDegrees,
    Phaser.Math.Angle.ShortestBetween,
    Phaser.Math.Wrap,
    Phaser.Math.Linear,
    Phaser.Utils.Objects.IsPlainObject,
    Phaser.Utils.Objects.GetValue,
    Phaser.Math.DegToRad,
    Phaser.Math.RadToDeg,
    Phaser.Math.Angle.WrapDegrees,
    Phaser.Math.Linear,
    Phaser.Math.Wrap,
    Phaser.Utils.Objects.IsPlainObject,
    Phaser.Utils.Objects.GetValue,
    Phaser.Math.Wrap;
  var NM = Phaser.Utils.Objects.GetValue,
    KM = function (t, e) {
      if (!t) return !1;
      for (var i = e.visibleSibling, n = 0, s = i.length; n < s; n++) t.setChildVisible(i[n], !0);
      return (i.length = 0), t.setChildVisible(e, !1), (e.isRunning = !1), !0;
    },
    JM = function (t) {
      return (function (t) {
        l(i, t);
        var e = p(i);
        function i(t, n) {
          var s;
          r(this, i);
          var o = t.scene;
          return (
            (s = e.call(this, o, 0, 0, 1, 1, n)),
            o.add.existing(d(s)),
            (function (t, e, i) {
              (e.visibleSibling = []),
                (e.isRunning = !1),
                (e.useParentBounds = NM(i, 'useParentBounds', !1)),
                e.setPosition(t.x, t.y).setVisible(!1),
                t.pin(e);
            })(t, d(s), n),
            s
          );
        }
        return (
          a(i, [
            {
              key: 'destroy',
              value: function (t) {
                this.scene && !this.ignoreDestroy && (this.exit(), g(u(i.prototype), 'destroy', this).call(this, t));
              },
            },
            {
              key: 'enter',
              value: function () {
                var t = (function (t, e) {
                  if (!t) return !1;
                  KM(t, e);
                  var i = e.useParentBounds;
                  Xf({
                    gameObjects: t.getAllVisibleChildren(),
                    renderTexture: e.rt,
                    x: e.x,
                    y: e.y,
                    width: i ? t.displayWidth : void 0,
                    height: i ? t.displayHeighth : void 0,
                    originX: i ? t.originX : void 0,
                    originY: i ? t.originY : void 0,
                  }),
                    t.setChildVisible(e, !0);
                  for (var n = e.visibleSibling, s = t.children, r = 0, o = s.length; r < o; r++) {
                    var a = s[r];
                    a.visible && a !== e && (t.setChildVisible(a, !1), n.push(a));
                  }
                  return (e.isRunning = !0), !0;
                })(this.rexContainer.parent, this);
                return t && this.syncSize(), this;
              },
            },
            {
              key: 'exit',
              value: function () {
                return KM(this.rexContainer.parent, this), this;
              },
            },
          ]),
          i
        );
      })(t);
    },
    qM = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'perspectiveState',
            get: function () {
              return this.isRunning;
            },
          },
        ]),
        i
      );
    })(JM(OM)),
    ZM = Phaser.Utils.Objects.GetValue,
    $M = function (t) {
      var e = this.scene;
      this.setSnapshotPadding(ZM(t, 'snapshotPadding', 0)),
        delete (t = Qe(t)).width,
        delete t.height,
        (t.front = { width: 1, height: 1 }),
        (t.back = { width: 1, height: 1 });
      var i = new GM(e, t);
      e.add.existing(i);
      var n = i.flip;
      if (n) {
        var s = this;
        n.on('start', function () {
          s.enterPerspectiveMode();
        }).on('complete', function () {
          s.exitPerspectiveMode();
        });
      }
      return i;
    },
    QM = ['front', 'back'],
    tE = {
      enterPerspectiveMode: function () {
        return (
          this.isInPerspectiveMode ||
            (this.setChildVisible(this.perspectiveCard, !0),
            this.snapshotFace(0),
            this.snapshotFace(1),
            this.setChildVisible(this.childrenMap.front, !1),
            this.setChildVisible(this.childrenMap.back, !1),
            this.perspectiveCard.setSize(this.width, this.height)),
          this
        );
      },
      exitPerspectiveMode: function () {
        if (!this.isInPerspectiveMode) return this;
        this.setChildVisible(this.perspectiveCard, !1);
        var t = 0 === this.perspectiveCard.face;
        return this.setChildVisible(this.childrenMap.front, t), this.setChildVisible(this.childrenMap.back, !t), this;
      },
      setSnapshotPadding: function (t) {
        return (this.snapshotPadding = t), this;
      },
      snapshotFace: function (t) {
        'number' == typeof t && (t = QM[t]);
        var e = this.perspectiveCard.faces[t],
          i = this.childrenMap[t];
        e.rt.clear();
        var n = i.visible;
        i.visible = !0;
        var s = i.isRexContainerLite ? i.getAllVisibleChildren() : i;
        return e.snapshot(s, { padding: this.snapshotPadding }), (i.visible = n), this;
      },
    },
    eE = Phaser.Utils.Objects.GetValue,
    iE = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).type = 'rexPerspectiveCard');
        var o = n.back,
          a = eE(n, 'expand.back', !0);
        s.add(o, { key: 'back', expand: a });
        var h = n.front,
          l = eE(n, 'expand.front', !0);
        return (
          s.add(h, { key: 'front', expand: l }),
          (s.perspectiveCard = $M.call(d(s), n)),
          s.pin(s.perspectiveCard),
          s.exitPerspectiveMode(!1),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'flip',
            get: function () {
              return this.perspectiveCard.flip;
            },
          },
          {
            key: 'face',
            get: function () {
              return this.perspectiveCard.face;
            },
            set: function (t) {
              if (!this.flip || !this.flip.isRunning) {
                this.perspectiveCard.face = t;
                var e = 0 === t,
                  i = this.childrenMap.front,
                  n = this.childrenMap.back;
                this.setChildVisible(i, e), this.setChildVisible(n, !e);
              }
            },
          },
          {
            key: 'setFace',
            value: function (t) {
              return (this.face = t), this;
            },
          },
          {
            key: 'toggleFace',
            value: function () {
              var t = 0 === this.face ? 1 : 0;
              return this.setFace(t), this;
            },
          },
          {
            key: 'isInPerspectiveMode',
            get: function () {
              return this.perspectiveCard.visible;
            },
          },
          {
            key: 'rotationX',
            get: function () {
              return this.perspectiveCard.rotationX;
            },
            set: function (t) {
              this.enterPerspectiveMode(), (this.perspectiveCard.rotationX = t);
            },
          },
          {
            key: 'angleX',
            get: function () {
              return this.perspectiveCard.angleX;
            },
            set: function (t) {
              this.enterPerspectiveMode(), (this.perspectiveCard.angleX = t);
            },
          },
          {
            key: 'rotationY',
            get: function () {
              return this.perspectiveCard.rotationY;
            },
            set: function (t) {
              this.enterPerspectiveMode(), (this.perspectiveCard.rotationY = t);
            },
          },
          {
            key: 'angleY',
            get: function () {
              return this.perspectiveCard.angleY;
            },
            set: function (t) {
              this.enterPerspectiveMode(), (this.perspectiveCard.angleY = t);
            },
          },
          {
            key: 'rotationZ',
            get: function () {
              return this.perspectiveCard.rotationZ;
            },
            set: function (t) {
              this.enterPerspectiveMode(), (this.perspectiveCard.rotationZ = t);
            },
          },
          {
            key: 'angleZ',
            get: function () {
              return this.perspectiveCard.angleZ;
            },
            set: function (t) {
              this.enterPerspectiveMode(), (this.perspectiveCard.angleZ = t);
            },
          },
          {
            key: 'panX',
            value: function (t) {
              return this.enterPerspectiveMode(), this.perspectiveCard.panX(t), this;
            },
          },
          {
            key: 'panY',
            value: function (t) {
              return this.enterPerspectiveMode(), this.perspectiveCard.panY(t), this;
            },
          },
          {
            key: 'panZ',
            value: function (t) {
              return this.enterPerspectiveMode(), this.perspectiveCard.panZ(t), this;
            },
          },
          {
            key: 'transformVerts',
            value: function (t, e, i, n, s, r) {
              return this.enterPerspectiveMode(), this.perspectiveCard.transformVerts(t, e, i, n, s, r), this;
            },
          },
          {
            key: 'forEachFace',
            value: function (t, e, i) {
              return this.enterPerspectiveMode(), this.perspectiveCard.forEachFace(t, e, i), this;
            },
          },
        ]),
        i
      );
    })(Wk);
  Object.assign(iE.prototype, tE),
    M.register('perspectiveCard', function (t) {
      var e = new iE(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.PerspectiveCard', iE);
  var nE = Phaser.Utils.Objects.IsPlainObject,
    sE = Phaser.Utils.Objects.GetValue,
    rE = Phaser.Utils.String.UUID,
    oE = {
      swapPage: function (t, e) {
        var i, n;
        null != (i = 'number' == typeof t ? t : this.getPageIndex(t)) &&
          (void 0 !== e && ((n = this.childrenMap.pages.fadeInDuration), (this.childrenMap.pages.fadeInDuration = e)),
          this.childrenMap.tabs.emitButtonClick(i),
          void 0 !== n && (this.childrenMap.pages.fadeInDuration = n));
        return this;
      },
      swapFirstPage: function (t) {
        return this.swapPage(0, t), this;
      },
      swapLastPage: function (t) {
        var e = this.getElement('tabs.buttons').length - 1;
        return this.swapPage(e, t), this;
      },
    },
    aE = {
      removePage: function (t, e) {
        'number' == typeof t && (t = this.getPageKey(t));
        var i = this.childrenMap.tabs,
          n = i.getByName(t),
          s = this.childrenMap.pages,
          r = s.getElement(t);
        return n && r ? (s.removeChildrenMap(t), i.removeButton(n, e), s.remove(r, e), this) : this;
      },
    },
    hE = {
      getPageKey: function (t) {
        var e = this.getElement('tabs.buttons');
        if (!(t >= e.length)) return e[t].name;
      },
      getPageIndex: function (t) {
        for (var e = this.getElement('tabs.buttons'), i = 0, n = e.length; i < n; i++) if (e[i].name === t) return i;
      },
      addPage: function (t, e, i) {
        if (nE(t)) {
          var n = t;
          (t = sE(n, 'key')), (e = sE(n, 'tab')), (i = sE(n, 'page'));
        }
        return (
          t || (t = rE()),
          (e.name = t),
          this.childrenMap.tabs.addButton(e),
          this.childrenMap.pages.addPage(i, { key: t }),
          this
        );
      },
      getPage: function (t) {
        return 'number' == typeof t && (t = this.getPageKey(t)), this.childrenMap.pages.getPage(t);
      },
      getTab: function (t) {
        var e;
        return (e = 'number' == typeof t ? t : this.getPageIndex(t)), this.getElement('tabs.buttons')[e];
      },
    };
  Object.assign(hE, oE, aE);
  var lE = Phaser.Utils.Objects.GetValue,
    uE = cx.prototype.add,
    cE = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = lE(n, 'tabPosition', 'top'),
          a = 'left' === o || 'right' === o ? 'x' : 'y';
        (n.orientation = a), ((s = e.call(this, t, n)).type = 'rexTabPages');
        var h = lE(n, 'background', void 0);
        h && s.addBackground(h);
        var l = lE(n, 'pages'),
          u = new hM(t, l);
        t.add.existing(u);
        var c = 'y' === a,
          f = !!c && lE(n, 'wrapTabs', !1),
          p = lE(n, 'tabs', void 0);
        void 0 === p && (p = {});
        var v = f ? nS : Vw;
        (p.orientation = c ? 'x' : 'y'), (p.buttonsType = 'radio');
        var g = new v(t, p);
        t.add.existing(g);
        var y = !!f || lE(n, 'expand.tabs', !1),
          k = lE(n, 'align.tabs', 'left');
        switch (o) {
          case 'top':
          case 'left':
            uE.call(d(s), g, { proportion: 0, expand: y, align: k }), uE.call(d(s), u, { proportion: 1, expand: !0 });
            break;
          case 'bottom':
          case 'right':
            uE.call(d(s), u, { proportion: 1, expand: !0 }), uE.call(d(s), g, { proportion: 0, expand: y, align: k });
        }
        return (
          s.addChildrenMap('background', h),
          s.addChildrenMap('tabs', g),
          s.addChildrenMap('pages', u),
          g.on('button.click', function (t) {
            var e = t.name;
            u.hasPage(e) && u.swapPage(e);
          }),
          g.on(
            'button.statechange',
            function (t, e, i, n) {
              var s = i ? 'tab.focus' : 'tab.blur';
              this.emit(s, t, t.name);
            },
            d(s)
          ),
          u.on('pagevisible', function (t, e, i) {
            this.emit('page.focus', t, e);
          }),
          u.on('pageinvisible', function (t, e, i) {
            this.emit('page.blur', t, e);
          }),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'currentKey',
            get: function () {
              return this.getElement('pages').currentKey;
            },
            set: function (t) {
              this.showPage(t);
            },
          },
          {
            key: 'keys',
            get: function () {
              return this.getElement('pages').keys;
            },
          },
          {
            key: 'currentPage',
            get: function () {
              return this.getElement('pages').currentPage;
            },
          },
          {
            key: 'previousPage',
            get: function () {
              return this.getElement('pages').previousPage;
            },
          },
        ]),
        i
      );
    })(cx);
  Object.assign(cE.prototype, hE),
    M.register('tabPages', function (t) {
      var e = new cE(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.TabPages', cE);
  var dE = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        return r(this, i), void 0 === n && (n = {}), (n.destroy = !1), e.call(this, t, n);
      }
      return (
        a(i, [
          {
            key: 'onOpen',
            value: function () {
              this.emit('open', this.parent, this), g(u(i.prototype), 'onOpen', this).call(this);
            },
          },
          {
            key: 'onClose',
            value: function () {
              this.emit('close', this.parent, this), g(u(i.prototype), 'onClose', this).call(this);
            },
          },
        ]),
        i
      );
    })(ug),
    fE = {
      expand: function (t) {
        if (!0 === this.expanded) return this;
        void 0 === t && (t = this.transitionDuration), (this.expanded = !0);
        var e = this.childrenMap.title,
          i = this.childrenMap.child;
        return (
          this.show(i),
          (this.reLayoutTarget ? this.reLayoutTarget : this.getTopmostSizer()).layout(),
          e.emit('folder.expand', t, this),
          i.emit('folder.expand', t, this),
          this.emit('expand.start', this),
          this.childTransition
            .once(
              'open',
              function () {
                this.emit('expand.complete', this);
              },
              this
            )
            .requestOpen(null, t),
          this
        );
      },
      collapse: function (t) {
        if (!1 === this.expanded) return this;
        void 0 === t && (t = this.transitionDuration), (this.expanded = !1);
        var e = this.childrenMap.title,
          i = this.childrenMap.child;
        return (
          e.emit('folder.collapse', t, this),
          i.emit('folder.collapse', t, this),
          this.emit('collapse.start', this),
          this.childTransition
            .once(
              'close',
              function () {
                this.setChildScale(i, 1, 1).hide(i),
                  (this.reLayoutTarget ? this.reLayoutTarget : this.getTopmostSizer()).layout(),
                  this.emit('collapse.complete', this);
              },
              this
            )
            .requestClose(null, t),
          this
        );
      },
      toggle: function (t) {
        return this.expanded ? this.collapse(t) : this.expand(t), this;
      },
    },
    pE = function (t, e) {
      lv.popUp.call(t, e, this.expandDirection);
    },
    vE = function (t, e) {
      lv.scaleDown.call(t, e, this.expandDirection);
    },
    gE = {
      setTransitionDuration: function (t) {
        return (this.transitionDuration = t), this.childTransition.setTransitInTime(t).setTransitOutTime(t), this;
      },
      setExpandCallback: function (t) {
        return void 0 === t && (t = pE.bind(this)), this.childTransition.setTransitInCallback(t), this;
      },
      setCollapseCallback: function (t) {
        return void 0 === t && (t = vE.bind(this)), this.childTransition.setTransitOutCallback(t), this;
      },
    },
    yE = Phaser.Utils.Objects.GetValue,
    kE = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          n.hasOwnProperty('orientation') || (n.orientation = 1),
          ((s = e.call(this, t, n)).type = 'rexFolder'),
          (s.expanded = void 0),
          (s.expandDirection = 1 === s.orientation ? 'y' : 'x');
        var o = n.background,
          a = n.title,
          h = n.child;
        o && s.addBackground(o);
        var l = 1 === s.orientation ? 'left' : 'top',
          u = yE(n, 'align.title', l),
          c = yE(n, 'expand.title', !0);
        s.add(a, { proportion: 0, align: u, expand: c });
        var f = yE(n, 'toggleByTarget', void 0),
          p = yE(n, 'toggleClickConfig');
        if (
          (void 0 === f && (f = a),
          f &&
            Yg.onClick.call(
              f,
              function () {
                this.toggle();
              },
              d(s),
              p
            ),
          (s.childTransition = new dE(h)),
          !yE(n, 'customChildOrigin', !1))
        ) {
          var v = s.rtl ? 1 : 0;
          h.setOrigin(v);
        }
        u = yE(n, 'align.child', 'left');
        var g = (c = yE(n, 'expand.child', !0)) ? 1 : 0;
        s.add(h, { proportion: g, align: u, expand: c }),
          s.addChildrenMap('title', a),
          s.addChildrenMap('child', h),
          s.addChildrenMap('background', o);
        var y = n.transition;
        s.setTransitionDuration(yE(y, 'duration', 200)),
          s.setExpandCallback(yE(y, 'expandCallback', void 0)),
          s.setCollapseCallback(yE(y, 'collapseCallback', void 0)),
          (s.reLayoutTarget = yE(n, 'reLayoutTarget', void 0));
        var k = n.onExpandStart;
        k && s.on('expand.start', k);
        var m = n.onExpandComplete;
        m && s.on('expand.complete', m);
        var b = n.onCollapseStart;
        b && s.on('collapse.start', b);
        var x = n.onCollapseComplete;
        return x && s.on('collapse.complete', x), s;
      }
      return a(i);
    })(cx);
  Object.assign(kE.prototype, fE, gE),
    M.register('folder', function (t) {
      var e = new kE(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Folder', kE),
    M.register('textArea', function (t) {
      var e = new KP(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.TextArea', KP);
  var mE = {
      scrollToLine: function (t) {
        return this.setChildOY(-this.lineHeight * t), this;
      },
      scrollToNextLine: function (t) {
        void 0 === t && (t = 1);
        var e = this.lineIndex + t;
        return this.scrollToLine(e), this;
      },
    },
    bE = Phaser.Utils.Objects.GetValue,
    xE = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o,
          a = bE(n, 'text');
        Ff(a) ? (o = a) : (void 0 === a && (a = {}), (a.textArea = !0), (o = new hu(t, a)), t.add.existing(o)),
          (function (t) {
            Object.defineProperty(t, 'childOY', {
              configurable: !0,
              get: function () {
                return t.textOY;
              },
              set: function (e) {
                t.textOY = e;
              },
            }),
              Object.defineProperty(t, 'topChildOY', {
                get: function () {
                  return t.topTextOY;
                },
              }),
              Object.defineProperty(t, 'bottomChildOY', {
                get: function () {
                  return t.bottomTextOY;
                },
              }),
              Object.defineProperty(t, 'childVisibleHeight', {
                get: function () {
                  return t.textVisibleHeight;
                },
              }),
              Object.defineProperty(t, 'childHeight', {
                get: function () {
                  return t.contentHeight;
                },
              });
          })(o);
        var h = void 0 === a.width,
          l = void 0 === a.height;
        h && (o.minWidth = 0),
          l && (o.minHeight = 0),
          (n.scrollMode = 0),
          (n.type = 'rexTextAreaInput'),
          (n.child = { gameObject: o, expandWidth: h, expandHeight: l });
        var u,
          c,
          f = bE(n, 'space', void 0);
        f && (f.child = bE(f, 'text', 0)),
          (n.scroller = !1),
          (s = e.call(this, t, n)).addChildrenMap('text', o),
          o.on(
            'cursorin',
            function () {
              var t = o.textOY,
                e = o.contentHeight,
                i = u !== t,
                n = c !== e;
              (u = t), (c = e), n && this.resizeController(), (i || n) && (this.t = o.t);
            },
            d(s)
          ),
          o.on(
            'textchange',
            function (t) {
              this.emit('textchange', t, this);
            },
            d(s)
          );
        var p = bE(n, 'content', void 0);
        return p && s.setText(p), s;
      }
      return (
        a(i, [
          {
            key: 'text',
            get: function () {
              return this.childrenMap.child.text;
            },
          },
          {
            key: 'lineHeight',
            get: function () {
              return this.childrenMap.child.lineHeight;
            },
          },
          {
            key: 'lineIndex',
            get: function () {
              return Math.floor(-this.childOY / this.lineHeight);
            },
          },
          {
            key: 'linesCount',
            get: function () {
              return this.childrenMap.child.linesCount;
            },
          },
          {
            key: 'contentHeight',
            get: function () {
              return this.childrenMap.child.contentHeight;
            },
          },
          {
            key: 'readOnly',
            get: function () {
              return this.childrenMap.child.readOnly;
            },
            set: function (t) {
              this.childrenMap.child.readOnly = t;
            },
          },
          {
            key: 'setReadOnly',
            value: function (t) {
              return this.childrenMap.child.setReadOnly(t), this;
            },
          },
        ]),
        i
      );
    })(EP);
  Object.assign(
    xE.prototype,
    {
      setText: function (t) {
        return this.childrenMap.child.setText(t), this;
      },
      appendText: function (t) {
        return this.setText(this.text + t), this;
      },
    },
    mE
  ),
    M.register('textAreaInput', function (t) {
      var e = new xE(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.TextAreaInput', xE);
  var CE = {
    getChildrenWidth: function () {
      if (this.rexSizer.hidden) return 0;
      var t,
        e = this.child;
      if (e.rexSizer.hidden) t = 0;
      else if (0 === this.scrollMode) t = this.getChildWidth(e);
      else t = 0;
      return t;
    },
    getChildrenHeight: function () {
      if (this.rexSizer.hidden) return 0;
      var t,
        e = this.child;
      if (e.rexSizer.hidden) t = 0;
      else
        switch (this.scrollMode) {
          case 0:
          default:
            t = 0;
            break;
          case 1:
            t = this.getChildHeight(e);
        }
      return t;
    },
    getChildrenSizers: function (t) {
      return void 0 === t && (t = []), this.child && this.child.isRexSizer && t.push(this.child), t;
    },
    resetChildPosition: function () {
      var t = this.left,
        e = this.top;
      switch (this.scrollMode) {
        case 0:
          e += this.childOY;
          break;
        case 1:
          t += this.childOY;
          break;
        default:
          (e += this.childOY), (t += this.childOX);
      }
      this.child.setPosition(t, e), this.resetChildPositionState(this.child), this.setMaskChildrenFlag();
    },
    layoutChildren: function () {
      var t,
        e,
        i = this.child;
      if (!i.rexSizer.hidden) {
        switch (this.scrollMode) {
          case 0:
            t = this.width;
            break;
          case 1:
            e = this.height;
        }
        i.isRexSizer ? i.runLayout(this, t, e) : Kp(i, t, e),
          this.resetChildPosition(),
          this.layoutChildrenMask(),
          this.maskChildren();
      }
    },
    removeChildCallback: function (t, e) {
      e || (t.clearMask && t.clearMask(!1));
    },
  };
  Object.assign(CE, _T);
  var wE = Phaser.Utils.Objects.IsPlainObject,
    SE = Phaser.Utils.Objects.GetValue,
    PE = Phaser.Display.Align.TOP_LEFT,
    TE = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        r(this, i),
          wE(n)
            ? ((n = SE((h = n), 'x', 0)),
              (s = SE(h, 'y', 0)),
              (o = SE(h, 'width', void 0)),
              (a = SE(h, 'height', void 0)))
            : wE(o) && ((o = SE((h = o), 'width', void 0)), (a = SE(h, 'height', void 0))),
          ((l = e.call(this, t, n, s, o, a, h)).type = 'rexScrollableBlock'),
          (l.child = void 0),
          (l.childrenMask = void 0),
          (l._childOY = 0),
          (l._childOX = 0),
          (l.execeedTopState = !1),
          (l.execeedBottomState = !1),
          (l.execeedLeftState = !1),
          (l.execeedRightState = !1),
          l.setScrollMode(SE(h, 'scrollMode', 0));
        var u = SE(h, 'clamplChildOY', !0),
          c = SE(h, 'clamplChildOX', u);
        l.setClampMode(u, c);
        var d = SE(h, 'child', void 0),
          f = SE(h, 'expand', !0);
        d.setOrigin && d.setOrigin(0), l.add(d), (l.sizerChildren = [d]);
        var p = l.getSizerConfig(d);
        return (
          (p.align = PE),
          (p.expand = f),
          (l.child = d),
          l.setupChildrenMask(SE(h, 'mask', void 0)),
          l.childrenMask && (l.maskGameObject = bT(l.childrenMask)),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.destroyChildrenMask(), (this.child = void 0), g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'setScrollMode',
            value: function (t) {
              return 'string' == typeof t && (t = TS[t.toLowerCase()]), (this.scrollMode = t), this;
            },
          },
          {
            key: 'setClampMode',
            value: function (t, e) {
              return (this.clampChildOY = t), (this.clampChildOX = e), this;
            },
          },
          {
            key: 'instHeight',
            get: function () {
              return 0 === this.scrollMode || 2 === this.scrollMode ? this.height : this.width;
            },
          },
          {
            key: 'instWidth',
            get: function () {
              return 0 === this.scrollMode || 2 === this.scrollMode ? this.width : this.height;
            },
          },
          {
            key: 'childHeight',
            get: function () {
              return 0 === this.scrollMode || 2 === this.scrollMode ? Ir(this.child) : Dr(this.child);
            },
          },
          {
            key: 'childWidth',
            get: function () {
              return 0 === this.scrollMode || 2 === this.scrollMode ? Dr(this.child) : Ir(this.child);
            },
          },
          {
            key: 'topChildOY',
            get: function () {
              return 0;
            },
          },
          {
            key: 'bottomChildOY',
            get: function () {
              return -this.visibleHeight;
            },
          },
          {
            key: 'leftChildOX',
            get: function () {
              return 0;
            },
          },
          {
            key: 'rightChildOX',
            get: function () {
              return -this.visibleWidth;
            },
          },
          {
            key: 'childVisibleHeight',
            get: function () {
              return this.instHeight;
            },
          },
          {
            key: 'childVisibleWidth',
            get: function () {
              return this.instWidth;
            },
          },
          {
            key: 'visibleHeight',
            get: function () {
              var t = this.childHeight - this.childVisibleHeight;
              return t < 0 && (t = 0), t;
            },
          },
          {
            key: 'visibleWidth',
            get: function () {
              var t = this.childWidth - this.childVisibleWidth;
              return t < 0 && (t = 0), t;
            },
          },
          {
            key: 'childOYExceedTop',
            value: function (t) {
              return void 0 === t && (t = this.childOY), t > this.topChildOY;
            },
          },
          {
            key: 'childOYExeceedBottom',
            value: function (t) {
              return void 0 === t && (t = this.childOY), t < this.bottomChildOY;
            },
          },
          {
            key: 'childOXExceedLeft',
            value: function (t) {
              return void 0 === t && (t = this.childOX), t > this.leftChildOX;
            },
          },
          {
            key: 'childOXExeceedRight',
            value: function (t) {
              return void 0 === t && (t = this.childOX), t < this.rightChildOX;
            },
          },
          {
            key: 'childOY',
            get: function () {
              return this._childOY;
            },
            set: function (t) {
              var e = this.topChildOY,
                i = this.bottomChildOY,
                n = this.childOYExceedTop(t),
                s = this.childOYExeceedBottom(t);
              this.clampChildOY && (this.childVisibleHeight > this.childHeight ? (t = 0) : n ? (t = e) : s && (t = i)),
                this._childOY !== t && ((this._childOY = t), this.resetChildPosition()),
                n && (this.execeedTopState || this.emit('execeedtop', this, t, e)),
                (this.execeedTopState = n),
                s && (this.execeedBottomState || this.emit('execeedbottom', this, t, i)),
                (this.execeedBottomState = s);
            },
          },
          {
            key: 'childOX',
            get: function () {
              return this._childOX;
            },
            set: function (t) {
              var e = this.leftChildOX,
                i = this.rightChildOX,
                n = this.childOXExceedLeft(t),
                s = this.childOXExeceedRight(t);
              this.clampChildOX && (this.childVisibleWidth > this.childWidth ? (t = 0) : n ? (t = e) : s && (t = i)),
                this._childOX !== t && ((this._childOX = t), this.resetChildPosition()),
                n && (this.execeedLeftState || this.emit('execeedleft', this, t, e)),
                (this.execeedLeftState = n),
                s && (this.execeedRightState || this.emit('execeedright', this, t, i)),
                (this.execeedRightState = s);
            },
          },
          {
            key: 'setChildOY',
            value: function (t) {
              return (this.childOY = t), this;
            },
          },
          {
            key: 'setChildOX',
            value: function (t) {
              return (this.childOX = t), this;
            },
          },
          {
            key: 't',
            get: function () {
              var t = this.visibleHeight;
              return 0 === t ? 0 : this.childOY / -t;
            },
            set: function (t) {
              this.childOY = -this.visibleHeight * t;
            },
          },
          {
            key: 's',
            get: function () {
              var t = this.visibleWidth;
              return 0 === t ? 0 : this.childOX / -t;
            },
            set: function (t) {
              this.childOX = -this.visibleWidth * t;
            },
          },
          {
            key: 'setChildOYByPercentage',
            value: function (t) {
              return (this.t = t), this;
            },
          },
          {
            key: 'setChildOXByPercentage',
            value: function (t) {
              return (this.s = t), this;
            },
          },
        ]),
        i
      );
    })(Ok);
  Object.assign(TE.prototype, CE);
  var OE = ['top', 'bottom', 'centerY', 'center'],
    ME = ['left', 'right', 'centerX', 'center'],
    EE = function (t, e, i) {
      var n,
        s = 'Y' === (e = e.toUpperCase()),
        r = this.childrenMap.child;
      if (s) {
        if (i)
          for (var o = 0, a = OE.length; o < a; o++) {
            var h = OE[o];
            if (-1 !== i.indexOf(h)) {
              i = h;
              break;
            }
          }
        switch (i) {
          case 'top':
            n = r.top - t.getTopLeft().y;
            break;
          case 'bottom':
            n = r.bottom - t.getBottomLeft().y;
            break;
          case 'centerY':
          case 'center':
            n = r.centerY - t.getCenter().y;
            break;
          default:
            var l = r.top - t.getTopLeft().y,
              u = r.bottom - t.getBottomLeft().y;
            n = l <= 0 && u >= 0 ? 0 : Math.abs(l) <= Math.abs(u) ? l : u;
        }
      } else {
        if (i)
          for (o = 0, a = ME.length; o < a; o++) {
            h = ME[o];
            if (-1 !== i.indexOf(h)) {
              i = h;
              break;
            }
          }
        switch (i) {
          case 'left':
            n = r.left - t.getTopLeft().x;
            break;
          case 'right':
            n = r.right - t.getTopRight().x;
            break;
          case 'centerX':
          case 'center':
            n = r.centerX - t.getCenter().x;
            break;
          default:
            var c = r.left - t.getTopLeft().x,
              d = r.right - t.getTopRight().x;
            n = c <= 0 && d >= 0 ? 0 : Math.abs(c) <= Math.abs(d) ? c : d;
        }
      }
      switch (this.scrollMode) {
        case 0:
        case 1:
          this.childOY += n;
          break;
        default:
          this['childO'.concat(e)] += n;
      }
    },
    _E = Phaser.Utils.Objects.GetValue,
    RE = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {});
        var o = OS(n),
          a = _E(n, 'panel', void 0);
        void 0 === a && (a = {}),
          (a.scrollMode = o),
          (a.clamplChildOY = _E(n, 'clamplChildOY', !1)),
          (a.clamplChildOX = _E(n, 'clamplChildOX', !1));
        var h,
          l,
          u = new TE(t, a);
        switch ((t.add.existing(u), o)) {
          case 0:
            (h = _E(n, 'expand.panel', !0)), (l = !0);
            break;
          case 1:
            (h = !0), (l = _E(n, 'expand.panel', !0));
            break;
          default:
            (h = !0), (l = !0);
        }
        (n.type = 'rexScrollablePanel'),
          (n.child = { gameObject: u, expandWidth: h, expandHeight: l, align: _E(n, 'align.panel', 'center') });
        var c = _E(n, 'space', void 0);
        return (
          c && (c.child = _E(c, 'panel', 0)),
          (s = e.call(this, t, n)).addChildrenMap('panel', u.child),
          s.addChildrenMap('panelLayer', u.maskLayer),
          s.addChildrenMap('mask', u.maskGameObject),
          s.addChildrenMap('scrollableBlock', u),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'setChildrenInteractive',
            value: function (t) {
              return (
                void 0 === t && (t = {}),
                t.hasOwnProperty('eventEmitter') || (t.eventEmitter = this),
                t.hasOwnProperty('targets') || (t.targets = [this.childrenMap.panel]),
                Sk(this.childrenMap.child, t),
                this
              );
            },
          },
        ]),
        i
      );
    })(EP),
    LE = {
      scrollToChild: function (t, e) {
        if (!this.hasChild(t)) return this;
        switch (this.scrollMode) {
          case 0:
            EE.call(this, t, 'y', e);
            break;
          case 1:
            EE.call(this, t, 'x', e);
            break;
          default:
            EE.call(this, t, 'y', e), EE.call(this, t, 'x', e);
        }
        return this;
      },
    };
  Object.assign(RE.prototype, LE),
    M.register('scrollablePanel', function (t) {
      var e = new RE(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.ScrollablePanel', RE);
  var BE = function (t, e) {
      t.popUp(e);
    },
    DE = function (t, e) {
      t.scaleDown(e);
    },
    IE = function (t, e) {
      t.fadeIn(e);
    },
    jE = function (t, e) {
      t.fadeOut(e);
    },
    AE = Phaser.Utils.Objects.GetValue,
    zE = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          void 0 === n && (n = { text: createDefaultTextObject(t) }),
          ((s = e.call(this, t, n)).type = 'rexToast'),
          s.setTransitInTime(AE(n, 'duration.in', 200)),
          s.setDisplayTime(AE(n, 'duration.hold', 1200)),
          s.setTransitOutTime(AE(n, 'duration.out', 200)),
          s.setTransitInCallback(AE(n, 'transitIn', FE.popUp)),
          s.setTransitOutCallback(AE(n, 'transitOut', FE.scaleDown)),
          (s.player = new dw(d(s), { dtMode: 1 })),
          (s.messages = []),
          (s.scaleX0 = void 0),
          (s.scaleY0 = void 0),
          s.setVisible(!1),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.player.destroy(),
                (this.player = void 0),
                (this.messages = void 0),
                g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'setDisplayTime',
            value: function (t) {
              return (this.displayTime = t), this;
            },
          },
          {
            key: 'setTransitOutTime',
            value: function (t) {
              return (this.transitOutTime = t), this;
            },
          },
          {
            key: 'setTransitInTime',
            value: function (t) {
              return (this.transitInTime = t), this;
            },
          },
          {
            key: 'setTransitInCallback',
            value: function (t) {
              switch (('string' == typeof t && (t = FE[t]), t)) {
                case FE.popUp:
                  t = BE;
                  break;
                case FE.fadeIn:
                  t = IE;
              }
              return t || (t = j), (this.transitInCallback = t), this;
            },
          },
          {
            key: 'setTransitOutCallback',
            value: function (t) {
              switch (('string' == typeof t && (t = FE[t]), t)) {
                case FE.scaleDown:
                  t = DE;
                  break;
                case FE.fadeOut:
                  t = jE;
              }
              return t || (t = j), (this.transitOutCallback = t), this;
            },
          },
          {
            key: 'setScale',
            value: function (t, e) {
              return (
                void 0 === e && (e = t),
                (this.scaleX0 = t),
                (this.scaleY0 = e),
                g(u(i.prototype), 'setScale', this).call(this, t, e),
                this
              );
            },
          },
          {
            key: 'showMessage',
            value: function (t) {
              if (
                (void 0 === this.scaleX0 && (this.scaleX0 = this.scaleX),
                void 0 === this.scaleY0 && (this.scaleY0 = this.scaleY),
                void 0 === t)
              ) {
                if (0 === this.messages.length) return this;
                t = this.messages.shift();
              }
              if (this.player.isPlaying) return this.messages.push(t), this;
              this.setScale(this.scaleX0, this.scaleY0).setVisible(!0),
                'string' == typeof t ? this.setText(t) : t(this),
                this.layout();
              var e = [
                [0, [this.transitInCallback, this, this.transitInTime]],
                [this.transitInTime, [j]],
                [this.displayTime, [this.transitOutCallback, this, this.transitOutTime]],
                [this.transitOutTime, [this.setVisible, !1]],
                [30, [j]],
              ];
              return (
                this.player
                  .load(e, this)
                  .once(
                    'complete',
                    function () {
                      this.showMessage();
                    },
                    this
                  )
                  .start(),
                this
              );
            },
          },
        ]),
        i
      );
    })(yx),
    FE = { popUp: 0, fadeIn: 1, scaleDown: 0, fadeOut: 1 };
  M.register('toast', function (t) {
    var e = new zE(this.scene, t);
    return this.scene.add.existing(e), e;
  }),
    $(window, 'RexPlugins.UI.Toast', zE);
  for (
    var VE,
      WE = function (t, e, i) {
        void 0 === i && (i = !0), i ? (e = e ? _(e) : {}) : e || (e = {});
        var n = new hu(t, e);
        return t.add.existing(n), n;
      },
      YE = [
        'AliceBlue',
        'AntiqueWhite',
        'Aqua',
        'Aquamarine',
        'Azure',
        'Beige',
        'Bisque',
        'Black',
        'BlanchedAlmond',
        'Blue',
        'BlueViolet',
        'Brown',
        'BurlyWood',
        'CadetBlue',
        'Chartreuse',
        'Chocolate',
        'Coral',
        'CornflowerBlue',
        'Cornsilk',
        'Crimson',
        'Cyan',
        'DarkBlue',
        'DarkCyan',
        'DarkGoldenRod',
        'DarkGray',
        'DarkGrey',
        'DarkGreen',
        'DarkKhaki',
        'DarkMagenta',
        'DarkOliveGreen',
        'DarkOrange',
        'DarkOrchid',
        'DarkRed',
        'DarkSalmon',
        'DarkSeaGreen',
        'DarkSlateBlue',
        'DarkSlateGray',
        'DarkSlateGrey',
        'DarkTurquoise',
        'DarkViolet',
        'DeepPink',
        'DeepSkyBlue',
        'DimGray',
        'DimGrey',
        'DodgerBlue',
        'FireBrick',
        'FloralWhite',
        'ForestGreen',
        'Fuchsia',
        'Gainsboro',
        'GhostWhite',
        'Gold',
        'GoldenRod',
        'Gray',
        'Grey',
        'Green',
        'GreenYellow',
        'HoneyDew',
        'HotPink',
        'IndianRed',
        'Indigo',
        'Ivory',
        'Khaki',
        'Lavender',
        'LavenderBlush',
        'LawnGreen',
        'LemonChiffon',
        'LightBlue',
        'LightCoral',
        'LightCyan',
        'LightGoldenRodYellow',
        'LightGray',
        'LightGrey',
        'LightGreen',
        'LightPink',
        'LightSalmon',
        'LightSeaGreen',
        'LightSkyBlue',
        'LightSlateGray',
        'LightSlateGrey',
        'LightSteelBlue',
        'LightYellow',
        'Lime',
        'LimeGreen',
        'Linen',
        'Magenta',
        'Maroon',
        'MediumAquaMarine',
        'MediumBlue',
        'MediumOrchid',
        'MediumPurple',
        'MediumSeaGreen',
        'MediumSlateBlue',
        'MediumSpringGreen',
        'MediumTurquoise',
        'MediumVioletRed',
        'MidnightBlue',
        'MintCream',
        'MistyRose',
        'Moccasin',
        'NavajoWhite',
        'Navy',
        'OldLace',
        'Olive',
        'OliveDrab',
        'Orange',
        'OrangeRed',
        'Orchid',
        'PaleGoldenRod',
        'PaleGreen',
        'PaleTurquoise',
        'PaleVioletRed',
        'PapayaWhip',
        'PeachPuff',
        'Peru',
        'Pink',
        'Plum',
        'PowderBlue',
        'Purple',
        'RebeccaPurple',
        'Red',
        'RosyBrown',
        'RoyalBlue',
        'SaddleBrown',
        'Salmon',
        'SandyBrown',
        'SeaGreen',
        'SeaShell',
        'Sienna',
        'Silver',
        'SkyBlue',
        'SlateBlue',
        'SlateGray',
        'SlateGrey',
        'Snow',
        'SpringGreen',
        'SteelBlue',
        'Tan',
        'Teal',
        'Thistle',
        'Tomato',
        'Turquoise',
        'Violet',
        'Wheat',
        'White',
        'WhiteSmoke',
        'Yellow',
        'YellowGreen',
      ],
      XE = [
        15792383, 16444375, 65535, 8388564, 15794175, 16119260, 16770244, 0, 16772045, 255, 9055202, 10824234, 14596231,
        6266528, 8388352, 13789470, 16744272, 6591981, 16775388, 14423100, 65535, 139, 35723, 12092939, 11119017,
        11119017, 25600, 12433259, 9109643, 5597999, 16747520, 10040012, 9109504, 15308410, 9419919, 4734347, 3100495,
        3100495, 52945, 9699539, 16716947, 49151, 6908265, 6908265, 2003199, 11674146, 16775920, 2263842, 16711935,
        14474460, 16316671, 16766720, 14329120, 8421504, 8421504, 32768, 11403055, 15794160, 16738740, 13458524,
        4915330, 16777200, 15787660, 15132410, 16773365, 8190976, 16775885, 11393254, 15761536, 14745599, 16448210,
        13882323, 13882323, 9498256, 16758465, 16752762, 2142890, 8900346, 7833753, 7833753, 11584734, 16777184, 65280,
        3329330, 16445670, 16711935, 8388608, 6737322, 205, 12211667, 9662683, 3978097, 8087790, 64154, 4772300,
        13047173, 1644912, 16121850, 16770273, 16770229, 16768685, 128, 16643558, 8421376, 7048739, 16753920, 16729344,
        14315734, 15657130, 10025880, 11529966, 14381203, 16773077, 16767673, 13468991, 16761035, 14524637, 11591910,
        8388736, 6697881, 16711680, 12357519, 4286945, 9127187, 16416882, 16032864, 3050327, 16774638, 10506797,
        12632256, 8900331, 6970061, 7372944, 7372944, 16775930, 65407, 4620980, 13808780, 32896, 14204888, 16737095,
        4251856, 15631086, 16113331, 16777215, 16119285, 16776960, 10145074,
      ],
      GE = {},
      HE = 0,
      UE = YE.length;
    HE < UE;
    HE++
  )
    (VE = YE[HE].toLowerCase()), (GE[VE] = XE[HE]);
  var NE,
    KE = function (t) {
      return (
        'string' != typeof t ||
          (t.startsWith('#')
            ? (t = parseInt(t.substring(1), 16))
            : t.startsWith('0x')
            ? (t = parseInt(t.substring(2), 16))
            : ((e = (e = t).toLowerCase()), (t = GE.hasOwnProperty(e) ? GE[e] : null))),
        t
      );
      var e;
    },
    JE = Phaser.Utils.String.Pad,
    qE = function (t, e) {
      void 0 === e && (e = '0x');
      var i = t.toString(16).toUpperCase();
      return (i = e + (i = JE(i, 6, 0, 1)));
    },
    ZE = Phaser.Utils.Objects.GetValue,
    $E = Phaser.Utils.Objects.IsPlainObject,
    QE = Phaser.Math.Clamp,
    t_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          (n.orientation = 0),
          ((s = e.call(this, t, n)).type = 'rexColorInputLite');
        var o,
          a = ZE(n, 'background', void 0),
          h = ZE(n, 'swatch');
        $E(h) && (o = ZE(h, 'size'));
        var l,
          u = (function (t, e) {
            if (!1 === e) return null;
            if (Ff(e)) return e;
            var i = new oe(t, e);
            return t.add.existing(i), i;
          })(t, ZE(n, 'swatch')),
          c = ZE(n, 'inputText', {});
        if ((c && (l = WE(t, c)), a && s.addBackground(a), u)) {
          var f;
          void 0 !== (o = ZE(n, 'swatchSize', o)) ? (Kp(u, o, o), (f = !1)) : (f = ZE(n, 'squareExpandSwatch', !0));
          var p = f ? 1 : 0;
          s.add(u, { proportion: 0, expand: !1, fitRatio: p });
        }
        if (l) {
          var v = void 0 === ZE(c, 'width') ? 1 : 0,
            g = void 0 === ZE(c, 'height');
          s.add(l, { proportion: v, expand: g });
        }
        s.addChildrenMap('background', a),
          s.addChildrenMap('swatch', u),
          s.addChildrenMap('inputText', l),
          l &&
            l.on(
              'close',
              function () {
                this.setValue(l.value);
              },
              d(s)
            );
        var y = ZE(n, 'valuechangeCallback', null);
        if (null !== y) {
          var k = ZE(n, 'valuechangeCallbackScope', void 0);
          s.on('valuechange', y, k);
        }
        return s.setValue(ZE(n, 'value', 0)), s;
      }
      return (
        a(i, [
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              if ('string' == typeof t) {
                if (null == (t = KE(t))) return void ((e = this.childrenMap.inputText) && e.setText(qE(this._value)));
              } else t = QE(Math.floor(t), 0, 16777215);
              if (this._value !== t) {
                this._value = t;
                var e,
                  i = this.childrenMap.swatch;
                i &&
                  (function (t, e) {
                    t && (t.setTint ? t.setTint(e) : t.setFillStyle && t.setFillStyle(e));
                  })(i, t),
                  (e = this.childrenMap.inputText) && e.setText(qE(t)),
                  this.emit('valuechange', this._value);
              }
            },
          },
          {
            key: 'setValue',
            value: function (t) {
              return (this.value = t), this;
            },
          },
          {
            key: 'color',
            get: function () {
              return this._value;
            },
            set: function (t) {
              this.value = t;
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return (this.color = t), this;
            },
          },
        ]),
        i
      );
    })(cx),
    e_ = {
      setCreateColorPickerBackgroundCallback: function (t) {
        return (this.colorPickerCreateBackgroundCallback = t), this;
      },
      setColorPickerHPalettePosition: function (t) {
        return (this.colorPickerHPalettePosition = t), this;
      },
      setColorPickerExpandDirection: function (t) {
        return 'string' == typeof t && (t = i_[t]), (this.colorPickerExpandDirection = t), this;
      },
      setColorPickerEaseInDuration: function (t) {
        return void 0 === t && (t = 0), (this.colorPickerEaseInDuration = t), this;
      },
      setColorPickerEaseOutDuration: function (t) {
        return void 0 === t && (t = 0), (this.colorPickerEaseOutDuration = t), this;
      },
      setColorPickerTransitInCallback: function (t) {
        return (this.colorPickerTransitInCallback = t), this;
      },
      setColorPickerTransitOutCallback: function (t) {
        return (this.colorPickerTransitOutCallback = t), this;
      },
      setColorPickerBounds: function (t) {
        return (this.colorPickerBounds = t), this;
      },
      setColorPickerWidth: function (t) {
        return (this.colorPickerWidth = t), this;
      },
      setColorPickerHeight: function (t) {
        return (this.colorPickerHeight = t), this;
      },
      setColorPickerSize: function (t, e) {
        return this.setColorPickerWidth(t).setColorPickerHeight(e), this;
      },
      setColorPickerSpace: function (t) {
        return void 0 === t && (t = {}), (this.colorPickerSpace = t), this;
      },
      setColorComponentsHeight: function (t) {
        return (this.colorComponentsHeight = t), this;
      },
      setColorComponentsFormatLabelConfig: function (t) {
        return (this.colorComponentsFormatLabelConfig = t), this;
      },
      setColorComponentsInputTextConfig: function (t) {
        return (this.colorComponentsInputTextConfig = t), this;
      },
      setColorComponentsSpace: function (t) {
        return void 0 === t && (t = {}), (this.colorComponentsSpace = t), this;
      },
    },
    i_ = { down: 0, up: 1 },
    n_ = Phaser.Display.Color,
    s_ = Phaser.Math.Percent,
    r_ = Phaser.Display.Color,
    o_ = Phaser.Math.Percent,
    a_ = Phaser.Display.Color.ColorToRGBA,
    h_ = Phaser.Display.Color.HSVToRGB,
    l_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 2),
          void 0 === a && (a = 2),
          ((l = e.call(this, t, n, s, o, a)).type = 'rexColorPicker.HPaletteCanvas'),
          (l.colorObject = new r_()),
          l.setOrientation(h),
          l.setSize(o, a),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'setOrientation',
            value: function (t) {
              return (this.orientation = hx(t)), this;
            },
          },
          {
            key: 'updateTexture',
            value: function () {
              return (
                (function (t, e, i) {
                  void 0 === i && (i = !1);
                  var n = t.width,
                    s = t.height,
                    r = new n_();
                  if (i)
                    for (var o = 0; o < s; o++) {
                      var a = s_(o, 0, s);
                      r.setFromHSV(a, 1, 1), (e.fillStyle = r.rgba), e.fillRect(0, o, n, 1);
                    }
                  else
                    for (var h = 0; h < n; h++)
                      (a = s_(h, 0, n)), r.setFromHSV(a, 1, 1), (e.fillStyle = r.rgba), e.fillRect(h, 0, 1, s);
                })(this.canvas, this.context, this.orientation),
                g(u(i.prototype), 'updateTexture', this).call(this),
                this
              );
            },
          },
          {
            key: 'color',
            get: function () {
              return this.colorObject.color;
            },
          },
          {
            key: 'hue',
            get: function () {
              return this._hue;
            },
            set: function (t) {
              this._hue = t;
            },
          },
          {
            key: 'getHue',
            value: function (t, e) {
              return (
                void 0 === t ||
                  (0 === this.orientation ? (this.hue = o_(t, 0, this.width)) : (this.hue = o_(e, 0, this.height))),
                this.hue
              );
            },
          },
          {
            key: 'getColor',
            value: function (t, e) {
              if (void 0 === t) return this.color;
              var i = this.getHue(t, e);
              return this.colorObject.setFromRGB(h_(i, 1, 1)), this.colorObject.color;
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return this.color, this;
            },
          },
          {
            key: 'colorToLocalPosition',
            value: function (t, e) {
              return (
                void 0 === e ? (e = {}) : !0 === e && (void 0 === u_ && (u_ = {}), (e = u_)),
                this.colorObject.setFromRGB(a_(t)),
                0 === this.orientation
                  ? ((e.x = this.width * this.colorObject.h), (e.y = this.height / 2))
                  : ((e.x = this.width / 2), (e.y = this.height * this.colorObject.h)),
                e
              );
            },
          },
        ]),
        i
      );
    })(Ic),
    u_ = void 0,
    c_ = Phaser.Math.RotateAround,
    d_ = function (t, e, i, n) {
      void 0 === n ? (n = {}) : !0 === n && (void 0 === NE && (NE = {}), (n = NE)),
        (e -= t.width * t.originX),
        (i -= t.height * t.originY);
      var s = { x: e * t.scaleX, y: i * t.scaleY };
      return c_(s, 0, 0, -t.rotation), (n.x = t.x + e), (n.y = t.y + i), n;
    },
    f_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {}), (s = e.call(this, t, n));
        var o = null != n.width ? 1 : 0,
          a = new l_(t).setOrientation(o);
        t.add.existing(a),
          (s.type = 'rexColorPicker.HPalette'),
          a
            .setInteractive()
            .on('pointerdown', s.onPaletteCanvasPointerDown, d(s))
            .on('pointermove', s.onPaletteCanvasPointerDown, d(s));
        var h = new oe(t, { strokeColor: 16777215, strokeWidth: 2 });
        return (
          t.add.existing(h), s.add(a, { key: 'paletteCanvas', expand: !0 }).add(h, { key: 'marker', expand: !1 }), s
        );
      }
      return (
        a(i, [
          {
            key: 'resize',
            value: function (t, e) {
              if (this.width === t && this.height === e) return this;
              g(u(i.prototype), 'resize', this).call(this, t, e);
              var n = Math.min(t, e);
              return this.childrenMap.marker.setSize(n, n), this;
            },
          },
          {
            key: 'onPaletteCanvasPointerDown',
            value: function (t, e, i, n) {
              if (t.isDown) {
                var s = this.childrenMap.paletteCanvas.getColor(e, i);
                this.setMarkerPosition(s), this.emit('input', s);
              }
            },
          },
          {
            key: 'color',
            get: function () {
              return this.childrenMap.paletteCanvas.color;
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return this.color === t || (this.childrenMap.paletteCanvas.setColor(t), this.setMarkerPosition(t)), this;
            },
          },
          {
            key: 'setMarkerPosition',
            value: function (t) {
              var e = this.childrenMap.paletteCanvas,
                i = this.childrenMap.marker,
                n = e.colorToLocalPosition(t, !0);
              return d_(e, n.x, n.y, i), this.resetChildPositionState(i), this;
            },
          },
          {
            key: 'getHue',
            value: function (t, e) {
              return this.childrenMap.paletteCanvas.getHue(t, e);
            },
          },
        ]),
        i
      );
    })(Wk),
    p_ = Phaser.Display.Color,
    v_ = Phaser.Math.Percent,
    g_ = Phaser.Display.Color.ColorToRGBA,
    y_ = Phaser.Display.Color.HSVToRGB,
    k_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          void 0 === n && (n = 0),
          void 0 === s && (s = 0),
          void 0 === o && (o = 2),
          void 0 === a && (a = 2),
          ((l = e.call(this, t, n, s, o, a)).type = 'rexColorPicker.SVPaletteCanvas'),
          void 0 === h && (h = 1),
          (l.colorObject = new p_()),
          l.setHue(h),
          l.setSize(o, a),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'color',
            get: function () {
              return this.colorObject.color;
            },
          },
          {
            key: 'hue',
            get: function () {
              return this._hue;
            },
            set: function (t) {
              this._hue !== t && ((this._hue = t), (this.colorObject.h = t), (this.dirty = !0));
            },
          },
          {
            key: 'setHue',
            value: function (t) {
              return (this.hue = t), this;
            },
          },
          {
            key: 'updateTexture',
            value: function () {
              return (
                (function (t, e, i) {
                  for (
                    var n = t.width, s = t.height, r = e.getImageData(0, 0, n, s), o = r.data, a = new n_(), h = 0;
                    h < s;
                    h++
                  )
                    for (var l = 0; l < n; l++) {
                      var u = s_(l, 0, n),
                        c = 1 - s_(h, 0, s);
                      a.setFromHSV(i, u, c);
                      var d = 4 * (h * n + l);
                      (o[d] = a.red), (o[d + 1] = a.green), (o[d + 2] = a.blue), (o[d + 3] = 255);
                    }
                  e.putImageData(r, 0, 0);
                })(this.canvas, this.context, this.hue),
                g(u(i.prototype), 'updateTexture', this).call(this),
                this
              );
            },
          },
          {
            key: 'getColor',
            value: function (t, e) {
              if (void 0 === t) return this.colorObject.color;
              var i = v_(t, 0, this.width),
                n = 1 - v_(e, 0, this.height);
              return this.colorObject.setFromRGB(y_(this.hue, i, n)), this.colorObject.color;
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return this.color === t || (this.colorObject.setFromRGB(g_(t)), this.setHue(this.colorObject.h)), this;
            },
          },
          {
            key: 'colorToLocalPosition',
            value: function (t, e) {
              return (
                void 0 === e ? (e = {}) : !0 === e && (void 0 === m_ && (m_ = {}), (e = m_)),
                this.colorObject.setFromRGB(g_(t)),
                (e.x = this.width * this.colorObject.s),
                (e.y = this.height * (1 - this.colorObject.v)),
                e
              );
            },
          },
        ]),
        i
      );
    })(Ic),
    m_ = void 0,
    b_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), (s = e.call(this, t, n));
        var o = new k_(t);
        t.add.existing(o),
          (s.type = 'rexColorPicker.SVPalette'),
          o
            .setInteractive()
            .on('pointerdown', s.onPaletteCanvasPointerDown, d(s))
            .on('pointermove', s.onPaletteCanvasPointerDown, d(s));
        var a = new oe(t, { radius: 5, strokeColor: 16777215, strokeWidth: 2 });
        return (
          t.add.existing(a), s.add(o, { key: 'paletteCanvas', expand: !0 }).add(a, { key: 'marker', expand: !1 }), s
        );
      }
      return (
        a(i, [
          {
            key: 'onPaletteCanvasPointerDown',
            value: function (t, e, i, n) {
              if (t.isDown) {
                var s = this.childrenMap.paletteCanvas.getColor(e, i);
                this.setMarkerPosition(s), this.emit('input', s);
              }
            },
          },
          {
            key: 'color',
            get: function () {
              return this.childrenMap.paletteCanvas.color;
            },
          },
          {
            key: 'setHue',
            value: function (t) {
              return this.childrenMap.paletteCanvas.setHue(t), this;
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return this.color === t || (this.childrenMap.paletteCanvas.setColor(t), this.setMarkerPosition(t)), this;
            },
          },
          {
            key: 'setMarkerPosition',
            value: function (t) {
              var e = this.childrenMap.paletteCanvas,
                i = this.childrenMap.marker,
                n = e.colorToLocalPosition(t, !0);
              return d_(e, n.x, n.y, i), this.resetChildPositionState(i), this;
            },
          },
        ]),
        i
      );
    })(Wk),
    x_ = Phaser.Utils.Objects.GetValue,
    C_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), ((s = e.call(this, t, n)).type = 'rexColorPicker'), (s.freezePalettes = !1);
        var o = x_(n, 'hPalette.position', 0);
        'string' == typeof o && (o = w_[o]);
        var a = 0 === o || 2 === o ? 1 : 0;
        s.setOrientation(a);
        var h,
          l,
          u = x_(n, 'background', void 0);
        0 === s.orientation
          ? void 0 === (l = x_(n, 'hPalette.width', void 0)) && (l = x_(n, 'hPalette.size', 10))
          : void 0 === (h = x_(n, 'hPalette.height', void 0)) && (h = x_(n, 'hPalette.size', 10));
        var c = new f_(t, { width: l, height: h });
        t.add.existing(c);
        var f = x_(n, 'svPalette.width', void 0),
          p = x_(n, 'svPalette.height', void 0),
          v = new b_(t, { width: f, height: p });
        t.add.existing(v), u && s.addBackground(u);
        var g,
          y,
          k = { proportion: 0, expand: !0 };
        0 === s.orientation
          ? ((g = void 0 === f ? 1 : 0), (y = void 0 === p))
          : ((g = void 0 === p ? 1 : 0), (y = void 0 === f));
        var m = { proportion: g, expand: y };
        0 === o || 3 === o ? s.add(v, m).add(c, k) : s.add(c, k).add(v, m),
          c.on(
            'input',
            function () {
              v.setHue(c.getHue()), this.setValue(v.color, !0);
            },
            d(s)
          ),
          v.on(
            'input',
            function () {
              this.setValue(v.color, !0);
            },
            d(s)
          ),
          s.addChildrenMap('background', u),
          s.addChildrenMap('hPalette', c),
          s.addChildrenMap('svPalette', v);
        var b = x_(n, 'valuechangeCallback', null);
        if (null !== b) {
          var x = x_(n, 'valuechangeCallbackScope', void 0);
          s.on('valuechange', b, x);
        }
        return s.setValue(x_(n, 'value', 16777215)), s;
      }
      return (
        a(i, [
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              if (this._value !== t) {
                var e = this._value;
                (this._value = t), this.freezePalettes || this.updatePalettes(), this.emit('valuechange', t, e, this);
              }
            },
          },
          {
            key: 'setValue',
            value: function (t, e) {
              return (this.freezePalettes = !!e), (this.value = t), (this.freezePalettes = !1), this;
            },
          },
          {
            key: 'color',
            get: function () {
              return this._value;
            },
            set: function (t) {
              this.value = t;
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return (this.color = t), this;
            },
          },
          {
            key: 'updatePalettes',
            value: function () {
              return (
                this.childrenMap.hPalette.setColor(this.color), this.childrenMap.svPalette.setColor(this.color), this
              );
            },
          },
          {
            key: 'postLayout',
            value: function (t, e, i) {
              return (
                this.childrenMap.hPalette.setMarkerPosition(this.value),
                this.childrenMap.svPalette.setMarkerPosition(this.value),
                this
              );
            },
          },
        ]),
        i
      );
    })(cx),
    w_ = { bottom: 0, left: 1, top: 2, right: 3 },
    S_ = Phaser.Utils.Objects.GetValue,
    P_ = Phaser.Display.Color,
    T_ = Phaser.Display.Color.ColorToRGBA,
    O_ = Phaser.Display.Color.HSVToRGB,
    M_ = Phaser.Math.Clamp,
    E_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          (n.orientation = 0),
          ((s = e.call(this, t, n)).type = 'rexColorComponents'),
          (s.colorObject = new P_());
        var o = S_(n, 'background', void 0),
          a = S_(n, 'formatLabel', void 0);
        Ff(a) || (a = pS(t, a).resetDisplayContent());
        var h = [];
        if (n.inputText0 && n.inputText1 && n.inputText2)
          h.push(n.inputText0), h.push(n.inputText1), h.push(n.inputText2);
        else
          for (var l = S_(n, 'inputText'), u = 0; u < 3; u++) {
            var c = WE(t, l).setMaxLength(3).setNumberInput();
            h.push(c);
          }
        o && s.addBackground(o);
        var f = S_(n, 'proportion.formatLabel', 0),
          p = !!a.isRexContainerLite,
          v = S_(n, 'expand.formatLabel', p);
        s.add(a, { proportion: f, expand: v });
        (f = void 0 === S_(l, 'width') ? 1 : 0), (v = void 0 === S_(l, 'height')), (u = 0);
        for (var g = h.length; u < g; u++) s.add(h[u], { proportion: f, expand: v });
        s.addChildrenMap('background', o),
          s.addChildrenMap('formatLabel', a),
          s.addChildrenMap('components', h),
          s.onClick(a, s.toggleColorFormat, d(s));
        for (u = 0, g = h.length; u < g; u++)
          h[u].on(
            'close',
            function () {
              this.updateColorObject(), this.setValue(this.colorObject.color);
            },
            d(s)
          );
        var y = S_(n, 'valuechangeCallback', null);
        if (null !== y) {
          var k = S_(n, 'valuechangeCallbackScope', void 0);
          s.on('valuechange', y, k);
        }
        return a.setText('RGB'), s.setValue(S_(n, 'value', 16777215)), s;
      }
      return (
        a(i, [
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              (t = M_(Math.floor(t), 0, 16777215)),
                this._value !== t &&
                  ((this._value = t),
                  this.colorObject.setFromRGB(T_(t)),
                  this.updateComponents(),
                  this.emit('valuechange', this._value));
            },
          },
          {
            key: 'setValue',
            value: function (t) {
              return (this.value = t), this;
            },
          },
          {
            key: 'color',
            get: function () {
              return this._value;
            },
            set: function (t) {
              this.value = t;
            },
          },
          {
            key: 'setColor',
            value: function (t) {
              return (this.color = t), this;
            },
          },
          {
            key: 'colorFormat',
            get: function () {
              return this.childrenMap.formatLabel.text;
            },
            set: function (t) {
              this.colorFormat !== t && (this.childrenMap.formatLabel.setText(t), this.updateComponents());
            },
          },
          {
            key: 'setColorFormat',
            value: function (t) {
              return (this.colorFormat = t), this;
            },
          },
          {
            key: 'toggleColorFormat',
            value: function () {
              return (this.colorFormat = 'RGB' === this.colorFormat ? 'HSV' : 'RGB'), this;
            },
          },
          {
            key: 'updateComponents',
            value: function () {
              var t,
                e,
                i,
                n = this.childrenMap.components;
              return (
                'RGB' === this.colorFormat
                  ? ((t = this.colorObject.red), (e = this.colorObject.green), (i = this.colorObject.blue))
                  : ((t = Math.floor(360 * this.colorObject.h)),
                    (e = Math.floor(100 * this.colorObject.s)),
                    (i = Math.floor(100 * this.colorObject.v))),
                n[0].setValue(t),
                n[1].setValue(e),
                n[2].setValue(i),
                this
              );
            },
          },
          {
            key: 'updateColorObject',
            value: function () {
              var t = this.childrenMap.components;
              if ('RGB' === this.colorFormat) {
                var e = M_(t[0].value, 0, 255),
                  i = M_(t[1].value, 0, 255),
                  n = M_(t[2].value, 0, 255);
                this.colorObject.setTo(e, i, n);
              } else {
                var s = M_(t[0].value, 0, 359) / 360,
                  r = M_(t[1].value, 0, 100) / 100,
                  o = M_(t[2].value, 0, 100) / 100;
                this.colorObject.setFromRGB(O_(s, r, o));
              }
              return this;
            },
          },
        ]),
        i
      );
    })(cx),
    __ = Phaser.Utils.Objects.GetValue,
    R_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          (n.orientation = 1),
          ((s = e.call(this, t, n)).type = 'rexColorInput.ColorPickerPanel');
        var o,
          a = __(n, 'background', void 0),
          h = new C_(t, {
            hPalette: n.hPalette || {},
            svPalette: n.svPalette || {},
            space: { item: __(n, 'space.hPalette', 8) },
          });
        return (
          t.add.existing(h),
          n.colorComponents && ((o = new E_(t, n.colorComponents)), t.add.existing(o)),
          a && (s.addBackground(a), new fg(a, { stopAllLevels: !1 })),
          s.add(h, { proportion: 1, expand: !0 }),
          o && s.add(o, { proportion: 0, expand: !0 }),
          s.addChildrenMap('background', a),
          s.addChildrenMap('colorPicker', h),
          s.addChildrenMap('colorComponents', o),
          h.on(
            'valuechange',
            function (t) {
              this.setValue(t);
            },
            d(s)
          ),
          o &&
            o.on(
              'valuechange',
              function (t) {
                this.setValue(t);
              },
              d(s)
            ),
          s.setValue(__(n, 'value', 16777215)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'value',
            get: function () {
              return this._value;
            },
            set: function (t) {
              if (this._value !== t) {
                (this._value = t), this.childrenMap.colorPicker.setValue(t);
                var e = this.childrenMap.colorComponents;
                e && e.setValue(t), this.emit('valuechange', t);
              }
            },
          },
          {
            key: 'setValue',
            value: function (t) {
              return (this.value = t), this;
            },
          },
        ]),
        i
      );
    })(cx);
  Phaser.Utils.Objects.GetValue;
  var L_ = function (t) {
      t = this.scene;
      var e,
        i = this.colorPickerCreateBackgroundCallback;
      i && ((e = i.call(this, t)), t.add.existing(e));
      var n = this.colorPickerWidth;
      void 0 === n && (n = this.width);
      var s,
        r = this.colorPickerHeight;
      void 0 === r && (r = n),
        (s = this.colorComponentsHeight > 0 && {
          height: this.colorComponentsHeight,
          formatLabel: this.colorComponentsFormatLabelConfig,
          inputText: this.colorComponentsInputTextConfig,
          space: this.colorComponentsSpace,
        });
      var o = new R_(t, {
        width: n,
        height: r,
        background: e,
        space: this.colorPickerSpace,
        hPalette: { position: this.colorPickerHPalettePosition },
        colorComponents: s,
        value: this.value,
      });
      return t.add.existing(o), o;
    },
    B_ = {
      openColorPicker: function () {
        if (!this.colorPicker) {
          var t = L_.call(this).layout(),
            e = new MO(t, {
              duration: { in: this.colorPickerEaseInDuration, out: this.colorPickerEaseOutDuration },
              transitIn: this.colorPickerTransitInCallback,
              transitOut: this.colorPickerTransitOutCallback,
              expandDirection: this.colorPickerExpandDirection,
              alignTargetX: this,
              alignTargetY: this,
              bounds: this.colorPickerBounds,
              touchOutsideClose: !0,
            })
              .on(
                'open',
                function () {
                  t.on(
                    'valuechange',
                    function (t) {
                      this.setValue(t);
                    },
                    this
                  );
                },
                this
              )
              .on(
                'close',
                function () {
                  (this.colorPicker = void 0), (this.dropDownBehavior = void 0);
                },
                this
              );
          return (this.colorPicker = t), (this.dropDownBehavior = e), this.pin(t), this;
        }
      },
    };
  Object.assign(B_, e_);
  var D_ = Phaser.Utils.Objects.GetValue,
    I_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          void 0 === n && (n = {}),
          ((s = e.call(this, t, n)).type = 'rexColorInput'),
          n.hasOwnProperty('colorPicker') || (n.colorPicker = { background: { color: 0 } });
        var o = n.colorPicker,
          a = !1 !== o && null !== o;
        if (a) {
          var h;
          s.setColorPickerSize(D_(o, 'width', 160), D_(o, 'height', 170));
          var l = D_(o, 'background');
          (h = l
            ? function (t) {
                return IC(t, l);
              }
            : D_(o, 'createBackgroundCallback')),
            s.setCreateColorPickerBackgroundCallback(h),
            s.setColorPickerHPalettePosition(D_(o, 'hPalettePosition', 0)),
            s.setColorPickerExpandDirection(D_(o, 'expandDirection')),
            s.setColorPickerEaseInDuration(D_(o, 'easeIn', 200)),
            s.setColorPickerEaseOutDuration(D_(o, 'easeOut', 200)),
            s.setColorPickerTransitInCallback(D_(o, 'transitIn')),
            s.setColorPickerTransitOutCallback(D_(o, 'transitOut')),
            s.setColorPickerBounds(D_(o, 'bounds'));
          var u = D_(o, 'space');
          void 0 === u && (u = { left: 10, right: 10, top: 10, bottom: 10, item: 8 }), s.setColorPickerSpace(u);
        }
        var c = n.colorComponents;
        if (a && !1 !== c && null !== c) {
          s.setColorComponentsHeight(D_(c, 'height', 30)), s.setColorComponentsFormatLabelConfig(D_(c, 'formatLabel'));
          var f = D_(c, 'inputText');
          f || (f = D_(n, 'inputText')), s.setColorComponentsInputTextConfig(f);
          var p = D_(c, 'space');
          void 0 === p && (p = { item: 8 }), s.setColorComponentsSpace(p);
        }
        var v = s.childrenMap.swatch;
        return v && a && s.onClick(v, s.openColorPicker, d(s)), s;
      }
      return a(i);
    })(t_);
  Object.assign(I_.prototype, B_),
    M.register('colorInput', function (t) {
      var e = new I_(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.ColorInput', I_),
    M.register('colorInputLite', function (t) {
      var e = new t_(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.ColorInputBase', t_),
    M.register('colorPicker', function (t) {
      var e = new C_(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.ColorPicker', C_),
    M.register('colorComponents', function (t) {
      var e = new E_(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.ColorComponents', E_);
  var j_ = function (t, e) {
      return function (i, n, s, r) {
        'panel' !== n && s.moveChild(i, r ? 0 : t, e);
      };
    },
    A_ = function (t, e) {
      return function (i, n, s, r) {
        'panel' === n && s.moveChild(i, r ? 0 : t, e);
      };
    },
    z_ = {
      visible: {
        show: function () {
          return function (t, e, i, n) {
            'panel' !== e && i.setChildVisible(t, !0);
          };
        },
        hide: function () {
          return function (t, e, i, n) {
            'panel' !== e && i.setChildVisible(t, !1);
          };
        },
      },
      fade: {
        show: function (t, e) {
          return (
            void 0 === e && (e = 1),
            function (i, n, s, r) {
              'panel' !== n && s.fadeChild(i, r ? 0 : t, e);
            }
          );
        },
        hide: function (t, e) {
          return (
            void 0 === e && (e = 0),
            function (i, n, s, r) {
              'panel' !== n && s.fadeChild(i, r ? 0 : t, e);
            }
          );
        },
      },
      move: { show: j_, hide: j_ },
      'move-panel': { show: A_, hide: A_ },
    },
    F_ = Kf.prototype.setChildVisible,
    V_ = {
      setChildVisible: function (t, e) {
        if ('string' == typeof t) {
          var i = t;
          t = this.sizerChildren[i];
        } else i = zk(this.sizerChildren, t);
        return void 0 === e && (e = this.currentChildKey === i), F_.call(this, t, e), this;
      },
    },
    W_ = {
      fadeChild: function (t, e, i) {
        var n;
        return (
          'string' == typeof t ? ((n = t), (t = this.sizerChildren[n])) : (n = zk(this.sizerChildren, t)),
          void 0 === e && (e = 500),
          void 0 === i && (i = this.currentChildKey === n ? 1 : 0),
          t.fadeIn(e, { start: t.alpha, end: i }),
          this
        );
      },
      fadeChildPromise: function (t, e, i) {
        return (
          'string' == typeof t && (t = this.sizerChildren[key]),
          this.fadeChild(t, e, i),
          t._fade ? Eh(t._fade) : Promise.resolve()
        );
      },
    },
    Y_ = {
      moveChild: function (t, e, i, n) {
        var s;
        'string' == typeof t ? ((s = t), (t = this.sizerChildren[s])) : (s = zk(this.sizerChildren, t)),
          void 0 === e && (e = 500);
        var r,
          o,
          a,
          h,
          l = this.currentChildKey === s;
        if (void 0 === n)
          switch (s) {
            case 'leftSide':
            case 'rightSide':
              n = Dr(t);
              break;
            case 'topSide':
            case 'bottomSide':
              n = Ir(t);
              break;
            default:
              if (l)
                switch (this.previousChildKey) {
                  case 'leftSide':
                  case 'rightSide':
                    n = Dr(this.sizerChildren[this.previousChildKey]);
                    break;
                  case 'topSide':
                  case 'bottomSide':
                    n = Ir(this.sizerChildren[this.previousChildKey]);
                    break;
                  default:
                    n = 0;
                }
              else
                switch (this.currentChildKey) {
                  case 'leftSide':
                  case 'rightSide':
                    n = Dr(this.sizerChildren[this.currentChildKey]);
                    break;
                  case 'topSide':
                  case 'bottomSide':
                    n = Ir(this.sizerChildren[this.currentChildKey]);
                    break;
                  default:
                    n = 0;
                }
          }
        if (l)
          switch (s) {
            case 'panel':
              switch (this.previousChildKey) {
                case 'leftSide':
                  r = !0;
                  break;
                case 'rightSide':
                  o = !0;
                  break;
                case 'topSide':
                  a = !0;
                  break;
                case 'bottomSide':
                  h = !0;
              }
              break;
            case 'leftSide':
              o = !0;
              break;
            case 'rightSide':
              r = !0;
              break;
            case 'topSide':
              h = !0;
              break;
            case 'bottomSide':
              a = !0;
          }
        else
          switch (s) {
            case 'panel':
              switch (this.currentChildKey) {
                case 'leftSide':
                  o = !0;
                  break;
                case 'rightSide':
                  r = !0;
                  break;
                case 'topSide':
                  h = !0;
                  break;
                case 'bottomSide':
                  a = !0;
              }
              break;
            case 'leftSide':
              r = !0;
              break;
            case 'rightSide':
              o = !0;
              break;
            case 'topSide':
              a = !0;
              break;
            case 'bottomSide':
              h = !0;
          }
        return (
          r
            ? t.moveTo(e, '-='.concat(n), void 0, i)
            : o
            ? t.moveTo(e, '+='.concat(n), void 0, i)
            : a
            ? t.moveTo(e, void 0, '-='.concat(n), i)
            : h
            ? t.moveTo(e, void 0, '+='.concat(n), i)
            : t.moveTo(0),
          this
        );
      },
      moveChildPromise: function (t, e, i, n) {
        return (
          'string' == typeof t && (t = this.sizerChildren[key]),
          this.moveChild(t, e, i, n),
          t._easeMove ? Eh(t._easeMove) : Promise.resolve()
        );
      },
    },
    X_ = {};
  Object.assign(X_, V_, W_, Y_);
  var G_ = Phaser.Utils.Objects.GetValue,
    H_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          ((s = e.call(this, t, n)).type = 'rexSides'),
          (s.childrenMap = s.sizerChildren),
          (s.previousChildKey = void 0),
          (s.currentChildKey = void 0);
        var o = G_(n, 'showChildCallback', void 0);
        if (o)
          if (Eg(o)) {
            var a = G_(n, 'showChildCallbackScope', void 0);
            s.on('showchild', o, a);
            var h = G_(n, 'hideChildCallback', void 0),
              l = G_(n, 'hideChildCallbackScope', void 0);
            s.on('hidechild', h, l);
          } else {
            var u = (function (t) {
              var e,
                i,
                n,
                s,
                r = b('string' == typeof t ? [t] : t);
              return (
                (e = r[0]),
                (i = r.slice(1)),
                z_.hasOwnProperty(e)
                  ? ((n = z_[e].show.apply(null, i)), (s = z_[e].hide.apply(null, i)))
                  : ((n = j), (s = j)),
                { show: n, hide: s }
              );
            })(o);
            s.on('showchild', u.show), s.on('hidechild', u.hide);
          }
        var c = G_(n, 'background', void 0),
          d = G_(n, 'panel', void 0),
          f = G_(n, 'leftSide', void 0),
          p = G_(n, 'rightSide', void 0),
          v = G_(n, 'topSide', void 0),
          g = G_(n, 'bottomSide', void 0);
        if ((c && s.addBackground(c), d && s.add(d, 'panel', 'center', 0, !0), f)) {
          var y = G_(n, 'expand.left', !0);
          s.add(f, 'leftSide', 'left-top', 0, { height: y });
        }
        if (p) {
          y = G_(n, 'expand.right', !0);
          s.add(p, 'rightSide', 'right-top', 0, { height: y });
        }
        if (v) {
          y = G_(n, 'expand.top', !0);
          s.add(v, 'topSide', 'left-top', 0, { width: y });
        }
        if (g) {
          y = G_(n, 'expand.bottom', !0);
          s.add(g, 'bottomSide', 'left-bottom', 0, { width: y });
        }
        return s;
      }
      return (
        a(i, [
          {
            key: 'reset',
            value: function () {
              return (
                (this.previousChildKey = void 0),
                (this.currentChildKey = 'panel'),
                this.showChild('panel', !0),
                this.hideChild('leftSide', !0),
                this.hideChild('rightSide', !0),
                this.hideChild('topSide', !0),
                this.hideChild('bottomSide', !0),
                this
              );
            },
          },
        ]),
        i
      );
    })(Wk);
  Object.assign(
    H_.prototype,
    {
      showChild: function (t, e) {
        var i = this.sizerChildren[t];
        return i && (this.emit('showchild', i, t, this, e), this.resetChildState(i)), this;
      },
      hideChild: function (t, e) {
        var i = this.sizerChildren[t];
        return i && (this.emit('hidechild', i, t, this, e), this.resetChildState(i)), this;
      },
      swapChild: function (t, e) {
        return (
          this.currentChildKey === t ||
            ('panel' === this.currentChildKey || 'panel' === t
              ? ((this.previousChildKey = this.currentChildKey),
                (this.currentChildKey = t),
                this.hideChild(this.previousChildKey, e),
                this.showChild(this.currentChildKey, e))
              : (this.swapChild('panel', e), this.swapChild(t, e))),
          this
        );
      },
      showPanel: function (t) {
        return this.swapChild('panel', t), this;
      },
      showLeftSide: function () {
        return this.swapChild('leftSide'), this;
      },
      showRightSide: function () {
        return this.swapChild('rightSide'), this;
      },
      showTopSide: function () {
        return this.swapChild('topSide'), this;
      },
      showBottomSide: function () {
        return this.swapChild('bottomSide'), this;
      },
      hideLeftSide: function () {
        return 'leftSide' == this.currentChildKey && this.showPanel(), this;
      },
      hideRightSide: function () {
        return 'rightSide' == this.currentChildKey && this.showPanel(), this;
      },
      hideTopSide: function () {
        return 'topSide' == this.currentChildKey && this.showPanel(), this;
      },
      hideBottomSide: function () {
        return 'bottomSide' == this.currentChildKey && this.showPanel(), this;
      },
      toggleLeftSide: function () {
        var t = 'panel' !== this.currentChildKey ? 'panel' : 'leftSide';
        return this.swapChild(t), this;
      },
      toggleRightSide: function () {
        var t = 'panel' !== this.currentChildKey ? 'panel' : 'rightSide';
        return this.swapChild(t), this;
      },
      toggleTopSide: function () {
        var t = 'panel' !== this.currentChildKey ? 'panel' : 'topSide';
        return this.swapChild(t), this;
      },
      toggleBottomSide: function () {
        var t = 'panel' !== this.currentChildKey ? 'panel' : 'bottomSide';
        return this.swapChild(t), this;
      },
    },
    X_
  ),
    M.register('sides', function (t) {
      var e = new H_(this.scene, t);
      return this.scene.add.existing(e), e;
    }),
    $(window, 'RexPlugins.UI.Sides', H_);
  var U_ = Phaser.Utils.Array.GetFirst,
    N_ = Phaser.Utils.Array.Remove,
    K_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (n = UC(t, n)), ((s = e.call(this, t, n)).type = 'rexTweaker.Title'), s;
      }
      return (
        a(i, [
          {
            key: 'setTitle',
            value: function (t) {
              return (
                (t = t ? _(t) : {}).hasOwnProperty('text') ||
                  (t.hasOwnProperty('title') ? (t.text = t.title) : (t.text = '')),
                this.resetDisplayContent(t),
                this
              );
            },
          },
        ]),
        i
      );
    })(yx),
    J_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i), void 0 === n && (n = {}), ((s = e.call(this, t, n)).type = 'rexTweaker.FolderTitle');
        var o = new jd(t, n.expandedIcon);
        return (
          t.add.existing(o),
          s.addSpace().add(o, { proportion: 0, expand: !1, padding: 1, fitRatio: 1 }),
          s.addChildrenMap('expandedIcon', o),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'setExpandedState',
            value: function (t) {
              void 0 === t && (t = !0);
              var e = t ? 'down' : 'right';
              return this.childrenMap.expandedIcon.setDirection(e), this;
            },
          },
        ]),
        i
      );
    })(K_),
    q_ = function (t, e) {
      var i = new xR(t, e);
      return t.add.existing(i), i;
    },
    Z_ = function (t, e, i) {
      return IC(t, i);
    },
    $_ = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), ((s = e.call(this, t, n)).type = 'rexTweaker.Folder'), s;
      }
      return (
        a(i, [
          {
            key: 'setTitle',
            value: function (t) {
              return this.childrenMap.title.setTitle(t), this;
            },
          },
        ]),
        i
      );
    })(kE);
  Object.assign(
    $_.prototype,
    {
      setBindingTarget: function (t) {
        return this.childrenMap.child.setBindingTarget(t), this;
      },
    },
    {
      getMaxInputRowTitleWidth: function () {
        return this.childrenMap.child.getMaxInputRowTitleWidth() + this.getInnerPadding('left');
      },
      setInputRowTitleWidth: function (t) {
        return (t -= this.getInnerPadding('left')), this.childrenMap.child.setInputRowTitleWidth(t), this;
      },
    }
  );
  var Q_ = Phaser.Utils.Objects.GetValue,
    tR = Phaser.Utils.Objects.GetValue,
    eR = {
      getMaxInputRowTitleWidth: function () {
        for (var t = 0, e = this.childrenMap.pages.children, i = 0, n = e.length; i < n; i++)
          t = Math.max(t, e[i].getMaxInputRowTitleWidth());
        return t + this.getInnerPadding('left');
      },
      setInputRowTitleWidth: function (t) {
        t -= this.getInnerPadding('left');
        for (var e = this.childrenMap.pages.children, i = 0, n = e.length; i < n; i++) e[i].setInputRowTitleWidth(t);
        return this;
      },
    },
    iR = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), ((s = e.call(this, t, n)).type = 'rexTweaker.TabPages'), s;
      }
      return a(i);
    })(cE);
  Object.assign(
    iR.prototype,
    {
      setBindingTarget: function (t) {
        for (var e = this.childrenMap.pages.children, i = 0, n = e.length; i < n; i++) e[i].setBindingTarget(t);
        return this;
      },
    },
    eR
  );
  var nR = Phaser.Utils.Objects.GetValue,
    sR = Phaser.Utils.Objects.GetValue,
    rR = Phaser.Utils.Objects.GetValue,
    oR = {
      setupBinding: function () {
        return (
          this.childrenMap.inputField.on(
            'valuechange',
            function (t) {
              this.autoUpdateEnable && this.setTargetValue(t);
            },
            this
          ),
          this
        );
      },
      setAutoUpdateEnable: function (t) {
        return void 0 === t && (t = !0), (this.autoUpdateEnable = t), this;
      },
      setBindingTarget: function (t, e) {
        return (this.bindingTarget = t), void 0 !== e && this.setBindingTargetKey(e), this.syncTargetValue(), this;
      },
      setBindingTargetKey: function (t) {
        return (this.bindTargetKey = t), this;
      },
      setValueCallbacks: function (t) {
        return (this.onGetValue = rR(t, 'onGetValue')), (this.onSetValue = rR(t, 'onSetValue')), this;
      },
      getTargetValue: function () {
        if (this.bindingTarget)
          return null != this.bindTargetKey
            ? this.bindingTarget[this.bindTargetKey]
            : this.onGetValue
            ? this.onGetValue(this.bindingTarget)
            : void 0;
      },
      setTargetValue: function (t) {
        return this.bindingTarget
          ? null != this.bindTargetKey
            ? ((this.bindingTarget[this.bindTargetKey] = t), this)
            : (this.onSetValue && this.onSetValue(this.bindingTarget, t), this)
          : this;
      },
      syncTargetValue: function () {
        if (!this.bindingTarget) return this;
        var t = this.childrenMap.inputField;
        return t.syncValue && t.syncValue(this.getTargetValue()), this;
      },
    },
    aR = Phaser.Utils.Objects.GetValue,
    hR = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        r(this, i),
          ((s = e.call(this, t, n)).type = 'rexTweaker.InputRow'),
          (s.bindingTarget = void 0),
          (s.bindTargetKey = void 0),
          (s.autoUpdateEnable = !0);
        var o,
          a = n.inputTitle,
          h = n.inputField,
          l = n.background,
          u = aR(n, 'proportion.title', 0),
          c = aR(n, 'space.title', 0);
        (o = 0 === s.orientation ? { right: c } : { bottom: c }), s.add(a, { proportion: u, expand: !0, padding: o });
        var d = h.defaultProportion;
        void 0 === d && (d = 1 === n.parentOrientation ? 1 : 0);
        u = aR(n, 'proportion.inputField', d);
        return (
          s.add(h, { proportion: u, expand: !0 }),
          l && s.addBackground(l),
          s.addChildrenMap('title', a),
          s.addChildrenMap('inputField', h),
          s.addChildrenMap('background', l),
          s.setupBinding(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (this.stopMonitorTarget(), g(u(i.prototype), 'destroy', this).call(this, t));
            },
          },
          {
            key: 'setTitle',
            value: function (t) {
              return this.childrenMap.title.setTitle(t), this;
            },
          },
          {
            key: 'preLayout',
            value: function () {
              var t = this.childrenMap.title;
              t && (t.minWidth = 0), g(u(i.prototype), 'preLayout', this).call(this);
            },
          },
        ]),
        i
      );
    })(cx);
  Object.assign(
    hR.prototype,
    oR,
    {
      startMonitorTarget: function () {
        return (
          this.isMonitoring ||
            ((this.isMonitoring = !0), this.scene.events.on('postupdate', this.onMonitorTarget, this)),
          this
        );
      },
      stopMonitorTarget: function () {
        return this.isMonitoring
          ? ((this.isMonitoring = !1), this.scene.events.off('postupdate', this.onMonitorTarget, this), this)
          : this;
      },
      onMonitorTarget: function () {
        if (this.bindingTarget) {
          var t = this.getTargetValue(),
            e = this.childrenMap.inputField;
          e.value !== t && e.syncValue(t);
        }
      },
    },
    {
      getMinTitleWidth: function () {
        var t = this.childrenMap.title;
        if (!t || 0 !== t.orientation) return 0;
        var e = t.rexSizer.padding;
        return this.getChildWidth(this.childrenMap.title) + e.left + e.right + this.getInnerPadding('left');
      },
      setMinTitleWidth: function (t) {
        var e = this.childrenMap.title;
        if (!e || 0 !== e.orientation) return this;
        var i = e.rexSizer.padding;
        return (t -= i.left + i.right), (e.minWidth = t), this;
      },
    }
  );
  var lR = function (t, e, i) {
      var n = new K_(t, i);
      return t.add.existing(n), n;
    },
    uR = function (t) {
      void 0 === t && (t = cx);
      var e = (function (t) {
        l(i, t);
        var e = p(i);
        function i() {
          return r(this, i), e.apply(this, arguments);
        }
        return (
          a(i, [
            {
              key: 'bindingTarget',
              get: function () {
                return this.getParentSizer().bindingTarget;
              },
            },
            {
              key: 'bindingKey',
              get: function () {
                return this.getParentSizer().bindTargetKey;
              },
            },
            {
              key: 'value',
              get: function () {
                return this._value;
              },
              set: function (t) {
                if (
                  this._value !== t &&
                  (this.validate(t) || (t = this._value),
                  this.displayValueCallback && this.displayValueCallback(this, t),
                  this._value !== t)
                ) {
                  var e = this._value;
                  (this._value = t),
                    this.syncValueFlag || this.emit('valuechange', t, e, this.bindingTarget, this.bindingKey);
                }
              },
            },
            {
              key: 'validate',
              value: function (t) {
                return (
                  !(!this.syncValueFlag && this.validateCallback) ||
                  this.validateCallback(t, this._value, this.bindingTarget, this.bindingKey)
                );
              },
            },
            {
              key: 'getFotmatText',
              value: function (t) {
                return (t = this.textFormatCallback ? this.textFormatCallback(t) : t.toString());
              },
            },
            {
              key: 'getValue',
              value: function () {
                return this.value;
              },
            },
            {
              key: 'setValue',
              value: function (t) {
                return (this.value = t), this;
              },
            },
            {
              key: 'syncValue',
              value: function (t) {
                return (this.syncValueFlag = !0), (this.value = t), (this.syncValueFlag = !1), this;
              },
            },
            {
              key: 'setup',
              value: function (t, e) {
                return (
                  void 0 === e && (e = !1),
                  (e || t.hasOwnProperty('format')) && this.setTextFormatCallback(t.format),
                  (e || t.hasOwnProperty('onValidate')) && this.setValidateCallback(t.onValidate),
                  this.setupCallback && this.setupCallback(this, t, e),
                  this
                );
              },
            },
            {
              key: 'setSetupCallback',
              value: function (t) {
                return (this.setupCallback = t), this;
              },
            },
            {
              key: 'setDisplayValueCallback',
              value: function (t) {
                return (this.displayValueCallback = t), this;
              },
            },
            {
              key: 'setTextFormatCallback',
              value: function (t) {
                return (this.textFormatCallback = t), this;
              },
            },
            {
              key: 'setValidateCallback',
              value: function (t) {
                return (this.validateCallback = t), this;
              },
            },
          ]),
          i
        );
      })(t);
      return e;
    },
    cR = function (t, e, i) {
      for (var n, s = this.inputHandlers, r = 0, o = s.length; r < o; r++) {
        var a = s[r];
        if (a.accept(e)) {
          (n = new (uR(a.baseClass))(t)),
            t.add.existing(n),
            n.setSetupCallback(a.setup).setDisplayValueCallback(a.displayValue),
            a.build(n, i);
          break;
        }
      }
      return n && n.setup(e, !0), n;
    },
    dR = Phaser.Utils.Objects.GetValue,
    fR = function (t, i, n) {
      var s = cR.call(this, t, i, n);
      if (!s) return null;
      var r = dR(n, 'title') || {},
        o = lR(t, 0, r),
        a = dR(n, 'background') || {},
        h = IC(t, a),
        l = new hR(t, e(e(e({}, n), i), {}, { inputTitle: o, inputField: s, background: h }));
      return t.add.existing(l), l.setTitle(i), l.setValueCallbacks(i), l;
    },
    pR = Phaser.Utils.Objects.GetValue,
    vR = Phaser.Utils.Objects.GetValue,
    gR = function (t, i, n) {
      for (
        var s = vR(n, 'title') || {},
          r = lR(t, 0, s),
          o = i.buttons,
          a = vR(n, 'button') || {},
          h = [],
          l = 0,
          u = o.length;
        l < u;
        l++
      ) {
        var c = pS(t, a);
        h.push(c);
        var d = o[l];
        c.resetDisplayContent(d.label), (c.callback = d.callback);
      }
      var f = (function (t, e) {
        var i = new (pR(e, 'wrap', !1) ? nS : Vw)(t, e);
        return t.add.existing(i), i;
      })(t, { buttons: h, expand: !0, wrap: vR(i, 'wrap', !1) });
      f.defaultProportion = 1;
      var p = (function (t, e) {
          var i = new oe(t, e);
          return t.add.existing(i), i;
        })(t, vR(n, 'background') || {}),
        v = new hR(t, e(e({}, n), {}, { inputTitle: r, inputField: f, background: p }));
      return (
        t.add.existing(v),
        v.setTitle(i),
        f.on('button.click', function (t) {
          t.callback(v.bindingTarget);
        }),
        v
      );
    },
    yR = Phaser.Utils.Objects.GetValue,
    kR = Phaser.Utils.Objects.GetValue,
    mR = {
      registerInputHandler: function (t) {
        var e = !0;
        return (
          t.hasOwnProperty('accept') ||
            ((e = !1),
            console.error("[Tweaker] Can't register inputHandler '".concat(t.name, "', missing 'accept' callback."))),
          t.hasOwnProperty('build') ||
            ((e = !1),
            console.error("[Tweaker] Can't register inputHandler '".concat(t.name, "', missing 'build' callback."))),
          e && this.inputHandlers.unshift(t),
          this
        );
      },
      removeInputHandler: function (t) {
        var e = U_(this.inputHandlers, 'name', t);
        return e && N_(this.inputHandlers, e), this;
      },
      addFolder: function (t) {
        var e = this.scene,
          i = tR(this.styles, 'folder') || {};
        (i.tweaker = this.styles), (i.root = this.root);
        var n = (function (t, e, i) {
          var n = Q_(i, 'title') || {},
            s = new J_(t, n);
          t.add.existing(s),
            s
              .on('folder.expand', function () {
                s.setExpandedState(!0);
              })
              .on('folder.collapse', function () {
                s.setExpandedState(!1);
              });
          var r = { root: Q_(i, 'root'), styles: Q_(i, 'tweaker'), space: Q_(i, 'space') || {} },
            o = q_(t, r),
            a = Q_(i, 'background'),
            h = Z_(t, 0, a),
            l = new $_(t, {
              orientation: 1,
              title: s,
              child: o,
              background: h,
              transition: { duration: Q_(i, 'transition.duration', 200) },
            });
          return t.add.existing(l), l;
        })(e, 0, i);
        delete i.tweaker,
          delete i.root,
          this.add(n, { expand: !0 }),
          n.setTitle(t),
          tR(t, 'expanded', !0) ? n.expand(0) : n.collapse(0);
        var s = n.getElement('child');
        return t.key && this.root.addChildrenMap(t.key, s), s;
      },
      addTab: function (t) {
        var e = this.scene,
          i = sR(this.styles, 'tab') || {};
        (i.tweaker = this.styles), (i.root = this.root);
        var n = (function (t, e, i) {
          var n = new iR(t, i);
          t.add.existing(n);
          for (
            var s = nR(i, 'tab'),
              r = { root: nR(i, 'root'), styles: nR(i, 'tweaker') },
              o = nR(e, 'pages') || [],
              a = 0,
              h = o.length;
            a < h;
            a++
          ) {
            var l = o[a];
            n.addPage({
              key: l.title,
              tab: pS(t, s).setActiveState(!1).resetDisplayContent({ text: l.title }),
              page: q_(t, r),
            });
          }
          return (
            n
              .on('tab.focus', function (t, e) {
                t.setActiveState(!0);
              })
              .on('tab.blur', function (t, e) {
                t.setActiveState(!1);
              }),
            n
          );
        })(e, t, i);
        delete i.tweaker, delete i.root, this.add(n, { expand: !0 });
        for (var s = sR(t, 'pages') || [], r = [], o = 0, a = 0, h = s.length; a < h; a++) {
          var l = n.getPage(a);
          s[a].show && (o = a);
          var u = s[a].key;
          u && this.root.addChildrenMap(u, l), r.push(l);
        }
        return n.swapPage(o, 0), r;
      },
      addInput: function (t, e, i) {
        1 === arguments.length
          ? ((t = (i = t).bindingTarget), (e = i.bindingKey))
          : (void 0 === i && (i = {}), (i.bindingTarget = t), (i.bindingKey = e)),
          i.title || (i.title = e),
          i.bindingTarget && i.bindingKey ? (i.value = i.bindingTarget[i.bindingKey]) : (i.value = void 0);
        var n = this.styles.inputRow || {};
        n.parentOrientation = this.styles.orientation;
        var s = fR.call(this, this.scene, i, n);
        if (!s)
          return (
            console.error(
              "[Tweaker] Can't add Input\n    title: ".concat(i.title, '\n    view: ').concat(i.view, '\n')
            ),
            this
          );
        var r,
          o = s.childrenMap.inputField;
        return (
          1 === this.orientation ? (r = 0) : ((r = this.itemWidth > 0 ? 0 : 1), s.setMinWidth(this.itemWidth)),
          this.add(s, { proportion: r, expand: !0 }),
          i.onValueChange && o.on('valuechange', i.onValueChange),
          s.setAutoUpdateEnable(i.autoUpdate),
          s.setBindingTarget(t, e),
          i.monitor && s.startMonitorTarget(),
          i.key && this.root.addChildrenMap(i.key, s),
          this
        );
      },
      addButtons: function (t) {
        var e = this.scene;
        void 0 === t && (t = {});
        var i = t.bindingTarget;
        delete t.bindingTarget;
        var n = yR(this.styles, 'inputRow') || {},
          s = gR(e, t, n);
        return (
          this.add(s, { expand: !0 }), i && s.setBindingTarget(i), t.key && this.root.addChildrenMap(t.key, s), this
        );
      },
      addButton: function (t) {
        return (
          void 0 === t && (t = {}),
          (t.buttons = [{ label: t.label, callback: t.callback }]),
          delete t.label,
          delete t.callback,
          this.addButtons(t),
          this
        );
      },
      addSeparator: function (t) {
        var e = this.scene,
          i = kR(this.styles, 'separator'),
          n = Z_(e, 0, i);
        return this.add(n, { expand: !0 }), this;
      },
      setBindingTarget: function (t) {
        for (var e = this.sizerChildren, i = 0, n = e.length; i < n; i++) {
          var s = e[i];
          s.setBindingTarget && s.setBindingTarget(t);
        }
        return this;
      },
      getMaxInputRowTitleWidth: function () {
        for (var t = 0, e = this.sizerChildren, i = 0, n = e.length; i < n; i++) {
          var s = e[i];
          s.rexSizer.hidden ||
            (s.getMinTitleWidth
              ? (t = Math.max(t, s.getMinTitleWidth()))
              : s.getMaxInputRowTitleWidth && (t = Math.max(t, s.getMaxInputRowTitleWidth())));
        }
        return t + this.getInnerPadding('left');
      },
      setInputRowTitleWidth: function (t) {
        t -= this.getInnerPadding('left');
        for (var e = this.sizerChildren, i = 0, n = e.length; i < n; i++) {
          var s = e[i];
          s.rexSizer.hidden ||
            (s.setMinTitleWidth ? s.setMinTitleWidth(t) : s.setInputRowTitleWidth && s.setInputRowTitleWidth(t));
        }
        return this;
      },
    },
    bR = Phaser.Utils.Objects.GetValue,
    xR = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        if (
          (r(this, i),
          void 0 === n && (n = {}),
          void 0 === n.orientation && (n.orientation = 1),
          ((s = e.call(this, t, n)).type = 'rexTweakerShell'),
          (s.root = n.root || d(s)),
          (s.styles = bR(n, 'styles') || {}),
          (s.styles.orientation = s.orientation),
          (s.itemWidth = bR(s.styles, 'itemWidth', 0)),
          s.root === d(s) && 1 === s.orientation)
        ) {
          var o = bR(n, 'inputRow.alignTitle');
          if (void 0 === o) o = !bR(s.styles, 'inputRow.proportion.title');
          else o && $(s.styles, 'inputRow.proportion.title', 0);
          s.alignInputRowTitle = o;
        } else (s.alignInputRowTitle = !1), (s.inputHandlers = s.root.inputHandlers);
        var a = Z_(t, 0, n.background);
        return a && s.addBackground(a), s;
      }
      return (
        a(i, [
          {
            key: 'preLayout',
            value: function () {
              g(u(i.prototype), 'preLayout', this).call(this),
                this.alignInputRowTitle && this.setInputRowTitleWidth(this.getMaxInputRowTitleWidth());
            },
          },
        ]),
        i
      );
    })(cx);
  Object.assign(xR.prototype, mR);
  var CR = {
      name: 'TextInput',
      accept: function (t) {
        return t.hasOwnProperty('view') ? 'string' === t.view : 'string' == typeof t.value;
      },
      build: function (t, e) {
        var i = t.scene;
        t.type = 'rexTweaker.TextInput';
        var n = e.inputText,
          s = WE(i, n);
        t.add(s, { proportion: 1, expand: !0, key: 'inputText' }),
          s.on('close', function () {
            t.setValue(s.value);
          });
      },
      setup: function (t, e, i) {
        (i || e.hasOwnProperty('inputTextReadOnly')) &&
          (function (t, e) {
            void 0 === e && (e = !0), t.getElement('inputText').setReadOnly(e);
          })(t, !!e.inputTextReadOnly);
      },
      displayValue: function (t, e) {
        t.getElement('inputText').setText(t.getFotmatText(e));
      },
    },
    wR = {
      name: 'TextAreaInput',
      accept: function (t) {
        return !!t.hasOwnProperty('view') && 'textarea' === t.view;
      },
      build: function (t, e) {
        var i = t.scene;
        this.type = 'rexTweaker.TextAreaInput';
        var n = e.inputTextArea;
        void 0 === n && (n = {}),
          n.hasOwnProperty('text') || (n.text = e.inputText),
          n.hasOwnProperty('slider') || (n.slider = e.slider);
        var s = (function (t, e, i) {
          void 0 === i && (i = !0), i ? (e = e ? _(e) : {}) : e || (e = {});
          var n = new xE(t, e);
          return t.add.existing(n), n;
        })(i, n);
        t.add(s, { proportion: 1, expand: !0, key: 'inputText' }),
          s.on('close', function () {
            t.setValue(s.value);
          });
      },
      setup: function (t, e, i) {
        (i || e.hasOwnProperty('inputTextReadOnly')) &&
          (function (t, e) {
            void 0 === e && (e = !0), t.getElement('inputText').setReadOnly(e);
          })(t, !!e.inputTextReadOnly);
      },
      displayValue: function (t, e) {
        t.getElement('inputText').setText(t.getFotmatText(e));
      },
    },
    SR = {
      name: 'NumberInput',
      accept: function (t) {
        return t.hasOwnProperty('view') ? 'number' === t.view : 'number' == typeof t.value;
      },
      build: function (t, e) {
        var i = t.scene;
        t.type = 'rexTweaker.NumberInput';
        var n = e.inputNumber || e.inputText,
          s = WE(i, n).setNumberInput();
        t.add(s, { proportion: 1, expand: !0, key: 'inputText' }),
          s.on('close', function () {
            t.setValue(s.value);
          });
      },
      setup: function (t, e, i) {
        (i || e.hasOwnProperty('inputTextReadOnly')) &&
          (function (t, e) {
            void 0 === e && (e = !0), t.getElement('inputText').setReadOnly(e);
          })(t, !!e.inputTextReadOnly);
      },
      displayValue: function (t, e) {
        t.getElement('inputText').setText(t.getFotmatText(e));
      },
    },
    PR = Phaser.Utils.Objects.GetValue,
    TR = Phaser.Math.Linear,
    OR = Phaser.Math.Snap.Floor,
    MR = {
      name: 'RangeInput',
      accept: function (t) {
        return t.hasOwnProperty('view')
          ? 'range' === t.view
          : 'number' == typeof t.value && t.hasOwnProperty('min') && t.hasOwnProperty('max');
      },
      build: function (t, e) {
        var i = t.scene;
        t.type = 'rexTweaker.RangeInput';
        var n = e.slider,
          s = 0 === t.orientation ? 'track.height' : 'track.width',
          r = PR(n, s),
          o = (function (t, e) {
            var i = new tP(t, e);
            return t.add.existing(i), i;
          })(i, n),
          a = 1 === e.parentOrientation ? 2 : 0,
          h = PR(e, 'proportion.range.slider', a),
          l = void 0 === r;
        t.add(o, { proportion: h, expand: l, key: 'slider' });
        var u = e.inputNumber || e.inputText,
          c = WE(i, u).setNumberInput();
        (a = 1 === e.parentOrientation ? 1 : 0), (h = PR(e, 'proportion.range.inputText', a));
        t.add(c, { proportion: h, expand: !0, key: 'inputText' }),
          c.on('close', function () {
            t.setValue(c.value);
          }),
          o.on('valuechange', function () {
            var e = TR(t.minValue, t.maxValue, o.value);
            t.step && (e = OR(e, t.step, t.minValue)), t.setValue(e);
          });
      },
      setup: function (t, e, i) {
        (i || e.hasOwnProperty('max')) &&
          (function (t, e, i, n) {
            (t.minValue = e), (t.maxValue = i), (t.step = n), t.getElement('slider').setGap(n, e, i);
          })(t, e.min, e.max, e.step),
          (i || e.hasOwnProperty('inputTextReadOnly')) &&
            (function (t, e) {
              void 0 === e && (e = !0), t.getElement('inputText').setReadOnly(e);
            })(t, !!e.inputTextReadOnly);
      },
      displayValue: function (t, e) {
        t.getElement('slider').setValue(e, t.minValue, t.maxValue),
          t.getElement('inputText').setText('').setText(t.getFotmatText(e));
      },
    },
    ER = {
      name: 'ColorInput',
      accept: function (t) {
        return !!t.hasOwnProperty('view') && 'color' === t.view;
      },
      build: function (t, e) {
        var i = t.scene;
        t.type = 'rexTweaker.ColorInput';
        var n = e.colorInput;
        void 0 === n && (n = {}), n.hasOwnProperty('inputText') || (n.inputText = e.inputText);
        var s = (function (t, e, i) {
          void 0 === i && (i = !0), i ? (e = e ? _(e) : {}) : e || (e = {});
          var n = new I_(t, e);
          return t.add.existing(n), n;
        })(i, n);
        t.add(s, { proportion: 1, expand: !0, key: 'colorInput' }),
          s.on('valuechange', function (e) {
            t.setValue(e);
          });
      },
      displayValue: function (t, e) {
        t.getElement('colorInput').setValue(e);
      },
    },
    _R = {
      name: 'CheckboxInput',
      accept: function (t) {
        return t.hasOwnProperty('view') ? 'boolean' === t.view : 'boolean' == typeof t.value;
      },
      build: function (t, e) {
        var i = t.scene;
        t.type = 'rexTweaker.CheckboxInput';
        var n = e.checkbox,
          s = (function (t, e) {
            var i = new mc(t, e);
            return t.add.existing(i), i;
          })(i, n),
          r = n.size;
        void 0 !== r && s.setSize(r, r);
        var o = void 0 !== r ? 0 : 1;
        t.add(s, { proportion: 0, expand: !1, fitRatio: o, key: 'checkbox' }),
          s.on('valuechange', function (e) {
            t.setValue(e);
          });
      },
      displayValue: function (t, e) {
        t.getElement('checkbox').setValue(e);
      },
    },
    RR = {
      name: 'ToggleSwitchInput',
      accept: function (t) {
        return !!t.hasOwnProperty('view') && 'toggleSwitch' === t.view;
      },
      build: function (t, e) {
        var i = t.scene;
        t.type = 'rexTweaker.ToggleSwitchInput';
        var n = e.toggleSwitch,
          s = (function (t, e) {
            var i = new Bc(t, e);
            return t.add.existing(i), i;
          })(i, n),
          r = n.size;
        void 0 !== r && s.setSize(r, r);
        var o = void 0 !== r ? 0 : 1;
        t.addSpace().add(s, { proportion: 0, expand: !1, fitRatio: o, key: 'toggleSwitch' }),
          s.on('valuechange', function (e) {
            t.setValue(e);
          });
      },
      displayValue: function (t, e) {
        t.getElement('toggleSwitch').setValue(e);
      },
    },
    LR = function (t, e) {
      for (var i = 0, n = t.length; i < n; i++) {
        if (t[i].value === e) return i;
      }
    },
    BR = {
      name: 'ListInput',
      accept: function (t) {
        return t.hasOwnProperty('view') ? 'list' === t.view : t.hasOwnProperty('options');
      },
      build: function (t, e) {
        var i = t.scene;
        t.type = 'rexTweaker.ListInput';
        var n = (function (t, e) {
          e = LO(t, e);
          var i = new RO(t, e);
          return t.add.existing(i), i;
        })(i, e.list);
        t.add(n, { proportion: 1, expand: !0, key: 'list' }),
          n.on('button.click', function (e, i, n, s, r, o) {
            t.setValue(n.value);
          });
      },
      setup: function (t, e, i) {
        (i || e.hasOwnProperty('options')) &&
          (function (t, e) {
            t.getElement('list').setOptions(e);
          })(t, e.options);
      },
      displayValue: function (t, e) {
        var i = t.getElement('list'),
          n = (function (t, e) {
            var i = LR(t, e);
            if (null != i) return t[i];
          })(i.options, e);
        i.resetDisplayContent(n).setMinSize(i.width, i.height).layout().setMinSize(0, 0);
      },
    },
    DR = Phaser.Utils.Objects.GetValue,
    IR = {
      name: 'ButtonsInput',
      accept: function (t) {
        return !!t.hasOwnProperty('view') && 'buttons' === t.view;
      },
      build: function (t, e) {
        var i = t.scene;
        t.type = 'rexTweaker.ButtonsInput';
        var n = e.button ? _(e.button) : {},
          s = DR(n, 'expand', !0);
        s && (n.align = 'center'), delete n.expand;
        var r = (function (t, e) {
          var i = new Vw(t, e);
          return t.add.existing(i), i;
        })(i, { expand: s });
        (r.buttonConfig = n),
          t.add(r, { proportion: 1, expand: !0, key: 'list' }),
          r.on('button.click', function (e, i, n, s) {
            var o = r.options[i];
            o && ((t._selectedIndex = i), t.setValue(o.value), (t._selectedIndex = void 0));
          });
      },
      setup: function (t, e, i) {
        (i || e.hasOwnProperty('options')) &&
          (function (t, e) {
            var i = t.getElement('list');
            i.options = e;
            var n = t.scene,
              s = i.buttonConfig;
            i.clearButtons(!0);
            for (var r = 0, o = e.length; r < o; r++) {
              var a = e[r],
                h = pS(n, s).setActiveState(!1).resetDisplayContent({ text: a.text });
              i.addButton(h);
            }
          })(t, e.options);
      },
      displayValue: function (t, e) {
        var i = t.getElement('list'),
          n = t._selectedIndex;
        void 0 === n && (n = LR(i.options, e)),
          (function (t, e) {
            for (var i = 0, n = t.length; i < n; i++) {
              var s = t[i];
              s && s.setActiveState(i === e);
            }
          })(i.getElement('buttons'), n);
      },
    },
    jR = function () {
      this.registerInputHandler(CR)
        .registerInputHandler(wR)
        .registerInputHandler(SR)
        .registerInputHandler(MR)
        .registerInputHandler(ER)
        .registerInputHandler(_R)
        .registerInputHandler(RR)
        .registerInputHandler(BR)
        .registerInputHandler(IR);
    },
    AR = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          void 0 === n && (n = {}),
          void 0 === n.styles && (n.styles = {}),
          (n.background = n.styles.background || {}),
          (n.space = n.styles.space || {}),
          ((s = e.call(this, t, n)).type = 'rexTweaker'),
          (s.inputHandlers = []),
          jR.call(d(s)),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              this.scene &&
                !this.ignoreDestroy &&
                (g(u(i.prototype), 'destroy', this).call(this, t), (this.inputHandlers = void 0));
            },
          },
        ]),
        i
      );
    })(xR);
  M.register('tweaker', function (t) {
    var e = new AR(this.scene, t);
    return this.scene.add.existing(e), e;
  }),
    $(window, 'RexPlugins.UI.Tweaker', AR),
    M.register('click', function (t, e) {
      return new gc(t, e);
    }),
    $(window, 'RexPlugins.UI.Click', gc),
    M.register('clickOutside', function (t, e) {
      return new Gg(t, e);
    }),
    $(window, 'RexPlugins.UI.ClickOutside', Gg),
    M.register('inTouching', function (t, e) {
      return new Jg(t, e);
    }),
    $(window, 'RexPlugins.UI.InTouching', Jg),
    M.register('tap', function (t, e) {
      return Ff(t) || ((e = t), (t = this.scene)), new ky(t, e);
    }),
    $(window, 'RexPlugins.UI.Tap', ky),
    M.register('press', function (t, e) {
      return Ff(t) || ((e = t), (t = this.scene)), new wy(t, e);
    }),
    $(window, 'RexPlugins.UI.Press', wy),
    M.register('swipe', function (t, e) {
      return Ff(t) || ((e = t), (t = this.scene)), new Fy(t, e);
    }),
    $(window, 'RexPlugins.UI.Swipe', Fy),
    M.register('pan', function (t, e) {
      return Ff(t) || ((e = t), (t = this.scene)), new My(t, e);
    }),
    $(window, 'RexPlugins.UI.Pan', My);
  var zR = function (t) {
      for (var e, i = t.scene.input, n = i.manager, s = n.pointersTotal, r = n.pointers, o = 0; o < s; o++)
        if ((e = r[o]).primaryDown && 0 === i.getDragState(e) && ml(t, e))
          return (
            i.setDragState(e, 1),
            (i._drag[e.id] = [t]),
            0 === i.dragDistanceThreshold || 0 === i.dragTimeThreshold
              ? (i.setDragState(e, 3), i.processDragStartList(e))
              : i.setDragState(e, 2),
            !0
          );
      return !1;
    },
    FR = Phaser.Utils.Objects.GetValue,
    VR = Phaser.Math.Distance.Between,
    WR = Phaser.Math.RotateAroundDistance,
    YR = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t, { eventEmitter: !1 }))._enable = void 0),
          t.setInteractive(FR(n, 'inputConfig', void 0)),
          s.resetFromJSON(n),
          s.boot(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                (this.pointer = void 0),
                this.setEnable(FR(t, 'enable', !0)),
                this.setAxisMode(FR(t, 'axis', 0)),
                this.setAxisRotation(FR(t, 'rotation', 0)),
                this
              );
            },
          },
          {
            key: 'toJSON',
            value: function () {
              return { enable: this.enable, axis: this.axisMode, rotation: this.axisRotation };
            },
          },
          {
            key: 'boot',
            value: function () {
              var t = this.parent;
              t.on('dragstart', this.onDragStart, this),
                t.on('drag', this.onDrag, this),
                t.on('dragend', this.onDragEnd, this);
            },
          },
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown || ((this.pointer = void 0), g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'enable',
            get: function () {
              return this._enable;
            },
            set: function (t) {
              if (this._enable !== t)
                return t || this.dragend(), (this._enable = t), this.scene.input.setDraggable(this.parent, t), this;
            },
          },
          {
            key: 'setEnable',
            value: function (t) {
              return void 0 === t && (t = !0), (this.enable = t), this;
            },
          },
          {
            key: 'toggleEnable',
            value: function () {
              return this.setEnable(!this.enable), this;
            },
          },
          {
            key: 'setAxisMode',
            value: function (t) {
              return 'string' == typeof t && (t = XR[t]), (this.axisMode = t), this;
            },
          },
          {
            key: 'setAxisRotation',
            value: function (t) {
              return (this.axisRotation = t), this;
            },
          },
          {
            key: 'drag',
            value: function () {
              return zR(this.parent), this;
            },
          },
          {
            key: 'dragend',
            value: function () {
              if (this.isDragging) return this.scene.input.setDragState(this.pointer, 5), this;
            },
          },
          {
            key: 'onDragStart',
            value: function (t, e, i) {
              this.isDragging || (this.pointer = t);
            },
          },
          {
            key: 'onDrag',
            value: function (t, e, i) {
              if (this.pointer === t) {
                var n = this.parent;
                if (0 === this.axisMode) (n.x = e), (n.y = i);
                else if (0 === this.axisRotation) 1 === this.axisMode ? (n.x = e) : 2 === this.axisMode && (n.y = i);
                else {
                  var s,
                    r = { x: e, y: i };
                  (s = VR(r.x, r.y, n.x, n.y)),
                    (r = WR(r, n.x, n.y, -this.axisRotation, s)),
                    1 === this.axisMode ? (r.y = n.y) : 2 === this.axisMode && (r.x = n.x),
                    (s = VR(r.x, r.y, n.x, n.y)),
                    (r = WR(r, n.x, n.y, this.axisRotation, s)),
                    (n.x = r.x),
                    (n.y = r.y);
                }
              }
            },
          },
          {
            key: 'onDragEnd',
            value: function (t, e, i, n) {
              this.pointer === t && (this.pointer = void 0);
            },
          },
          {
            key: 'isDragging',
            get: function () {
              return void 0 !== this.pointer;
            },
          },
        ]),
        i
      );
    })(uo),
    XR = { both: 0, 'h&v': 0, 'x&y': 0, horizontal: 1, h: 1, x: 1, vertical: 2, v: 2, y: 2 };
  M.register('drag', function (t, e) {
    return new YR(t, e);
  }),
    $(window, 'RexPlugins.UI.Drag', YR),
    M.register('pinch', function (t) {
      return new tk(this.scene, t);
    }),
    $(window, 'RexPlugins.UI.Pinch', tk),
    M.register('rotate', function (t) {
      return new dk(this.scene, t);
    }),
    $(window, 'RexPlugins.UI.Rotate', dk);
  var GR = Phaser.Utils.Objects.IsPlainObject,
    HR = Phaser.Utils.Objects.GetValue,
    UR = function (t, e, i) {
      var n;
      if (void 0 === t) (t = i.texture.key), (e = i.frame.name);
      else if (GR(t)) {
        var s = t;
        (t = HR(s, 'key', i.texture.key)), (e = HR(s, 'frame', i.frame.name));
      } else 'string' == typeof t || (n = t);
      return (
        void 0 === n &&
          (n = function (i) {
            i.setTexture(t, e);
          }),
        n
      );
    },
    NR = Phaser.Utils.Objects.GetValue,
    KR = Phaser.Utils.Objects.GetAdvancedValue,
    JR = Phaser.Math.Linear,
    qR = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), (s = e.call(this, t, n)).resetFromJSON(n), s.boot(), s;
      }
      return (
        a(i, [
          {
            key: 'resetFromJSON',
            value: function (t) {
              return (
                g(u(i.prototype), 'resetFromJSON', this).call(this, t),
                this.setDuration(KR(t, 'duration', 500)),
                this.setEase(NR(t, 'ease', 'Sine')),
                this.setOrientation(NR(t, 'orientation', 0)),
                this.setFrontFace(NR(t, 'front', void 0)),
                this.setBackFace(NR(t, 'back', void 0)),
                this.setFace(NR(t, 'face', 0)),
                this
              );
            },
          },
          {
            key: 'setOrientation',
            value: function (t) {
              return 'string' == typeof t && (t = ZR[t]), (this.orientation = t), this;
            },
          },
          {
            key: 'face',
            get: function () {
              return this._face;
            },
            set: function (t) {
              'string' == typeof t && (t = $R[t]),
                (this._face = t),
                0 === t && this.frontFaceCallback
                  ? this.frontFaceCallback(this.parent)
                  : 1 === t && this.backFaceCallback && this.backFaceCallback(this.parent);
            },
          },
          {
            key: 'setFace',
            value: function (t) {
              return (this.face = t), this;
            },
          },
          {
            key: 'toggleFace',
            value: function () {
              var t = 0 === this.face ? 1 : 0;
              return this.setFace(t), this;
            },
          },
          {
            key: 'setFrontFace',
            value: function (t, e) {
              return (this.frontFaceCallback = UR(t, e, this.parent)), this;
            },
          },
          {
            key: 'setBackFace',
            value: function (t, e) {
              return (this.backFaceCallback = UR(t, e, this.parent)), this;
            },
          },
          {
            key: 'start',
            value: function () {
              if (this.timer.isRunning) return this;
              var t = this.parent;
              return (
                0 === this.orientation ? (this.scale0 = t.scaleX) : (this.scale0 = t.scaleY),
                this.timer
                  .setDelay(this.delay)
                  .setDuration(this.duration / 2)
                  .setRepeat(1),
                g(u(i.prototype), 'start', this).call(this),
                this
              );
            },
          },
          {
            key: 'flip',
            value: function (t) {
              return this.isRunning || (void 0 !== t && this.setDuration(t), this.start()), this;
            },
          },
          {
            key: 'updateGameObject',
            value: function (t, e) {
              e.justRestart && this.toggleFace();
              var i = e.t;
              e.isOddIteration && (i = 1 - i), (i = this.easeFn(i));
              var n = JR(this.scale0, 0, i);
              0 === this.orientation ? (t.scaleX = n) : (t.scaleY = n);
            },
          },
        ]),
        i
      );
    })(_o),
    ZR = { x: 0, horizontal: 0, y: 1, vertical: 1 },
    $R = { front: 0, back: 1 };
  M.register('flip', function (t, e) {
    return new qR(t, e);
  }),
    $(window, 'RexPlugins.UI.Flip', qR),
    M.register('shake', function (t, e) {
      return new Dv(t, e);
    }),
    $(window, 'RexPlugins.UI.Shake', Dv),
    M.register('touchEventStop', function (t, e) {
      return new fg(t, e);
    }),
    $(window, 'RexPlugins.UI.TouchEventStop', fg),
    M.register('perspective', function (t, e) {
      return new qM(t, e);
    }),
    $(window, 'RexPlugins.UI.Perspective', qM);
  var QR = Phaser.Math.RotateAround,
    tL = function (t, e, i) {
      var n = t.width / 2,
        s = t.height / 2;
      return (
        (eL.x = e - n),
        (eL.y = i - s),
        QR(eL, 0, 0, t.rotation),
        (eL.x *= t.scaleX),
        (eL.y *= t.scaleY),
        (eL.x += t.x),
        (eL.y += t.y),
        eL
      );
    },
    eL = { x: 0, y: 0 },
    iL = (function () {
      function t(e, i) {
        r(this, t), (this.parent = e), (this.vertex = i), (this._localX = void 0), (this._localY = void 0);
      }
      return (
        a(t, [
          {
            key: 'destroy',
            value: function () {
              (this.parent = void 0), (this.vertex = void 0);
            },
          },
          {
            key: 'updateVertexPosition',
            value: function (t, e) {
              var i = this.parent,
                n = i.height,
                s = t / n - i.frame.cutWidth / n / 2,
                r = e / n - i.frame.cutHeight / n / 2,
                o = this.vertex;
              return (o.x = s), (o.y = -r), i.forceUpdate(), this;
            },
          },
          {
            key: 'localX',
            get: function () {
              return this._localX;
            },
            set: function (t) {
              this.setLocalXY(t, this._localY);
            },
          },
          {
            key: 'localY',
            get: function () {
              return this._localY;
            },
            set: function (t) {
              this.setLocalXY(this._localX, t);
            },
          },
          {
            key: 'localXOrigin',
            get: function () {
              return this._localXOrigin;
            },
          },
          {
            key: 'localYOrigin',
            get: function () {
              return this._localYOrigin;
            },
          },
          {
            key: 'resetLocalXY',
            value: function (t, e) {
              return (this._localXOrigin = t), (this._localYOrigin = e), (this._localX = t), (this._localY = e), this;
            },
          },
          {
            key: 'setLocalXY',
            value: function (t, e, i) {
              return (
                (this._localX === t && this._localY === e) ||
                  ((this._localX = t), (this._localY = e), i || this.updateVertexPosition(t, e)),
                this
              );
            },
          },
          {
            key: 'setWorldXY',
            value: function (t, e) {
              if (this._worldX === t && this._worldY === e) return this;
              var i = (function (t, e, i) {
                var n = t.width / 2,
                  s = t.height / 2;
                return (
                  (eL.x = e - t.x),
                  (eL.y = i - t.y),
                  (eL.x /= t.scaleX),
                  (eL.y /= t.scaleY),
                  QR(eL, 0, 0, -t.rotation),
                  (eL.x += n),
                  (eL.y += s),
                  eL
                );
              })(this.parent, t, e);
              return this.setLocalXY(i.x, i.y), this;
            },
          },
          {
            key: 'setPosition',
            value: function (t, e) {
              return this.setWorldXY(t, e), this;
            },
          },
          {
            key: 'getWorldXY',
            value: function () {
              return tL(this.parent, this._localX, this._localY);
            },
          },
          {
            key: 'x',
            get: function () {
              return tL(this.parent, this._localX, this._localY).x;
            },
            set: function (t) {
              this.setWorldXY(t, this.y);
            },
          },
          {
            key: 'y',
            get: function () {
              return tL(this.parent, this._localX, this._localY).y;
            },
            set: function (t) {
              this.setWorldXY(this.x, t);
            },
          },
        ]),
        t
      );
    })(),
    nL = Phaser.Geom.Mesh.Vertex,
    sL = Phaser.Geom.Mesh.Face,
    rL = [0, 2, 3, 0, 3, 1],
    oL = [1, 3, 2, 1, 2, 0],
    aL = [0, 3, 4, 0, 4, 1, 1, 4, 2, 4, 5, 2, 3, 6, 4, 6, 7, 4, 4, 7, 8, 4, 8, 5],
    hL = Phaser.Utils.Objects.IsPlainObject,
    lL = Phaser.Utils.Objects.GetValue,
    uL = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a, h) {
        var l;
        return (
          r(this, i),
          hL(n) &&
            ((n = lL((h = n), 'x', 0)), (s = lL(h, 'y', 0)), (o = lL(h, 'key', null)), (a = lL(h, 'frame', null))),
          ((l = e.call(this, t, n, s, o, a)).type = 'rexQuadImage'),
          (l.isNinePointMode = lL(h, 'ninePointMode', !1)),
          (l.fourPointsModeRTL = lL(h, 'rtl', !1)),
          (l.controlPoints = []),
          (function (t) {
            for (
              var e, i = t.isNinePointMode, n = i ? 9 : 4, s = t.vertices, r = t.faces, o = t.controlPoints, a = 0;
              a < n;
              a++
            ) {
              var h = new nL();
              s.push(h), o.push(new iL(t, h));
            }
            a = 0;
            for (var l = (e = i ? aL : t.fourPointsModeRTL ? oL : rL).length; a < l; a += 3) {
              var u = s[e[a + 0]],
                c = s[e[a + 1]],
                d = s[e[a + 2]];
              r.push(new sL(u, c, d));
            }
            i
              ? ((t.topLeft = o[0]),
                (t.topCenter = o[1]),
                (t.topRight = o[2]),
                (t.centerLeft = o[3]),
                (t.center = o[4]),
                (t.centerRight = o[5]),
                (t.bottomLeft = o[6]),
                (t.bottomCenter = o[7]),
                (t.bottomRight = o[8]))
              : ((t.topLeft = o[0]), (t.topRight = o[1]), (t.bottomLeft = o[2]), (t.bottomRight = o[3]));
          })(d(l)),
          (l.hideCCW = !1),
          l.syncSize(),
          l
        );
      }
      return (
        a(i, [
          {
            key: 'destroy',
            value: function (t) {
              if (this.scene && !this.ignoreDestroy) {
                g(u(i.prototype), 'destroy', this).call(this, t);
                for (var e = 0, n = this.controlPoints.length; e < n; e++) this.controlPoints[e].destroy();
                this.controlPoints = void 0;
              }
            },
          },
          {
            key: 'resetVerts',
            value: function () {
              this.dirtyCache[9] = -1;
              for (
                var t = (function (t) {
                    var e,
                      i = t.height,
                      n = t.width;
                    if (t.isNinePointMode) {
                      var s = (0 + n) / 2,
                        r = (0 + i) / 2;
                      e = [0, 0, s, 0, n, 0, 0, r, s, r, n, r, 0, i, s, i, n, i];
                    } else e = [0, 0, n, 0, 0, i, n, i];
                    return e;
                  })(this),
                  e = this.width,
                  i = this.height,
                  n = this.frame.cutWidth / i / 2,
                  s = this.frame.cutHeight / i / 2,
                  r = this.frame.u0,
                  o = this.frame.u1,
                  a = this.frame.v0,
                  h = o - r,
                  l = this.frame.v1 - a,
                  u = this.controlPoints,
                  c = 0,
                  d = t.length;
                c < d;
                c += 2
              ) {
                var f = t[c + 0],
                  p = t[c + 1],
                  v = c / 2,
                  g = f / i - n,
                  y = p / i - s,
                  k = r + h * (f / e),
                  m = a + l * (p / i);
                this.vertices[v].set(g, -y, 0).setUVs(k, m), u[v].resetLocalXY(f, p);
              }
              return this;
            },
          },
          {
            key: 'syncSize',
            value: function () {
              return this.setSizeToFrame(), this.setOrtho(this.width / this.height, 1), this.resetVerts(), this;
            },
          },
        ]),
        i
      );
    })(uM);
  Phaser.Utils.Objects.IsPlainObject, Phaser.Utils.Objects.GetValue;
  var cL = function (t, e, i) {
      void 0 === e && (e = 0), void 0 === i && (i = 0);
      for (
        var n = 0.5 * t.width,
          s = 0.5 * t.height,
          r = Math.tan(e) * s,
          o = Math.tan(i) * n,
          a = t.controlPoints,
          h = 0,
          l = a.length;
        h < l;
        h++
      ) {
        var u = a[h],
          c = u.localXOrigin,
          d = u.localYOrigin;
        (u.localX = c + (d > s ? r : -r)), (u.localY = d + (c > n ? o : -o));
      }
    },
    dL = Phaser.Utils.Objects.IsPlainObject,
    fL = Phaser.Utils.Objects.GetValue,
    pL = Phaser.Math.DegToRad,
    vL = Phaser.Math.RadToDeg,
    gL = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n, s, o, a) {
        var h;
        if ((r(this, i), dL(n))) {
          var l = n;
          (n = fL(l, 'x', 0)), (s = fL(l, 'y', 0)), (o = fL(l, 'key', null)), (a = fL(l, 'frame', null));
        }
        return ((h = e.call(this, t, n, s, o, a)).type = 'rexSkewmage'), (h._skewX = 0), (h._skewY = 0), h;
      }
      return (
        a(i, [
          {
            key: 'skewX',
            get: function () {
              return this._skewX;
            },
            set: function (t) {
              (this._skewX = t), cL(this, this._skewX, this._skewY);
            },
          },
          {
            key: 'skewXDeg',
            get: function () {
              return vL(this._skewX);
            },
            set: function (t) {
              this.skewX = pL(t);
            },
          },
          {
            key: 'skewY',
            get: function () {
              return this._skewY;
            },
            set: function (t) {
              (this._skewY = t), cL(this, this._skewX, this._skewY);
            },
          },
          {
            key: 'skewYDeg',
            get: function () {
              return vL(this._skewY);
            },
            set: function (t) {
              this.skewY = pL(t);
            },
          },
          {
            key: 'setSkewX',
            value: function (t) {
              return (this.skewX = t), this;
            },
          },
          {
            key: 'setSkewY',
            value: function (t) {
              return (this.skewY = t), this;
            },
          },
          {
            key: 'setSkew',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.skewX = t), (this.skewY = e), this;
            },
          },
          {
            key: 'setSkewXDeg',
            value: function (t) {
              return (this.skewXDeg = t), this;
            },
          },
          {
            key: 'setSkewYDeg',
            value: function (t) {
              return (this.skewYDeg = t), this;
            },
          },
          {
            key: 'setSkewDeg',
            value: function (t, e) {
              return void 0 === e && (e = t), (this.skewXDeg = t), (this.skewYDeg = e), this;
            },
          },
        ]),
        i
      );
    })(uL),
    yL = Phaser.Utils.Objects.IsPlainObject,
    kL = Phaser.Utils.Objects.GetValue,
    mL = (function (t) {
      l(i, t);
      var e = p(i);
      function i() {
        return r(this, i), e.apply(this, arguments);
      }
      return (
        a(i, [
          {
            key: 'skewState',
            get: function () {
              return this.isRunning;
            },
          },
        ]),
        i
      );
    })(
      JM(
        (function (t) {
          l(i, t);
          var e = p(i);
          function i(t, n, s, o, a) {
            var h;
            if ((r(this, i), yL(n))) {
              var l = n;
              (n = kL(l, 'x', 0)), (s = kL(l, 'y', 0)), (o = kL(l, 'width', 32)), (a = kL(l, 'height', 32));
            }
            var u = SM(t, o, a);
            return ((h = e.call(this, t, n, s, u, null)).type = 'rexSkewRenderTexture'), (h.rt = h.texture), h;
          }
          return (
            a(i, [
              {
                key: 'destroy',
                value: function (t) {
                  this.scene &&
                    !this.ignoreDestroy &&
                    (g(u(i.prototype), 'destroy', this).call(this, t), this.rt.destroy(), (this.rt = null));
                },
              },
            ]),
            i
          );
        })(gL)
      )
    );
  M.register('skew', function (t, e) {
    return new mL(t, e);
  }),
    $(window, 'RexPlugins.UI.Skew', mL),
    M.register('anchor', function (t, e) {
      return new Qp(t, e);
    }),
    $(window, 'RexPlugins.UI.Anchor', Qp),
    M.register('textTyping', function (t, e) {
      return new UO(t, e);
    }),
    $(window, 'RexPlugins.UI.TextTyping', UO),
    M.register('textPage', function (t, e) {
      return new YO(t, e);
    }),
    $(window, 'RexPlugins.UI.TextPage', YO);
  var bL = void 0,
    xL = Phaser.Utils.Objects.GetValue,
    CL = Phaser.Utils.Objects.Clone,
    wL = function (t) {
      return t.hasOwnProperty('align') ? t.align : t.hasOwnProperty('halign') ? t.halign : 'left';
    },
    SL = Phaser.Utils.Objects.GetValue,
    PL = Phaser.Utils.Objects.Merge,
    TL = {
      open: function (t, e) {
        var i;
        void 0 === t && (t = {}),
          (t = PL(t, this.openConfig)),
          (i = this) !== bL && (void 0 !== bL && bL.close(), (bL = i)),
          Eg(t) && ((e = t), (t = void 0));
        var n = SL(t, 'inputType', void 0);
        void 0 === n && (n = SL(t, 'type', 'text')), void 0 === e && (e = SL(t, 'onClose', void 0));
        var s = SL(t, 'onOpen', void 0),
          r = SL(t, 'onTextChanged', void 0);
        return (
          (this.inputText = (function (t, e) {
            void 0 === e && (e = {}), (e = CL(e));
            var i = t.scene,
              n = t.style,
              s = xL(e, 'backgroundColor', n.backgroundColor);
            null === s && (s = 'transparent'),
              (e.text = xL(e, 'text', t.text)),
              (e.fontFamily = xL(e, 'fontFamily', n.fontFamily)),
              (e.fontSize = xL(e, 'fontSize', n.fontSize)),
              (e.color = xL(e, 'color', n.color)),
              (e.backgroundColor = s),
              (e.direction = xL(e, 'rtl', n.rtl) ? 'rtl' : 'ltr'),
              (e.align = xL(e, 'align', wL(n))),
              'rtl' === e.direction && YC(t) && (e.align = 'right');
            var r = new Sb(i, t.x, t.y, xL(e, 'width', t.width), xL(e, 'height', t.height), e);
            r.setOrigin(t.originX, t.originY).setScrollFactor(t.scrollFactorX, t.scrollFactorY);
            var o = t.parentContainer;
            return o ? o.add(r) : i.add.existing(r), r;
          })(this.parent, t)
            .on(
              'textchange',
              function (t) {
                var e = t.text;
                r ? r(this.parent, e) : (this.parent.text = e);
              },
              this
            )
            .setFocus()),
          this.parent.setVisible(!1),
          (this.onClose = e),
          SL(t, 'enterClose', 'textarea' !== n) && this.scene.input.keyboard.once('keydown-ENTER', this.close, this),
          (this.delayCall = (function (t, e, i) {
            return t.time.delayedCall(0, e, [], i);
          })(
            this.scene,
            function () {
              this.scene.input.once('pointerdown', this.close, this),
                s && s(this.parent),
                this.emit('open', this.parent);
            },
            this
          )),
          this
        );
      },
      close: function () {
        return (
          this === bL && (bL = void 0),
          this.parent.setVisible(!0),
          this.inputText && (this.inputText.destroy(), (this.inputText = void 0)),
          this.delayCall && (this.delayCall.remove(), (this.delayCall = void 0)),
          this.scene.input.keyboard.off('keydown-ENTER', this.close, this),
          this.scene.input.off('pointerdown', this.close, this),
          this.onClose && this.onClose(this.parent),
          this.emit('close', this.parent),
          this
        );
      },
    },
    OL = Phaser.Utils.Objects.GetValue,
    ML = (function (t) {
      l(i, t);
      var e = p(i);
      function i(t, n) {
        var s;
        return (
          r(this, i),
          ((s = e.call(this, t)).inputText = void 0),
          (s.onClose = void 0),
          (s.delayCall = void 0),
          s.setOpenConfig(n),
          OL(n, 'clickEnable', !0) &&
            t
              .on(
                'pointerdown',
                function () {
                  this.open();
                },
                d(s)
              )
              .setInteractive(),
          s
        );
      }
      return (
        a(i, [
          {
            key: 'shutdown',
            value: function (t) {
              this.isShutdown || (this.close(), g(u(i.prototype), 'shutdown', this).call(this, t));
            },
          },
          {
            key: 'setOpenConfig',
            value: function (t) {
              return void 0 === t && (t = {}), (this.openConfig = t), this;
            },
          },
          {
            key: 'isOpened',
            get: function () {
              return void 0 !== this.inputText;
            },
          },
          {
            key: 'text',
            get: function () {
              return this.isOpened ? this.inputText.text : this.parent.text;
            },
          },
        ]),
        i
      );
    })(uo);
  Object.assign(ML.prototype, TL);
  M.register('textEdit', function (t, e) {
    return new ML(t, e);
  }),
    $(window, 'RexPlugins.UI.TextEdit', ML);
  var EL = 65535,
    _L = function (t, e, i) {
      if (null == e) return t;
      if (0 === e) return BL(t, 0, i), t;
      var n = t.text.length;
      if (0 === n) return BL(t, e, i), t;
      var s = Math.floor((1.5 * e) / n);
      void 0 !== i && s > i && (s = Math.floor(i));
      for (var r = {}, o = LL(t, s, e, i, r), a = 0; a <= EL && 0 !== o; a++) {
        if ((s += o) < 0) {
          s = 0;
          break;
        }
        o = LL(t, s, e, i, r);
      }
      return a === EL && console.warn('FontSizeFit: Test count exceeds '.concat(EL)), t.setFontSize(s), BL(t, e, i), t;
    },
    RL = function (t, e, i) {
      return void 0 === i[e] && (t.setFontSize(e), (i[e] = { width: t.width, height: t.height })), i[e];
    },
    LL = function (t, e, i, n, s) {
      var r,
        o = RL(t, e, s),
        a = RL(t, e + 1, s);
      if (void 0 !== n)
        if (o.height <= n && a.height > n) r = 0;
        else {
          if (o.height > n) return -1;
          r = Math.floor(n - o.height);
        }
      if (o.width <= i && a.width > i) return 0;
      if (o.width > i) return -1;
      var h = Math.floor(i - o.width);
      return void 0 === r ? h : Math.min(h, r);
    },
    BL = function (t, e, i) {
      var n = t.style;
      n &&
        ((n.fixedWidth = e),
        (n.parent.width = e),
        void 0 !== i && ((n.fixedHeight = i), (n.parent.height = i)),
        n.update(!1));
    },
    DL = Phaser.Utils.Objects.GetValue,
    IL = (function (t) {
      l(i, Phaser.Plugins.ScenePlugin);
      var e = p(i);
      function i(t, n) {
        var s;
        return r(this, i), ((s = e.call(this, t, n)).add = new M(t)), s;
      }
      return (
        a(i, [
          {
            key: 'start',
            value: function () {
              this.scene.events.on('destroy', this.destroy, this);
            },
          },
          {
            key: 'isInTouching',
            value: function (t, e, i, n) {
              return !!t.visible && Rg(t, e, i, n);
            },
          },
          {
            key: 'viewport',
            get: function () {
              return to(this.scene, this.scene.cameras.main, !0);
            },
          },
        ]),
        i
      );
    })(),
    jL = {
      getParentSizer: Hd,
      getTopmostSizer: Ud,
      hide: Gv,
      show: Xv,
      isShown: Hv,
      edit: function (t, e, i) {
        return t._edit || (t._edit = new ML(t, { clickEnable: !1 })), t._edit.open(e, i), t._edit;
      },
      wrapExpandText: XC,
      fontSizeExpandText: function (t, e) {
        'number' == typeof e && (e = { minWidth: e });
        var i = DL(e, 'minWidth', 0),
          n = DL(e, 'minHeight', 0),
          s = DL(e, 'fitHeight', !1);
        return (
          (t._minWidth = i),
          (t._minHeight = n),
          s
            ? ((t.runWidthWrap = function (e) {
                return t.setFixedSize && t.setFixedSize(0, 0), t.setFontSize(1), t;
              }),
              (t.resize = function (e, i) {
                return _L(t, e, i), t;
              }))
            : ((t.runWidthWrap = function (e) {
                return t.setFixedSize && t.setFixedSize(0, 0), _L(t, e, void 0), t;
              }),
              (t.resize = function (e, i) {
                return (t.width === e && t.height === i) || t.setFixedSize(e, i), t;
              })),
          t
        );
      },
      fontSizeResize: _L,
      setFontSizeToFitWidth: _L,
      waitEvent: Mh,
      waitComplete: Eh,
      delayPromise: Ob,
      setChildrenInteractive: Sk,
      fadeIn: gv,
      fadeOutDestroy: yv,
      easeMoveTo: Ov,
      easeMoveFrom: Mv,
      modal: Og,
      modalPromise: function (t, e) {
        var i = Og(t, e);
        return new Promise(function (t, e) {
          i.once('close', function (e) {
            t(e);
          });
        });
      },
      modalClose: Mg,
      requestDrag: zR,
      openFileChooser: Rb,
    };
  return Object.assign(IL.prototype, jL), IL;
});
